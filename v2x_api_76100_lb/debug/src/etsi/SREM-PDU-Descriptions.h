/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).
 */
#ifndef SREM_PDU_DESCRIPTIONS_H
#define SREM_PDU_DESCRIPTIONS_H

#include <stdio.h>
#include <stdlib.h>
#include "rtpersrc/asn1PerCppTypes.h"
#include "rtsrc/asn1CppTypes.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtsrc/asn1type.h"
#include "rtxmlsrc/asn1xml.h"
#include "rtxmlsrc/rtXmlCppMsgBuf.h"
#include "rtsrc/asn1type.h"
#include "rtjsonsrc/asn1json.h"
#include "rtjsonsrc/rtJsonCppMsgBuf.h"

#include "etsi_dsrc.h"
#include "ITS-Container.h"

/**
 * Header file for ASN.1 module SREM-PDU-Descriptions
 */
/**************************************************************/
/*                                                            */
/*  SREM                                                      */
/*                                                            */
/**************************************************************/
/*
 Signal request extended Message Message
 @brief Signal request extended Message Root
 This DF includes DEs for the SREM: protocolVersion, the SREM message type identifier _messageID_,
 the station identifier _stationID_ of the originating ITS-S and the signal request data ISO TS 19091.
SREM ::= SEQUENCE {
     -- @details header
     -- The DE _protocolVersion_ is used to select the appropriate protocol decoder at the receiving ITS-S.
     --   It shall be set to 2.
     -- The DE _messageID_ shall be srem(9).
   header [0] ItsPduHeader,
     -- @details srm
     -- The DE _srm_ contains the Signal request data as defined in ISO TS 19091.
   srm [1] SignalRequestMessage
}
*/
struct EXTERN ASN1T_SREM : public ASN1TPDU {
   ASN1T_ITS_ItsPduHeader header;
   ASN1T_ETSI_DSRC_SignalRequestMessage srm;
   ASN1T_SREM ();
   ~ASN1T_SREM ();
} ;

class EXTERN ASN1C_SREM :
public ASN1CType
{
protected:
   ASN1T_SREM& msgData;
public:
   /**
    * Control class: ASN1C_SREM
    * Data class:    ASN1T_SREM
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SREM (ASN1T_SREM& data);

   /**
    * Control class: ASN1C_SREM<br/>
    * Data class: ASN1T_SREM<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SREM (OSRTMessageBufferIF& msgBuf, ASN1T_SREM& data);

   virtual ~ASN1C_SREM () {}

   /**
    * Data class: ASN1T_SREM<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_SREM.
    */
   inline ASN1T_SREM& getData () { return msgData; }

   /**
    * Data class: ASN1T_SREM<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_SREM.
    */
   inline const ASN1T_SREM& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             SREM will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "SREM");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_SREM& operator= (const ASN1C_SREM&) {return *this;}
} ;

EXTERN int asn1PE_SREM (OSCTXT* pctxt, ASN1T_SREM* pvalue);

EXTERN int asn1PD_SREM (OSCTXT* pctxt, ASN1T_SREM* pvalue);

EXTERN int XmlEnc_SREM (OSCTXT* pctxt, ASN1T_SREM* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SREM (OSCTXT* pctxt, ASN1T_SREM* pvalue);

EXTERN int asn1JsonEnc_SREM (OSCTXT *pctxt, ASN1T_SREM *pvalue);

EXTERN int asn1JsonDec_SREM (OSCTXT *pctxt, ASN1T_SREM *pvalue);

EXTERN int asn1PrtToStrm_SREM (OSCTXT *pctxt, 
   const char* name, const ASN1T_SREM* pvalue);

EXTERN ASN1T_SREM* new_ASN1T_SREM (ASN1CType& ccobj);

EXTERN int asn1Init_SREM (ASN1T_SREM* pvalue, OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SREM (OSCTXT *pctxt, ASN1T_SREM* pvalue);

/**
 * Global element functions.  These functions encode or decode complete
 * XML documents.  They are generated for XSD global elements and/or
 * ASN.1 type definitions that are either:
 *
 * 1) not referenced by any other types, or
 * 2) explicitly declared to be a PDU using the -pdu command line
 *    option, or
 * 3) explicitly declared to be a PDU using the <isPDU/> 
 *    configuration file element.
 */
#endif
