/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).
 */
#ifndef TRAVELERINFORMATION_H
#define TRAVELERINFORMATION_H

#include <stdio.h>
#include <stdlib.h>
#include "rtpersrc/asn1PerCppTypes.h"
#include "rtsrc/asn1CppTypes.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtsrc/asn1type.h"
#include "rtxmlsrc/asn1xml.h"
#include "rtxmlsrc/rtXmlCppMsgBuf.h"
#include "rtsrc/asn1type.h"
#include "rtjsonsrc/asn1json.h"
#include "rtjsonsrc/rtJsonCppMsgBuf.h"

#include "rtsrc/ASN1CSeqOfList.h"
#include "ITIS.h"

/**
 * Header file for ASN.1 module TravelerInformation
 */
/**************************************************************/
/*                                                            */
/*  UniqueMSGID                                               */
/*                                                            */
/**************************************************************/
/*
UniqueMSGID ::= OCTET STRING (SIZE (9))
*/
struct EXTERN ASN1T_UniqueMSGID {
   OSOCTET data[9];
   // ctors
   ASN1T_UniqueMSGID () {}
   ASN1T_UniqueMSGID (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, 9);
   }
   ASN1T_UniqueMSGID (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
   }
   // assignment operators
   ASN1T_UniqueMSGID& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
      return *this;
   }
} ;

EXTERN int asn1PE_UniqueMSGID (OSCTXT* pctxt, ASN1T_UniqueMSGID* pvalue);

EXTERN int asn1PD_UniqueMSGID (OSCTXT* pctxt, ASN1T_UniqueMSGID* pvalue);

EXTERN int XmlEnc_UniqueMSGID (OSCTXT* pctxt, ASN1T_UniqueMSGID* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_UniqueMSGID (OSCTXT* pctxt, ASN1T_UniqueMSGID* pvalue);

EXTERN int asn1JsonEnc_UniqueMSGID (OSCTXT *pctxt, ASN1T_UniqueMSGID *pvalue);

EXTERN int asn1JsonDec_UniqueMSGID (OSCTXT *pctxt, ASN1T_UniqueMSGID *pvalue);

EXTERN int asn1PrtToStrm_UniqueMSGID (OSCTXT *pctxt, 
   const char* name, const ASN1T_UniqueMSGID* pvalue);

EXTERN ASN1T_UniqueMSGID* new_ASN1T_UniqueMSGID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  URL_Base                                                  */
/*                                                            */
/**************************************************************/
/*
URL-Base ::= IA5String (SIZE (1..45))
*/
typedef const char* ASN1T_URL_Base;

EXTERN int asn1PE_URL_Base (OSCTXT* pctxt, ASN1T_URL_Base value);

EXTERN int asn1PD_URL_Base (OSCTXT* pctxt, ASN1T_URL_Base* pvalue);

EXTERN int XmlEnc_URL_Base (OSCTXT* pctxt, ASN1T_URL_Base value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_URL_Base (OSCTXT* pctxt, ASN1T_URL_Base* pvalue);

EXTERN int asn1JsonEnc_URL_Base (OSCTXT *pctxt, ASN1T_URL_Base value);

EXTERN int asn1JsonDec_URL_Base (OSCTXT *pctxt, ASN1T_URL_Base *pvalue);

EXTERN int asn1PrtToStrm_URL_Base (OSCTXT *pctxt, 
   const char* name, const ASN1T_URL_Base pvalue);

EXTERN void asn1Free_URL_Base (OSCTXT *pctxt, ASN1T_URL_Base pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInfoType                                          */
/*                                                            */
/**************************************************************/
/*
TravelerInfoType ::= ENUMERATED { unknown(0), advisory(1), roadSignage(2), commercialSignage(3), ... }
*/
struct EXTERN TravelerInfoType {
   enum Root {
      unknown = 0,
      advisory = 1,
      roadSignage = 2,
      commercialSignage = 3
   } ;
} ;

typedef OSUINT32 ASN1T_TravelerInfoType;

EXTERN int asn1PE_TravelerInfoType (OSCTXT* pctxt, ASN1T_TravelerInfoType value);

EXTERN int asn1PD_TravelerInfoType (OSCTXT* pctxt, ASN1T_TravelerInfoType* pvalue);

EXTERN int XmlEnc_TravelerInfoType (OSCTXT* pctxt, 
   ASN1T_TravelerInfoType value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerInfoType (OSCTXT* pctxt, 
   ASN1T_TravelerInfoType* pvalue);

EXTERN int asn1JsonEnc_TravelerInfoType (OSCTXT *pctxt, ASN1T_TravelerInfoType *pvalue);

EXTERN int asn1JsonDec_TravelerInfoType (OSCTXT *pctxt, ASN1T_TravelerInfoType *pvalue);

EXTERN int asn1PrtToStrm_TravelerInfoType (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerInfoType* pvalue);

EXTERN ASN1T_TravelerInfoType* new_ASN1T_TravelerInfoType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_TravelerInfoType_ENUMTAB[];
#define ASN1T_TravelerInfoType_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_TravelerInfoType_ToString (OSINT32 value);

EXTERN int ASN1T_TravelerInfoType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_TravelerInfoType* pvalue);

EXTERN int ASN1T_TravelerInfoType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_TravelerInfoType* pvalue);

/**************************************************************/
/*                                                            */
/*  MUTCDCode                                                 */
/*                                                            */
/**************************************************************/
/*
MUTCDCode ::= ENUMERATED { none(0), regulatory(1), warning(2), maintenance(3), motoristService(4), guide(5), rec(6), ... }
*/
struct EXTERN MUTCDCode {
   enum Root {
      none = 0,
      regulatory = 1,
      warning = 2,
      maintenance = 3,
      motoristService = 4,
      guide = 5,
      rec = 6
   } ;
} ;

typedef OSUINT32 ASN1T_MUTCDCode;

EXTERN int asn1PE_MUTCDCode (OSCTXT* pctxt, ASN1T_MUTCDCode value);

EXTERN int asn1PD_MUTCDCode (OSCTXT* pctxt, ASN1T_MUTCDCode* pvalue);

EXTERN int XmlEnc_MUTCDCode (OSCTXT* pctxt, ASN1T_MUTCDCode value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MUTCDCode (OSCTXT* pctxt, ASN1T_MUTCDCode* pvalue);

EXTERN int asn1JsonEnc_MUTCDCode (OSCTXT *pctxt, ASN1T_MUTCDCode *pvalue);

EXTERN int asn1JsonDec_MUTCDCode (OSCTXT *pctxt, ASN1T_MUTCDCode *pvalue);

EXTERN int asn1PrtToStrm_MUTCDCode (OSCTXT *pctxt, 
   const char* name, const ASN1T_MUTCDCode* pvalue);

EXTERN ASN1T_MUTCDCode* new_ASN1T_MUTCDCode (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_MUTCDCode_ENUMTAB[];
#define ASN1T_MUTCDCode_ENUMTABSIZE 7

EXTERN const OSUTF8CHAR* ASN1T_MUTCDCode_ToString (OSINT32 value);

EXTERN int ASN1T_MUTCDCode_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_MUTCDCode* pvalue);

EXTERN int ASN1T_MUTCDCode_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_MUTCDCode* pvalue);

/**************************************************************/
/*                                                            */
/*  MsgCRC                                                    */
/*                                                            */
/**************************************************************/
/*
MsgCRC ::= OCTET STRING (SIZE (2))
                                   created with the CRC-CCITT polynomial

*/
struct EXTERN ASN1T_MsgCRC {
   OSOCTET data[2];
   // ctors
   ASN1T_MsgCRC () {}
   ASN1T_MsgCRC (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, 2);
   }
   ASN1T_MsgCRC (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
   }
   // assignment operators
   ASN1T_MsgCRC& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
      return *this;
   }
} ;

EXTERN int asn1PE_MsgCRC (OSCTXT* pctxt, ASN1T_MsgCRC* pvalue);

EXTERN int asn1PD_MsgCRC (OSCTXT* pctxt, ASN1T_MsgCRC* pvalue);

EXTERN int XmlEnc_MsgCRC (OSCTXT* pctxt, ASN1T_MsgCRC* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MsgCRC (OSCTXT* pctxt, ASN1T_MsgCRC* pvalue);

EXTERN int asn1JsonEnc_MsgCRC (OSCTXT *pctxt, ASN1T_MsgCRC *pvalue);

EXTERN int asn1JsonDec_MsgCRC (OSCTXT *pctxt, ASN1T_MsgCRC *pvalue);

EXTERN int asn1PrtToStrm_MsgCRC (OSCTXT *pctxt, 
   const char* name, const ASN1T_MsgCRC* pvalue);

EXTERN ASN1T_MsgCRC* new_ASN1T_MsgCRC (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  RoadSignID                                                */
/*                                                            */
/**************************************************************/
/*
RoadSignID ::= SEQUENCE {
   position [0] Position3D,
                   -- Location of sign
   viewAngle [1] HeadingSlice,
                   -- Vehicle direction of travel while
                   -- facing active side of sign
   mutcdCode [2] MUTCDCode OPTIONAL,
                   -- Tag for MUTCD code or "generic sign" 
   crc [3] MsgCRC OPTIONAL
                   -- Used to provide a check sum
}
*/
struct EXTERN ASN1T_RoadSignID {
   struct {
      unsigned mutcdCodePresent : 1;
      unsigned crcPresent : 1;
   } m;
   struct ASN1T_Position3D *position;
   struct ASN1T_HeadingSlice *viewAngle;
   ASN1T_MUTCDCode mutcdCode;
   ASN1T_MsgCRC crc;
   ASN1T_RoadSignID ();
} ;

EXTERN int asn1PE_RoadSignID (OSCTXT* pctxt, ASN1T_RoadSignID* pvalue);

EXTERN int asn1PD_RoadSignID (OSCTXT* pctxt, ASN1T_RoadSignID* pvalue);

EXTERN int XmlEnc_RoadSignID (OSCTXT* pctxt, ASN1T_RoadSignID* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSignID (OSCTXT* pctxt, ASN1T_RoadSignID* pvalue);

EXTERN int asn1JsonEnc_RoadSignID (OSCTXT *pctxt, ASN1T_RoadSignID *pvalue);

EXTERN int asn1JsonDec_RoadSignID (OSCTXT *pctxt, ASN1T_RoadSignID *pvalue);

EXTERN int asn1PrtToStrm_RoadSignID (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSignID* pvalue);

EXTERN ASN1T_RoadSignID* new_ASN1T_RoadSignID (ASN1CType& ccobj);

EXTERN int asn1Init_RoadSignID (ASN1T_RoadSignID* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSignID (OSCTXT *pctxt, ASN1T_RoadSignID* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame_msgId                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerDataFrame'
*/
/* Choice tag constants */

#define T_TravelerDataFrame_msgId_furtherInfoID 1
#define T_TravelerDataFrame_msgId_roadSignID 2

struct EXTERN ASN1T_TravelerDataFrame_msgId {
   OSINT32 t;
   union {
      /* t = 1 */
      struct ASN1T_FurtherInfoID *furtherInfoID;
      /* t = 2 */
      ASN1T_RoadSignID *roadSignID;
   } u;
   ASN1T_TravelerDataFrame_msgId () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_TravelerDataFrame_msgId (OSCTXT* pctxt, ASN1T_TravelerDataFrame_msgId* pvalue);

EXTERN int asn1PD_TravelerDataFrame_msgId (OSCTXT* pctxt, ASN1T_TravelerDataFrame_msgId* pvalue);

EXTERN int XmlEnc_TravelerDataFrame_msgId (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame_msgId* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerDataFrame_msgId (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame_msgId* pvalue);

EXTERN int asn1JsonEnc_TravelerDataFrame_msgId (OSCTXT *pctxt, ASN1T_TravelerDataFrame_msgId *pvalue);

EXTERN int asn1JsonDec_TravelerDataFrame_msgId (OSCTXT *pctxt, ASN1T_TravelerDataFrame_msgId *pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrame_msgId (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerDataFrame_msgId* pvalue);

EXTERN ASN1T_TravelerDataFrame_msgId* 
   new_ASN1T_TravelerDataFrame_msgId (ASN1CType& ccobj);

EXTERN int asn1Init_TravelerDataFrame_msgId (ASN1T_TravelerDataFrame_msgId* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerDataFrame_msgId (OSCTXT *pctxt, 
   ASN1T_TravelerDataFrame_msgId* pvalue);

/**************************************************************/
/*                                                            */
/*  MinutesDuration                                           */
/*                                                            */
/**************************************************************/
/*
MinutesDuration ::= INTEGER (0..32000)
                                        units of minutes

*/
typedef OSUINT16 ASN1T_MinutesDuration;

EXTERN int asn1PE_MinutesDuration (OSCTXT* pctxt, ASN1T_MinutesDuration value);

EXTERN int asn1PD_MinutesDuration (OSCTXT* pctxt, ASN1T_MinutesDuration* pvalue);

EXTERN int XmlEnc_MinutesDuration (OSCTXT* pctxt, ASN1T_MinutesDuration value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MinutesDuration (OSCTXT* pctxt, ASN1T_MinutesDuration* pvalue
   );

EXTERN int asn1JsonEnc_MinutesDuration (OSCTXT *pctxt, ASN1T_MinutesDuration *pvalue);

EXTERN int asn1JsonDec_MinutesDuration (OSCTXT *pctxt, ASN1T_MinutesDuration *pvalue);

EXTERN int asn1PrtToStrm_MinutesDuration (OSCTXT *pctxt, 
   const char* name, const ASN1T_MinutesDuration* pvalue);

EXTERN ASN1T_MinutesDuration* new_ASN1T_MinutesDuration (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SignPrority                                               */
/*                                                            */
/**************************************************************/
/*
SignPrority ::= INTEGER (0..7)
    0 as least, 7 as most

*/
typedef OSUINT8 ASN1T_SignPrority;

EXTERN int asn1PE_SignPrority (OSCTXT* pctxt, ASN1T_SignPrority value);

EXTERN int asn1PD_SignPrority (OSCTXT* pctxt, ASN1T_SignPrority* pvalue);

EXTERN int XmlEnc_SignPrority (OSCTXT* pctxt, ASN1T_SignPrority value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignPrority (OSCTXT* pctxt, ASN1T_SignPrority* pvalue);

EXTERN int asn1JsonEnc_SignPrority (OSCTXT *pctxt, ASN1T_SignPrority *pvalue);

EXTERN int asn1JsonDec_SignPrority (OSCTXT *pctxt, ASN1T_SignPrority *pvalue);

EXTERN int asn1PrtToStrm_SignPrority (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignPrority* pvalue);

EXTERN ASN1T_SignPrority* new_ASN1T_SignPrority (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DirectionOfUse                                            */
/*                                                            */
/**************************************************************/
/*
DirectionOfUse ::= ENUMERATED { unavailable(0), forward(1), reverse(2), both(3) }
*/
struct EXTERN DirectionOfUse {
   enum Root {
      unavailable = 0,
      forward = 1,
      reverse = 2,
      both = 3
   } ;
} ;

typedef OSUINT32 ASN1T_DirectionOfUse;

EXTERN int asn1PE_DirectionOfUse (OSCTXT* pctxt, ASN1T_DirectionOfUse value);

EXTERN int asn1PD_DirectionOfUse (OSCTXT* pctxt, ASN1T_DirectionOfUse* pvalue);

EXTERN int XmlEnc_DirectionOfUse (OSCTXT* pctxt, ASN1T_DirectionOfUse value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DirectionOfUse (OSCTXT* pctxt, ASN1T_DirectionOfUse* pvalue)
   ;

EXTERN int asn1JsonEnc_DirectionOfUse (OSCTXT *pctxt, ASN1T_DirectionOfUse *pvalue);

EXTERN int asn1JsonDec_DirectionOfUse (OSCTXT *pctxt, ASN1T_DirectionOfUse *pvalue);

EXTERN int asn1PrtToStrm_DirectionOfUse (OSCTXT *pctxt, 
   const char* name, const ASN1T_DirectionOfUse* pvalue);

EXTERN ASN1T_DirectionOfUse* new_ASN1T_DirectionOfUse (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_DirectionOfUse_ENUMTAB[];
#define ASN1T_DirectionOfUse_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_DirectionOfUse_ToString (OSINT32 value);

EXTERN int ASN1T_DirectionOfUse_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_DirectionOfUse* pvalue);

EXTERN int ASN1T_DirectionOfUse_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_DirectionOfUse* pvalue);

/**************************************************************/
/*                                                            */
/*  Zoom                                                      */
/*                                                            */
/**************************************************************/
/*
Zoom ::= INTEGER (0..15)
    A zoom scale applied in units of 2^N
    A value of 0 is a 1:1 zoom (no zoom)
    A value of 1 is a 2:1 zoom
    A value of 2 is a 4:1 zoom, etc.
    The zoom value is applied to one or more offsets
    increase the span or range while reducing its precision
    The absence of a zoom, any offset element in a data 
    frame implies a 1:1 zoom

*/
typedef OSUINT8 ASN1T_Zoom;

EXTERN int asn1PE_Zoom (OSCTXT* pctxt, ASN1T_Zoom value);

EXTERN int asn1PD_Zoom (OSCTXT* pctxt, ASN1T_Zoom* pvalue);

EXTERN int XmlEnc_Zoom (OSCTXT* pctxt, ASN1T_Zoom value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Zoom (OSCTXT* pctxt, ASN1T_Zoom* pvalue);

EXTERN int asn1JsonEnc_Zoom (OSCTXT *pctxt, ASN1T_Zoom *pvalue);

EXTERN int asn1JsonDec_Zoom (OSCTXT *pctxt, ASN1T_Zoom *pvalue);

EXTERN int asn1PrtToStrm_Zoom (OSCTXT *pctxt, 
   const char* name, const ASN1T_Zoom* pvalue);

EXTERN ASN1T_Zoom* new_ASN1T_Zoom (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B12                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B12 ::= INTEGER (-2048..2047)
    A range of +- 0.0002047 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT16 ASN1T_OffsetLL_B12;

EXTERN int asn1PE_OffsetLL_B12 (OSCTXT* pctxt, ASN1T_OffsetLL_B12 value);

EXTERN int asn1PD_OffsetLL_B12 (OSCTXT* pctxt, ASN1T_OffsetLL_B12* pvalue);

EXTERN int XmlEnc_OffsetLL_B12 (OSCTXT* pctxt, ASN1T_OffsetLL_B12 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetLL_B12 (OSCTXT* pctxt, ASN1T_OffsetLL_B12* pvalue);

EXTERN int asn1JsonEnc_OffsetLL_B12 (OSCTXT *pctxt, ASN1T_OffsetLL_B12 *pvalue);

EXTERN int asn1JsonDec_OffsetLL_B12 (OSCTXT *pctxt, ASN1T_OffsetLL_B12 *pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B12 (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetLL_B12* pvalue);

EXTERN ASN1T_OffsetLL_B12* new_ASN1T_OffsetLL_B12 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_LL_24B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-24B ::= SEQUENCE {
   -- ranges of +- 0.0002047 degrees
   -- ranges of +- 22.634554 meters at the equator
   lon [0] OffsetLL-B12,
   lat [1] OffsetLL-B12
}
*/
struct EXTERN ASN1T_Node_LL_24B {
   ASN1T_OffsetLL_B12 lon;
   ASN1T_OffsetLL_B12 lat;
} ;

EXTERN int asn1PE_Node_LL_24B (OSCTXT* pctxt, ASN1T_Node_LL_24B* pvalue);

EXTERN int asn1PD_Node_LL_24B (OSCTXT* pctxt, ASN1T_Node_LL_24B* pvalue);

EXTERN int XmlEnc_Node_LL_24B (OSCTXT* pctxt, ASN1T_Node_LL_24B* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LL_24B (OSCTXT* pctxt, ASN1T_Node_LL_24B* pvalue);

EXTERN int asn1JsonEnc_Node_LL_24B (OSCTXT *pctxt, ASN1T_Node_LL_24B *pvalue);

EXTERN int asn1JsonDec_Node_LL_24B (OSCTXT *pctxt, ASN1T_Node_LL_24B *pvalue);

EXTERN int asn1PrtToStrm_Node_LL_24B (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LL_24B* pvalue);

EXTERN ASN1T_Node_LL_24B* new_ASN1T_Node_LL_24B (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B14                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B14 ::= INTEGER (-8192..8191)
    A range of +- 0.0008191 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT16 ASN1T_OffsetLL_B14;

EXTERN int asn1PE_OffsetLL_B14 (OSCTXT* pctxt, ASN1T_OffsetLL_B14 value);

EXTERN int asn1PD_OffsetLL_B14 (OSCTXT* pctxt, ASN1T_OffsetLL_B14* pvalue);

EXTERN int XmlEnc_OffsetLL_B14 (OSCTXT* pctxt, ASN1T_OffsetLL_B14 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetLL_B14 (OSCTXT* pctxt, ASN1T_OffsetLL_B14* pvalue);

EXTERN int asn1JsonEnc_OffsetLL_B14 (OSCTXT *pctxt, ASN1T_OffsetLL_B14 *pvalue);

EXTERN int asn1JsonDec_OffsetLL_B14 (OSCTXT *pctxt, ASN1T_OffsetLL_B14 *pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B14 (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetLL_B14* pvalue);

EXTERN ASN1T_OffsetLL_B14* new_ASN1T_OffsetLL_B14 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_LL_28B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-28B ::= SEQUENCE {
   -- ranges of +- 0.0008191 degrees
   -- ranges of +- 90.571389 meters at the equator
   lon [0] OffsetLL-B14,
   lat [1] OffsetLL-B14
}
*/
struct EXTERN ASN1T_Node_LL_28B {
   ASN1T_OffsetLL_B14 lon;
   ASN1T_OffsetLL_B14 lat;
} ;

EXTERN int asn1PE_Node_LL_28B (OSCTXT* pctxt, ASN1T_Node_LL_28B* pvalue);

EXTERN int asn1PD_Node_LL_28B (OSCTXT* pctxt, ASN1T_Node_LL_28B* pvalue);

EXTERN int XmlEnc_Node_LL_28B (OSCTXT* pctxt, ASN1T_Node_LL_28B* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LL_28B (OSCTXT* pctxt, ASN1T_Node_LL_28B* pvalue);

EXTERN int asn1JsonEnc_Node_LL_28B (OSCTXT *pctxt, ASN1T_Node_LL_28B *pvalue);

EXTERN int asn1JsonDec_Node_LL_28B (OSCTXT *pctxt, ASN1T_Node_LL_28B *pvalue);

EXTERN int asn1PrtToStrm_Node_LL_28B (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LL_28B* pvalue);

EXTERN ASN1T_Node_LL_28B* new_ASN1T_Node_LL_28B (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B16                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B16 ::= INTEGER (-32768..32767)
    A range of +- 0.0032767 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT16 ASN1T_OffsetLL_B16;

EXTERN int asn1PE_OffsetLL_B16 (OSCTXT* pctxt, ASN1T_OffsetLL_B16 value);

EXTERN int asn1PD_OffsetLL_B16 (OSCTXT* pctxt, ASN1T_OffsetLL_B16* pvalue);

EXTERN int XmlEnc_OffsetLL_B16 (OSCTXT* pctxt, ASN1T_OffsetLL_B16 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetLL_B16 (OSCTXT* pctxt, ASN1T_OffsetLL_B16* pvalue);

EXTERN int asn1JsonEnc_OffsetLL_B16 (OSCTXT *pctxt, ASN1T_OffsetLL_B16 *pvalue);

EXTERN int asn1JsonDec_OffsetLL_B16 (OSCTXT *pctxt, ASN1T_OffsetLL_B16 *pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B16 (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetLL_B16* pvalue);

EXTERN ASN1T_OffsetLL_B16* new_ASN1T_OffsetLL_B16 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_LL_32B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-32B ::= SEQUENCE {
   -- ranges of +- 0.0032767 degrees
   -- ranges of +- 362.31873 meters at the equator
   lon [0] OffsetLL-B16,
   lat [1] OffsetLL-B16
}
*/
struct EXTERN ASN1T_Node_LL_32B {
   ASN1T_OffsetLL_B16 lon;
   ASN1T_OffsetLL_B16 lat;
} ;

EXTERN int asn1PE_Node_LL_32B (OSCTXT* pctxt, ASN1T_Node_LL_32B* pvalue);

EXTERN int asn1PD_Node_LL_32B (OSCTXT* pctxt, ASN1T_Node_LL_32B* pvalue);

EXTERN int XmlEnc_Node_LL_32B (OSCTXT* pctxt, ASN1T_Node_LL_32B* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LL_32B (OSCTXT* pctxt, ASN1T_Node_LL_32B* pvalue);

EXTERN int asn1JsonEnc_Node_LL_32B (OSCTXT *pctxt, ASN1T_Node_LL_32B *pvalue);

EXTERN int asn1JsonDec_Node_LL_32B (OSCTXT *pctxt, ASN1T_Node_LL_32B *pvalue);

EXTERN int asn1PrtToStrm_Node_LL_32B (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LL_32B* pvalue);

EXTERN ASN1T_Node_LL_32B* new_ASN1T_Node_LL_32B (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_LL_36B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-36B ::= SEQUENCE {
   -- ranges of +- 0.0131071 degrees
   -- ranges of +- 01.449308 Kmeters at the equator
   lon [0] OffsetLL-B18,
   lat [1] OffsetLL-B18
}
*/
struct EXTERN ASN1T_Node_LL_36B {
   OSINT32 lon;
   OSINT32 lat;
} ;

EXTERN int asn1PE_Node_LL_36B (OSCTXT* pctxt, ASN1T_Node_LL_36B* pvalue);

EXTERN int asn1PD_Node_LL_36B (OSCTXT* pctxt, ASN1T_Node_LL_36B* pvalue);

EXTERN int XmlEnc_Node_LL_36B (OSCTXT* pctxt, ASN1T_Node_LL_36B* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LL_36B (OSCTXT* pctxt, ASN1T_Node_LL_36B* pvalue);

EXTERN int asn1JsonEnc_Node_LL_36B (OSCTXT *pctxt, ASN1T_Node_LL_36B *pvalue);

EXTERN int asn1JsonDec_Node_LL_36B (OSCTXT *pctxt, ASN1T_Node_LL_36B *pvalue);

EXTERN int asn1PrtToStrm_Node_LL_36B (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LL_36B* pvalue);

EXTERN ASN1T_Node_LL_36B* new_ASN1T_Node_LL_36B (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B22                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B22 ::= INTEGER (-2097152..2097151)
    A range of +- 0.2097151 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed) 

*/
typedef OSINT32 ASN1T_OffsetLL_B22;

EXTERN int asn1PE_OffsetLL_B22 (OSCTXT* pctxt, ASN1T_OffsetLL_B22 value);

EXTERN int asn1PD_OffsetLL_B22 (OSCTXT* pctxt, ASN1T_OffsetLL_B22* pvalue);

EXTERN int XmlEnc_OffsetLL_B22 (OSCTXT* pctxt, ASN1T_OffsetLL_B22 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetLL_B22 (OSCTXT* pctxt, ASN1T_OffsetLL_B22* pvalue);

EXTERN int asn1JsonEnc_OffsetLL_B22 (OSCTXT *pctxt, ASN1T_OffsetLL_B22 *pvalue);

EXTERN int asn1JsonDec_OffsetLL_B22 (OSCTXT *pctxt, ASN1T_OffsetLL_B22 *pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B22 (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetLL_B22* pvalue);

EXTERN ASN1T_OffsetLL_B22* new_ASN1T_OffsetLL_B22 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_LL_44B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-44B ::= SEQUENCE {
   -- ranges of +- 0.2097151 degrees
   -- ranges of +- 23.189096 Kmeters at the equator
   lon [0] OffsetLL-B22,
   lat [1] OffsetLL-B22
}
*/
struct EXTERN ASN1T_Node_LL_44B {
   ASN1T_OffsetLL_B22 lon;
   ASN1T_OffsetLL_B22 lat;
} ;

EXTERN int asn1PE_Node_LL_44B (OSCTXT* pctxt, ASN1T_Node_LL_44B* pvalue);

EXTERN int asn1PD_Node_LL_44B (OSCTXT* pctxt, ASN1T_Node_LL_44B* pvalue);

EXTERN int XmlEnc_Node_LL_44B (OSCTXT* pctxt, ASN1T_Node_LL_44B* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LL_44B (OSCTXT* pctxt, ASN1T_Node_LL_44B* pvalue);

EXTERN int asn1JsonEnc_Node_LL_44B (OSCTXT *pctxt, ASN1T_Node_LL_44B *pvalue);

EXTERN int asn1JsonDec_Node_LL_44B (OSCTXT *pctxt, ASN1T_Node_LL_44B *pvalue);

EXTERN int asn1PrtToStrm_Node_LL_44B (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LL_44B* pvalue);

EXTERN ASN1T_Node_LL_44B* new_ASN1T_Node_LL_44B (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B24                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B24 ::= INTEGER (-8388608..8388607)
    A range of +- 0.8388607 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT32 ASN1T_OffsetLL_B24;

EXTERN int asn1PE_OffsetLL_B24 (OSCTXT* pctxt, ASN1T_OffsetLL_B24 value);

EXTERN int asn1PD_OffsetLL_B24 (OSCTXT* pctxt, ASN1T_OffsetLL_B24* pvalue);

EXTERN int XmlEnc_OffsetLL_B24 (OSCTXT* pctxt, ASN1T_OffsetLL_B24 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetLL_B24 (OSCTXT* pctxt, ASN1T_OffsetLL_B24* pvalue);

EXTERN int asn1JsonEnc_OffsetLL_B24 (OSCTXT *pctxt, ASN1T_OffsetLL_B24 *pvalue);

EXTERN int asn1JsonDec_OffsetLL_B24 (OSCTXT *pctxt, ASN1T_OffsetLL_B24 *pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B24 (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetLL_B24* pvalue);

EXTERN ASN1T_OffsetLL_B24* new_ASN1T_OffsetLL_B24 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_LL_48B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-48B ::= SEQUENCE {
   -- ranges of +- 0.8388607 degrees
   -- ranges of +- 92.756481 Kmeters at the equator
   lon [0] OffsetLL-B24,
   lat [1] OffsetLL-B24
}
*/
struct EXTERN ASN1T_Node_LL_48B {
   ASN1T_OffsetLL_B24 lon;
   ASN1T_OffsetLL_B24 lat;
} ;

EXTERN int asn1PE_Node_LL_48B (OSCTXT* pctxt, ASN1T_Node_LL_48B* pvalue);

EXTERN int asn1PD_Node_LL_48B (OSCTXT* pctxt, ASN1T_Node_LL_48B* pvalue);

EXTERN int XmlEnc_Node_LL_48B (OSCTXT* pctxt, ASN1T_Node_LL_48B* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LL_48B (OSCTXT* pctxt, ASN1T_Node_LL_48B* pvalue);

EXTERN int asn1JsonEnc_Node_LL_48B (OSCTXT *pctxt, ASN1T_Node_LL_48B *pvalue);

EXTERN int asn1JsonDec_Node_LL_48B (OSCTXT *pctxt, ASN1T_Node_LL_48B *pvalue);

EXTERN int asn1PrtToStrm_Node_LL_48B (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LL_48B* pvalue);

EXTERN ASN1T_Node_LL_48B* new_ASN1T_Node_LL_48B (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  NodeOffsetPointLL_regional                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NodeOffsetPointLL'
*/
struct EXTERN ASN1T_NodeOffsetPointLL_regional {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_NodeOffsetPointLL_regional (OSCTXT* pctxt, ASN1T_NodeOffsetPointLL_regional* pvalue);

EXTERN int asn1PD_NodeOffsetPointLL_regional (OSCTXT* pctxt, ASN1T_NodeOffsetPointLL_regional* pvalue);

EXTERN int XmlEnc_NodeOffsetPointLL_regional (OSCTXT* pctxt, 
   ASN1T_NodeOffsetPointLL_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeOffsetPointLL_regional (OSCTXT* pctxt, 
   ASN1T_NodeOffsetPointLL_regional* pvalue);

EXTERN int asn1JsonEnc_NodeOffsetPointLL_regional (OSCTXT *pctxt, ASN1T_NodeOffsetPointLL_regional *pvalue);

EXTERN int asn1JsonDec_NodeOffsetPointLL_regional (OSCTXT *pctxt, ASN1T_NodeOffsetPointLL_regional *pvalue);

EXTERN int asn1PrtToStrm_NodeOffsetPointLL_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeOffsetPointLL_regional* pvalue);

EXTERN ASN1T_NodeOffsetPointLL_regional* 
   new_ASN1T_NodeOffsetPointLL_regional (ASN1CType& ccobj);

EXTERN int asn1Init_NodeOffsetPointLL_regional (
   ASN1T_NodeOffsetPointLL_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeOffsetPointLL_regional (OSCTXT *pctxt, 
   ASN1T_NodeOffsetPointLL_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeOffsetPointLL                                         */
/*                                                            */
/**************************************************************/
/*
NodeOffsetPointLL ::= CHOICE {
   -- Nodes with LL content         Span at the equator when using a zoom of one:
   node-LL1 [0] Node-LL-24B, -- within +- 22.634554  meters of last node
   node-LL2 [1] Node-LL-28B, -- within +- 90.571389  meters of last node
   node-LL3 [2] Node-LL-32B, -- within +- 362.31873  meters of last node
   node-LL4 [3] Node-LL-36B, -- within +- 01.449308 Kmeters of last node
   node-LL5 [4] Node-LL-44B, -- within +- 23.189096 Kmeters of last node
   node-LL6 [5] Node-LL-48B, -- within +- 92.756481 Kmeters of last node
   node-LatLon [6] Node-LLmD-64b, -- node is a full 32b Lat/Lon range
   regional [7] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-NodeOffsetPointLL}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-NodeOffsetPointLL}{@regionId})
   }
}
*/
/* Choice tag constants */

#define T_NodeOffsetPointLL_node_LL1    1
#define T_NodeOffsetPointLL_node_LL2    2
#define T_NodeOffsetPointLL_node_LL3    3
#define T_NodeOffsetPointLL_node_LL4    4
#define T_NodeOffsetPointLL_node_LL5    5
#define T_NodeOffsetPointLL_node_LL6    6
#define T_NodeOffsetPointLL_node_LatLon 7
#define T_NodeOffsetPointLL_regional    8

struct EXTERN ASN1T_NodeOffsetPointLL {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_Node_LL_24B *node_LL1;
      /* t = 2 */
      ASN1T_Node_LL_28B *node_LL2;
      /* t = 3 */
      ASN1T_Node_LL_32B *node_LL3;
      /* t = 4 */
      ASN1T_Node_LL_36B *node_LL4;
      /* t = 5 */
      ASN1T_Node_LL_44B *node_LL5;
      /* t = 6 */
      ASN1T_Node_LL_48B *node_LL6;
      /* t = 7 */
      struct ASN1T_Node_LLmD_64b *node_LatLon;
      /* t = 8 */
      ASN1T_NodeOffsetPointLL_regional *regional;
   } u;
   ASN1T_NodeOffsetPointLL () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_NodeOffsetPointLL (OSCTXT* pctxt, ASN1T_NodeOffsetPointLL* pvalue);

EXTERN int asn1PD_NodeOffsetPointLL (OSCTXT* pctxt, ASN1T_NodeOffsetPointLL* pvalue);

EXTERN int XmlEnc_NodeOffsetPointLL (OSCTXT* pctxt, 
   ASN1T_NodeOffsetPointLL* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeOffsetPointLL (OSCTXT* pctxt, 
   ASN1T_NodeOffsetPointLL* pvalue);

EXTERN int asn1JsonEnc_NodeOffsetPointLL (OSCTXT *pctxt, ASN1T_NodeOffsetPointLL *pvalue);

EXTERN int asn1JsonDec_NodeOffsetPointLL (OSCTXT *pctxt, ASN1T_NodeOffsetPointLL *pvalue);

EXTERN int asn1PrtToStrm_NodeOffsetPointLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeOffsetPointLL* pvalue);

EXTERN ASN1T_NodeOffsetPointLL* new_ASN1T_NodeOffsetPointLL (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_NodeOffsetPointLL (ASN1T_NodeOffsetPointLL* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeOffsetPointLL (OSCTXT *pctxt, 
   ASN1T_NodeOffsetPointLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeLL                                           */
/*                                                            */
/**************************************************************/
/*
NodeAttributeLL ::= ENUMERATED { reserved(0), stopLine(1), roundedCapStyleA(2), roundedCapStyleB(3), mergePoint(4), divergePoint(5), downstreamStopLine(6), downstreamStartNode(7), closedToTraffic(8), safeIsland(9), curbPresentAtStepOff(10), hydrantPresent(11), ... }
*/
struct EXTERN NodeAttributeLL {
   enum Root {
      reserved = 0,
      stopLine = 1,
      roundedCapStyleA = 2,
      roundedCapStyleB = 3,
      mergePoint = 4,
      divergePoint = 5,
      downstreamStopLine = 6,
      downstreamStartNode = 7,
      closedToTraffic = 8,
      safeIsland = 9,
      curbPresentAtStepOff = 10,
      hydrantPresent = 11
   } ;
} ;

typedef OSUINT32 ASN1T_NodeAttributeLL;

EXTERN int asn1PE_NodeAttributeLL (OSCTXT* pctxt, ASN1T_NodeAttributeLL value);

EXTERN int asn1PD_NodeAttributeLL (OSCTXT* pctxt, ASN1T_NodeAttributeLL* pvalue);

EXTERN int XmlEnc_NodeAttributeLL (OSCTXT* pctxt, ASN1T_NodeAttributeLL value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeLL (OSCTXT* pctxt, ASN1T_NodeAttributeLL* pvalue
   );

EXTERN int asn1JsonEnc_NodeAttributeLL (OSCTXT *pctxt, ASN1T_NodeAttributeLL *pvalue);

EXTERN int asn1JsonDec_NodeAttributeLL (OSCTXT *pctxt, ASN1T_NodeAttributeLL *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeLL* pvalue);

EXTERN ASN1T_NodeAttributeLL* new_ASN1T_NodeAttributeLL (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_NodeAttributeLL_ENUMTAB[];
#define ASN1T_NodeAttributeLL_ENUMTABSIZE 12

EXTERN const OSUTF8CHAR* ASN1T_NodeAttributeLL_ToString (OSINT32 value);

EXTERN int ASN1T_NodeAttributeLL_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_NodeAttributeLL* pvalue);

EXTERN int ASN1T_NodeAttributeLL_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_NodeAttributeLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeLLList                                       */
/*                                                            */
/**************************************************************/
/*
NodeAttributeLLList ::= SEQUENCE (SIZE (1..8)) OF NodeAttributeLL
*/
typedef struct EXTERN ASN1T_NodeAttributeLLList {
   OSUINT8 n;
   ASN1T_NodeAttributeLL elem[8];
   ASN1T_NodeAttributeLLList () : n(0) {}
} ASN1T_NodeAttributeLLList;

class EXTERN ASN1C_NodeAttributeLLList :
public ASN1CType
{
protected:
   ASN1T_NodeAttributeLLList& msgData;
public:
   /**
    * Control class: ASN1C_NodeAttributeLLList
    * Data class:    ASN1T_NodeAttributeLLList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_NodeAttributeLLList (ASN1T_NodeAttributeLLList& data);

   /**
    * Control class: ASN1C_NodeAttributeLLList<br/>
    * Data class: ASN1T_NodeAttributeLLList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_NodeAttributeLLList (OSRTMessageBufferIF& msgBuf
      , ASN1T_NodeAttributeLLList& data);

   /**
    * Control class: ASN1C_NodeAttributeLLList<br/>
    * Data class: ASN1T_NodeAttributeLLList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_NodeAttributeLLList (ASN1CType& ccobj, ASN1T_NodeAttributeLLList& data
      );

   virtual ~ASN1C_NodeAttributeLLList () {}

private:
   ASN1C_NodeAttributeLLList& operator= (const ASN1C_NodeAttributeLLList&) {return *this;}
} ;

EXTERN int asn1PE_NodeAttributeLLList (OSCTXT* pctxt, ASN1T_NodeAttributeLLList* pvalue);

EXTERN int asn1PD_NodeAttributeLLList (OSCTXT* pctxt, ASN1T_NodeAttributeLLList* pvalue);

EXTERN int XmlEnc_NodeAttributeLLList (OSCTXT* pctxt, 
   ASN1T_NodeAttributeLLList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeLLList (OSCTXT* pctxt, 
   ASN1T_NodeAttributeLLList* pvalue);

EXTERN int asn1JsonEnc_NodeAttributeLLList (OSCTXT *pctxt, ASN1T_NodeAttributeLLList *pvalue);

EXTERN int asn1JsonDec_NodeAttributeLLList (OSCTXT *pctxt, ASN1T_NodeAttributeLLList *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeLLList (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeLLList* pvalue);

EXTERN int asn1Init_NodeAttributeLLList (ASN1T_NodeAttributeLLList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  SegmentAttributeLL                                        */
/*                                                            */
/**************************************************************/
/*
SegmentAttributeLL ::= ENUMERATED { reserved(0), doNotBlock(1), whiteLine(2), mergingLaneLeft(3), mergingLaneRight(4), curbOnLeft(5), curbOnRight(6), loadingzoneOnLeft(7), loadingzoneOnRight(8), turnOutPointOnLeft(9), turnOutPointOnRight(10), adjacentParkingOnLeft(11), adjacentParkingOnRight(12), adjacentBikeLaneOnLeft(13), adjacentBikeLaneOnRight(14), sharedBikeLane(15), bikeBoxInFront(16), transitStopOnLeft(17), transitStopOnRight(18), transitStopInLane(19), sharedWithTrackedVehicle(20), safeIsland(21), lowCurbsPresent(22), rumbleStripPresent(23), audibleSignalingPresent(24), adaptiveTimingPresent(25), rfSignalRequestPresent(26), partialCurbIntrusion(27), taperToLeft(28), taperToRight(29), taperToCenterLine(30), parallelParking(31), headInParking(32), freeParking(33), timeRestrictionsOnParking(34), costToPark(35), midBlockCurbPresent(36), unEvenPavementPresent(37), ... }
*/
struct EXTERN SegmentAttributeLL {
   enum Root {
      reserved = 0,
      doNotBlock = 1,
      whiteLine = 2,
      mergingLaneLeft = 3,
      mergingLaneRight = 4,
      curbOnLeft = 5,
      curbOnRight = 6,
      loadingzoneOnLeft = 7,
      loadingzoneOnRight = 8,
      turnOutPointOnLeft = 9,
      turnOutPointOnRight = 10,
      adjacentParkingOnLeft = 11,
      adjacentParkingOnRight = 12,
      adjacentBikeLaneOnLeft = 13,
      adjacentBikeLaneOnRight = 14,
      sharedBikeLane = 15,
      bikeBoxInFront = 16,
      transitStopOnLeft = 17,
      transitStopOnRight = 18,
      transitStopInLane = 19,
      sharedWithTrackedVehicle = 20,
      safeIsland = 21,
      lowCurbsPresent = 22,
      rumbleStripPresent = 23,
      audibleSignalingPresent = 24,
      adaptiveTimingPresent = 25,
      rfSignalRequestPresent = 26,
      partialCurbIntrusion = 27,
      taperToLeft = 28,
      taperToRight = 29,
      taperToCenterLine = 30,
      parallelParking = 31,
      headInParking = 32,
      freeParking = 33,
      timeRestrictionsOnParking = 34,
      costToPark = 35,
      midBlockCurbPresent = 36,
      unEvenPavementPresent = 37
   } ;
} ;

typedef OSUINT32 ASN1T_SegmentAttributeLL;

EXTERN int asn1PE_SegmentAttributeLL (OSCTXT* pctxt, ASN1T_SegmentAttributeLL value);

EXTERN int asn1PD_SegmentAttributeLL (OSCTXT* pctxt, ASN1T_SegmentAttributeLL* pvalue);

EXTERN int XmlEnc_SegmentAttributeLL (OSCTXT* pctxt, 
   ASN1T_SegmentAttributeLL value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SegmentAttributeLL (OSCTXT* pctxt, 
   ASN1T_SegmentAttributeLL* pvalue);

EXTERN int asn1JsonEnc_SegmentAttributeLL (OSCTXT *pctxt, ASN1T_SegmentAttributeLL *pvalue);

EXTERN int asn1JsonDec_SegmentAttributeLL (OSCTXT *pctxt, ASN1T_SegmentAttributeLL *pvalue);

EXTERN int asn1PrtToStrm_SegmentAttributeLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_SegmentAttributeLL* pvalue);

EXTERN ASN1T_SegmentAttributeLL* 
   new_ASN1T_SegmentAttributeLL (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_SegmentAttributeLL_ENUMTAB[];
#define ASN1T_SegmentAttributeLL_ENUMTABSIZE 38

EXTERN const OSUTF8CHAR* ASN1T_SegmentAttributeLL_ToString (OSINT32 value);

EXTERN int ASN1T_SegmentAttributeLL_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_SegmentAttributeLL* pvalue);

EXTERN int ASN1T_SegmentAttributeLL_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_SegmentAttributeLL* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  SegmentAttributeLLList                                    */
/*                                                            */
/**************************************************************/
/*
SegmentAttributeLLList ::= SEQUENCE (SIZE (1..8)) OF SegmentAttributeLL
*/
typedef struct EXTERN ASN1T_SegmentAttributeLLList {
   OSUINT8 n;
   ASN1T_SegmentAttributeLL elem[8];
   ASN1T_SegmentAttributeLLList () : n(0) {}
} ASN1T_SegmentAttributeLLList;

class EXTERN ASN1C_SegmentAttributeLLList :
public ASN1CType
{
protected:
   ASN1T_SegmentAttributeLLList& msgData;
public:
   /**
    * Control class: ASN1C_SegmentAttributeLLList
    * Data class:    ASN1T_SegmentAttributeLLList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SegmentAttributeLLList (ASN1T_SegmentAttributeLLList& data);

   /**
    * Control class: ASN1C_SegmentAttributeLLList<br/>
    * Data class: ASN1T_SegmentAttributeLLList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SegmentAttributeLLList (OSRTMessageBufferIF& msgBuf
      , ASN1T_SegmentAttributeLLList& data);

   /**
    * Control class: ASN1C_SegmentAttributeLLList<br/>
    * Data class: ASN1T_SegmentAttributeLLList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SegmentAttributeLLList (ASN1CType& ccobj
      , ASN1T_SegmentAttributeLLList& data);

   virtual ~ASN1C_SegmentAttributeLLList () {}

private:
   ASN1C_SegmentAttributeLLList& operator= (const ASN1C_SegmentAttributeLLList&) {return *this;}
} ;

EXTERN int asn1PE_SegmentAttributeLLList (OSCTXT* pctxt, ASN1T_SegmentAttributeLLList* pvalue);

EXTERN int asn1PD_SegmentAttributeLLList (OSCTXT* pctxt, ASN1T_SegmentAttributeLLList* pvalue);

EXTERN int XmlEnc_SegmentAttributeLLList (OSCTXT* pctxt, 
   ASN1T_SegmentAttributeLLList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SegmentAttributeLLList (OSCTXT* pctxt, 
   ASN1T_SegmentAttributeLLList* pvalue);

EXTERN int asn1JsonEnc_SegmentAttributeLLList (OSCTXT *pctxt, ASN1T_SegmentAttributeLLList *pvalue);

EXTERN int asn1JsonDec_SegmentAttributeLLList (OSCTXT *pctxt, ASN1T_SegmentAttributeLLList *pvalue);

EXTERN int asn1PrtToStrm_SegmentAttributeLLList (OSCTXT *pctxt, 
   const char* name, const ASN1T_SegmentAttributeLLList* pvalue);

EXTERN int asn1Init_SegmentAttributeLLList (ASN1T_SegmentAttributeLLList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetLL_regional_element                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NodeAttributeSetLL'
*/
struct EXTERN ASN1T_NodeAttributeSetLL_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_NodeAttributeSetLL_regional_element (OSCTXT* pctxt, ASN1T_NodeAttributeSetLL_regional_element* pvalue);

EXTERN int asn1PD_NodeAttributeSetLL_regional_element (OSCTXT* pctxt, ASN1T_NodeAttributeSetLL_regional_element* pvalue);

EXTERN int XmlEnc_NodeAttributeSetLL_regional_element (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetLL_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeSetLL_regional_element (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetLL_regional_element* pvalue);

EXTERN int asn1JsonEnc_NodeAttributeSetLL_regional_element (OSCTXT *pctxt, ASN1T_NodeAttributeSetLL_regional_element *pvalue);

EXTERN int asn1JsonDec_NodeAttributeSetLL_regional_element (OSCTXT *pctxt, ASN1T_NodeAttributeSetLL_regional_element *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetLL_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeSetLL_regional_element* pvalue);

EXTERN ASN1T_NodeAttributeSetLL_regional_element* 
   new_ASN1T_NodeAttributeSetLL_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_NodeAttributeSetLL_regional_element (
   ASN1T_NodeAttributeSetLL_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeAttributeSetLL_regional_element (OSCTXT *pctxt, 
   ASN1T_NodeAttributeSetLL_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetLL_regional                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NodeAttributeSetLL'
*/
/* List of ASN1T_NodeAttributeSetLL_regional_element */
typedef ASN1TSeqOfList ASN1T_NodeAttributeSetLL_regional;

class EXTERN ASN1C_NodeAttributeSetLL_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_NodeAttributeSetLL_regional& msgData;
public:
   /**
    * Control class: ASN1C_NodeAttributeSetLL_regional
    * Data class:    ASN1T_NodeAttributeSetLL_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_NodeAttributeSetLL_regional (ASN1T_NodeAttributeSetLL_regional& data);

   /**
    * Control class: ASN1C_NodeAttributeSetLL_regional<br/>
    * Data class: ASN1T_NodeAttributeSetLL_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_NodeAttributeSetLL_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_NodeAttributeSetLL_regional& data);

   /**
    * Control class: ASN1C_NodeAttributeSetLL_regional<br/>
    * Data class: ASN1T_NodeAttributeSetLL_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_NodeAttributeSetLL_regional (ASN1CType& ccobj
      , ASN1T_NodeAttributeSetLL_regional& data);

   virtual ~ASN1C_NodeAttributeSetLL_regional () {}

   /**
    * Data class: ASN1T_NodeAttributeSetLL_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_NodeAttributeSetLL_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_NodeAttributeSetLL_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_NodeAttributeSetLL_regional_element* NewElement ();

   /**
    * Data class: ASN1T_NodeAttributeSetLL_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_NodeAttributeSetLL_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_NodeAttributeSetLL_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_NodeAttributeSetLL_regional* pmatches);

private:
   ASN1C_NodeAttributeSetLL_regional& operator= (const ASN1C_NodeAttributeSetLL_regional&) {return *this;}
} ;

EXTERN int asn1PE_NodeAttributeSetLL_regional (OSCTXT* pctxt, ASN1T_NodeAttributeSetLL_regional* pvalue);

EXTERN int asn1PD_NodeAttributeSetLL_regional (OSCTXT* pctxt, ASN1T_NodeAttributeSetLL_regional* pvalue);

EXTERN int XmlEnc_NodeAttributeSetLL_regional (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetLL_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeSetLL_regional (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetLL_regional* pvalue);

EXTERN int asn1JsonEnc_NodeAttributeSetLL_regional (OSCTXT *pctxt, ASN1T_NodeAttributeSetLL_regional *pvalue);

EXTERN int asn1JsonDec_NodeAttributeSetLL_regional (OSCTXT *pctxt, ASN1T_NodeAttributeSetLL_regional *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetLL_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeSetLL_regional* pvalue);

EXTERN int asn1Init_NodeAttributeSetLL_regional (
   ASN1T_NodeAttributeSetLL_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeAttributeSetLL_regional (OSCTXT *pctxt, 
   ASN1T_NodeAttributeSetLL_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetLL                                        */
/*                                                            */
/**************************************************************/
/*
NodeAttributeSetLL ::= SEQUENCE {
   localNode [0] NodeAttributeLLList OPTIONAL,
                -- Attribute states which pertain to this node point
   disabled [1] SegmentAttributeLLList OPTIONAL,
                -- Attribute states which are disabled at this node point
   enabled [2] SegmentAttributeLLList OPTIONAL,
                -- Attribute states which are enabled at this node point
                -- and which remain enabled until disabled or the lane ends
   data [3] LaneDataAttributeList OPTIONAL,
                -- Attributes which require an additional data values
                -- some of these are local to the node point, while others
                -- persist with the provided values until changed
                -- and this is indicated in each entry
   dWidth [4] Offset-B10 OPTIONAL,
                -- A value added to the current lane width
                -- at this node and from this node onwards, in 1cm steps
                -- lane width between nodes are a linear taper between pts
                -- the value of zero shall not be sent here
   dElevation [5] Offset-B10 OPTIONAL,
                -- A value added to the current Elevation 
                -- at this node from this node onwards, in 10cm steps
                -- elevations between nodes are a linear taper between pts
                -- the value of zero shall not be sent here
   regional [6] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-NodeAttributeSetLL}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-NodeAttributeSetLL}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_NodeAttributeSetLL {
   struct {
      unsigned localNodePresent : 1;
      unsigned disabledPresent : 1;
      unsigned enabledPresent : 1;
      unsigned dataPresent : 1;
      unsigned dWidthPresent : 1;
      unsigned dElevationPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_NodeAttributeLLList localNode;
   ASN1T_SegmentAttributeLLList disabled;
   ASN1T_SegmentAttributeLLList enabled;
   ASN1TSeqOfList data;
   OSINT16 dWidth;
   OSINT16 dElevation;
   ASN1T_NodeAttributeSetLL_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_NodeAttributeSetLL ();
} ;

EXTERN int asn1PE_NodeAttributeSetLL (OSCTXT* pctxt, ASN1T_NodeAttributeSetLL* pvalue);

EXTERN int asn1PD_NodeAttributeSetLL (OSCTXT* pctxt, ASN1T_NodeAttributeSetLL* pvalue);

EXTERN int XmlEnc_NodeAttributeSetLL (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetLL* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeSetLL (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetLL* pvalue);

EXTERN int asn1JsonEnc_NodeAttributeSetLL (OSCTXT *pctxt, ASN1T_NodeAttributeSetLL *pvalue);

EXTERN int asn1JsonDec_NodeAttributeSetLL (OSCTXT *pctxt, ASN1T_NodeAttributeSetLL *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeSetLL* pvalue);

EXTERN ASN1T_NodeAttributeSetLL* 
   new_ASN1T_NodeAttributeSetLL (ASN1CType& ccobj);

EXTERN int asn1Init_NodeAttributeSetLL (ASN1T_NodeAttributeSetLL* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeAttributeSetLL (OSCTXT *pctxt, 
   ASN1T_NodeAttributeSetLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeLL                                                    */
/*                                                            */
/**************************************************************/
/*
NodeLL ::= SEQUENCE {
   delta [0] EXPLICIT NodeOffsetPointLL,
               -- A choice of which Lat,Lon offset value to use  
               -- this includes various delta values as well a regional choices
   attributes [1] NodeAttributeSetLL OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_NodeLL {
   struct {
      unsigned attributesPresent : 1;
   } m;
   ASN1T_NodeOffsetPointLL delta;
   ASN1T_NodeAttributeSetLL attributes;
   ASN1TSeqExt extElem1;
   ASN1T_NodeLL ();
} ;

EXTERN int asn1PE_NodeLL (OSCTXT* pctxt, ASN1T_NodeLL* pvalue);

EXTERN int asn1PD_NodeLL (OSCTXT* pctxt, ASN1T_NodeLL* pvalue);

EXTERN int XmlEnc_NodeLL (OSCTXT* pctxt, ASN1T_NodeLL* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeLL (OSCTXT* pctxt, ASN1T_NodeLL* pvalue);

EXTERN int asn1JsonEnc_NodeLL (OSCTXT *pctxt, ASN1T_NodeLL *pvalue);

EXTERN int asn1JsonDec_NodeLL (OSCTXT *pctxt, ASN1T_NodeLL *pvalue);

EXTERN int asn1PrtToStrm_NodeLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeLL* pvalue);

EXTERN ASN1T_NodeLL* new_ASN1T_NodeLL (ASN1CType& ccobj);

EXTERN int asn1Init_NodeLL (ASN1T_NodeLL* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeLL (OSCTXT *pctxt, ASN1T_NodeLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeSetLL                                                 */
/*                                                            */
/**************************************************************/
/*
NodeSetLL ::= SEQUENCE (SIZE (2..63)) OF NodeLL
*/
/* List of ASN1T_NodeLL */
typedef ASN1TSeqOfList ASN1T_NodeSetLL;

class EXTERN ASN1C_NodeSetLL :
public ASN1CSeqOfList
{
protected:
   ASN1T_NodeSetLL& msgData;
public:
   /**
    * Control class: ASN1C_NodeSetLL
    * Data class:    ASN1T_NodeSetLL
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_NodeSetLL (ASN1T_NodeSetLL& data);

   /**
    * Control class: ASN1C_NodeSetLL<br/>
    * Data class: ASN1T_NodeSetLL<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_NodeSetLL (OSRTMessageBufferIF& msgBuf, ASN1T_NodeSetLL& data);

   /**
    * Control class: ASN1C_NodeSetLL<br/>
    * Data class: ASN1T_NodeSetLL<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_NodeSetLL (ASN1CType& ccobj, ASN1T_NodeSetLL& data);

   virtual ~ASN1C_NodeSetLL () {}

   /**
    * Data class: ASN1T_NodeLL<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_NodeLL* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_NodeLL.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_NodeLL* NewElement ();

   /**
    * Data class: ASN1T_NodeLL.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_NodeLL* AppendNewElement ();

private:
   ASN1C_NodeSetLL& operator= (const ASN1C_NodeSetLL&) {return *this;}
} ;

EXTERN int asn1PE_NodeSetLL (OSCTXT* pctxt, ASN1T_NodeSetLL* pvalue);

EXTERN int asn1PD_NodeSetLL (OSCTXT* pctxt, ASN1T_NodeSetLL* pvalue);

EXTERN int XmlEnc_NodeSetLL (OSCTXT* pctxt, ASN1T_NodeSetLL* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeSetLL (OSCTXT* pctxt, ASN1T_NodeSetLL* pvalue);

EXTERN int asn1JsonEnc_NodeSetLL (OSCTXT *pctxt, ASN1T_NodeSetLL *pvalue);

EXTERN int asn1JsonDec_NodeSetLL (OSCTXT *pctxt, ASN1T_NodeSetLL *pvalue);

EXTERN int asn1PrtToStrm_NodeSetLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeSetLL* pvalue);

EXTERN int asn1Init_NodeSetLL (ASN1T_NodeSetLL* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeSetLL (OSCTXT *pctxt, ASN1T_NodeSetLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeListLL                                                */
/*                                                            */
/**************************************************************/
/*
NodeListLL ::= CHOICE {
   nodes [0] NodeSetLL,
   ...
}
*/
/* Choice tag constants */

#define T_NodeListLL_nodes              1
#define T_NodeListLL_extElem1           2

struct EXTERN ASN1T_NodeListLL {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_NodeSetLL *nodes;
      /* t = 2 */
      ASN1TOpenType *extElem1;
   } u;
   ASN1T_NodeListLL () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_NodeListLL (OSCTXT* pctxt, ASN1T_NodeListLL* pvalue);

EXTERN int asn1PD_NodeListLL (OSCTXT* pctxt, ASN1T_NodeListLL* pvalue);

EXTERN int XmlEnc_NodeListLL (OSCTXT* pctxt, ASN1T_NodeListLL* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeListLL (OSCTXT* pctxt, ASN1T_NodeListLL* pvalue);

EXTERN int asn1JsonEnc_NodeListLL (OSCTXT *pctxt, ASN1T_NodeListLL *pvalue);

EXTERN int asn1JsonDec_NodeListLL (OSCTXT *pctxt, ASN1T_NodeListLL *pvalue);

EXTERN int asn1PrtToStrm_NodeListLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeListLL* pvalue);

EXTERN ASN1T_NodeListLL* new_ASN1T_NodeListLL (ASN1CType& ccobj);

EXTERN int asn1Init_NodeListLL (ASN1T_NodeListLL* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeListLL (OSCTXT *pctxt, ASN1T_NodeListLL* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetSystem_offset                                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'OffsetSystem'
*/
/* Choice tag constants */

#define T_OffsetSystem_offset_xy        1
#define T_OffsetSystem_offset_ll        2

struct EXTERN ASN1T_OffsetSystem_offset {
   OSINT32 t;
   union {
      /* t = 1 */
      struct ASN1T_NodeListXY *xy;
      /* t = 2 */
      ASN1T_NodeListLL *ll;
   } u;
   ASN1T_OffsetSystem_offset () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_OffsetSystem_offset (OSCTXT* pctxt, ASN1T_OffsetSystem_offset* pvalue);

EXTERN int asn1PD_OffsetSystem_offset (OSCTXT* pctxt, ASN1T_OffsetSystem_offset* pvalue);

EXTERN int XmlEnc_OffsetSystem_offset (OSCTXT* pctxt, 
   ASN1T_OffsetSystem_offset* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetSystem_offset (OSCTXT* pctxt, 
   ASN1T_OffsetSystem_offset* pvalue);

EXTERN int asn1JsonEnc_OffsetSystem_offset (OSCTXT *pctxt, ASN1T_OffsetSystem_offset *pvalue);

EXTERN int asn1JsonDec_OffsetSystem_offset (OSCTXT *pctxt, ASN1T_OffsetSystem_offset *pvalue);

EXTERN int asn1PrtToStrm_OffsetSystem_offset (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetSystem_offset* pvalue);

EXTERN ASN1T_OffsetSystem_offset* 
   new_ASN1T_OffsetSystem_offset (ASN1CType& ccobj);

EXTERN int asn1Init_OffsetSystem_offset (ASN1T_OffsetSystem_offset* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_OffsetSystem_offset (OSCTXT *pctxt, 
   ASN1T_OffsetSystem_offset* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetSystem                                              */
/*                                                            */
/**************************************************************/
/*
OffsetSystem ::= SEQUENCE {
   scale [0] Zoom OPTIONAL,
   offset [1] EXPLICIT CHOICE {
      xy [0] EXPLICIT NodeListXY, -- offsets of 1.0 centimeters 
      ll [1] EXPLICIT NodeListLL
   }
}
*/
struct EXTERN ASN1T_OffsetSystem {
   struct {
      unsigned scalePresent : 1;
   } m;
   ASN1T_Zoom scale;
   ASN1T_OffsetSystem_offset offset;
   ASN1T_OffsetSystem ();
} ;

EXTERN int asn1PE_OffsetSystem (OSCTXT* pctxt, ASN1T_OffsetSystem* pvalue);

EXTERN int asn1PD_OffsetSystem (OSCTXT* pctxt, ASN1T_OffsetSystem* pvalue);

EXTERN int XmlEnc_OffsetSystem (OSCTXT* pctxt, ASN1T_OffsetSystem* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetSystem (OSCTXT* pctxt, ASN1T_OffsetSystem* pvalue);

EXTERN int asn1JsonEnc_OffsetSystem (OSCTXT *pctxt, ASN1T_OffsetSystem *pvalue);

EXTERN int asn1JsonDec_OffsetSystem (OSCTXT *pctxt, ASN1T_OffsetSystem *pvalue);

EXTERN int asn1PrtToStrm_OffsetSystem (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetSystem* pvalue);

EXTERN ASN1T_OffsetSystem* new_ASN1T_OffsetSystem (ASN1CType& ccobj);

EXTERN int asn1Init_OffsetSystem (ASN1T_OffsetSystem* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_OffsetSystem (OSCTXT *pctxt, ASN1T_OffsetSystem* pvalue);

/**************************************************************/
/*                                                            */
/*  Radius_B12                                                */
/*                                                            */
/**************************************************************/
/*
Radius-B12 ::= INTEGER (0..4095)
    with the LSB unit value determined elsewhere
    the value 4095 shall be used for unknown

*/
typedef OSUINT16 ASN1T_Radius_B12;

EXTERN int asn1PE_Radius_B12 (OSCTXT* pctxt, ASN1T_Radius_B12 value);

EXTERN int asn1PD_Radius_B12 (OSCTXT* pctxt, ASN1T_Radius_B12* pvalue);

EXTERN int XmlEnc_Radius_B12 (OSCTXT* pctxt, ASN1T_Radius_B12 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Radius_B12 (OSCTXT* pctxt, ASN1T_Radius_B12* pvalue);

EXTERN int asn1JsonEnc_Radius_B12 (OSCTXT *pctxt, ASN1T_Radius_B12 *pvalue);

EXTERN int asn1JsonDec_Radius_B12 (OSCTXT *pctxt, ASN1T_Radius_B12 *pvalue);

EXTERN int asn1PrtToStrm_Radius_B12 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Radius_B12* pvalue);

EXTERN ASN1T_Radius_B12* new_ASN1T_Radius_B12 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DistanceUnits                                             */
/*                                                            */
/**************************************************************/
/*
DistanceUnits ::= ENUMERATED { centimeter(0), cm2-5(1), decimeter(2), meter(3), kilometer(4), foot(5), yard(6), mile(7) }
*/
struct EXTERN DistanceUnits {
   enum Root {
      centimeter = 0,
      cm2_5 = 1,
      decimeter = 2,
      meter = 3,
      kilometer = 4,
      foot = 5,
      yard = 6,
      mile = 7
   } ;
} ;

typedef OSUINT32 ASN1T_DistanceUnits;

EXTERN int asn1PE_DistanceUnits (OSCTXT* pctxt, ASN1T_DistanceUnits value);

EXTERN int asn1PD_DistanceUnits (OSCTXT* pctxt, ASN1T_DistanceUnits* pvalue);

EXTERN int XmlEnc_DistanceUnits (OSCTXT* pctxt, ASN1T_DistanceUnits value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DistanceUnits (OSCTXT* pctxt, ASN1T_DistanceUnits* pvalue);

EXTERN int asn1JsonEnc_DistanceUnits (OSCTXT *pctxt, ASN1T_DistanceUnits *pvalue);

EXTERN int asn1JsonDec_DistanceUnits (OSCTXT *pctxt, ASN1T_DistanceUnits *pvalue);

EXTERN int asn1PrtToStrm_DistanceUnits (OSCTXT *pctxt, 
   const char* name, const ASN1T_DistanceUnits* pvalue);

EXTERN ASN1T_DistanceUnits* new_ASN1T_DistanceUnits (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_DistanceUnits_ENUMTAB[];
#define ASN1T_DistanceUnits_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_DistanceUnits_ToString (OSINT32 value);

EXTERN int ASN1T_DistanceUnits_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_DistanceUnits* pvalue);

EXTERN int ASN1T_DistanceUnits_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_DistanceUnits* pvalue);

/**************************************************************/
/*                                                            */
/*  Circle                                                    */
/*                                                            */
/**************************************************************/
/*
Circle ::= SEQUENCE {
   center [0] Position3D,
   radius [1] Radius-B12,
   units [2] DistanceUnits
}
*/
struct EXTERN ASN1T_Circle {
   struct ASN1T_Position3D *center;
   ASN1T_Radius_B12 radius;
   ASN1T_DistanceUnits units;
   ASN1T_Circle ();
} ;

EXTERN int asn1PE_Circle (OSCTXT* pctxt, ASN1T_Circle* pvalue);

EXTERN int asn1PD_Circle (OSCTXT* pctxt, ASN1T_Circle* pvalue);

EXTERN int XmlEnc_Circle (OSCTXT* pctxt, ASN1T_Circle* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Circle (OSCTXT* pctxt, ASN1T_Circle* pvalue);

EXTERN int asn1JsonEnc_Circle (OSCTXT *pctxt, ASN1T_Circle *pvalue);

EXTERN int asn1JsonDec_Circle (OSCTXT *pctxt, ASN1T_Circle *pvalue);

EXTERN int asn1PrtToStrm_Circle (OSCTXT *pctxt, 
   const char* name, const ASN1T_Circle* pvalue);

EXTERN ASN1T_Circle* new_ASN1T_Circle (ASN1CType& ccobj);

EXTERN int asn1Init_Circle (ASN1T_Circle* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_Circle (OSCTXT *pctxt, ASN1T_Circle* pvalue);

/**************************************************************/
/*                                                            */
/*  GeometricProjection_regional_element                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeometricProjection'
*/
struct EXTERN ASN1T_GeometricProjection_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_GeometricProjection_regional_element (OSCTXT* pctxt, ASN1T_GeometricProjection_regional_element* pvalue);

EXTERN int asn1PD_GeometricProjection_regional_element (OSCTXT* pctxt, ASN1T_GeometricProjection_regional_element* pvalue);

EXTERN int XmlEnc_GeometricProjection_regional_element (OSCTXT* pctxt, 
   ASN1T_GeometricProjection_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeometricProjection_regional_element (OSCTXT* pctxt, 
   ASN1T_GeometricProjection_regional_element* pvalue);

EXTERN int asn1JsonEnc_GeometricProjection_regional_element (OSCTXT *pctxt, ASN1T_GeometricProjection_regional_element *pvalue);

EXTERN int asn1JsonDec_GeometricProjection_regional_element (OSCTXT *pctxt, ASN1T_GeometricProjection_regional_element *pvalue);

EXTERN int asn1PrtToStrm_GeometricProjection_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeometricProjection_regional_element* pvalue);

EXTERN ASN1T_GeometricProjection_regional_element* 
   new_ASN1T_GeometricProjection_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_GeometricProjection_regional_element (
   ASN1T_GeometricProjection_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeometricProjection_regional_element (OSCTXT *pctxt, 
   ASN1T_GeometricProjection_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  GeometricProjection_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeometricProjection'
*/
/* List of ASN1T_GeometricProjection_regional_element */
typedef ASN1TSeqOfList ASN1T_GeometricProjection_regional;

class EXTERN ASN1C_GeometricProjection_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_GeometricProjection_regional& msgData;
public:
   /**
    * Control class: ASN1C_GeometricProjection_regional
    * Data class:    ASN1T_GeometricProjection_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_GeometricProjection_regional
       (ASN1T_GeometricProjection_regional& data);

   /**
    * Control class: ASN1C_GeometricProjection_regional<br/>
    * Data class: ASN1T_GeometricProjection_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_GeometricProjection_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_GeometricProjection_regional& data);

   /**
    * Control class: ASN1C_GeometricProjection_regional<br/>
    * Data class: ASN1T_GeometricProjection_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_GeometricProjection_regional (ASN1CType& ccobj
      , ASN1T_GeometricProjection_regional& data);

   virtual ~ASN1C_GeometricProjection_regional () {}

   /**
    * Data class: ASN1T_GeometricProjection_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GeometricProjection_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GeometricProjection_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GeometricProjection_regional_element* NewElement ();

   /**
    * Data class: ASN1T_GeometricProjection_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GeometricProjection_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_GeometricProjection_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_GeometricProjection_regional* pmatches);

private:
   ASN1C_GeometricProjection_regional& operator= (const ASN1C_GeometricProjection_regional&) {return *this;}
} ;

EXTERN int asn1PE_GeometricProjection_regional (OSCTXT* pctxt, ASN1T_GeometricProjection_regional* pvalue);

EXTERN int asn1PD_GeometricProjection_regional (OSCTXT* pctxt, ASN1T_GeometricProjection_regional* pvalue);

EXTERN int XmlEnc_GeometricProjection_regional (OSCTXT* pctxt, 
   ASN1T_GeometricProjection_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeometricProjection_regional (OSCTXT* pctxt, 
   ASN1T_GeometricProjection_regional* pvalue);

EXTERN int asn1JsonEnc_GeometricProjection_regional (OSCTXT *pctxt, ASN1T_GeometricProjection_regional *pvalue);

EXTERN int asn1JsonDec_GeometricProjection_regional (OSCTXT *pctxt, ASN1T_GeometricProjection_regional *pvalue);

EXTERN int asn1PrtToStrm_GeometricProjection_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeometricProjection_regional* pvalue);

EXTERN int asn1Init_GeometricProjection_regional (
   ASN1T_GeometricProjection_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeometricProjection_regional (OSCTXT *pctxt, 
   ASN1T_GeometricProjection_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  GeometricProjection                                       */
/*                                                            */
/**************************************************************/
/*
GeometricProjection ::= SEQUENCE {
   direction [0] HeadingSlice,
                    -- field of view over which this applies,
   extent [1] Extent OPTIONAL,
                    -- the spatial distance over which this
                    -- message applies and should be presented
   laneWidth [2] LaneWidth OPTIONAL, -- used when a width is needed
   circle [3] Circle, -- A point and radius
   regional [4] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-GeometricProjection}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-GeometricProjection}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_GeometricProjection {
   struct {
      unsigned extentPresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   struct ASN1T_HeadingSlice *direction;
   OSUINT32 extent;
   OSUINT16 laneWidth;
   ASN1T_Circle circle;
   ASN1T_GeometricProjection_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_GeometricProjection ();
} ;

EXTERN int asn1PE_GeometricProjection (OSCTXT* pctxt, ASN1T_GeometricProjection* pvalue);

EXTERN int asn1PD_GeometricProjection (OSCTXT* pctxt, ASN1T_GeometricProjection* pvalue);

EXTERN int XmlEnc_GeometricProjection (OSCTXT* pctxt, 
   ASN1T_GeometricProjection* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeometricProjection (OSCTXT* pctxt, 
   ASN1T_GeometricProjection* pvalue);

EXTERN int asn1JsonEnc_GeometricProjection (OSCTXT *pctxt, ASN1T_GeometricProjection *pvalue);

EXTERN int asn1JsonDec_GeometricProjection (OSCTXT *pctxt, ASN1T_GeometricProjection *pvalue);

EXTERN int asn1PrtToStrm_GeometricProjection (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeometricProjection* pvalue);

EXTERN ASN1T_GeometricProjection* 
   new_ASN1T_GeometricProjection (ASN1CType& ccobj);

EXTERN int asn1Init_GeometricProjection (ASN1T_GeometricProjection* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeometricProjection (OSCTXT *pctxt, 
   ASN1T_GeometricProjection* pvalue);

/**************************************************************/
/*                                                            */
/*  ShapePointSet                                             */
/*                                                            */
/**************************************************************/
/*
ShapePointSet ::= SEQUENCE {
   anchor [0] Position3D OPTIONAL,
   laneWidth [1] LaneWidth OPTIONAL,
   directionality [2] DirectionOfUse OPTIONAL,
   nodeList [3] EXPLICIT NodeListXY,
   ...
}
*/
struct EXTERN ASN1T_ShapePointSet {
   struct {
      unsigned anchorPresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned directionalityPresent : 1;
   } m;
   struct ASN1T_Position3D *anchor;
   OSUINT16 laneWidth;
   ASN1T_DirectionOfUse directionality;
   struct ASN1T_NodeListXY *nodeList;
   ASN1TSeqExt extElem1;
   ASN1T_ShapePointSet ();
} ;

EXTERN int asn1PE_ShapePointSet (OSCTXT* pctxt, ASN1T_ShapePointSet* pvalue);

EXTERN int asn1PD_ShapePointSet (OSCTXT* pctxt, ASN1T_ShapePointSet* pvalue);

EXTERN int XmlEnc_ShapePointSet (OSCTXT* pctxt, ASN1T_ShapePointSet* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ShapePointSet (OSCTXT* pctxt, ASN1T_ShapePointSet* pvalue);

EXTERN int asn1JsonEnc_ShapePointSet (OSCTXT *pctxt, ASN1T_ShapePointSet *pvalue);

EXTERN int asn1JsonDec_ShapePointSet (OSCTXT *pctxt, ASN1T_ShapePointSet *pvalue);

EXTERN int asn1PrtToStrm_ShapePointSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_ShapePointSet* pvalue);

EXTERN ASN1T_ShapePointSet* new_ASN1T_ShapePointSet (ASN1CType& ccobj);

EXTERN int asn1Init_ShapePointSet (ASN1T_ShapePointSet* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ShapePointSet (OSCTXT *pctxt, ASN1T_ShapePointSet* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionOffsets                                             */
/*                                                            */
/**************************************************************/
/*
RegionOffsets ::= SEQUENCE {
   xOffset [0] OffsetLL-B16,
   yOffset [1] OffsetLL-B16,
   zOffset [2] OffsetLL-B16 OPTIONAL
            -- all in signed values where 
            -- the LSB is in units of 1 meter  
}
*/
struct EXTERN ASN1T_RegionOffsets {
   struct {
      unsigned zOffsetPresent : 1;
   } m;
   ASN1T_OffsetLL_B16 xOffset;
   ASN1T_OffsetLL_B16 yOffset;
   ASN1T_OffsetLL_B16 zOffset;
   ASN1T_RegionOffsets ();
} ;

EXTERN int asn1PE_RegionOffsets (OSCTXT* pctxt, ASN1T_RegionOffsets* pvalue);

EXTERN int asn1PD_RegionOffsets (OSCTXT* pctxt, ASN1T_RegionOffsets* pvalue);

EXTERN int XmlEnc_RegionOffsets (OSCTXT* pctxt, ASN1T_RegionOffsets* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RegionOffsets (OSCTXT* pctxt, ASN1T_RegionOffsets* pvalue);

EXTERN int asn1JsonEnc_RegionOffsets (OSCTXT *pctxt, ASN1T_RegionOffsets *pvalue);

EXTERN int asn1JsonDec_RegionOffsets (OSCTXT *pctxt, ASN1T_RegionOffsets *pvalue);

EXTERN int asn1PrtToStrm_RegionOffsets (OSCTXT *pctxt, 
   const char* name, const ASN1T_RegionOffsets* pvalue);

EXTERN ASN1T_RegionOffsets* new_ASN1T_RegionOffsets (ASN1CType& ccobj);

EXTERN int asn1Init_RegionOffsets (ASN1T_RegionOffsets* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  RegionList                                                */
/*                                                            */
/**************************************************************/
/*
RegionList ::= SEQUENCE (SIZE (1..64)) OF RegionOffsets
    the Position3D ref point (starting point or anchor)
    is found in the outer object.

*/
/* List of ASN1T_RegionOffsets */
typedef ASN1TSeqOfList ASN1T_RegionList;

class EXTERN ASN1C_RegionList :
public ASN1CSeqOfList
{
protected:
   ASN1T_RegionList& msgData;
public:
   /**
    * Control class: ASN1C_RegionList
    * Data class:    ASN1T_RegionList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RegionList (ASN1T_RegionList& data);

   /**
    * Control class: ASN1C_RegionList<br/>
    * Data class: ASN1T_RegionList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RegionList (OSRTMessageBufferIF& msgBuf, ASN1T_RegionList& data);

   /**
    * Control class: ASN1C_RegionList<br/>
    * Data class: ASN1T_RegionList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RegionList (ASN1CType& ccobj, ASN1T_RegionList& data);

   virtual ~ASN1C_RegionList () {}

   /**
    * Data class: ASN1T_RegionOffsets<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RegionOffsets* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RegionOffsets.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RegionOffsets* NewElement ();

   /**
    * Data class: ASN1T_RegionOffsets.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RegionOffsets* AppendNewElement ();

private:
   ASN1C_RegionList& operator= (const ASN1C_RegionList&) {return *this;}
} ;

EXTERN int asn1PE_RegionList (OSCTXT* pctxt, ASN1T_RegionList* pvalue);

EXTERN int asn1PD_RegionList (OSCTXT* pctxt, ASN1T_RegionList* pvalue);

EXTERN int XmlEnc_RegionList (OSCTXT* pctxt, ASN1T_RegionList* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RegionList (OSCTXT* pctxt, ASN1T_RegionList* pvalue);

EXTERN int asn1JsonEnc_RegionList (OSCTXT *pctxt, ASN1T_RegionList *pvalue);

EXTERN int asn1JsonDec_RegionList (OSCTXT *pctxt, ASN1T_RegionList *pvalue);

EXTERN int asn1PrtToStrm_RegionList (OSCTXT *pctxt, 
   const char* name, const ASN1T_RegionList* pvalue);

EXTERN int asn1Init_RegionList (ASN1T_RegionList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RegionList (OSCTXT *pctxt, ASN1T_RegionList* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionPointSet                                            */
/*                                                            */
/**************************************************************/
/*
RegionPointSet ::= SEQUENCE {
   anchor [0] Position3D OPTIONAL,
   scale [1] Zoom OPTIONAL,
   nodeList [2] RegionList,
   ...
}
*/
struct EXTERN ASN1T_RegionPointSet {
   struct {
      unsigned anchorPresent : 1;
      unsigned scalePresent : 1;
   } m;
   struct ASN1T_Position3D *anchor;
   ASN1T_Zoom scale;
   ASN1T_RegionList nodeList;
   ASN1TSeqExt extElem1;
   ASN1T_RegionPointSet ();
} ;

EXTERN int asn1PE_RegionPointSet (OSCTXT* pctxt, ASN1T_RegionPointSet* pvalue);

EXTERN int asn1PD_RegionPointSet (OSCTXT* pctxt, ASN1T_RegionPointSet* pvalue);

EXTERN int XmlEnc_RegionPointSet (OSCTXT* pctxt, ASN1T_RegionPointSet* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RegionPointSet (OSCTXT* pctxt, ASN1T_RegionPointSet* pvalue)
   ;

EXTERN int asn1JsonEnc_RegionPointSet (OSCTXT *pctxt, ASN1T_RegionPointSet *pvalue);

EXTERN int asn1JsonDec_RegionPointSet (OSCTXT *pctxt, ASN1T_RegionPointSet *pvalue);

EXTERN int asn1PrtToStrm_RegionPointSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_RegionPointSet* pvalue);

EXTERN ASN1T_RegionPointSet* new_ASN1T_RegionPointSet (ASN1CType& ccobj);

EXTERN int asn1Init_RegionPointSet (ASN1T_RegionPointSet* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RegionPointSet (OSCTXT *pctxt, ASN1T_RegionPointSet* pvalue);

/**************************************************************/
/*                                                            */
/*  ValidRegion_area                                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ValidRegion'
*/
/* Choice tag constants */

#define T_ValidRegion_area_shapePointSet 1
#define T_ValidRegion_area_circle       2
#define T_ValidRegion_area_regionPointSet 3

struct EXTERN ASN1T_ValidRegion_area {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ShapePointSet *shapePointSet;
      /* t = 2 */
      ASN1T_Circle *circle;
      /* t = 3 */
      ASN1T_RegionPointSet *regionPointSet;
   } u;
   ASN1T_ValidRegion_area () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_ValidRegion_area (OSCTXT* pctxt, ASN1T_ValidRegion_area* pvalue);

EXTERN int asn1PD_ValidRegion_area (OSCTXT* pctxt, ASN1T_ValidRegion_area* pvalue);

EXTERN int XmlEnc_ValidRegion_area (OSCTXT* pctxt, 
   ASN1T_ValidRegion_area* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ValidRegion_area (OSCTXT* pctxt, 
   ASN1T_ValidRegion_area* pvalue);

EXTERN int asn1JsonEnc_ValidRegion_area (OSCTXT *pctxt, ASN1T_ValidRegion_area *pvalue);

EXTERN int asn1JsonDec_ValidRegion_area (OSCTXT *pctxt, ASN1T_ValidRegion_area *pvalue);

EXTERN int asn1PrtToStrm_ValidRegion_area (OSCTXT *pctxt, 
   const char* name, const ASN1T_ValidRegion_area* pvalue);

EXTERN ASN1T_ValidRegion_area* new_ASN1T_ValidRegion_area (ASN1CType& ccobj);

EXTERN int asn1Init_ValidRegion_area (ASN1T_ValidRegion_area* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ValidRegion_area (OSCTXT *pctxt, ASN1T_ValidRegion_area* pvalue);

/**************************************************************/
/*                                                            */
/*  ValidRegion                                               */
/*                                                            */
/**************************************************************/
/*
ValidRegion ::= SEQUENCE {
   direction [0] HeadingSlice,
                     -- field of view over which this applies,
   extent [1] Extent OPTIONAL,
                     -- the spatial distance over which this
                     -- message applies and should be presented 
                     -- to the driver
   area [2] EXPLICIT CHOICE {
      shapePointSet [0] ShapePointSet,
                     -- A short road segment
      circle [1] Circle,
                     -- A point and radius
      regionPointSet [2] RegionPointSet
   }
}
*/
struct EXTERN ASN1T_ValidRegion {
   struct {
      unsigned extentPresent : 1;
   } m;
   struct ASN1T_HeadingSlice *direction;
   OSUINT32 extent;
   ASN1T_ValidRegion_area area;
   ASN1T_ValidRegion ();
} ;

EXTERN int asn1PE_ValidRegion (OSCTXT* pctxt, ASN1T_ValidRegion* pvalue);

EXTERN int asn1PD_ValidRegion (OSCTXT* pctxt, ASN1T_ValidRegion* pvalue);

EXTERN int XmlEnc_ValidRegion (OSCTXT* pctxt, ASN1T_ValidRegion* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ValidRegion (OSCTXT* pctxt, ASN1T_ValidRegion* pvalue);

EXTERN int asn1JsonEnc_ValidRegion (OSCTXT *pctxt, ASN1T_ValidRegion *pvalue);

EXTERN int asn1JsonDec_ValidRegion (OSCTXT *pctxt, ASN1T_ValidRegion *pvalue);

EXTERN int asn1PrtToStrm_ValidRegion (OSCTXT *pctxt, 
   const char* name, const ASN1T_ValidRegion* pvalue);

EXTERN ASN1T_ValidRegion* new_ASN1T_ValidRegion (ASN1CType& ccobj);

EXTERN int asn1Init_ValidRegion (ASN1T_ValidRegion* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ValidRegion (OSCTXT *pctxt, ASN1T_ValidRegion* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath_description                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeographicalPath'
*/
/* Choice tag constants */

#define T_GeographicalPath_description_path 1
#define T_GeographicalPath_description_geometry 2
#define T_GeographicalPath_description_oldRegion 3
#define T_GeographicalPath_description_extElem1 4

struct EXTERN ASN1T_GeographicalPath_description {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_OffsetSystem *path;
      /* t = 2 */
      ASN1T_GeometricProjection *geometry;
      /* t = 3 */
      ASN1T_ValidRegion *oldRegion;
      /* t = 4 */
      ASN1TOpenType *extElem1;
   } u;
   ASN1T_GeographicalPath_description () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_GeographicalPath_description (OSCTXT* pctxt, ASN1T_GeographicalPath_description* pvalue);

EXTERN int asn1PD_GeographicalPath_description (OSCTXT* pctxt, ASN1T_GeographicalPath_description* pvalue);

EXTERN int XmlEnc_GeographicalPath_description (OSCTXT* pctxt, 
   ASN1T_GeographicalPath_description* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeographicalPath_description (OSCTXT* pctxt, 
   ASN1T_GeographicalPath_description* pvalue);

EXTERN int asn1JsonEnc_GeographicalPath_description (OSCTXT *pctxt, ASN1T_GeographicalPath_description *pvalue);

EXTERN int asn1JsonDec_GeographicalPath_description (OSCTXT *pctxt, ASN1T_GeographicalPath_description *pvalue);

EXTERN int asn1PrtToStrm_GeographicalPath_description (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeographicalPath_description* pvalue);

EXTERN ASN1T_GeographicalPath_description* 
   new_ASN1T_GeographicalPath_description (ASN1CType& ccobj);

EXTERN int asn1Init_GeographicalPath_description (
   ASN1T_GeographicalPath_description* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeographicalPath_description (OSCTXT *pctxt, 
   ASN1T_GeographicalPath_description* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath_regional_element                         */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeographicalPath'
*/
struct EXTERN ASN1T_GeographicalPath_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_GeographicalPath_regional_element (OSCTXT* pctxt, ASN1T_GeographicalPath_regional_element* pvalue);

EXTERN int asn1PD_GeographicalPath_regional_element (OSCTXT* pctxt, ASN1T_GeographicalPath_regional_element* pvalue);

EXTERN int XmlEnc_GeographicalPath_regional_element (OSCTXT* pctxt, 
   ASN1T_GeographicalPath_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeographicalPath_regional_element (OSCTXT* pctxt, 
   ASN1T_GeographicalPath_regional_element* pvalue);

EXTERN int asn1JsonEnc_GeographicalPath_regional_element (OSCTXT *pctxt, ASN1T_GeographicalPath_regional_element *pvalue);

EXTERN int asn1JsonDec_GeographicalPath_regional_element (OSCTXT *pctxt, ASN1T_GeographicalPath_regional_element *pvalue);

EXTERN int asn1PrtToStrm_GeographicalPath_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeographicalPath_regional_element* pvalue);

EXTERN ASN1T_GeographicalPath_regional_element* 
   new_ASN1T_GeographicalPath_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_GeographicalPath_regional_element (
   ASN1T_GeographicalPath_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeographicalPath_regional_element (OSCTXT *pctxt, 
   ASN1T_GeographicalPath_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath_regional                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeographicalPath'
*/
/* List of ASN1T_GeographicalPath_regional_element */
typedef ASN1TSeqOfList ASN1T_GeographicalPath_regional;

class EXTERN ASN1C_GeographicalPath_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_GeographicalPath_regional& msgData;
public:
   /**
    * Control class: ASN1C_GeographicalPath_regional
    * Data class:    ASN1T_GeographicalPath_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_GeographicalPath_regional (ASN1T_GeographicalPath_regional& data);

   /**
    * Control class: ASN1C_GeographicalPath_regional<br/>
    * Data class: ASN1T_GeographicalPath_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_GeographicalPath_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_GeographicalPath_regional& data);

   /**
    * Control class: ASN1C_GeographicalPath_regional<br/>
    * Data class: ASN1T_GeographicalPath_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_GeographicalPath_regional (ASN1CType& ccobj
      , ASN1T_GeographicalPath_regional& data);

   virtual ~ASN1C_GeographicalPath_regional () {}

   /**
    * Data class: ASN1T_GeographicalPath_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GeographicalPath_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GeographicalPath_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GeographicalPath_regional_element* NewElement ();

   /**
    * Data class: ASN1T_GeographicalPath_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GeographicalPath_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_GeographicalPath_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_GeographicalPath_regional* pmatches);

private:
   ASN1C_GeographicalPath_regional& operator= (const ASN1C_GeographicalPath_regional&) {return *this;}
} ;

EXTERN int asn1PE_GeographicalPath_regional (OSCTXT* pctxt, ASN1T_GeographicalPath_regional* pvalue);

EXTERN int asn1PD_GeographicalPath_regional (OSCTXT* pctxt, ASN1T_GeographicalPath_regional* pvalue);

EXTERN int XmlEnc_GeographicalPath_regional (OSCTXT* pctxt, 
   ASN1T_GeographicalPath_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeographicalPath_regional (OSCTXT* pctxt, 
   ASN1T_GeographicalPath_regional* pvalue);

EXTERN int asn1JsonEnc_GeographicalPath_regional (OSCTXT *pctxt, ASN1T_GeographicalPath_regional *pvalue);

EXTERN int asn1JsonDec_GeographicalPath_regional (OSCTXT *pctxt, ASN1T_GeographicalPath_regional *pvalue);

EXTERN int asn1PrtToStrm_GeographicalPath_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeographicalPath_regional* pvalue);

EXTERN int asn1Init_GeographicalPath_regional (
   ASN1T_GeographicalPath_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeographicalPath_regional (OSCTXT *pctxt, 
   ASN1T_GeographicalPath_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath                                          */
/*                                                            */
/**************************************************************/
/*
GeographicalPath ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
   id [1] RoadSegmentReferenceID OPTIONAL,
   anchor [2] Position3D OPTIONAL,
   laneWidth [3] LaneWidth OPTIONAL,
   directionality [4] DirectionOfUse OPTIONAL,
   closedPath [5] BOOLEAN OPTIONAL,
                    -- when true, last point closes to first
   direction [6] HeadingSlice OPTIONAL,
                    -- field of view over which this applies
   description [7] EXPLICIT CHOICE {
      path [0] OffsetSystem,
                   -- The XYZ and LLH system of paths
      geometry [1] GeometricProjection,
                   -- A projected circle from a point
      oldRegion [2] ValidRegion,
      ...
   } OPTIONAL,
   regional [8] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-GeographicalPath}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-GeographicalPath}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_GeographicalPath {
   struct {
      unsigned namePresent : 1;
      unsigned idPresent : 1;
      unsigned anchorPresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned directionalityPresent : 1;
      unsigned closedPathPresent : 1;
      unsigned directionPresent : 1;
      unsigned descriptionPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   const char* name;
   struct ASN1T_RoadSegmentReferenceID *id;
   struct ASN1T_Position3D *anchor;
   OSUINT16 laneWidth;
   ASN1T_DirectionOfUse directionality;
   OSBOOL closedPath;
   struct ASN1T_HeadingSlice *direction;
   ASN1T_GeographicalPath_description description;
   ASN1T_GeographicalPath_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_GeographicalPath ();
} ;

EXTERN int asn1PE_GeographicalPath (OSCTXT* pctxt, ASN1T_GeographicalPath* pvalue);

EXTERN int asn1PD_GeographicalPath (OSCTXT* pctxt, ASN1T_GeographicalPath* pvalue);

EXTERN int XmlEnc_GeographicalPath (OSCTXT* pctxt, 
   ASN1T_GeographicalPath* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeographicalPath (OSCTXT* pctxt, 
   ASN1T_GeographicalPath* pvalue);

EXTERN int asn1JsonEnc_GeographicalPath (OSCTXT *pctxt, ASN1T_GeographicalPath *pvalue);

EXTERN int asn1JsonDec_GeographicalPath (OSCTXT *pctxt, ASN1T_GeographicalPath *pvalue);

EXTERN int asn1PrtToStrm_GeographicalPath (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeographicalPath* pvalue);

EXTERN ASN1T_GeographicalPath* new_ASN1T_GeographicalPath (ASN1CType& ccobj);

EXTERN int asn1Init_GeographicalPath (ASN1T_GeographicalPath* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeographicalPath (OSCTXT *pctxt, ASN1T_GeographicalPath* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame_regions                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerDataFrame'
*/
/* List of ASN1T_GeographicalPath */
typedef ASN1TSeqOfList ASN1T_TravelerDataFrame_regions;

class EXTERN ASN1C_TravelerDataFrame_regions :
public ASN1CSeqOfList
{
protected:
   ASN1T_TravelerDataFrame_regions& msgData;
public:
   /**
    * Control class: ASN1C_TravelerDataFrame_regions
    * Data class:    ASN1T_TravelerDataFrame_regions
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TravelerDataFrame_regions (ASN1T_TravelerDataFrame_regions& data);

   /**
    * Control class: ASN1C_TravelerDataFrame_regions<br/>
    * Data class: ASN1T_TravelerDataFrame_regions<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TravelerDataFrame_regions (OSRTMessageBufferIF& msgBuf
      , ASN1T_TravelerDataFrame_regions& data);

   /**
    * Control class: ASN1C_TravelerDataFrame_regions<br/>
    * Data class: ASN1T_TravelerDataFrame_regions<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_TravelerDataFrame_regions (ASN1CType& ccobj
      , ASN1T_TravelerDataFrame_regions& data);

   virtual ~ASN1C_TravelerDataFrame_regions () {}

   /**
    * Data class: ASN1T_GeographicalPath<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GeographicalPath* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GeographicalPath.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GeographicalPath* NewElement ();

   /**
    * Data class: ASN1T_GeographicalPath.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GeographicalPath* AppendNewElement ();

private:
   ASN1C_TravelerDataFrame_regions& operator= (const ASN1C_TravelerDataFrame_regions&) {return *this;}
} ;

EXTERN int asn1PE_TravelerDataFrame_regions (OSCTXT* pctxt, ASN1T_TravelerDataFrame_regions* pvalue);

EXTERN int asn1PD_TravelerDataFrame_regions (OSCTXT* pctxt, ASN1T_TravelerDataFrame_regions* pvalue);

EXTERN int XmlEnc_TravelerDataFrame_regions (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame_regions* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerDataFrame_regions (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame_regions* pvalue);

EXTERN int asn1JsonEnc_TravelerDataFrame_regions (OSCTXT *pctxt, ASN1T_TravelerDataFrame_regions *pvalue);

EXTERN int asn1JsonDec_TravelerDataFrame_regions (OSCTXT *pctxt, ASN1T_TravelerDataFrame_regions *pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrame_regions (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerDataFrame_regions* pvalue);

EXTERN int asn1Init_TravelerDataFrame_regions (
   ASN1T_TravelerDataFrame_regions* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerDataFrame_regions (OSCTXT *pctxt, 
   ASN1T_TravelerDataFrame_regions* pvalue);

/**************************************************************/
/*                                                            */
/*  ITIStextPhrase                                            */
/*                                                            */
/**************************************************************/
/*
ITIStextPhrase ::= IA5String (SIZE (1..16))
*/
typedef const char* ASN1T_ITIStextPhrase;

EXTERN int asn1PE_ITIStextPhrase (OSCTXT* pctxt, ASN1T_ITIStextPhrase value);

EXTERN int asn1PD_ITIStextPhrase (OSCTXT* pctxt, ASN1T_ITIStextPhrase* pvalue);

EXTERN int XmlEnc_ITIStextPhrase (OSCTXT* pctxt, ASN1T_ITIStextPhrase value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ITIStextPhrase (OSCTXT* pctxt, ASN1T_ITIStextPhrase* pvalue)
   ;

EXTERN int asn1JsonEnc_ITIStextPhrase (OSCTXT *pctxt, ASN1T_ITIStextPhrase value);

EXTERN int asn1JsonDec_ITIStextPhrase (OSCTXT *pctxt, ASN1T_ITIStextPhrase *pvalue);

EXTERN int asn1PrtToStrm_ITIStextPhrase (OSCTXT *pctxt, 
   const char* name, const ASN1T_ITIStextPhrase pvalue);

EXTERN void asn1Free_ITIStextPhrase (OSCTXT *pctxt, ASN1T_ITIStextPhrase pvalue);

/**************************************************************/
/*                                                            */
/*  WorkZone_element_item                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'WorkZone'
*/
/* Choice tag constants */

#define T_WorkZone_element_item_itis    1
#define T_WorkZone_element_item_text    2

struct EXTERN ASN1T_WorkZone_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ITIScodes itis;
      /* t = 2 */
      ASN1T_ITIStextPhrase text;
   } u;
   ASN1T_WorkZone_element_item () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_WorkZone_element_item (OSCTXT* pctxt, ASN1T_WorkZone_element_item* pvalue);

EXTERN int asn1PD_WorkZone_element_item (OSCTXT* pctxt, ASN1T_WorkZone_element_item* pvalue);

EXTERN int XmlEnc_WorkZone_element_item (OSCTXT* pctxt, 
   ASN1T_WorkZone_element_item* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WorkZone_element_item (OSCTXT* pctxt, 
   ASN1T_WorkZone_element_item* pvalue);

EXTERN int asn1JsonEnc_WorkZone_element_item (OSCTXT *pctxt, ASN1T_WorkZone_element_item *pvalue);

EXTERN int asn1JsonDec_WorkZone_element_item (OSCTXT *pctxt, ASN1T_WorkZone_element_item *pvalue);

EXTERN int asn1PrtToStrm_WorkZone_element_item (OSCTXT *pctxt, 
   const char* name, const ASN1T_WorkZone_element_item* pvalue);

EXTERN ASN1T_WorkZone_element_item* 
   new_ASN1T_WorkZone_element_item (ASN1CType& ccobj);

EXTERN int asn1Init_WorkZone_element_item (ASN1T_WorkZone_element_item* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_WorkZone_element_item (OSCTXT *pctxt, 
   ASN1T_WorkZone_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  WorkZone_element                                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'WorkZone'
*/
struct EXTERN ASN1T_WorkZone_element {
   ASN1T_WorkZone_element_item item;
} ;

EXTERN int asn1PE_WorkZone_element (OSCTXT* pctxt, ASN1T_WorkZone_element* pvalue);

EXTERN int asn1PD_WorkZone_element (OSCTXT* pctxt, ASN1T_WorkZone_element* pvalue);

EXTERN int XmlEnc_WorkZone_element (OSCTXT* pctxt, 
   ASN1T_WorkZone_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WorkZone_element (OSCTXT* pctxt, 
   ASN1T_WorkZone_element* pvalue);

EXTERN int asn1JsonEnc_WorkZone_element (OSCTXT *pctxt, ASN1T_WorkZone_element *pvalue);

EXTERN int asn1JsonDec_WorkZone_element (OSCTXT *pctxt, ASN1T_WorkZone_element *pvalue);

EXTERN int asn1PrtToStrm_WorkZone_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_WorkZone_element* pvalue);

EXTERN ASN1T_WorkZone_element* new_ASN1T_WorkZone_element (ASN1CType& ccobj);

EXTERN int asn1Init_WorkZone_element (ASN1T_WorkZone_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_WorkZone_element (OSCTXT *pctxt, ASN1T_WorkZone_element* pvalue);

/**************************************************************/
/*                                                            */
/*  WorkZone                                                  */
/*                                                            */
/**************************************************************/
/*
WorkZone ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] EXPLICIT CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of ASN1T_WorkZone_element */
typedef ASN1TSeqOfList ASN1T_WorkZone;

class EXTERN ASN1C_WorkZone :
public ASN1CSeqOfList
{
protected:
   ASN1T_WorkZone& msgData;
public:
   /**
    * Control class: ASN1C_WorkZone
    * Data class:    ASN1T_WorkZone
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_WorkZone (ASN1T_WorkZone& data);

   /**
    * Control class: ASN1C_WorkZone<br/>
    * Data class: ASN1T_WorkZone<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_WorkZone (OSRTMessageBufferIF& msgBuf, ASN1T_WorkZone& data);

   /**
    * Control class: ASN1C_WorkZone<br/>
    * Data class: ASN1T_WorkZone<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_WorkZone (ASN1CType& ccobj, ASN1T_WorkZone& data);

   virtual ~ASN1C_WorkZone () {}

   /**
    * Data class: ASN1T_WorkZone_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_WorkZone_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_WorkZone_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_WorkZone_element* NewElement ();

   /**
    * Data class: ASN1T_WorkZone_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_WorkZone_element* AppendNewElement ();

private:
   ASN1C_WorkZone& operator= (const ASN1C_WorkZone&) {return *this;}
} ;

EXTERN int asn1PE_WorkZone (OSCTXT* pctxt, ASN1T_WorkZone* pvalue);

EXTERN int asn1PD_WorkZone (OSCTXT* pctxt, ASN1T_WorkZone* pvalue);

EXTERN int XmlEnc_WorkZone (OSCTXT* pctxt, ASN1T_WorkZone* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WorkZone (OSCTXT* pctxt, ASN1T_WorkZone* pvalue);

EXTERN int asn1JsonEnc_WorkZone (OSCTXT *pctxt, ASN1T_WorkZone *pvalue);

EXTERN int asn1JsonDec_WorkZone (OSCTXT *pctxt, ASN1T_WorkZone *pvalue);

EXTERN int asn1PrtToStrm_WorkZone (OSCTXT *pctxt, 
   const char* name, const ASN1T_WorkZone* pvalue);

EXTERN int asn1Init_WorkZone (ASN1T_WorkZone* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_WorkZone (OSCTXT *pctxt, ASN1T_WorkZone* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericSignage_element_item                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericSignage'
*/
/* Choice tag constants */

#define T_GenericSignage_element_item_itis 1
#define T_GenericSignage_element_item_text 2

struct EXTERN ASN1T_GenericSignage_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ITIScodes itis;
      /* t = 2 */
      ASN1T_ITIStextPhrase text;
   } u;
   ASN1T_GenericSignage_element_item () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_GenericSignage_element_item (OSCTXT* pctxt, ASN1T_GenericSignage_element_item* pvalue);

EXTERN int asn1PD_GenericSignage_element_item (OSCTXT* pctxt, ASN1T_GenericSignage_element_item* pvalue);

EXTERN int XmlEnc_GenericSignage_element_item (OSCTXT* pctxt, 
   ASN1T_GenericSignage_element_item* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GenericSignage_element_item (OSCTXT* pctxt, 
   ASN1T_GenericSignage_element_item* pvalue);

EXTERN int asn1JsonEnc_GenericSignage_element_item (OSCTXT *pctxt, ASN1T_GenericSignage_element_item *pvalue);

EXTERN int asn1JsonDec_GenericSignage_element_item (OSCTXT *pctxt, ASN1T_GenericSignage_element_item *pvalue);

EXTERN int asn1PrtToStrm_GenericSignage_element_item (OSCTXT *pctxt, 
   const char* name, const ASN1T_GenericSignage_element_item* pvalue);

EXTERN ASN1T_GenericSignage_element_item* 
   new_ASN1T_GenericSignage_element_item (ASN1CType& ccobj);

EXTERN int asn1Init_GenericSignage_element_item (
   ASN1T_GenericSignage_element_item* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GenericSignage_element_item (OSCTXT *pctxt, 
   ASN1T_GenericSignage_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericSignage_element                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericSignage'
*/
struct EXTERN ASN1T_GenericSignage_element {
   ASN1T_GenericSignage_element_item item;
} ;

EXTERN int asn1PE_GenericSignage_element (OSCTXT* pctxt, ASN1T_GenericSignage_element* pvalue);

EXTERN int asn1PD_GenericSignage_element (OSCTXT* pctxt, ASN1T_GenericSignage_element* pvalue);

EXTERN int XmlEnc_GenericSignage_element (OSCTXT* pctxt, 
   ASN1T_GenericSignage_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GenericSignage_element (OSCTXT* pctxt, 
   ASN1T_GenericSignage_element* pvalue);

EXTERN int asn1JsonEnc_GenericSignage_element (OSCTXT *pctxt, ASN1T_GenericSignage_element *pvalue);

EXTERN int asn1JsonDec_GenericSignage_element (OSCTXT *pctxt, ASN1T_GenericSignage_element *pvalue);

EXTERN int asn1PrtToStrm_GenericSignage_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_GenericSignage_element* pvalue);

EXTERN ASN1T_GenericSignage_element* 
   new_ASN1T_GenericSignage_element (ASN1CType& ccobj);

EXTERN int asn1Init_GenericSignage_element (ASN1T_GenericSignage_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GenericSignage_element (OSCTXT *pctxt, 
   ASN1T_GenericSignage_element* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericSignage                                            */
/*                                                            */
/**************************************************************/
/*
GenericSignage ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] EXPLICIT CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of ASN1T_GenericSignage_element */
typedef ASN1TSeqOfList ASN1T_GenericSignage;

class EXTERN ASN1C_GenericSignage :
public ASN1CSeqOfList
{
protected:
   ASN1T_GenericSignage& msgData;
public:
   /**
    * Control class: ASN1C_GenericSignage
    * Data class:    ASN1T_GenericSignage
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_GenericSignage (ASN1T_GenericSignage& data);

   /**
    * Control class: ASN1C_GenericSignage<br/>
    * Data class: ASN1T_GenericSignage<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_GenericSignage (OSRTMessageBufferIF& msgBuf
      , ASN1T_GenericSignage& data);

   /**
    * Control class: ASN1C_GenericSignage<br/>
    * Data class: ASN1T_GenericSignage<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_GenericSignage (ASN1CType& ccobj, ASN1T_GenericSignage& data);

   virtual ~ASN1C_GenericSignage () {}

   /**
    * Data class: ASN1T_GenericSignage_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GenericSignage_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GenericSignage_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GenericSignage_element* NewElement ();

   /**
    * Data class: ASN1T_GenericSignage_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GenericSignage_element* AppendNewElement ();

private:
   ASN1C_GenericSignage& operator= (const ASN1C_GenericSignage&) {return *this;}
} ;

EXTERN int asn1PE_GenericSignage (OSCTXT* pctxt, ASN1T_GenericSignage* pvalue);

EXTERN int asn1PD_GenericSignage (OSCTXT* pctxt, ASN1T_GenericSignage* pvalue);

EXTERN int XmlEnc_GenericSignage (OSCTXT* pctxt, ASN1T_GenericSignage* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GenericSignage (OSCTXT* pctxt, ASN1T_GenericSignage* pvalue)
   ;

EXTERN int asn1JsonEnc_GenericSignage (OSCTXT *pctxt, ASN1T_GenericSignage *pvalue);

EXTERN int asn1JsonDec_GenericSignage (OSCTXT *pctxt, ASN1T_GenericSignage *pvalue);

EXTERN int asn1PrtToStrm_GenericSignage (OSCTXT *pctxt, 
   const char* name, const ASN1T_GenericSignage* pvalue);

EXTERN int asn1Init_GenericSignage (ASN1T_GenericSignage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GenericSignage (OSCTXT *pctxt, ASN1T_GenericSignage* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimit_element_item                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SpeedLimit'
*/
/* Choice tag constants */

#define T_SpeedLimit_element_item_itis  1
#define T_SpeedLimit_element_item_text  2

struct EXTERN ASN1T_SpeedLimit_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ITIScodes itis;
      /* t = 2 */
      ASN1T_ITIStextPhrase text;
   } u;
   ASN1T_SpeedLimit_element_item () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_SpeedLimit_element_item (OSCTXT* pctxt, ASN1T_SpeedLimit_element_item* pvalue);

EXTERN int asn1PD_SpeedLimit_element_item (OSCTXT* pctxt, ASN1T_SpeedLimit_element_item* pvalue);

EXTERN int XmlEnc_SpeedLimit_element_item (OSCTXT* pctxt, 
   ASN1T_SpeedLimit_element_item* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedLimit_element_item (OSCTXT* pctxt, 
   ASN1T_SpeedLimit_element_item* pvalue);

EXTERN int asn1JsonEnc_SpeedLimit_element_item (OSCTXT *pctxt, ASN1T_SpeedLimit_element_item *pvalue);

EXTERN int asn1JsonDec_SpeedLimit_element_item (OSCTXT *pctxt, ASN1T_SpeedLimit_element_item *pvalue);

EXTERN int asn1PrtToStrm_SpeedLimit_element_item (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedLimit_element_item* pvalue);

EXTERN ASN1T_SpeedLimit_element_item* 
   new_ASN1T_SpeedLimit_element_item (ASN1CType& ccobj);

EXTERN int asn1Init_SpeedLimit_element_item (ASN1T_SpeedLimit_element_item* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SpeedLimit_element_item (OSCTXT *pctxt, 
   ASN1T_SpeedLimit_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimit_element                                        */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SpeedLimit'
*/
struct EXTERN ASN1T_SpeedLimit_element {
   ASN1T_SpeedLimit_element_item item;
} ;

EXTERN int asn1PE_SpeedLimit_element (OSCTXT* pctxt, ASN1T_SpeedLimit_element* pvalue);

EXTERN int asn1PD_SpeedLimit_element (OSCTXT* pctxt, ASN1T_SpeedLimit_element* pvalue);

EXTERN int XmlEnc_SpeedLimit_element (OSCTXT* pctxt, 
   ASN1T_SpeedLimit_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedLimit_element (OSCTXT* pctxt, 
   ASN1T_SpeedLimit_element* pvalue);

EXTERN int asn1JsonEnc_SpeedLimit_element (OSCTXT *pctxt, ASN1T_SpeedLimit_element *pvalue);

EXTERN int asn1JsonDec_SpeedLimit_element (OSCTXT *pctxt, ASN1T_SpeedLimit_element *pvalue);

EXTERN int asn1PrtToStrm_SpeedLimit_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedLimit_element* pvalue);

EXTERN ASN1T_SpeedLimit_element* 
   new_ASN1T_SpeedLimit_element (ASN1CType& ccobj);

EXTERN int asn1Init_SpeedLimit_element (ASN1T_SpeedLimit_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SpeedLimit_element (OSCTXT *pctxt, 
   ASN1T_SpeedLimit_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimit                                                */
/*                                                            */
/**************************************************************/
/*
SpeedLimit ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] EXPLICIT CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of ASN1T_SpeedLimit_element */
typedef ASN1TSeqOfList ASN1T_SpeedLimit;

class EXTERN ASN1C_SpeedLimit :
public ASN1CSeqOfList
{
protected:
   ASN1T_SpeedLimit& msgData;
public:
   /**
    * Control class: ASN1C_SpeedLimit
    * Data class:    ASN1T_SpeedLimit
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SpeedLimit (ASN1T_SpeedLimit& data);

   /**
    * Control class: ASN1C_SpeedLimit<br/>
    * Data class: ASN1T_SpeedLimit<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SpeedLimit (OSRTMessageBufferIF& msgBuf, ASN1T_SpeedLimit& data);

   /**
    * Control class: ASN1C_SpeedLimit<br/>
    * Data class: ASN1T_SpeedLimit<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SpeedLimit (ASN1CType& ccobj, ASN1T_SpeedLimit& data);

   virtual ~ASN1C_SpeedLimit () {}

   /**
    * Data class: ASN1T_SpeedLimit_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SpeedLimit_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SpeedLimit_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SpeedLimit_element* NewElement ();

   /**
    * Data class: ASN1T_SpeedLimit_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SpeedLimit_element* AppendNewElement ();

private:
   ASN1C_SpeedLimit& operator= (const ASN1C_SpeedLimit&) {return *this;}
} ;

EXTERN int asn1PE_SpeedLimit (OSCTXT* pctxt, ASN1T_SpeedLimit* pvalue);

EXTERN int asn1PD_SpeedLimit (OSCTXT* pctxt, ASN1T_SpeedLimit* pvalue);

EXTERN int XmlEnc_SpeedLimit (OSCTXT* pctxt, ASN1T_SpeedLimit* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedLimit (OSCTXT* pctxt, ASN1T_SpeedLimit* pvalue);

EXTERN int asn1JsonEnc_SpeedLimit (OSCTXT *pctxt, ASN1T_SpeedLimit *pvalue);

EXTERN int asn1JsonDec_SpeedLimit (OSCTXT *pctxt, ASN1T_SpeedLimit *pvalue);

EXTERN int asn1PrtToStrm_SpeedLimit (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedLimit* pvalue);

EXTERN int asn1Init_SpeedLimit (ASN1T_SpeedLimit* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SpeedLimit (OSCTXT *pctxt, ASN1T_SpeedLimit* pvalue);

/**************************************************************/
/*                                                            */
/*  ExitService_element_item                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ExitService'
*/
/* Choice tag constants */

#define T_ExitService_element_item_itis 1
#define T_ExitService_element_item_text 2

struct EXTERN ASN1T_ExitService_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ITIScodes itis;
      /* t = 2 */
      ASN1T_ITIStextPhrase text;
   } u;
   ASN1T_ExitService_element_item () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_ExitService_element_item (OSCTXT* pctxt, ASN1T_ExitService_element_item* pvalue);

EXTERN int asn1PD_ExitService_element_item (OSCTXT* pctxt, ASN1T_ExitService_element_item* pvalue);

EXTERN int XmlEnc_ExitService_element_item (OSCTXT* pctxt, 
   ASN1T_ExitService_element_item* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ExitService_element_item (OSCTXT* pctxt, 
   ASN1T_ExitService_element_item* pvalue);

EXTERN int asn1JsonEnc_ExitService_element_item (OSCTXT *pctxt, ASN1T_ExitService_element_item *pvalue);

EXTERN int asn1JsonDec_ExitService_element_item (OSCTXT *pctxt, ASN1T_ExitService_element_item *pvalue);

EXTERN int asn1PrtToStrm_ExitService_element_item (OSCTXT *pctxt, 
   const char* name, const ASN1T_ExitService_element_item* pvalue);

EXTERN ASN1T_ExitService_element_item* 
   new_ASN1T_ExitService_element_item (ASN1CType& ccobj);

EXTERN int asn1Init_ExitService_element_item (ASN1T_ExitService_element_item* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ExitService_element_item (OSCTXT *pctxt, 
   ASN1T_ExitService_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  ExitService_element                                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ExitService'
*/
struct EXTERN ASN1T_ExitService_element {
   ASN1T_ExitService_element_item item;
} ;

EXTERN int asn1PE_ExitService_element (OSCTXT* pctxt, ASN1T_ExitService_element* pvalue);

EXTERN int asn1PD_ExitService_element (OSCTXT* pctxt, ASN1T_ExitService_element* pvalue);

EXTERN int XmlEnc_ExitService_element (OSCTXT* pctxt, 
   ASN1T_ExitService_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ExitService_element (OSCTXT* pctxt, 
   ASN1T_ExitService_element* pvalue);

EXTERN int asn1JsonEnc_ExitService_element (OSCTXT *pctxt, ASN1T_ExitService_element *pvalue);

EXTERN int asn1JsonDec_ExitService_element (OSCTXT *pctxt, ASN1T_ExitService_element *pvalue);

EXTERN int asn1PrtToStrm_ExitService_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_ExitService_element* pvalue);

EXTERN ASN1T_ExitService_element* 
   new_ASN1T_ExitService_element (ASN1CType& ccobj);

EXTERN int asn1Init_ExitService_element (ASN1T_ExitService_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ExitService_element (OSCTXT *pctxt, 
   ASN1T_ExitService_element* pvalue);

/**************************************************************/
/*                                                            */
/*  ExitService                                               */
/*                                                            */
/**************************************************************/
/*
ExitService ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] EXPLICIT CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of ASN1T_ExitService_element */
typedef ASN1TSeqOfList ASN1T_ExitService;

class EXTERN ASN1C_ExitService :
public ASN1CSeqOfList
{
protected:
   ASN1T_ExitService& msgData;
public:
   /**
    * Control class: ASN1C_ExitService
    * Data class:    ASN1T_ExitService
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ExitService (ASN1T_ExitService& data);

   /**
    * Control class: ASN1C_ExitService<br/>
    * Data class: ASN1T_ExitService<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ExitService (OSRTMessageBufferIF& msgBuf, ASN1T_ExitService& data);

   /**
    * Control class: ASN1C_ExitService<br/>
    * Data class: ASN1T_ExitService<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_ExitService (ASN1CType& ccobj, ASN1T_ExitService& data);

   virtual ~ASN1C_ExitService () {}

   /**
    * Data class: ASN1T_ExitService_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_ExitService_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_ExitService_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_ExitService_element* NewElement ();

   /**
    * Data class: ASN1T_ExitService_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_ExitService_element* AppendNewElement ();

private:
   ASN1C_ExitService& operator= (const ASN1C_ExitService&) {return *this;}
} ;

EXTERN int asn1PE_ExitService (OSCTXT* pctxt, ASN1T_ExitService* pvalue);

EXTERN int asn1PD_ExitService (OSCTXT* pctxt, ASN1T_ExitService* pvalue);

EXTERN int XmlEnc_ExitService (OSCTXT* pctxt, ASN1T_ExitService* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ExitService (OSCTXT* pctxt, ASN1T_ExitService* pvalue);

EXTERN int asn1JsonEnc_ExitService (OSCTXT *pctxt, ASN1T_ExitService *pvalue);

EXTERN int asn1JsonDec_ExitService (OSCTXT *pctxt, ASN1T_ExitService *pvalue);

EXTERN int asn1PrtToStrm_ExitService (OSCTXT *pctxt, 
   const char* name, const ASN1T_ExitService* pvalue);

EXTERN int asn1Init_ExitService (ASN1T_ExitService* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ExitService (OSCTXT *pctxt, ASN1T_ExitService* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame_content                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerDataFrame'
*/
/* Choice tag constants */

#define T_TravelerDataFrame_content_advisory 1
#define T_TravelerDataFrame_content_workZone 2
#define T_TravelerDataFrame_content_genericSign 3
#define T_TravelerDataFrame_content_speedLimit 4
#define T_TravelerDataFrame_content_exitService 5

struct EXTERN ASN1T_TravelerDataFrame_content {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ITIScodesAndText *advisory;
      /* t = 2 */
      ASN1T_WorkZone *workZone;
      /* t = 3 */
      ASN1T_GenericSignage *genericSign;
      /* t = 4 */
      ASN1T_SpeedLimit *speedLimit;
      /* t = 5 */
      ASN1T_ExitService *exitService;
   } u;
   ASN1T_TravelerDataFrame_content () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_TravelerDataFrame_content (OSCTXT* pctxt, ASN1T_TravelerDataFrame_content* pvalue);

EXTERN int asn1PD_TravelerDataFrame_content (OSCTXT* pctxt, ASN1T_TravelerDataFrame_content* pvalue);

EXTERN int XmlEnc_TravelerDataFrame_content (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame_content* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerDataFrame_content (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame_content* pvalue);

EXTERN int asn1JsonEnc_TravelerDataFrame_content (OSCTXT *pctxt, ASN1T_TravelerDataFrame_content *pvalue);

EXTERN int asn1JsonDec_TravelerDataFrame_content (OSCTXT *pctxt, ASN1T_TravelerDataFrame_content *pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrame_content (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerDataFrame_content* pvalue);

EXTERN ASN1T_TravelerDataFrame_content* 
   new_ASN1T_TravelerDataFrame_content (ASN1CType& ccobj);

EXTERN int asn1Init_TravelerDataFrame_content (
   ASN1T_TravelerDataFrame_content* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerDataFrame_content (OSCTXT *pctxt, 
   ASN1T_TravelerDataFrame_content* pvalue);

/**************************************************************/
/*                                                            */
/*  URL_Short                                                 */
/*                                                            */
/**************************************************************/
/*
URL-Short ::= IA5String (SIZE (1..15))
*/
typedef const char* ASN1T_URL_Short;

EXTERN int asn1PE_URL_Short (OSCTXT* pctxt, ASN1T_URL_Short value);

EXTERN int asn1PD_URL_Short (OSCTXT* pctxt, ASN1T_URL_Short* pvalue);

EXTERN int XmlEnc_URL_Short (OSCTXT* pctxt, ASN1T_URL_Short value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_URL_Short (OSCTXT* pctxt, ASN1T_URL_Short* pvalue);

EXTERN int asn1JsonEnc_URL_Short (OSCTXT *pctxt, ASN1T_URL_Short value);

EXTERN int asn1JsonDec_URL_Short (OSCTXT *pctxt, ASN1T_URL_Short *pvalue);

EXTERN int asn1PrtToStrm_URL_Short (OSCTXT *pctxt, 
   const char* name, const ASN1T_URL_Short pvalue);

EXTERN void asn1Free_URL_Short (OSCTXT *pctxt, ASN1T_URL_Short pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame                                         */
/*                                                            */
/**************************************************************/
/*
TravelerDataFrame ::= SEQUENCE {
   -- Part I, Frame header
   notUsed [0] SSPindex,
        -- always set to 0 and carries no meaning;
        -- legacy field maintained for backward compatibility                      
   frameType [1] TravelerInfoType, -- (enum, advisory or road sign)
   msgId [2] EXPLICIT CHOICE {
      furtherInfoID [0] FurtherInfoID, -- links to ATIS msg
      roadSignID [1] RoadSignID
   },
   startYear [3] DYear OPTIONAL, -- only if needed
   startTime [4] MinuteOfTheYear,
   durationTime [5] MinutesDuration,
   priority [6] SignPrority,
   -- Part II, Applicable Regions of Use
   notUsed1 [7] SSPindex, -- set to 0 
   regions [8] SEQUENCE (SIZE (1..16)) OF GeographicalPath,
   -- Part III, Content
   notUsed2 [9] SSPindex, -- set to 0
   notUsed3 [10] SSPindex, -- set to 0
   content [11] EXPLICIT CHOICE {
      advisory [0] ITIScodesAndText,
                               -- typical ITIS warnings
      workZone [1] WorkZone,
                               -- work zone signs and directions
      genericSign [2] GenericSignage,
                               -- MUTCD signs and directions
      speedLimit [3] SpeedLimit,
                               -- speed limits and cautions
      exitService [4] ExitService
   },
   url [12] URL-Short OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TravelerDataFrame {
   struct {
      unsigned startYearPresent : 1;
      unsigned urlPresent : 1;
   } m;
   OSUINT8 notUsed;
   ASN1T_TravelerInfoType frameType;
   ASN1T_TravelerDataFrame_msgId msgId;
   OSUINT16 startYear;
   OSUINT32 startTime;
   ASN1T_MinutesDuration durationTime;
   ASN1T_SignPrority priority;
   OSUINT8 notUsed1;
   ASN1T_TravelerDataFrame_regions regions;
   OSUINT8 notUsed2;
   OSUINT8 notUsed3;
   ASN1T_TravelerDataFrame_content content;
   ASN1T_URL_Short url;
   ASN1TSeqExt extElem1;
   ASN1T_TravelerDataFrame ();
} ;

EXTERN int asn1PE_TravelerDataFrame (OSCTXT* pctxt, ASN1T_TravelerDataFrame* pvalue);

EXTERN int asn1PD_TravelerDataFrame (OSCTXT* pctxt, ASN1T_TravelerDataFrame* pvalue);

EXTERN int XmlEnc_TravelerDataFrame (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerDataFrame (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame* pvalue);

EXTERN int asn1JsonEnc_TravelerDataFrame (OSCTXT *pctxt, ASN1T_TravelerDataFrame *pvalue);

EXTERN int asn1JsonDec_TravelerDataFrame (OSCTXT *pctxt, ASN1T_TravelerDataFrame *pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrame (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerDataFrame* pvalue);

EXTERN ASN1T_TravelerDataFrame* new_ASN1T_TravelerDataFrame (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_TravelerDataFrame (ASN1T_TravelerDataFrame* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerDataFrame (OSCTXT *pctxt, 
   ASN1T_TravelerDataFrame* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrameList                                     */
/*                                                            */
/**************************************************************/
/*
TravelerDataFrameList ::= SEQUENCE (SIZE (1..8)) OF TravelerDataFrame
*/
/* List of ASN1T_TravelerDataFrame */
typedef ASN1TSeqOfList ASN1T_TravelerDataFrameList;

class EXTERN ASN1C_TravelerDataFrameList :
public ASN1CSeqOfList
{
protected:
   ASN1T_TravelerDataFrameList& msgData;
public:
   /**
    * Control class: ASN1C_TravelerDataFrameList
    * Data class:    ASN1T_TravelerDataFrameList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TravelerDataFrameList (ASN1T_TravelerDataFrameList& data);

   /**
    * Control class: ASN1C_TravelerDataFrameList<br/>
    * Data class: ASN1T_TravelerDataFrameList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TravelerDataFrameList (OSRTMessageBufferIF& msgBuf
      , ASN1T_TravelerDataFrameList& data);

   /**
    * Control class: ASN1C_TravelerDataFrameList<br/>
    * Data class: ASN1T_TravelerDataFrameList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_TravelerDataFrameList (ASN1CType& ccobj
      , ASN1T_TravelerDataFrameList& data);

   virtual ~ASN1C_TravelerDataFrameList () {}

   /**
    * Data class: ASN1T_TravelerDataFrame<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_TravelerDataFrame* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_TravelerDataFrame.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_TravelerDataFrame* NewElement ();

   /**
    * Data class: ASN1T_TravelerDataFrame.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_TravelerDataFrame* AppendNewElement ();

private:
   ASN1C_TravelerDataFrameList& operator= (const ASN1C_TravelerDataFrameList&) {return *this;}
} ;

EXTERN int asn1PE_TravelerDataFrameList (OSCTXT* pctxt, ASN1T_TravelerDataFrameList* pvalue);

EXTERN int asn1PD_TravelerDataFrameList (OSCTXT* pctxt, ASN1T_TravelerDataFrameList* pvalue);

EXTERN int XmlEnc_TravelerDataFrameList (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrameList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerDataFrameList (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrameList* pvalue);

EXTERN int asn1JsonEnc_TravelerDataFrameList (OSCTXT *pctxt, ASN1T_TravelerDataFrameList *pvalue);

EXTERN int asn1JsonDec_TravelerDataFrameList (OSCTXT *pctxt, ASN1T_TravelerDataFrameList *pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrameList (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerDataFrameList* pvalue);

EXTERN int asn1Init_TravelerDataFrameList (ASN1T_TravelerDataFrameList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerDataFrameList (OSCTXT *pctxt, 
   ASN1T_TravelerDataFrameList* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInformation_regional_element                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerInformation'
*/
struct EXTERN ASN1T_TravelerInformation_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TravelerInformation_regional_element (OSCTXT* pctxt, ASN1T_TravelerInformation_regional_element* pvalue);

EXTERN int asn1PD_TravelerInformation_regional_element (OSCTXT* pctxt, ASN1T_TravelerInformation_regional_element* pvalue);

EXTERN int XmlEnc_TravelerInformation_regional_element (OSCTXT* pctxt, 
   ASN1T_TravelerInformation_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerInformation_regional_element (OSCTXT* pctxt, 
   ASN1T_TravelerInformation_regional_element* pvalue);

EXTERN int asn1JsonEnc_TravelerInformation_regional_element (OSCTXT *pctxt, ASN1T_TravelerInformation_regional_element *pvalue);

EXTERN int asn1JsonDec_TravelerInformation_regional_element (OSCTXT *pctxt, ASN1T_TravelerInformation_regional_element *pvalue);

EXTERN int asn1PrtToStrm_TravelerInformation_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerInformation_regional_element* pvalue);

EXTERN ASN1T_TravelerInformation_regional_element* 
   new_ASN1T_TravelerInformation_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_TravelerInformation_regional_element (
   ASN1T_TravelerInformation_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerInformation_regional_element (OSCTXT *pctxt, 
   ASN1T_TravelerInformation_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInformation_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerInformation'
*/
/* List of ASN1T_TravelerInformation_regional_element */
typedef ASN1TSeqOfList ASN1T_TravelerInformation_regional;

class EXTERN ASN1C_TravelerInformation_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_TravelerInformation_regional& msgData;
public:
   /**
    * Control class: ASN1C_TravelerInformation_regional
    * Data class:    ASN1T_TravelerInformation_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TravelerInformation_regional
       (ASN1T_TravelerInformation_regional& data);

   /**
    * Control class: ASN1C_TravelerInformation_regional<br/>
    * Data class: ASN1T_TravelerInformation_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TravelerInformation_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_TravelerInformation_regional& data);

   /**
    * Control class: ASN1C_TravelerInformation_regional<br/>
    * Data class: ASN1T_TravelerInformation_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_TravelerInformation_regional (ASN1CType& ccobj
      , ASN1T_TravelerInformation_regional& data);

   virtual ~ASN1C_TravelerInformation_regional () {}

   /**
    * Data class: ASN1T_TravelerInformation_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_TravelerInformation_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_TravelerInformation_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_TravelerInformation_regional_element* NewElement ();

   /**
    * Data class: ASN1T_TravelerInformation_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_TravelerInformation_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_TravelerInformation_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_TravelerInformation_regional* pmatches);

private:
   ASN1C_TravelerInformation_regional& operator= (const ASN1C_TravelerInformation_regional&) {return *this;}
} ;

EXTERN int asn1PE_TravelerInformation_regional (OSCTXT* pctxt, ASN1T_TravelerInformation_regional* pvalue);

EXTERN int asn1PD_TravelerInformation_regional (OSCTXT* pctxt, ASN1T_TravelerInformation_regional* pvalue);

EXTERN int XmlEnc_TravelerInformation_regional (OSCTXT* pctxt, 
   ASN1T_TravelerInformation_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerInformation_regional (OSCTXT* pctxt, 
   ASN1T_TravelerInformation_regional* pvalue);

EXTERN int asn1JsonEnc_TravelerInformation_regional (OSCTXT *pctxt, ASN1T_TravelerInformation_regional *pvalue);

EXTERN int asn1JsonDec_TravelerInformation_regional (OSCTXT *pctxt, ASN1T_TravelerInformation_regional *pvalue);

EXTERN int asn1PrtToStrm_TravelerInformation_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerInformation_regional* pvalue);

EXTERN int asn1Init_TravelerInformation_regional (
   ASN1T_TravelerInformation_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerInformation_regional (OSCTXT *pctxt, 
   ASN1T_TravelerInformation_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInformation                                       */
/*                                                            */
/**************************************************************/
/*
TravelerInformation ::= SEQUENCE {
   msgCnt [0] MsgCount,
   timeStamp [1] MinuteOfTheYear OPTIONAL,
   packetID [2] UniqueMSGID OPTIONAL,
   urlB [3] URL-Base OPTIONAL,
   -- A set of one or more self contained 
   -- traveler information messages (frames)
   dataFrames [4] TravelerDataFrameList,
   regional [5] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-TravelerInformation}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-TravelerInformation}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TravelerInformation {
   struct {
      unsigned timeStampPresent : 1;
      unsigned packetIDPresent : 1;
      unsigned urlBPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   OSUINT8 msgCnt;
   OSUINT32 timeStamp;
   ASN1T_UniqueMSGID packetID;
   ASN1T_URL_Base urlB;
   ASN1T_TravelerDataFrameList dataFrames;
   ASN1T_TravelerInformation_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TravelerInformation ();
} ;

EXTERN int asn1PE_TravelerInformation (OSCTXT* pctxt, ASN1T_TravelerInformation* pvalue);

EXTERN int asn1PD_TravelerInformation (OSCTXT* pctxt, ASN1T_TravelerInformation* pvalue);

EXTERN int XmlEnc_TravelerInformation (OSCTXT* pctxt, 
   ASN1T_TravelerInformation* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerInformation (OSCTXT* pctxt, 
   ASN1T_TravelerInformation* pvalue);

EXTERN int asn1JsonEnc_TravelerInformation (OSCTXT *pctxt, ASN1T_TravelerInformation *pvalue);

EXTERN int asn1JsonDec_TravelerInformation (OSCTXT *pctxt, ASN1T_TravelerInformation *pvalue);

EXTERN int asn1PrtToStrm_TravelerInformation (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerInformation* pvalue);

EXTERN ASN1T_TravelerInformation* 
   new_ASN1T_TravelerInformation (ASN1CType& ccobj);

EXTERN int asn1Init_TravelerInformation (ASN1T_TravelerInformation* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerInformation (OSCTXT *pctxt, 
   ASN1T_TravelerInformation* pvalue);

#endif
