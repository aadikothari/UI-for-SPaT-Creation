/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).
 */
#ifndef MAPDATA_H
#define MAPDATA_H

#include <stdio.h>
#include <stdlib.h>
#include "rtpersrc/asn1PerCppTypes.h"
#include "rtsrc/asn1CppTypes.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtsrc/asn1type.h"
#include "rtxmlsrc/asn1xml.h"
#include "rtxmlsrc/rtXmlCppMsgBuf.h"
#include "rtsrc/asn1type.h"
#include "rtjsonsrc/asn1json.h"
#include "rtjsonsrc/rtJsonCppMsgBuf.h"

#include "rtsrc/ASN1CBitStr.h"
#include "rtsrc/ASN1CSeqOfList.h"

/**
 * Header file for ASN.1 module MapData
 */
/**************************************************************/
/*                                                            */
/*  AllowedManeuvers                                          */
/*                                                            */
/**************************************************************/
/*
AllowedManeuvers ::= BIT STRING  { maneuverStraightAllowed(0), maneuverLeftAllowed(1), maneuverRightAllowed(2), maneuverUTurnAllowed(3), maneuverLeftTurnOnRedAllowed(4), maneuverRightTurnOnRedAllowed(5), maneuverLaneChangeAllowed(6), maneuverNoStoppingAllowed(7), yieldAllwaysRequired(8), goWithHalt(9), caution(10), reserved1(11) } (SIZE (12))
*/
struct EXTERN ASN1T_AllowedManeuvers {
   OSOCTET data[2];
   // ctors
   ASN1T_AllowedManeuvers ()  {}
   ASN1T_AllowedManeuvers (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_AllowedManeuvers :
public ASN1CBitStr
{
protected:
   ASN1T_AllowedManeuvers& msgData;
public:
   // named bits
   enum { maneuverStraightAllowed = 0, maneuverLeftAllowed = 1, maneuverRightAllowed = 2, maneuverUTurnAllowed = 3, maneuverLeftTurnOnRedAllowed = 4, maneuverRightTurnOnRedAllowed = 5, maneuverLaneChangeAllowed = 6, maneuverNoStoppingAllowed = 7, yieldAllwaysRequired = 8, goWithHalt = 9, caution = 10, reserved1 = 11 };

   /**
    * Control class: ASN1C_AllowedManeuvers
    * Data class:    ASN1T_AllowedManeuvers
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_AllowedManeuvers (ASN1T_AllowedManeuvers& data);

   /**
    * Control class: ASN1C_AllowedManeuvers<br/>
    * Data class: ASN1T_AllowedManeuvers<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_AllowedManeuvers (OSRTMessageBufferIF& msgBuf
      , ASN1T_AllowedManeuvers& data);

   virtual ~ASN1C_AllowedManeuvers () {}

private:
   ASN1C_AllowedManeuvers& operator= (const ASN1C_AllowedManeuvers&) {return *this;}
} ;

EXTERN int asn1PE_AllowedManeuvers (OSCTXT* pctxt, ASN1T_AllowedManeuvers* pvalue);

EXTERN int asn1PD_AllowedManeuvers (OSCTXT* pctxt, ASN1T_AllowedManeuvers* pvalue);

EXTERN int XmlEnc_AllowedManeuvers (OSCTXT* pctxt, 
   ASN1T_AllowedManeuvers* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AllowedManeuvers (OSCTXT* pctxt, 
   ASN1T_AllowedManeuvers* pvalue);

EXTERN int asn1JsonEnc_AllowedManeuvers (OSCTXT *pctxt, ASN1T_AllowedManeuvers *pvalue);

EXTERN int asn1JsonDec_AllowedManeuvers (OSCTXT *pctxt, ASN1T_AllowedManeuvers *pvalue);

EXTERN int asn1PrtToStrm_AllowedManeuvers (OSCTXT *pctxt, 
   const char* name, const ASN1T_AllowedManeuvers* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_AllowedManeuvers_NAMEDBITTAB[13];

EXTERN ASN1T_AllowedManeuvers* new_ASN1T_AllowedManeuvers (ASN1CType& ccobj);

EXTERN int asn1Init_AllowedManeuvers (ASN1T_AllowedManeuvers* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Barrier                                    */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Barrier ::= BIT STRING  { median-RevocableLane(0), median(1), whiteLineHashing(2), stripedLines(3), doubleStripedLines(4), trafficCones(5), constructionBarrier(6), trafficChannels(7), lowCurbs(8), highCurbs(9) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_Barrier {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_Barrier ()  {}
   ASN1T_LaneAttributes_Barrier (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_Barrier :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Barrier& msgData;
public:
   // named bits
   enum { median_RevocableLane = 0, median = 1, whiteLineHashing = 2, stripedLines = 3, doubleStripedLines = 4, trafficCones = 5, constructionBarrier = 6, trafficChannels = 7, lowCurbs = 8, highCurbs = 9 };

   /**
    * Control class: ASN1C_LaneAttributes_Barrier
    * Data class:    ASN1T_LaneAttributes_Barrier
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Barrier (ASN1T_LaneAttributes_Barrier& data);

   /**
    * Control class: ASN1C_LaneAttributes_Barrier<br/>
    * Data class: ASN1T_LaneAttributes_Barrier<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Barrier (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Barrier& data);

   virtual ~ASN1C_LaneAttributes_Barrier () {}

private:
   ASN1C_LaneAttributes_Barrier& operator= (const ASN1C_LaneAttributes_Barrier&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Barrier (OSCTXT* pctxt, ASN1T_LaneAttributes_Barrier* pvalue);

EXTERN int asn1PD_LaneAttributes_Barrier (OSCTXT* pctxt, ASN1T_LaneAttributes_Barrier* pvalue);

EXTERN int XmlEnc_LaneAttributes_Barrier (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Barrier* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Barrier (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Barrier* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Barrier (OSCTXT *pctxt, ASN1T_LaneAttributes_Barrier *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Barrier (OSCTXT *pctxt, ASN1T_LaneAttributes_Barrier *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Barrier (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Barrier* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Barrier_NAMEDBITTAB[11];

EXTERN ASN1T_LaneAttributes_Barrier* 
   new_ASN1T_LaneAttributes_Barrier (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Barrier (ASN1T_LaneAttributes_Barrier* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Bike                                       */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Bike ::= BIT STRING  { bikeRevocableLane(0), pedestrianUseAllowed(1), isBikeFlyOverLane(2), fixedCycleTime(3), biDirectionalCycleTimes(4), isolatedByBarrier(5), unsignalizedSegmentsPresent(6) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_Bike {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_Bike ()  {}
   ASN1T_LaneAttributes_Bike (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_Bike :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Bike& msgData;
public:
   // named bits
   enum { bikeRevocableLane = 0, pedestrianUseAllowed = 1, isBikeFlyOverLane = 2, fixedCycleTime = 3, biDirectionalCycleTimes = 4, isolatedByBarrier = 5, unsignalizedSegmentsPresent = 6 };

   /**
    * Control class: ASN1C_LaneAttributes_Bike
    * Data class:    ASN1T_LaneAttributes_Bike
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Bike (ASN1T_LaneAttributes_Bike& data);

   /**
    * Control class: ASN1C_LaneAttributes_Bike<br/>
    * Data class: ASN1T_LaneAttributes_Bike<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Bike (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Bike& data);

   virtual ~ASN1C_LaneAttributes_Bike () {}

private:
   ASN1C_LaneAttributes_Bike& operator= (const ASN1C_LaneAttributes_Bike&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Bike (OSCTXT* pctxt, ASN1T_LaneAttributes_Bike* pvalue);

EXTERN int asn1PD_LaneAttributes_Bike (OSCTXT* pctxt, ASN1T_LaneAttributes_Bike* pvalue);

EXTERN int XmlEnc_LaneAttributes_Bike (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Bike* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Bike (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Bike* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Bike (OSCTXT *pctxt, ASN1T_LaneAttributes_Bike *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Bike (OSCTXT *pctxt, ASN1T_LaneAttributes_Bike *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Bike (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Bike* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Bike_NAMEDBITTAB[8];

EXTERN ASN1T_LaneAttributes_Bike* 
   new_ASN1T_LaneAttributes_Bike (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Bike (ASN1T_LaneAttributes_Bike* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Crosswalk                                  */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Crosswalk ::= BIT STRING  { crosswalkRevocableLane(0), bicyleUseAllowed(1), isXwalkFlyOverLane(2), fixedCycleTime(3), biDirectionalCycleTimes(4), hasPushToWalkButton(5), audioSupport(6), rfSignalRequestPresent(7), unsignalizedSegmentsPresent(8) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_Crosswalk {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_Crosswalk ()  {}
   ASN1T_LaneAttributes_Crosswalk (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_Crosswalk :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Crosswalk& msgData;
public:
   // named bits
   enum { crosswalkRevocableLane = 0, bicyleUseAllowed = 1, isXwalkFlyOverLane = 2, fixedCycleTime = 3, biDirectionalCycleTimes = 4, hasPushToWalkButton = 5, audioSupport = 6, rfSignalRequestPresent = 7, unsignalizedSegmentsPresent = 8 };

   /**
    * Control class: ASN1C_LaneAttributes_Crosswalk
    * Data class:    ASN1T_LaneAttributes_Crosswalk
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Crosswalk (ASN1T_LaneAttributes_Crosswalk& data);

   /**
    * Control class: ASN1C_LaneAttributes_Crosswalk<br/>
    * Data class: ASN1T_LaneAttributes_Crosswalk<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Crosswalk (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Crosswalk& data);

   virtual ~ASN1C_LaneAttributes_Crosswalk () {}

private:
   ASN1C_LaneAttributes_Crosswalk& operator= (const ASN1C_LaneAttributes_Crosswalk&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Crosswalk (OSCTXT* pctxt, ASN1T_LaneAttributes_Crosswalk* pvalue);

EXTERN int asn1PD_LaneAttributes_Crosswalk (OSCTXT* pctxt, ASN1T_LaneAttributes_Crosswalk* pvalue);

EXTERN int XmlEnc_LaneAttributes_Crosswalk (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Crosswalk* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Crosswalk (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Crosswalk* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Crosswalk (OSCTXT *pctxt, ASN1T_LaneAttributes_Crosswalk *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Crosswalk (OSCTXT *pctxt, ASN1T_LaneAttributes_Crosswalk *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Crosswalk (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Crosswalk* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Crosswalk_NAMEDBITTAB[10];

EXTERN ASN1T_LaneAttributes_Crosswalk* 
   new_ASN1T_LaneAttributes_Crosswalk (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Crosswalk (ASN1T_LaneAttributes_Crosswalk* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Parking                                    */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Parking ::= BIT STRING  { parkingRevocableLane(0), parallelParkingInUse(1), headInParkingInUse(2), doNotParkZone(3), parkingForBusUse(4), parkingForTaxiUse(5), noPublicParkingUse(6) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_Parking {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_Parking ()  {}
   ASN1T_LaneAttributes_Parking (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_Parking :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Parking& msgData;
public:
   // named bits
   enum { parkingRevocableLane = 0, parallelParkingInUse = 1, headInParkingInUse = 2, doNotParkZone = 3, parkingForBusUse = 4, parkingForTaxiUse = 5, noPublicParkingUse = 6 };

   /**
    * Control class: ASN1C_LaneAttributes_Parking
    * Data class:    ASN1T_LaneAttributes_Parking
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Parking (ASN1T_LaneAttributes_Parking& data);

   /**
    * Control class: ASN1C_LaneAttributes_Parking<br/>
    * Data class: ASN1T_LaneAttributes_Parking<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Parking (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Parking& data);

   virtual ~ASN1C_LaneAttributes_Parking () {}

private:
   ASN1C_LaneAttributes_Parking& operator= (const ASN1C_LaneAttributes_Parking&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Parking (OSCTXT* pctxt, ASN1T_LaneAttributes_Parking* pvalue);

EXTERN int asn1PD_LaneAttributes_Parking (OSCTXT* pctxt, ASN1T_LaneAttributes_Parking* pvalue);

EXTERN int XmlEnc_LaneAttributes_Parking (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Parking* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Parking (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Parking* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Parking (OSCTXT *pctxt, ASN1T_LaneAttributes_Parking *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Parking (OSCTXT *pctxt, ASN1T_LaneAttributes_Parking *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Parking (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Parking* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Parking_NAMEDBITTAB[8];

EXTERN ASN1T_LaneAttributes_Parking* 
   new_ASN1T_LaneAttributes_Parking (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Parking (ASN1T_LaneAttributes_Parking* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Sidewalk                                   */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Sidewalk ::= BIT STRING  { sidewalk-RevocableLane(0), bicyleUseAllowed(1), isSidewalkFlyOverLane(2), walkBikes(3) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_Sidewalk {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_Sidewalk ()  {}
   ASN1T_LaneAttributes_Sidewalk (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_Sidewalk :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Sidewalk& msgData;
public:
   // named bits
   enum { sidewalk_RevocableLane = 0, bicyleUseAllowed = 1, isSidewalkFlyOverLane = 2, walkBikes = 3 };

   /**
    * Control class: ASN1C_LaneAttributes_Sidewalk
    * Data class:    ASN1T_LaneAttributes_Sidewalk
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Sidewalk (ASN1T_LaneAttributes_Sidewalk& data);

   /**
    * Control class: ASN1C_LaneAttributes_Sidewalk<br/>
    * Data class: ASN1T_LaneAttributes_Sidewalk<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Sidewalk (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Sidewalk& data);

   virtual ~ASN1C_LaneAttributes_Sidewalk () {}

private:
   ASN1C_LaneAttributes_Sidewalk& operator= (const ASN1C_LaneAttributes_Sidewalk&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Sidewalk (OSCTXT* pctxt, ASN1T_LaneAttributes_Sidewalk* pvalue);

EXTERN int asn1PD_LaneAttributes_Sidewalk (OSCTXT* pctxt, ASN1T_LaneAttributes_Sidewalk* pvalue);

EXTERN int XmlEnc_LaneAttributes_Sidewalk (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Sidewalk* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Sidewalk (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Sidewalk* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Sidewalk (OSCTXT *pctxt, ASN1T_LaneAttributes_Sidewalk *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Sidewalk (OSCTXT *pctxt, ASN1T_LaneAttributes_Sidewalk *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Sidewalk (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Sidewalk* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Sidewalk_NAMEDBITTAB[5];

EXTERN ASN1T_LaneAttributes_Sidewalk* 
   new_ASN1T_LaneAttributes_Sidewalk (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Sidewalk (ASN1T_LaneAttributes_Sidewalk* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Striping                                   */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Striping ::= BIT STRING  { stripeToConnectingLanesRevocableLane(0), stripeDrawOnLeft(1), stripeDrawOnRight(2), stripeToConnectingLanesLeft(3), stripeToConnectingLanesRight(4), stripeToConnectingLanesAhead(5) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_Striping {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_Striping ()  {}
   ASN1T_LaneAttributes_Striping (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_Striping :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Striping& msgData;
public:
   // named bits
   enum { stripeToConnectingLanesRevocableLane = 0, stripeDrawOnLeft = 1, stripeDrawOnRight = 2, stripeToConnectingLanesLeft = 3, stripeToConnectingLanesRight = 4, stripeToConnectingLanesAhead = 5 };

   /**
    * Control class: ASN1C_LaneAttributes_Striping
    * Data class:    ASN1T_LaneAttributes_Striping
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Striping (ASN1T_LaneAttributes_Striping& data);

   /**
    * Control class: ASN1C_LaneAttributes_Striping<br/>
    * Data class: ASN1T_LaneAttributes_Striping<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Striping (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Striping& data);

   virtual ~ASN1C_LaneAttributes_Striping () {}

private:
   ASN1C_LaneAttributes_Striping& operator= (const ASN1C_LaneAttributes_Striping&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Striping (OSCTXT* pctxt, ASN1T_LaneAttributes_Striping* pvalue);

EXTERN int asn1PD_LaneAttributes_Striping (OSCTXT* pctxt, ASN1T_LaneAttributes_Striping* pvalue);

EXTERN int XmlEnc_LaneAttributes_Striping (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Striping* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Striping (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Striping* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Striping (OSCTXT *pctxt, ASN1T_LaneAttributes_Striping *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Striping (OSCTXT *pctxt, ASN1T_LaneAttributes_Striping *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Striping (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Striping* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Striping_NAMEDBITTAB[7];

EXTERN ASN1T_LaneAttributes_Striping* 
   new_ASN1T_LaneAttributes_Striping (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Striping (ASN1T_LaneAttributes_Striping* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_TrackedVehicle                             */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-TrackedVehicle ::= BIT STRING  { spec-RevocableLane(0), spec-commuterRailRoadTrack(1), spec-lightRailRoadTrack(2), spec-heavyRailRoadTrack(3), spec-otherRailType(4) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_TrackedVehicle {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_TrackedVehicle ()  {}
   ASN1T_LaneAttributes_TrackedVehicle (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_TrackedVehicle :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_TrackedVehicle& msgData;
public:
   // named bits
   enum { spec_RevocableLane = 0, spec_commuterRailRoadTrack = 1, spec_lightRailRoadTrack = 2, spec_heavyRailRoadTrack = 3, spec_otherRailType = 4 };

   /**
    * Control class: ASN1C_LaneAttributes_TrackedVehicle
    * Data class:    ASN1T_LaneAttributes_TrackedVehicle
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_TrackedVehicle
       (ASN1T_LaneAttributes_TrackedVehicle& data);

   /**
    * Control class: ASN1C_LaneAttributes_TrackedVehicle<br/>
    * Data class: ASN1T_LaneAttributes_TrackedVehicle<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_TrackedVehicle (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_TrackedVehicle& data);

   virtual ~ASN1C_LaneAttributes_TrackedVehicle () {}

private:
   ASN1C_LaneAttributes_TrackedVehicle& operator= (const ASN1C_LaneAttributes_TrackedVehicle&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_TrackedVehicle (OSCTXT* pctxt, ASN1T_LaneAttributes_TrackedVehicle* pvalue);

EXTERN int asn1PD_LaneAttributes_TrackedVehicle (OSCTXT* pctxt, ASN1T_LaneAttributes_TrackedVehicle* pvalue);

EXTERN int XmlEnc_LaneAttributes_TrackedVehicle (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_TrackedVehicle* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_TrackedVehicle (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_TrackedVehicle* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_TrackedVehicle (OSCTXT *pctxt, ASN1T_LaneAttributes_TrackedVehicle *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_TrackedVehicle (OSCTXT *pctxt, ASN1T_LaneAttributes_TrackedVehicle *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_TrackedVehicle (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_TrackedVehicle* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_TrackedVehicle_NAMEDBITTAB[6];

EXTERN ASN1T_LaneAttributes_TrackedVehicle* 
   new_ASN1T_LaneAttributes_TrackedVehicle (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_TrackedVehicle (
   ASN1T_LaneAttributes_TrackedVehicle* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Vehicle                                    */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Vehicle ::= BIT STRING  { isVehicleRevocableLane(0), isVehicleFlyOverLane(1), hovLaneUseOnly(2), restrictedToBusUse(3), restrictedToTaxiUse(4), restrictedFromPublicUse(5), hasIRbeaconCoverage(6), permissionOnRequest(7) } (SIZE (8, ...))
*/
struct EXTERN ASN1T_LaneAttributes_Vehicle {
   OSUINT8 numbits;
   OSOCTET data[1];
   OSOCTET* extdata;
   // ctors
   ASN1T_LaneAttributes_Vehicle () : numbits(0), extdata(0) {}
} ;

class EXTERN ASN1C_LaneAttributes_Vehicle :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Vehicle& msgData;
public:
   // named bits
   enum { isVehicleRevocableLane = 0, isVehicleFlyOverLane = 1, hovLaneUseOnly = 2, restrictedToBusUse = 3, restrictedToTaxiUse = 4, restrictedFromPublicUse = 5, hasIRbeaconCoverage = 6, permissionOnRequest = 7 };

   /**
    * Control class: ASN1C_LaneAttributes_Vehicle
    * Data class:    ASN1T_LaneAttributes_Vehicle
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Vehicle (ASN1T_LaneAttributes_Vehicle& data);

   /**
    * Control class: ASN1C_LaneAttributes_Vehicle<br/>
    * Data class: ASN1T_LaneAttributes_Vehicle<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Vehicle (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Vehicle& data);

   virtual ~ASN1C_LaneAttributes_Vehicle () {}

private:
   ASN1C_LaneAttributes_Vehicle& operator= (const ASN1C_LaneAttributes_Vehicle&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Vehicle (OSCTXT* pctxt, ASN1T_LaneAttributes_Vehicle* pvalue);

EXTERN int asn1PD_LaneAttributes_Vehicle (OSCTXT* pctxt, ASN1T_LaneAttributes_Vehicle* pvalue);

EXTERN int XmlEnc_LaneAttributes_Vehicle (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Vehicle* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Vehicle (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Vehicle* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Vehicle (OSCTXT *pctxt, ASN1T_LaneAttributes_Vehicle *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Vehicle (OSCTXT *pctxt, ASN1T_LaneAttributes_Vehicle *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Vehicle (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Vehicle* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Vehicle_NAMEDBITTAB[9];

EXTERN ASN1T_LaneAttributes_Vehicle* 
   new_ASN1T_LaneAttributes_Vehicle (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Vehicle (ASN1T_LaneAttributes_Vehicle* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneDirection                                             */
/*                                                            */
/**************************************************************/
/*
LaneDirection ::= BIT STRING  { ingressPath(0), egressPath(1) } (SIZE (2))
*/
struct EXTERN ASN1T_LaneDirection {
   OSOCTET data[1];
   // ctors
   ASN1T_LaneDirection ()  {}
   ASN1T_LaneDirection (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 1, _data, 1);
   }
} ;

class EXTERN ASN1C_LaneDirection :
public ASN1CBitStr
{
protected:
   ASN1T_LaneDirection& msgData;
public:
   // named bits
   enum { ingressPath = 0, egressPath = 1 };

   /**
    * Control class: ASN1C_LaneDirection
    * Data class:    ASN1T_LaneDirection
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneDirection (ASN1T_LaneDirection& data);

   /**
    * Control class: ASN1C_LaneDirection<br/>
    * Data class: ASN1T_LaneDirection<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneDirection (OSRTMessageBufferIF& msgBuf, ASN1T_LaneDirection& data);

   virtual ~ASN1C_LaneDirection () {}

private:
   ASN1C_LaneDirection& operator= (const ASN1C_LaneDirection&) {return *this;}
} ;

EXTERN int asn1PE_LaneDirection (OSCTXT* pctxt, ASN1T_LaneDirection* pvalue);

EXTERN int asn1PD_LaneDirection (OSCTXT* pctxt, ASN1T_LaneDirection* pvalue);

EXTERN int XmlEnc_LaneDirection (OSCTXT* pctxt, ASN1T_LaneDirection* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneDirection (OSCTXT* pctxt, ASN1T_LaneDirection* pvalue);

EXTERN int asn1JsonEnc_LaneDirection (OSCTXT *pctxt, ASN1T_LaneDirection *pvalue);

EXTERN int asn1JsonDec_LaneDirection (OSCTXT *pctxt, ASN1T_LaneDirection *pvalue);

EXTERN int asn1PrtToStrm_LaneDirection (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneDirection* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneDirection_NAMEDBITTAB[3];

EXTERN ASN1T_LaneDirection* new_ASN1T_LaneDirection (ASN1CType& ccobj);

EXTERN int asn1Init_LaneDirection (ASN1T_LaneDirection* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneSharing                                               */
/*                                                            */
/**************************************************************/
/*
LaneSharing ::= BIT STRING  { overlappingLaneDescriptionProvided(0), multipleLanesTreatedAsOneLane(1), otherNonMotorizedTrafficTypes(2), individualMotorizedVehicleTraffic(3), busVehicleTraffic(4), taxiVehicleTraffic(5), pedestriansTraffic(6), cyclistVehicleTraffic(7), trackedVehicleTraffic(8), reserved(9) } (SIZE (10))
     All zeros would indicate 'not shared' and 'not overlapping'

*/
struct EXTERN ASN1T_LaneSharing {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneSharing ()  {}
   ASN1T_LaneSharing (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneSharing :
public ASN1CBitStr
{
protected:
   ASN1T_LaneSharing& msgData;
public:
   // named bits
   enum { overlappingLaneDescriptionProvided = 0, multipleLanesTreatedAsOneLane = 1, otherNonMotorizedTrafficTypes = 2, individualMotorizedVehicleTraffic = 3, busVehicleTraffic = 4, taxiVehicleTraffic = 5, pedestriansTraffic = 6, cyclistVehicleTraffic = 7, trackedVehicleTraffic = 8, reserved = 9 };

   /**
    * Control class: ASN1C_LaneSharing
    * Data class:    ASN1T_LaneSharing
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneSharing (ASN1T_LaneSharing& data);

   /**
    * Control class: ASN1C_LaneSharing<br/>
    * Data class: ASN1T_LaneSharing<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneSharing (OSRTMessageBufferIF& msgBuf, ASN1T_LaneSharing& data);

   virtual ~ASN1C_LaneSharing () {}

private:
   ASN1C_LaneSharing& operator= (const ASN1C_LaneSharing&) {return *this;}
} ;

EXTERN int asn1PE_LaneSharing (OSCTXT* pctxt, ASN1T_LaneSharing* pvalue);

EXTERN int asn1PD_LaneSharing (OSCTXT* pctxt, ASN1T_LaneSharing* pvalue);

EXTERN int XmlEnc_LaneSharing (OSCTXT* pctxt, ASN1T_LaneSharing* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneSharing (OSCTXT* pctxt, ASN1T_LaneSharing* pvalue);

EXTERN int asn1JsonEnc_LaneSharing (OSCTXT *pctxt, ASN1T_LaneSharing *pvalue);

EXTERN int asn1JsonDec_LaneSharing (OSCTXT *pctxt, ASN1T_LaneSharing *pvalue);

EXTERN int asn1PrtToStrm_LaneSharing (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneSharing* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneSharing_NAMEDBITTAB[11];

EXTERN ASN1T_LaneSharing* new_ASN1T_LaneSharing (ASN1CType& ccobj);

EXTERN int asn1Init_LaneSharing (ASN1T_LaneSharing* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LayerID                                                   */
/*                                                            */
/**************************************************************/
/*
LayerID ::= INTEGER (0..100)
*/
typedef OSUINT8 ASN1T_LayerID;

EXTERN int asn1PE_LayerID (OSCTXT* pctxt, ASN1T_LayerID value);

EXTERN int asn1PD_LayerID (OSCTXT* pctxt, ASN1T_LayerID* pvalue);

EXTERN int XmlEnc_LayerID (OSCTXT* pctxt, ASN1T_LayerID value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LayerID (OSCTXT* pctxt, ASN1T_LayerID* pvalue);

EXTERN int asn1JsonEnc_LayerID (OSCTXT *pctxt, ASN1T_LayerID *pvalue);

EXTERN int asn1JsonDec_LayerID (OSCTXT *pctxt, ASN1T_LayerID *pvalue);

EXTERN int asn1PrtToStrm_LayerID (OSCTXT *pctxt, 
   const char* name, const ASN1T_LayerID* pvalue);

EXTERN ASN1T_LayerID* new_ASN1T_LayerID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  LayerType                                                 */
/*                                                            */
/**************************************************************/
/*
LayerType ::= ENUMERATED { none(0), mixedContent(1), generalMapData(2), intersectionData(3), curveData(4), roadwaySectionData(5), parkingAreaData(6), sharedLaneData(7), ... }
*/
struct EXTERN LayerType {
   enum Root {
      none = 0,
      mixedContent = 1,
      generalMapData = 2,
      intersectionData = 3,
      curveData = 4,
      roadwaySectionData = 5,
      parkingAreaData = 6,
      sharedLaneData = 7
   } ;
} ;

typedef OSUINT32 ASN1T_LayerType;

EXTERN int asn1PE_LayerType (OSCTXT* pctxt, ASN1T_LayerType value);

EXTERN int asn1PD_LayerType (OSCTXT* pctxt, ASN1T_LayerType* pvalue);

EXTERN int XmlEnc_LayerType (OSCTXT* pctxt, ASN1T_LayerType value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LayerType (OSCTXT* pctxt, ASN1T_LayerType* pvalue);

EXTERN int asn1JsonEnc_LayerType (OSCTXT *pctxt, ASN1T_LayerType *pvalue);

EXTERN int asn1JsonDec_LayerType (OSCTXT *pctxt, ASN1T_LayerType *pvalue);

EXTERN int asn1PrtToStrm_LayerType (OSCTXT *pctxt, 
   const char* name, const ASN1T_LayerType* pvalue);

EXTERN ASN1T_LayerType* new_ASN1T_LayerType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_LayerType_ENUMTAB[];
#define ASN1T_LayerType_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_LayerType_ToString (OSINT32 value);

EXTERN int ASN1T_LayerType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_LayerType* pvalue);

EXTERN int ASN1T_LayerType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_LayerType* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionAppliesTo                                      */
/*                                                            */
/**************************************************************/
/*
RestrictionAppliesTo ::= ENUMERATED { none(0), equippedTransit(1), equippedTaxis(2), equippedOther(3), emissionCompliant(4), equippedBicycle(5), weightCompliant(6), heightCompliant(7), pedestrians(8), slowMovingPersons(9), wheelchairUsers(10), visualDisabilities(11), audioDisabilities(12), otherUnknownDisabilities(13), ... }
*/
struct EXTERN RestrictionAppliesTo {
   enum Root {
      none = 0,
      equippedTransit = 1,
      equippedTaxis = 2,
      equippedOther = 3,
      emissionCompliant = 4,
      equippedBicycle = 5,
      weightCompliant = 6,
      heightCompliant = 7,
      pedestrians = 8,
      slowMovingPersons = 9,
      wheelchairUsers = 10,
      visualDisabilities = 11,
      audioDisabilities = 12,
      otherUnknownDisabilities = 13
   } ;
} ;

typedef OSUINT32 ASN1T_RestrictionAppliesTo;

EXTERN int asn1PE_RestrictionAppliesTo (OSCTXT* pctxt, ASN1T_RestrictionAppliesTo value);

EXTERN int asn1PD_RestrictionAppliesTo (OSCTXT* pctxt, ASN1T_RestrictionAppliesTo* pvalue);

EXTERN int XmlEnc_RestrictionAppliesTo (OSCTXT* pctxt, 
   ASN1T_RestrictionAppliesTo value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionAppliesTo (OSCTXT* pctxt, 
   ASN1T_RestrictionAppliesTo* pvalue);

EXTERN int asn1JsonEnc_RestrictionAppliesTo (OSCTXT *pctxt, ASN1T_RestrictionAppliesTo *pvalue);

EXTERN int asn1JsonDec_RestrictionAppliesTo (OSCTXT *pctxt, ASN1T_RestrictionAppliesTo *pvalue);

EXTERN int asn1PrtToStrm_RestrictionAppliesTo (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionAppliesTo* pvalue);

EXTERN ASN1T_RestrictionAppliesTo* 
   new_ASN1T_RestrictionAppliesTo (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_RestrictionAppliesTo_ENUMTAB[];
#define ASN1T_RestrictionAppliesTo_ENUMTABSIZE 14

EXTERN const OSUTF8CHAR* ASN1T_RestrictionAppliesTo_ToString (OSINT32 value);

EXTERN int ASN1T_RestrictionAppliesTo_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_RestrictionAppliesTo* pvalue);

EXTERN int ASN1T_RestrictionAppliesTo_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_RestrictionAppliesTo* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneTypeAttributes                                        */
/*                                                            */
/**************************************************************/
/*
LaneTypeAttributes ::= CHOICE {
   vehicle [0] LaneAttributes-Vehicle, -- motor vehicle lanes
   crosswalk [1] LaneAttributes-Crosswalk, -- pedestrian crosswalks
   bikeLane [2] LaneAttributes-Bike, -- bike lanes
   sidewalk [3] LaneAttributes-Sidewalk, -- pedestrian sidewalk paths
   median [4] LaneAttributes-Barrier, -- medians & channelization
   striping [5] LaneAttributes-Striping, -- roadway markings
   trackedVehicle [6] LaneAttributes-TrackedVehicle, -- trains and trolleys
   parking [7] LaneAttributes-Parking,
   ...
}
*/
/* Choice tag constants */

#define T_LaneTypeAttributes_vehicle    1
#define T_LaneTypeAttributes_crosswalk  2
#define T_LaneTypeAttributes_bikeLane   3
#define T_LaneTypeAttributes_sidewalk   4
#define T_LaneTypeAttributes_median     5
#define T_LaneTypeAttributes_striping   6
#define T_LaneTypeAttributes_trackedVehicle 7
#define T_LaneTypeAttributes_parking    8
#define T_LaneTypeAttributes_extElem1   9

struct EXTERN ASN1T_LaneTypeAttributes {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_LaneAttributes_Vehicle *vehicle;
      /* t = 2 */
      ASN1T_LaneAttributes_Crosswalk *crosswalk;
      /* t = 3 */
      ASN1T_LaneAttributes_Bike *bikeLane;
      /* t = 4 */
      ASN1T_LaneAttributes_Sidewalk *sidewalk;
      /* t = 5 */
      ASN1T_LaneAttributes_Barrier *median;
      /* t = 6 */
      ASN1T_LaneAttributes_Striping *striping;
      /* t = 7 */
      ASN1T_LaneAttributes_TrackedVehicle *trackedVehicle;
      /* t = 8 */
      ASN1T_LaneAttributes_Parking *parking;
      /* t = 9 */
      ASN1TOpenType *extElem1;
   } u;
   ASN1T_LaneTypeAttributes () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_LaneTypeAttributes (OSCTXT* pctxt, ASN1T_LaneTypeAttributes* pvalue);

EXTERN int asn1PD_LaneTypeAttributes (OSCTXT* pctxt, ASN1T_LaneTypeAttributes* pvalue);

EXTERN int XmlEnc_LaneTypeAttributes (OSCTXT* pctxt, 
   ASN1T_LaneTypeAttributes* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneTypeAttributes (OSCTXT* pctxt, 
   ASN1T_LaneTypeAttributes* pvalue);

EXTERN int asn1JsonEnc_LaneTypeAttributes (OSCTXT *pctxt, ASN1T_LaneTypeAttributes *pvalue);

EXTERN int asn1JsonDec_LaneTypeAttributes (OSCTXT *pctxt, ASN1T_LaneTypeAttributes *pvalue);

EXTERN int asn1PrtToStrm_LaneTypeAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneTypeAttributes* pvalue);

EXTERN ASN1T_LaneTypeAttributes* 
   new_ASN1T_LaneTypeAttributes (ASN1CType& ccobj);

EXTERN int asn1Init_LaneTypeAttributes (ASN1T_LaneTypeAttributes* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LaneTypeAttributes (OSCTXT *pctxt, 
   ASN1T_LaneTypeAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_regional                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'LaneAttributes'
*/
struct EXTERN ASN1T_LaneAttributes_regional {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_LaneAttributes_regional (OSCTXT* pctxt, ASN1T_LaneAttributes_regional* pvalue);

EXTERN int asn1PD_LaneAttributes_regional (OSCTXT* pctxt, ASN1T_LaneAttributes_regional* pvalue);

EXTERN int XmlEnc_LaneAttributes_regional (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_regional (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_regional* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_regional (OSCTXT *pctxt, ASN1T_LaneAttributes_regional *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_regional (OSCTXT *pctxt, ASN1T_LaneAttributes_regional *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_regional* pvalue);

EXTERN ASN1T_LaneAttributes_regional* 
   new_ASN1T_LaneAttributes_regional (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_regional (ASN1T_LaneAttributes_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LaneAttributes_regional (OSCTXT *pctxt, 
   ASN1T_LaneAttributes_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes                                            */
/*                                                            */
/**************************************************************/
/*
LaneAttributes ::= SEQUENCE {
   directionalUse [0] LaneDirection, -- directions of lane use
   sharedWith [1] LaneSharing, -- co-users of the lane path
   laneType [2] EXPLICIT LaneTypeAttributes, -- specific lane type data
   regional [3] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-LaneAttributes}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-LaneAttributes}{@regionId})
   } OPTIONAL
}
*/
struct EXTERN ASN1T_LaneAttributes {
   struct {
      unsigned regionalPresent : 1;
   } m;
   ASN1T_LaneDirection directionalUse;
   ASN1T_LaneSharing sharedWith;
   ASN1T_LaneTypeAttributes laneType;
   ASN1T_LaneAttributes_regional regional;
   ASN1T_LaneAttributes ();
} ;

EXTERN int asn1PE_LaneAttributes (OSCTXT* pctxt, ASN1T_LaneAttributes* pvalue);

EXTERN int asn1PD_LaneAttributes (OSCTXT* pctxt, ASN1T_LaneAttributes* pvalue);

EXTERN int XmlEnc_LaneAttributes (OSCTXT* pctxt, ASN1T_LaneAttributes* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes (OSCTXT* pctxt, ASN1T_LaneAttributes* pvalue)
   ;

EXTERN int asn1JsonEnc_LaneAttributes (OSCTXT *pctxt, ASN1T_LaneAttributes *pvalue);

EXTERN int asn1JsonDec_LaneAttributes (OSCTXT *pctxt, ASN1T_LaneAttributes *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes* pvalue);

EXTERN ASN1T_LaneAttributes* new_ASN1T_LaneAttributes (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes (ASN1T_LaneAttributes* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LaneAttributes (OSCTXT *pctxt, ASN1T_LaneAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectingLane                                            */
/*                                                            */
/**************************************************************/
/*
ConnectingLane ::= SEQUENCE {
   lane [0] LaneID, -- Index of the connecting lane
   maneuver [1] AllowedManeuvers OPTIONAL
                       -- The Maneuver between 
                       -- the enclosing lane and this lane
                       -- at the stop line to connect them
}
*/
struct EXTERN ASN1T_ConnectingLane {
   struct {
      unsigned maneuverPresent : 1;
   } m;
   OSUINT8 lane;
   ASN1T_AllowedManeuvers maneuver;
   ASN1T_ConnectingLane ();
} ;

EXTERN int asn1PE_ConnectingLane (OSCTXT* pctxt, ASN1T_ConnectingLane* pvalue);

EXTERN int asn1PD_ConnectingLane (OSCTXT* pctxt, ASN1T_ConnectingLane* pvalue);

EXTERN int XmlEnc_ConnectingLane (OSCTXT* pctxt, ASN1T_ConnectingLane* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ConnectingLane (OSCTXT* pctxt, ASN1T_ConnectingLane* pvalue)
   ;

EXTERN int asn1JsonEnc_ConnectingLane (OSCTXT *pctxt, ASN1T_ConnectingLane *pvalue);

EXTERN int asn1JsonDec_ConnectingLane (OSCTXT *pctxt, ASN1T_ConnectingLane *pvalue);

EXTERN int asn1PrtToStrm_ConnectingLane (OSCTXT *pctxt, 
   const char* name, const ASN1T_ConnectingLane* pvalue);

EXTERN ASN1T_ConnectingLane* new_ASN1T_ConnectingLane (ASN1CType& ccobj);

EXTERN int asn1Init_ConnectingLane (ASN1T_ConnectingLane* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  Connection                                                */
/*                                                            */
/**************************************************************/
/*
Connection ::= SEQUENCE {
   -- The subject lane connecting to this lane is:
   connectingLane [0] ConnectingLane,
                      -- The index of the connecting lane and also
                      -- the maneuver from the current lane to it
   remoteIntersection [1] IntersectionReferenceID OPTIONAL,
                      -- This entry is only used when the 
                      -- indicated connecting lane belongs 
                      -- to another intersection layout. This 
                      -- provides a means to create meshes of lanes
   -- SPAT mapping details at the stop line are:
   signalGroup [2] SignalGroupID OPTIONAL,
                      -- The matching signal group send by 
                      -- the SPAT message for this lane/maneuver.
                      -- Shall be present unless the connectingLane 
                      -- has no signal group (is un-signalized)
   userClass [3] RestrictionClassID OPTIONAL,
                      -- The Restriction Class of users this applies to
                      -- The use of some lane/maneuver and SignalGroupID 
                      -- pairings are restricted to selected users.
                      -- When absent, the SignalGroupID applies to all
   -- Movement assist details are given by:
   connectionID [4] LaneConnectionID OPTIONAL
                      -- An optional connection index used to 
                      -- relate this lane connection to any dynamic 
                      -- clearance data in the SPAT. Note that
                      -- the index may be shared with other 
                      -- connections if the clearance data is common
}
*/
struct EXTERN ASN1T_Connection {
   struct {
      unsigned remoteIntersectionPresent : 1;
      unsigned signalGroupPresent : 1;
      unsigned userClassPresent : 1;
      unsigned connectionIDPresent : 1;
   } m;
   ASN1T_ConnectingLane connectingLane;
   struct ASN1T_IntersectionReferenceID *remoteIntersection;
   OSUINT8 signalGroup;
   OSUINT8 userClass;
   OSUINT8 connectionID;
   ASN1T_Connection ();
} ;

EXTERN int asn1PE_Connection (OSCTXT* pctxt, ASN1T_Connection* pvalue);

EXTERN int asn1PD_Connection (OSCTXT* pctxt, ASN1T_Connection* pvalue);

EXTERN int XmlEnc_Connection (OSCTXT* pctxt, ASN1T_Connection* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Connection (OSCTXT* pctxt, ASN1T_Connection* pvalue);

EXTERN int asn1JsonEnc_Connection (OSCTXT *pctxt, ASN1T_Connection *pvalue);

EXTERN int asn1JsonDec_Connection (OSCTXT *pctxt, ASN1T_Connection *pvalue);

EXTERN int asn1PrtToStrm_Connection (OSCTXT *pctxt, 
   const char* name, const ASN1T_Connection* pvalue);

EXTERN ASN1T_Connection* new_ASN1T_Connection (ASN1CType& ccobj);

EXTERN int asn1Init_Connection (ASN1T_Connection* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  ConnectsToList                                            */
/*                                                            */
/**************************************************************/
/*
ConnectsToList ::= SEQUENCE (SIZE (1..16)) OF Connection
*/
/* List of ASN1T_Connection */
typedef ASN1TSeqOfList ASN1T_ConnectsToList;

class EXTERN ASN1C_ConnectsToList :
public ASN1CSeqOfList
{
protected:
   ASN1T_ConnectsToList& msgData;
public:
   /**
    * Control class: ASN1C_ConnectsToList
    * Data class:    ASN1T_ConnectsToList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ConnectsToList (ASN1T_ConnectsToList& data);

   /**
    * Control class: ASN1C_ConnectsToList<br/>
    * Data class: ASN1T_ConnectsToList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ConnectsToList (OSRTMessageBufferIF& msgBuf
      , ASN1T_ConnectsToList& data);

   /**
    * Control class: ASN1C_ConnectsToList<br/>
    * Data class: ASN1T_ConnectsToList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_ConnectsToList (ASN1CType& ccobj, ASN1T_ConnectsToList& data);

   virtual ~ASN1C_ConnectsToList () {}

   /**
    * Data class: ASN1T_Connection<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_Connection* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_Connection.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_Connection* NewElement ();

   /**
    * Data class: ASN1T_Connection.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_Connection* AppendNewElement ();

private:
   ASN1C_ConnectsToList& operator= (const ASN1C_ConnectsToList&) {return *this;}
} ;

EXTERN int asn1PE_ConnectsToList (OSCTXT* pctxt, ASN1T_ConnectsToList* pvalue);

EXTERN int asn1PD_ConnectsToList (OSCTXT* pctxt, ASN1T_ConnectsToList* pvalue);

EXTERN int XmlEnc_ConnectsToList (OSCTXT* pctxt, ASN1T_ConnectsToList* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ConnectsToList (OSCTXT* pctxt, ASN1T_ConnectsToList* pvalue)
   ;

EXTERN int asn1JsonEnc_ConnectsToList (OSCTXT *pctxt, ASN1T_ConnectsToList *pvalue);

EXTERN int asn1JsonDec_ConnectsToList (OSCTXT *pctxt, ASN1T_ConnectsToList *pvalue);

EXTERN int asn1PrtToStrm_ConnectsToList (OSCTXT *pctxt, 
   const char* name, const ASN1T_ConnectsToList* pvalue);

EXTERN int asn1Init_ConnectsToList (ASN1T_ConnectsToList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ConnectsToList (OSCTXT *pctxt, ASN1T_ConnectsToList* pvalue);

/**************************************************************/
/*                                                            */
/*  OverlayLaneList                                           */
/*                                                            */
/**************************************************************/
/*
OverlayLaneList ::= SEQUENCE (SIZE (1..5)) OF LaneID
    The unique ID numbers for any lane object which have
    spatial paths that overlay (run on top of, and not
    simply cross with) the current lane.
    Such as a train path that overlays a motor vehicle
    lane object for a roadway segment.

*/
typedef struct EXTERN ASN1T_OverlayLaneList {
   OSSIZE n;
   OSUINT8 *elem;
   ASN1T_OverlayLaneList () : n(0), elem(0) {}
} ASN1T_OverlayLaneList;

class EXTERN ASN1C_OverlayLaneList :
public ASN1CType
{
protected:
   ASN1T_OverlayLaneList& msgData;
public:
   /**
    * Control class: ASN1C_OverlayLaneList
    * Data class:    ASN1T_OverlayLaneList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_OverlayLaneList (ASN1T_OverlayLaneList& data);

   /**
    * Control class: ASN1C_OverlayLaneList<br/>
    * Data class: ASN1T_OverlayLaneList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_OverlayLaneList (OSRTMessageBufferIF& msgBuf
      , ASN1T_OverlayLaneList& data);

   /**
    * Control class: ASN1C_OverlayLaneList<br/>
    * Data class: ASN1T_OverlayLaneList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_OverlayLaneList (ASN1CType& ccobj, ASN1T_OverlayLaneList& data);

   virtual ~ASN1C_OverlayLaneList () {}

private:
   ASN1C_OverlayLaneList& operator= (const ASN1C_OverlayLaneList&) {return *this;}
} ;

EXTERN int asn1PE_OverlayLaneList (OSCTXT* pctxt, ASN1T_OverlayLaneList* pvalue);

EXTERN int asn1PD_OverlayLaneList (OSCTXT* pctxt, ASN1T_OverlayLaneList* pvalue);

EXTERN int XmlEnc_OverlayLaneList (OSCTXT* pctxt, 
   ASN1T_OverlayLaneList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OverlayLaneList (OSCTXT* pctxt, ASN1T_OverlayLaneList* pvalue
   );

EXTERN int asn1JsonEnc_OverlayLaneList (OSCTXT *pctxt, ASN1T_OverlayLaneList *pvalue);

EXTERN int asn1JsonDec_OverlayLaneList (OSCTXT *pctxt, ASN1T_OverlayLaneList *pvalue);

EXTERN int asn1PrtToStrm_OverlayLaneList (OSCTXT *pctxt, 
   const char* name, const ASN1T_OverlayLaneList* pvalue);

EXTERN int asn1Init_OverlayLaneList (ASN1T_OverlayLaneList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_OverlayLaneList (OSCTXT *pctxt, ASN1T_OverlayLaneList* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericLane_regional_element                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericLane'
*/
struct EXTERN ASN1T_GenericLane_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_GenericLane_regional_element (OSCTXT* pctxt, ASN1T_GenericLane_regional_element* pvalue);

EXTERN int asn1PD_GenericLane_regional_element (OSCTXT* pctxt, ASN1T_GenericLane_regional_element* pvalue);

EXTERN int XmlEnc_GenericLane_regional_element (OSCTXT* pctxt, 
   ASN1T_GenericLane_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GenericLane_regional_element (OSCTXT* pctxt, 
   ASN1T_GenericLane_regional_element* pvalue);

EXTERN int asn1JsonEnc_GenericLane_regional_element (OSCTXT *pctxt, ASN1T_GenericLane_regional_element *pvalue);

EXTERN int asn1JsonDec_GenericLane_regional_element (OSCTXT *pctxt, ASN1T_GenericLane_regional_element *pvalue);

EXTERN int asn1PrtToStrm_GenericLane_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_GenericLane_regional_element* pvalue);

EXTERN ASN1T_GenericLane_regional_element* 
   new_ASN1T_GenericLane_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_GenericLane_regional_element (
   ASN1T_GenericLane_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GenericLane_regional_element (OSCTXT *pctxt, 
   ASN1T_GenericLane_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericLane_regional                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericLane'
*/
/* List of ASN1T_GenericLane_regional_element */
typedef ASN1TSeqOfList ASN1T_GenericLane_regional;

class EXTERN ASN1C_GenericLane_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_GenericLane_regional& msgData;
public:
   /**
    * Control class: ASN1C_GenericLane_regional
    * Data class:    ASN1T_GenericLane_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_GenericLane_regional (ASN1T_GenericLane_regional& data);

   /**
    * Control class: ASN1C_GenericLane_regional<br/>
    * Data class: ASN1T_GenericLane_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_GenericLane_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_GenericLane_regional& data);

   /**
    * Control class: ASN1C_GenericLane_regional<br/>
    * Data class: ASN1T_GenericLane_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_GenericLane_regional (ASN1CType& ccobj
      , ASN1T_GenericLane_regional& data);

   virtual ~ASN1C_GenericLane_regional () {}

   /**
    * Data class: ASN1T_GenericLane_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GenericLane_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GenericLane_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GenericLane_regional_element* NewElement ();

   /**
    * Data class: ASN1T_GenericLane_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GenericLane_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_GenericLane_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, ASN1T_GenericLane_regional* pmatches);

private:
   ASN1C_GenericLane_regional& operator= (const ASN1C_GenericLane_regional&) {return *this;}
} ;

EXTERN int asn1PE_GenericLane_regional (OSCTXT* pctxt, ASN1T_GenericLane_regional* pvalue);

EXTERN int asn1PD_GenericLane_regional (OSCTXT* pctxt, ASN1T_GenericLane_regional* pvalue);

EXTERN int XmlEnc_GenericLane_regional (OSCTXT* pctxt, 
   ASN1T_GenericLane_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GenericLane_regional (OSCTXT* pctxt, 
   ASN1T_GenericLane_regional* pvalue);

EXTERN int asn1JsonEnc_GenericLane_regional (OSCTXT *pctxt, ASN1T_GenericLane_regional *pvalue);

EXTERN int asn1JsonDec_GenericLane_regional (OSCTXT *pctxt, ASN1T_GenericLane_regional *pvalue);

EXTERN int asn1PrtToStrm_GenericLane_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_GenericLane_regional* pvalue);

EXTERN int asn1Init_GenericLane_regional (ASN1T_GenericLane_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GenericLane_regional (OSCTXT *pctxt, 
   ASN1T_GenericLane_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericLane                                               */
/*                                                            */
/**************************************************************/
/*
GenericLane ::= SEQUENCE {
   laneID [0] LaneID,
                    -- The unique ID number assigned 
                    -- to this lane object
   name [1] DescriptiveName OPTIONAL,
                    -- often for debug use only 
                    -- but at times used to name ped crossings
   ingressApproach [2] ApproachID OPTIONAL, -- inbound
   egressApproach [3] ApproachID OPTIONAL, -- outbound
                    -- Approach IDs to which this lane belongs
   laneAttributes [4] LaneAttributes,
                    -- All Attribute information about 
                    -- the basic selected lane type
                    -- Directions of use, Geometric co-sharing
                    -- and Type Specific Attributes
                    -- These Attributes are 'lane - global' that is,
                    -- they are true for the entire length of the lane
   maneuvers [5] AllowedManeuvers OPTIONAL,
                    -- the permitted maneuvers for this lane
   nodeList [6] EXPLICIT NodeListXY,
                    -- Lane spatial path information as well as
                    -- various Attribute information along the node path  
                    -- Attributes found here are more general and may
                    -- come and go over the length of the lane.
   connectsTo [7] ConnectsToList OPTIONAL,
                    -- a list of other lanes and their signal group IDs
                    -- each connecting lane and its signal group ID
                    -- is given, therefore this element provides the
                    -- information formerly in "signalGroups" in prior
                    -- editions.
   overlays [8] OverlayLaneList OPTIONAL,
                    -- A list of any lanes which have spatial paths that
                    -- overlay (run on top of, and not simply cross) 
                    -- the path of this lane when used. An overlay
                    -- for one lane can be applied to parallel lanes
                    -- without repeating OverlayLaneList for each GenericLane
                    -- entry.
   regional [9] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-GenericLane}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-GenericLane}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_GenericLane {
   struct {
      unsigned namePresent : 1;
      unsigned ingressApproachPresent : 1;
      unsigned egressApproachPresent : 1;
      unsigned maneuversPresent : 1;
      unsigned connectsToPresent : 1;
      unsigned overlaysPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   OSUINT8 laneID;
   const char* name;
   OSUINT8 ingressApproach;
   OSUINT8 egressApproach;
   ASN1T_LaneAttributes laneAttributes;
   ASN1T_AllowedManeuvers maneuvers;
   struct ASN1T_NodeListXY *nodeList;
   ASN1T_ConnectsToList connectsTo;
   ASN1T_OverlayLaneList overlays;
   ASN1T_GenericLane_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_GenericLane ();
} ;

EXTERN int asn1PE_GenericLane (OSCTXT* pctxt, ASN1T_GenericLane* pvalue);

EXTERN int asn1PD_GenericLane (OSCTXT* pctxt, ASN1T_GenericLane* pvalue);

EXTERN int XmlEnc_GenericLane (OSCTXT* pctxt, ASN1T_GenericLane* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GenericLane (OSCTXT* pctxt, ASN1T_GenericLane* pvalue);

EXTERN int asn1JsonEnc_GenericLane (OSCTXT *pctxt, ASN1T_GenericLane *pvalue);

EXTERN int asn1JsonDec_GenericLane (OSCTXT *pctxt, ASN1T_GenericLane *pvalue);

EXTERN int asn1PrtToStrm_GenericLane (OSCTXT *pctxt, 
   const char* name, const ASN1T_GenericLane* pvalue);

EXTERN ASN1T_GenericLane* new_ASN1T_GenericLane (ASN1CType& ccobj);

EXTERN int asn1Init_GenericLane (ASN1T_GenericLane* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GenericLane (OSCTXT *pctxt, ASN1T_GenericLane* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneList                                                  */
/*                                                            */
/**************************************************************/
/*
LaneList ::= SEQUENCE (SIZE (1..255)) OF GenericLane
*/
/* List of ASN1T_GenericLane */
typedef ASN1TSeqOfList ASN1T_LaneList;

class EXTERN ASN1C_LaneList :
public ASN1CSeqOfList
{
protected:
   ASN1T_LaneList& msgData;
public:
   /**
    * Control class: ASN1C_LaneList
    * Data class:    ASN1T_LaneList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneList (ASN1T_LaneList& data);

   /**
    * Control class: ASN1C_LaneList<br/>
    * Data class: ASN1T_LaneList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneList (OSRTMessageBufferIF& msgBuf, ASN1T_LaneList& data);

   /**
    * Control class: ASN1C_LaneList<br/>
    * Data class: ASN1T_LaneList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_LaneList (ASN1CType& ccobj, ASN1T_LaneList& data);

   virtual ~ASN1C_LaneList () {}

   /**
    * Data class: ASN1T_GenericLane<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GenericLane* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GenericLane.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GenericLane* NewElement ();

   /**
    * Data class: ASN1T_GenericLane.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GenericLane* AppendNewElement ();

private:
   ASN1C_LaneList& operator= (const ASN1C_LaneList&) {return *this;}
} ;

EXTERN int asn1PE_LaneList (OSCTXT* pctxt, ASN1T_LaneList* pvalue);

EXTERN int asn1PD_LaneList (OSCTXT* pctxt, ASN1T_LaneList* pvalue);

EXTERN int XmlEnc_LaneList (OSCTXT* pctxt, ASN1T_LaneList* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneList (OSCTXT* pctxt, ASN1T_LaneList* pvalue);

EXTERN int asn1JsonEnc_LaneList (OSCTXT *pctxt, ASN1T_LaneList *pvalue);

EXTERN int asn1JsonDec_LaneList (OSCTXT *pctxt, ASN1T_LaneList *pvalue);

EXTERN int asn1PrtToStrm_LaneList (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneList* pvalue);

EXTERN int asn1Init_LaneList (ASN1T_LaneList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LaneList (OSCTXT *pctxt, ASN1T_LaneList* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalControlZone_zone                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalControlZone'
*/
struct EXTERN ASN1T_SignalControlZone_zone {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SignalControlZone_zone (OSCTXT* pctxt, ASN1T_SignalControlZone_zone* pvalue);

EXTERN int asn1PD_SignalControlZone_zone (OSCTXT* pctxt, ASN1T_SignalControlZone_zone* pvalue);

EXTERN int XmlEnc_SignalControlZone_zone (OSCTXT* pctxt, 
   ASN1T_SignalControlZone_zone* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalControlZone_zone (OSCTXT* pctxt, 
   ASN1T_SignalControlZone_zone* pvalue);

EXTERN int asn1JsonEnc_SignalControlZone_zone (OSCTXT *pctxt, ASN1T_SignalControlZone_zone *pvalue);

EXTERN int asn1JsonDec_SignalControlZone_zone (OSCTXT *pctxt, ASN1T_SignalControlZone_zone *pvalue);

EXTERN int asn1PrtToStrm_SignalControlZone_zone (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalControlZone_zone* pvalue);

EXTERN ASN1T_SignalControlZone_zone* 
   new_ASN1T_SignalControlZone_zone (ASN1CType& ccobj);

EXTERN int asn1Init_SignalControlZone_zone (ASN1T_SignalControlZone_zone* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalControlZone_zone (OSCTXT *pctxt, 
   ASN1T_SignalControlZone_zone* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalControlZone                                         */
/*                                                            */
/**************************************************************/
/*
SignalControlZone ::= SEQUENCE {
   zone [0] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-SignalControlZone}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-SignalControlZone}{@regionId})
   },
   ...
}
*/
struct EXTERN ASN1T_SignalControlZone {
   ASN1T_SignalControlZone_zone zone;
   ASN1TSeqExt extElem1;
} ;

EXTERN int asn1PE_SignalControlZone (OSCTXT* pctxt, ASN1T_SignalControlZone* pvalue);

EXTERN int asn1PD_SignalControlZone (OSCTXT* pctxt, ASN1T_SignalControlZone* pvalue);

EXTERN int XmlEnc_SignalControlZone (OSCTXT* pctxt, 
   ASN1T_SignalControlZone* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalControlZone (OSCTXT* pctxt, 
   ASN1T_SignalControlZone* pvalue);

EXTERN int asn1JsonEnc_SignalControlZone (OSCTXT *pctxt, ASN1T_SignalControlZone *pvalue);

EXTERN int asn1JsonDec_SignalControlZone (OSCTXT *pctxt, ASN1T_SignalControlZone *pvalue);

EXTERN int asn1PrtToStrm_SignalControlZone (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalControlZone* pvalue);

EXTERN ASN1T_SignalControlZone* new_ASN1T_SignalControlZone (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_SignalControlZone (ASN1T_SignalControlZone* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalControlZone (OSCTXT *pctxt, 
   ASN1T_SignalControlZone* pvalue);

/**************************************************************/
/*                                                            */
/*  PreemptPriorityList                                       */
/*                                                            */
/**************************************************************/
/*
PreemptPriorityList ::= SEQUENCE (SIZE (1..32)) OF SignalControlZone
*/
/* List of ASN1T_SignalControlZone */
typedef ASN1TSeqOfList ASN1T_PreemptPriorityList;

class EXTERN ASN1C_PreemptPriorityList :
public ASN1CSeqOfList
{
protected:
   ASN1T_PreemptPriorityList& msgData;
public:
   /**
    * Control class: ASN1C_PreemptPriorityList
    * Data class:    ASN1T_PreemptPriorityList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PreemptPriorityList (ASN1T_PreemptPriorityList& data);

   /**
    * Control class: ASN1C_PreemptPriorityList<br/>
    * Data class: ASN1T_PreemptPriorityList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PreemptPriorityList (OSRTMessageBufferIF& msgBuf
      , ASN1T_PreemptPriorityList& data);

   /**
    * Control class: ASN1C_PreemptPriorityList<br/>
    * Data class: ASN1T_PreemptPriorityList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_PreemptPriorityList (ASN1CType& ccobj, ASN1T_PreemptPriorityList& data
      );

   virtual ~ASN1C_PreemptPriorityList () {}

   /**
    * Data class: ASN1T_SignalControlZone<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalControlZone* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalControlZone.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalControlZone* NewElement ();

   /**
    * Data class: ASN1T_SignalControlZone.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalControlZone* AppendNewElement ();

private:
   ASN1C_PreemptPriorityList& operator= (const ASN1C_PreemptPriorityList&) {return *this;}
} ;

EXTERN int asn1PE_PreemptPriorityList (OSCTXT* pctxt, ASN1T_PreemptPriorityList* pvalue);

EXTERN int asn1PD_PreemptPriorityList (OSCTXT* pctxt, ASN1T_PreemptPriorityList* pvalue);

EXTERN int XmlEnc_PreemptPriorityList (OSCTXT* pctxt, 
   ASN1T_PreemptPriorityList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PreemptPriorityList (OSCTXT* pctxt, 
   ASN1T_PreemptPriorityList* pvalue);

EXTERN int asn1JsonEnc_PreemptPriorityList (OSCTXT *pctxt, ASN1T_PreemptPriorityList *pvalue);

EXTERN int asn1JsonDec_PreemptPriorityList (OSCTXT *pctxt, ASN1T_PreemptPriorityList *pvalue);

EXTERN int asn1PrtToStrm_PreemptPriorityList (OSCTXT *pctxt, 
   const char* name, const ASN1T_PreemptPriorityList* pvalue);

EXTERN int asn1Init_PreemptPriorityList (ASN1T_PreemptPriorityList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PreemptPriorityList (OSCTXT *pctxt, 
   ASN1T_PreemptPriorityList* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometry_regional_element                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionGeometry'
*/
struct EXTERN ASN1T_IntersectionGeometry_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_IntersectionGeometry_regional_element (OSCTXT* pctxt, ASN1T_IntersectionGeometry_regional_element* pvalue);

EXTERN int asn1PD_IntersectionGeometry_regional_element (OSCTXT* pctxt, ASN1T_IntersectionGeometry_regional_element* pvalue);

EXTERN int XmlEnc_IntersectionGeometry_regional_element (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometry_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionGeometry_regional_element (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometry_regional_element* pvalue);

EXTERN int asn1JsonEnc_IntersectionGeometry_regional_element (OSCTXT *pctxt, ASN1T_IntersectionGeometry_regional_element *pvalue);

EXTERN int asn1JsonDec_IntersectionGeometry_regional_element (OSCTXT *pctxt, ASN1T_IntersectionGeometry_regional_element *pvalue);

EXTERN int asn1PrtToStrm_IntersectionGeometry_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionGeometry_regional_element* pvalue);

EXTERN ASN1T_IntersectionGeometry_regional_element* 
   new_ASN1T_IntersectionGeometry_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_IntersectionGeometry_regional_element (
   ASN1T_IntersectionGeometry_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionGeometry_regional_element (OSCTXT *pctxt, 
   ASN1T_IntersectionGeometry_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometry_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionGeometry'
*/
/* List of ASN1T_IntersectionGeometry_regional_element */
typedef ASN1TSeqOfList ASN1T_IntersectionGeometry_regional;

class EXTERN ASN1C_IntersectionGeometry_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_IntersectionGeometry_regional& msgData;
public:
   /**
    * Control class: ASN1C_IntersectionGeometry_regional
    * Data class:    ASN1T_IntersectionGeometry_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_IntersectionGeometry_regional
       (ASN1T_IntersectionGeometry_regional& data);

   /**
    * Control class: ASN1C_IntersectionGeometry_regional<br/>
    * Data class: ASN1T_IntersectionGeometry_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_IntersectionGeometry_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_IntersectionGeometry_regional& data);

   /**
    * Control class: ASN1C_IntersectionGeometry_regional<br/>
    * Data class: ASN1T_IntersectionGeometry_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_IntersectionGeometry_regional (ASN1CType& ccobj
      , ASN1T_IntersectionGeometry_regional& data);

   virtual ~ASN1C_IntersectionGeometry_regional () {}

   /**
    * Data class: ASN1T_IntersectionGeometry_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_IntersectionGeometry_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_IntersectionGeometry_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_IntersectionGeometry_regional_element* NewElement ();

   /**
    * Data class: ASN1T_IntersectionGeometry_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_IntersectionGeometry_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_IntersectionGeometry_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_IntersectionGeometry_regional* pmatches);

private:
   ASN1C_IntersectionGeometry_regional& operator= (const ASN1C_IntersectionGeometry_regional&) {return *this;}
} ;

EXTERN int asn1PE_IntersectionGeometry_regional (OSCTXT* pctxt, ASN1T_IntersectionGeometry_regional* pvalue);

EXTERN int asn1PD_IntersectionGeometry_regional (OSCTXT* pctxt, ASN1T_IntersectionGeometry_regional* pvalue);

EXTERN int XmlEnc_IntersectionGeometry_regional (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometry_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionGeometry_regional (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometry_regional* pvalue);

EXTERN int asn1JsonEnc_IntersectionGeometry_regional (OSCTXT *pctxt, ASN1T_IntersectionGeometry_regional *pvalue);

EXTERN int asn1JsonDec_IntersectionGeometry_regional (OSCTXT *pctxt, ASN1T_IntersectionGeometry_regional *pvalue);

EXTERN int asn1PrtToStrm_IntersectionGeometry_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionGeometry_regional* pvalue);

EXTERN int asn1Init_IntersectionGeometry_regional (
   ASN1T_IntersectionGeometry_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionGeometry_regional (OSCTXT *pctxt, 
   ASN1T_IntersectionGeometry_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometry                                      */
/*                                                            */
/**************************************************************/
/*
IntersectionGeometry ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
                            -- For debug use only
   id [1] IntersectionReferenceID,
                            -- A globally unique value set, 
                            -- consisting of a regionID and 
                            -- intersection ID assignment
   revision [2] MsgCount,
   -- Required default values about lane descriptions follow
   refPoint [3] Position3D, -- The reference from which subsequent 
                            -- data points are offset until a new
                            -- point is used. 
   laneWidth [4] LaneWidth OPTIONAL,
                            -- Reference width used by all subsequent 
                            -- lanes unless a new width is given  
   speedLimits [5] SpeedLimitList OPTIONAL,
                            -- Reference regulatory speed limits
                            -- used by all subsequent 
                            -- lanes unless a new speed is given 
                            -- See Section 11 for converting and 
                            -- translating speed expressed in mph 
                            -- into units of m/s
   -- Complete details regarding each lane type in this intersection
   laneSet [6] LaneList, -- Data about one or more lanes
                            -- (all lane data is found here)
   -- Data describing how to use and request preemption and
   -- priority services from this intersection (if supported)
   -- NOTE Additonal data may be added in the next release of the 
   -- standard at this point to handle this concept
   preemptPriorityData [7] PreemptPriorityList OPTIONAL,
                           -- data about one or more regional
                           -- preempt or priority zones 
   regional [8] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-IntersectionGeometry}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-IntersectionGeometry}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_IntersectionGeometry {
   struct {
      unsigned namePresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned speedLimitsPresent : 1;
      unsigned preemptPriorityDataPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   const char* name;
   struct ASN1T_IntersectionReferenceID *id;
   OSUINT8 revision;
   struct ASN1T_Position3D *refPoint;
   OSUINT16 laneWidth;
   ASN1TSeqOfList speedLimits;
   ASN1T_LaneList laneSet;
   ASN1T_PreemptPriorityList preemptPriorityData;
   ASN1T_IntersectionGeometry_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_IntersectionGeometry ();
} ;

EXTERN int asn1PE_IntersectionGeometry (OSCTXT* pctxt, ASN1T_IntersectionGeometry* pvalue);

EXTERN int asn1PD_IntersectionGeometry (OSCTXT* pctxt, ASN1T_IntersectionGeometry* pvalue);

EXTERN int XmlEnc_IntersectionGeometry (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometry* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionGeometry (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometry* pvalue);

EXTERN int asn1JsonEnc_IntersectionGeometry (OSCTXT *pctxt, ASN1T_IntersectionGeometry *pvalue);

EXTERN int asn1JsonDec_IntersectionGeometry (OSCTXT *pctxt, ASN1T_IntersectionGeometry *pvalue);

EXTERN int asn1PrtToStrm_IntersectionGeometry (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionGeometry* pvalue);

EXTERN ASN1T_IntersectionGeometry* 
   new_ASN1T_IntersectionGeometry (ASN1CType& ccobj);

EXTERN int asn1Init_IntersectionGeometry (ASN1T_IntersectionGeometry* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionGeometry (OSCTXT *pctxt, 
   ASN1T_IntersectionGeometry* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometryList                                  */
/*                                                            */
/**************************************************************/
/*
IntersectionGeometryList ::= SEQUENCE (SIZE (1..32)) OF IntersectionGeometry
*/
/* List of ASN1T_IntersectionGeometry */
typedef ASN1TSeqOfList ASN1T_IntersectionGeometryList;

class EXTERN ASN1C_IntersectionGeometryList :
public ASN1CSeqOfList
{
protected:
   ASN1T_IntersectionGeometryList& msgData;
public:
   /**
    * Control class: ASN1C_IntersectionGeometryList
    * Data class:    ASN1T_IntersectionGeometryList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_IntersectionGeometryList (ASN1T_IntersectionGeometryList& data);

   /**
    * Control class: ASN1C_IntersectionGeometryList<br/>
    * Data class: ASN1T_IntersectionGeometryList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_IntersectionGeometryList (OSRTMessageBufferIF& msgBuf
      , ASN1T_IntersectionGeometryList& data);

   /**
    * Control class: ASN1C_IntersectionGeometryList<br/>
    * Data class: ASN1T_IntersectionGeometryList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_IntersectionGeometryList (ASN1CType& ccobj
      , ASN1T_IntersectionGeometryList& data);

   virtual ~ASN1C_IntersectionGeometryList () {}

   /**
    * Data class: ASN1T_IntersectionGeometry<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_IntersectionGeometry* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_IntersectionGeometry.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_IntersectionGeometry* NewElement ();

   /**
    * Data class: ASN1T_IntersectionGeometry.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_IntersectionGeometry* AppendNewElement ();

private:
   ASN1C_IntersectionGeometryList& operator= (const ASN1C_IntersectionGeometryList&) {return *this;}
} ;

EXTERN int asn1PE_IntersectionGeometryList (OSCTXT* pctxt, ASN1T_IntersectionGeometryList* pvalue);

EXTERN int asn1PD_IntersectionGeometryList (OSCTXT* pctxt, ASN1T_IntersectionGeometryList* pvalue);

EXTERN int XmlEnc_IntersectionGeometryList (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometryList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionGeometryList (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometryList* pvalue);

EXTERN int asn1JsonEnc_IntersectionGeometryList (OSCTXT *pctxt, ASN1T_IntersectionGeometryList *pvalue);

EXTERN int asn1JsonDec_IntersectionGeometryList (OSCTXT *pctxt, ASN1T_IntersectionGeometryList *pvalue);

EXTERN int asn1PrtToStrm_IntersectionGeometryList (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionGeometryList* pvalue);

EXTERN int asn1Init_IntersectionGeometryList (ASN1T_IntersectionGeometryList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionGeometryList (OSCTXT *pctxt, 
   ASN1T_IntersectionGeometryList* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadLaneSetList                                           */
/*                                                            */
/**************************************************************/
/*
RoadLaneSetList ::= SEQUENCE (SIZE (1..255)) OF GenericLane
*/
/* List of ASN1T_GenericLane */
typedef ASN1TSeqOfList ASN1T_RoadLaneSetList;

class EXTERN ASN1C_RoadLaneSetList :
public ASN1CSeqOfList
{
protected:
   ASN1T_RoadLaneSetList& msgData;
public:
   /**
    * Control class: ASN1C_RoadLaneSetList
    * Data class:    ASN1T_RoadLaneSetList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RoadLaneSetList (ASN1T_RoadLaneSetList& data);

   /**
    * Control class: ASN1C_RoadLaneSetList<br/>
    * Data class: ASN1T_RoadLaneSetList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RoadLaneSetList (OSRTMessageBufferIF& msgBuf
      , ASN1T_RoadLaneSetList& data);

   /**
    * Control class: ASN1C_RoadLaneSetList<br/>
    * Data class: ASN1T_RoadLaneSetList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RoadLaneSetList (ASN1CType& ccobj, ASN1T_RoadLaneSetList& data);

   virtual ~ASN1C_RoadLaneSetList () {}

   /**
    * Data class: ASN1T_GenericLane<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GenericLane* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GenericLane.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GenericLane* NewElement ();

   /**
    * Data class: ASN1T_GenericLane.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GenericLane* AppendNewElement ();

private:
   ASN1C_RoadLaneSetList& operator= (const ASN1C_RoadLaneSetList&) {return *this;}
} ;

EXTERN int asn1PE_RoadLaneSetList (OSCTXT* pctxt, ASN1T_RoadLaneSetList* pvalue);

EXTERN int asn1PD_RoadLaneSetList (OSCTXT* pctxt, ASN1T_RoadLaneSetList* pvalue);

EXTERN int XmlEnc_RoadLaneSetList (OSCTXT* pctxt, 
   ASN1T_RoadLaneSetList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadLaneSetList (OSCTXT* pctxt, ASN1T_RoadLaneSetList* pvalue
   );

EXTERN int asn1JsonEnc_RoadLaneSetList (OSCTXT *pctxt, ASN1T_RoadLaneSetList *pvalue);

EXTERN int asn1JsonDec_RoadLaneSetList (OSCTXT *pctxt, ASN1T_RoadLaneSetList *pvalue);

EXTERN int asn1PrtToStrm_RoadLaneSetList (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadLaneSetList* pvalue);

EXTERN int asn1Init_RoadLaneSetList (ASN1T_RoadLaneSetList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadLaneSetList (OSCTXT *pctxt, ASN1T_RoadLaneSetList* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegment_regional_element                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RoadSegment'
*/
struct EXTERN ASN1T_RoadSegment_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_RoadSegment_regional_element (OSCTXT* pctxt, ASN1T_RoadSegment_regional_element* pvalue);

EXTERN int asn1PD_RoadSegment_regional_element (OSCTXT* pctxt, ASN1T_RoadSegment_regional_element* pvalue);

EXTERN int XmlEnc_RoadSegment_regional_element (OSCTXT* pctxt, 
   ASN1T_RoadSegment_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSegment_regional_element (OSCTXT* pctxt, 
   ASN1T_RoadSegment_regional_element* pvalue);

EXTERN int asn1JsonEnc_RoadSegment_regional_element (OSCTXT *pctxt, ASN1T_RoadSegment_regional_element *pvalue);

EXTERN int asn1JsonDec_RoadSegment_regional_element (OSCTXT *pctxt, ASN1T_RoadSegment_regional_element *pvalue);

EXTERN int asn1PrtToStrm_RoadSegment_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSegment_regional_element* pvalue);

EXTERN ASN1T_RoadSegment_regional_element* 
   new_ASN1T_RoadSegment_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_RoadSegment_regional_element (
   ASN1T_RoadSegment_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSegment_regional_element (OSCTXT *pctxt, 
   ASN1T_RoadSegment_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegment_regional                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RoadSegment'
*/
/* List of ASN1T_RoadSegment_regional_element */
typedef ASN1TSeqOfList ASN1T_RoadSegment_regional;

class EXTERN ASN1C_RoadSegment_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_RoadSegment_regional& msgData;
public:
   /**
    * Control class: ASN1C_RoadSegment_regional
    * Data class:    ASN1T_RoadSegment_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RoadSegment_regional (ASN1T_RoadSegment_regional& data);

   /**
    * Control class: ASN1C_RoadSegment_regional<br/>
    * Data class: ASN1T_RoadSegment_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RoadSegment_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_RoadSegment_regional& data);

   /**
    * Control class: ASN1C_RoadSegment_regional<br/>
    * Data class: ASN1T_RoadSegment_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RoadSegment_regional (ASN1CType& ccobj
      , ASN1T_RoadSegment_regional& data);

   virtual ~ASN1C_RoadSegment_regional () {}

   /**
    * Data class: ASN1T_RoadSegment_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RoadSegment_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RoadSegment_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RoadSegment_regional_element* NewElement ();

   /**
    * Data class: ASN1T_RoadSegment_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RoadSegment_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_RoadSegment_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, ASN1T_RoadSegment_regional* pmatches);

private:
   ASN1C_RoadSegment_regional& operator= (const ASN1C_RoadSegment_regional&) {return *this;}
} ;

EXTERN int asn1PE_RoadSegment_regional (OSCTXT* pctxt, ASN1T_RoadSegment_regional* pvalue);

EXTERN int asn1PD_RoadSegment_regional (OSCTXT* pctxt, ASN1T_RoadSegment_regional* pvalue);

EXTERN int XmlEnc_RoadSegment_regional (OSCTXT* pctxt, 
   ASN1T_RoadSegment_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSegment_regional (OSCTXT* pctxt, 
   ASN1T_RoadSegment_regional* pvalue);

EXTERN int asn1JsonEnc_RoadSegment_regional (OSCTXT *pctxt, ASN1T_RoadSegment_regional *pvalue);

EXTERN int asn1JsonDec_RoadSegment_regional (OSCTXT *pctxt, ASN1T_RoadSegment_regional *pvalue);

EXTERN int asn1PrtToStrm_RoadSegment_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSegment_regional* pvalue);

EXTERN int asn1Init_RoadSegment_regional (ASN1T_RoadSegment_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSegment_regional (OSCTXT *pctxt, 
   ASN1T_RoadSegment_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegment                                               */
/*                                                            */
/**************************************************************/
/*
RoadSegment ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
   id [1] RoadSegmentReferenceID,
                           -- a globally unique value for the segment
   revision [2] MsgCount,
   -- Required default values about the descriptions to follow
   refPoint [3] Position3D, -- the reference from which subsequent
                           -- data points are offset until a new
                           -- point is used.
   laneWidth [4] LaneWidth OPTIONAL,
                            -- Reference width used by all subsequent 
                            -- lanes unless a new width is given  
   speedLimits [5] SpeedLimitList OPTIONAL,
                            -- Reference regulatory speed limits
                            -- used by all subsequent 
                            -- lanes unless a new speed is given   
                            -- See Section 11 for converting and  
                            -- translating speed expressed in mph 
                            -- into units of m/s
   -- Data describing disruptions in the RoadSegment
   -- such as work zones etc will be added here;
   -- in the US the SAE ITIS codes would be used here
   -- The details regarding each lane type in the RoadSegment
   roadLaneSet [6] RoadLaneSetList,
   regional [7] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-RoadSegment}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-RoadSegment}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_RoadSegment {
   struct {
      unsigned namePresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned speedLimitsPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   const char* name;
   struct ASN1T_RoadSegmentReferenceID *id;
   OSUINT8 revision;
   struct ASN1T_Position3D *refPoint;
   OSUINT16 laneWidth;
   ASN1TSeqOfList speedLimits;
   ASN1T_RoadLaneSetList roadLaneSet;
   ASN1T_RoadSegment_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_RoadSegment ();
} ;

EXTERN int asn1PE_RoadSegment (OSCTXT* pctxt, ASN1T_RoadSegment* pvalue);

EXTERN int asn1PD_RoadSegment (OSCTXT* pctxt, ASN1T_RoadSegment* pvalue);

EXTERN int XmlEnc_RoadSegment (OSCTXT* pctxt, ASN1T_RoadSegment* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSegment (OSCTXT* pctxt, ASN1T_RoadSegment* pvalue);

EXTERN int asn1JsonEnc_RoadSegment (OSCTXT *pctxt, ASN1T_RoadSegment *pvalue);

EXTERN int asn1JsonDec_RoadSegment (OSCTXT *pctxt, ASN1T_RoadSegment *pvalue);

EXTERN int asn1PrtToStrm_RoadSegment (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSegment* pvalue);

EXTERN ASN1T_RoadSegment* new_ASN1T_RoadSegment (ASN1CType& ccobj);

EXTERN int asn1Init_RoadSegment (ASN1T_RoadSegment* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSegment (OSCTXT *pctxt, ASN1T_RoadSegment* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegmentList                                           */
/*                                                            */
/**************************************************************/
/*
RoadSegmentList ::= SEQUENCE (SIZE (1..32)) OF RoadSegment
*/
/* List of ASN1T_RoadSegment */
typedef ASN1TSeqOfList ASN1T_RoadSegmentList;

class EXTERN ASN1C_RoadSegmentList :
public ASN1CSeqOfList
{
protected:
   ASN1T_RoadSegmentList& msgData;
public:
   /**
    * Control class: ASN1C_RoadSegmentList
    * Data class:    ASN1T_RoadSegmentList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RoadSegmentList (ASN1T_RoadSegmentList& data);

   /**
    * Control class: ASN1C_RoadSegmentList<br/>
    * Data class: ASN1T_RoadSegmentList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RoadSegmentList (OSRTMessageBufferIF& msgBuf
      , ASN1T_RoadSegmentList& data);

   /**
    * Control class: ASN1C_RoadSegmentList<br/>
    * Data class: ASN1T_RoadSegmentList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RoadSegmentList (ASN1CType& ccobj, ASN1T_RoadSegmentList& data);

   virtual ~ASN1C_RoadSegmentList () {}

   /**
    * Data class: ASN1T_RoadSegment<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RoadSegment* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RoadSegment.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RoadSegment* NewElement ();

   /**
    * Data class: ASN1T_RoadSegment.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RoadSegment* AppendNewElement ();

private:
   ASN1C_RoadSegmentList& operator= (const ASN1C_RoadSegmentList&) {return *this;}
} ;

EXTERN int asn1PE_RoadSegmentList (OSCTXT* pctxt, ASN1T_RoadSegmentList* pvalue);

EXTERN int asn1PD_RoadSegmentList (OSCTXT* pctxt, ASN1T_RoadSegmentList* pvalue);

EXTERN int XmlEnc_RoadSegmentList (OSCTXT* pctxt, 
   ASN1T_RoadSegmentList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSegmentList (OSCTXT* pctxt, ASN1T_RoadSegmentList* pvalue
   );

EXTERN int asn1JsonEnc_RoadSegmentList (OSCTXT *pctxt, ASN1T_RoadSegmentList *pvalue);

EXTERN int asn1JsonDec_RoadSegmentList (OSCTXT *pctxt, ASN1T_RoadSegmentList *pvalue);

EXTERN int asn1PrtToStrm_RoadSegmentList (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSegmentList* pvalue);

EXTERN int asn1Init_RoadSegmentList (ASN1T_RoadSegmentList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSegmentList (OSCTXT *pctxt, ASN1T_RoadSegmentList* pvalue);

/**************************************************************/
/*                                                            */
/*  DataParameters                                            */
/*                                                            */
/**************************************************************/
/*
DataParameters ::= SEQUENCE {
   processMethod [0] IA5String (SIZE (1..255)) OPTIONAL,
   processAgency [1] IA5String (SIZE (1..255)) OPTIONAL,
   lastCheckedDate [2] IA5String (SIZE (1..255)) OPTIONAL,
   geoidUsed [3] IA5String (SIZE (1..255)) OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_DataParameters {
   struct {
      unsigned processMethodPresent : 1;
      unsigned processAgencyPresent : 1;
      unsigned lastCheckedDatePresent : 1;
      unsigned geoidUsedPresent : 1;
   } m;
   const char* processMethod;
   const char* processAgency;
   const char* lastCheckedDate;
   const char* geoidUsed;
   ASN1TSeqExt extElem1;
   ASN1T_DataParameters ();
} ;

EXTERN int asn1PE_DataParameters (OSCTXT* pctxt, ASN1T_DataParameters* pvalue);

EXTERN int asn1PD_DataParameters (OSCTXT* pctxt, ASN1T_DataParameters* pvalue);

EXTERN int XmlEnc_DataParameters (OSCTXT* pctxt, ASN1T_DataParameters* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DataParameters (OSCTXT* pctxt, ASN1T_DataParameters* pvalue)
   ;

EXTERN int asn1JsonEnc_DataParameters (OSCTXT *pctxt, ASN1T_DataParameters *pvalue);

EXTERN int asn1JsonDec_DataParameters (OSCTXT *pctxt, ASN1T_DataParameters *pvalue);

EXTERN int asn1PrtToStrm_DataParameters (OSCTXT *pctxt, 
   const char* name, const ASN1T_DataParameters* pvalue);

EXTERN ASN1T_DataParameters* new_ASN1T_DataParameters (ASN1CType& ccobj);

EXTERN int asn1Init_DataParameters (ASN1T_DataParameters* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_DataParameters (OSCTXT *pctxt, ASN1T_DataParameters* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserType_regional_element                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RestrictionUserType'
*/
struct EXTERN ASN1T_RestrictionUserType_regional_element {
   OSUINT8 regionId;
   struct  {
      /**
       * information object selector
       */
      OSUINT16 t;

      /**
       * Reg-RestrictionUserType information objects
       */
      union {
         /**
          * id: addGrpC
          */
         struct ASN1T_RestrictionUserType_addGrpC *_Reg_RestrictionUserType_addGrpC;

         ASN1TOpenType* extElem1;
      } u;
   } regExtValue;
   ASN1T_RestrictionUserType_regional_element ();
} ;

EXTERN int asn1PE_RestrictionUserType_regional_element (OSCTXT* pctxt, ASN1T_RestrictionUserType_regional_element* pvalue);

EXTERN int asn1PD_RestrictionUserType_regional_element (OSCTXT* pctxt, ASN1T_RestrictionUserType_regional_element* pvalue);

EXTERN int XmlEnc_RestrictionUserType_regional_element (OSCTXT* pctxt, 
   ASN1T_RestrictionUserType_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionUserType_regional_element (OSCTXT* pctxt, 
   ASN1T_RestrictionUserType_regional_element* pvalue);

EXTERN int asn1JsonEnc_RestrictionUserType_regional_element (OSCTXT *pctxt, ASN1T_RestrictionUserType_regional_element *pvalue);

EXTERN int asn1JsonDec_RestrictionUserType_regional_element (OSCTXT *pctxt, ASN1T_RestrictionUserType_regional_element *pvalue);

EXTERN int asn1PrtToStrm_RestrictionUserType_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionUserType_regional_element* pvalue);

EXTERN ASN1T_RestrictionUserType_regional_element* 
   new_ASN1T_RestrictionUserType_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_RestrictionUserType_regional_element (
   ASN1T_RestrictionUserType_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RestrictionUserType_regional_element (OSCTXT *pctxt, 
   ASN1T_RestrictionUserType_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserType_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RestrictionUserType'
*/
/* List of ASN1T_RestrictionUserType_regional_element */
typedef ASN1TSeqOfList ASN1T_RestrictionUserType_regional;

class EXTERN ASN1C_RestrictionUserType_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_RestrictionUserType_regional& msgData;
public:
   /**
    * Control class: ASN1C_RestrictionUserType_regional
    * Data class:    ASN1T_RestrictionUserType_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RestrictionUserType_regional
       (ASN1T_RestrictionUserType_regional& data);

   /**
    * Control class: ASN1C_RestrictionUserType_regional<br/>
    * Data class: ASN1T_RestrictionUserType_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RestrictionUserType_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_RestrictionUserType_regional& data);

   /**
    * Control class: ASN1C_RestrictionUserType_regional<br/>
    * Data class: ASN1T_RestrictionUserType_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RestrictionUserType_regional (ASN1CType& ccobj
      , ASN1T_RestrictionUserType_regional& data);

   virtual ~ASN1C_RestrictionUserType_regional () {}

   /**
    * Data class: ASN1T_RestrictionUserType_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RestrictionUserType_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RestrictionUserType_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RestrictionUserType_regional_element* NewElement ();

   /**
    * Data class: ASN1T_RestrictionUserType_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RestrictionUserType_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_RestrictionUserType_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_RestrictionUserType_regional* pmatches);

private:
   ASN1C_RestrictionUserType_regional& operator= (const ASN1C_RestrictionUserType_regional&) {return *this;}
} ;

EXTERN int asn1PE_RestrictionUserType_regional (OSCTXT* pctxt, ASN1T_RestrictionUserType_regional* pvalue);

EXTERN int asn1PD_RestrictionUserType_regional (OSCTXT* pctxt, ASN1T_RestrictionUserType_regional* pvalue);

EXTERN int XmlEnc_RestrictionUserType_regional (OSCTXT* pctxt, 
   ASN1T_RestrictionUserType_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionUserType_regional (OSCTXT* pctxt, 
   ASN1T_RestrictionUserType_regional* pvalue);

EXTERN int asn1JsonEnc_RestrictionUserType_regional (OSCTXT *pctxt, ASN1T_RestrictionUserType_regional *pvalue);

EXTERN int asn1JsonDec_RestrictionUserType_regional (OSCTXT *pctxt, ASN1T_RestrictionUserType_regional *pvalue);

EXTERN int asn1PrtToStrm_RestrictionUserType_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionUserType_regional* pvalue);

EXTERN int asn1Init_RestrictionUserType_regional (
   ASN1T_RestrictionUserType_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RestrictionUserType_regional (OSCTXT *pctxt, 
   ASN1T_RestrictionUserType_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserType                                       */
/*                                                            */
/**************************************************************/
/*
RestrictionUserType ::= CHOICE {
   basicType [0] RestrictionAppliesTo,
               -- a set of the most commonly used types
   regional [1] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-RestrictionUserType}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-RestrictionUserType}{@regionId})
   },
   ...
}
*/
/* Choice tag constants */

#define T_RestrictionUserType_basicType 1
#define T_RestrictionUserType_regional  2
#define T_RestrictionUserType_extElem1  3

struct EXTERN ASN1T_RestrictionUserType {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_RestrictionAppliesTo basicType;
      /* t = 2 */
      ASN1T_RestrictionUserType_regional *regional;
      /* t = 3 */
      ASN1TOpenType *extElem1;
   } u;
   ASN1T_RestrictionUserType () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_RestrictionUserType (OSCTXT* pctxt, ASN1T_RestrictionUserType* pvalue);

EXTERN int asn1PD_RestrictionUserType (OSCTXT* pctxt, ASN1T_RestrictionUserType* pvalue);

EXTERN int XmlEnc_RestrictionUserType (OSCTXT* pctxt, 
   ASN1T_RestrictionUserType* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionUserType (OSCTXT* pctxt, 
   ASN1T_RestrictionUserType* pvalue);

EXTERN int asn1JsonEnc_RestrictionUserType (OSCTXT *pctxt, ASN1T_RestrictionUserType *pvalue);

EXTERN int asn1JsonDec_RestrictionUserType (OSCTXT *pctxt, ASN1T_RestrictionUserType *pvalue);

EXTERN int asn1PrtToStrm_RestrictionUserType (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionUserType* pvalue);

EXTERN ASN1T_RestrictionUserType* 
   new_ASN1T_RestrictionUserType (ASN1CType& ccobj);

EXTERN int asn1Init_RestrictionUserType (ASN1T_RestrictionUserType* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RestrictionUserType (OSCTXT *pctxt, 
   ASN1T_RestrictionUserType* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserTypeList                                   */
/*                                                            */
/**************************************************************/
/*
RestrictionUserTypeList ::= SEQUENCE (SIZE (1..16)) OF RestrictionUserType
*/
/* List of ASN1T_RestrictionUserType */
typedef ASN1TSeqOfList ASN1T_RestrictionUserTypeList;

class EXTERN ASN1C_RestrictionUserTypeList :
public ASN1CSeqOfList
{
protected:
   ASN1T_RestrictionUserTypeList& msgData;
public:
   /**
    * Control class: ASN1C_RestrictionUserTypeList
    * Data class:    ASN1T_RestrictionUserTypeList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RestrictionUserTypeList (ASN1T_RestrictionUserTypeList& data);

   /**
    * Control class: ASN1C_RestrictionUserTypeList<br/>
    * Data class: ASN1T_RestrictionUserTypeList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RestrictionUserTypeList (OSRTMessageBufferIF& msgBuf
      , ASN1T_RestrictionUserTypeList& data);

   /**
    * Control class: ASN1C_RestrictionUserTypeList<br/>
    * Data class: ASN1T_RestrictionUserTypeList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RestrictionUserTypeList (ASN1CType& ccobj
      , ASN1T_RestrictionUserTypeList& data);

   virtual ~ASN1C_RestrictionUserTypeList () {}

   /**
    * Data class: ASN1T_RestrictionUserType<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RestrictionUserType* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RestrictionUserType.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RestrictionUserType* NewElement ();

   /**
    * Data class: ASN1T_RestrictionUserType.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RestrictionUserType* AppendNewElement ();

private:
   ASN1C_RestrictionUserTypeList& operator= (const ASN1C_RestrictionUserTypeList&) {return *this;}
} ;

EXTERN int asn1PE_RestrictionUserTypeList (OSCTXT* pctxt, ASN1T_RestrictionUserTypeList* pvalue);

EXTERN int asn1PD_RestrictionUserTypeList (OSCTXT* pctxt, ASN1T_RestrictionUserTypeList* pvalue);

EXTERN int XmlEnc_RestrictionUserTypeList (OSCTXT* pctxt, 
   ASN1T_RestrictionUserTypeList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionUserTypeList (OSCTXT* pctxt, 
   ASN1T_RestrictionUserTypeList* pvalue);

EXTERN int asn1JsonEnc_RestrictionUserTypeList (OSCTXT *pctxt, ASN1T_RestrictionUserTypeList *pvalue);

EXTERN int asn1JsonDec_RestrictionUserTypeList (OSCTXT *pctxt, ASN1T_RestrictionUserTypeList *pvalue);

EXTERN int asn1PrtToStrm_RestrictionUserTypeList (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionUserTypeList* pvalue);

EXTERN int asn1Init_RestrictionUserTypeList (ASN1T_RestrictionUserTypeList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RestrictionUserTypeList (OSCTXT *pctxt, 
   ASN1T_RestrictionUserTypeList* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionClassAssignment                                */
/*                                                            */
/**************************************************************/
/*
RestrictionClassAssignment ::= SEQUENCE {
   id [0] RestrictionClassID,
            -- the unique value (within an intersection or local region)
            -- that is assigned to this group of users
   users [1] RestrictionUserTypeList
            -- The list of user types/classes 
            -- to which this restriction ID applies
}
*/
struct EXTERN ASN1T_RestrictionClassAssignment {
   OSUINT8 id;
   ASN1T_RestrictionUserTypeList users;
} ;

EXTERN int asn1PE_RestrictionClassAssignment (OSCTXT* pctxt, ASN1T_RestrictionClassAssignment* pvalue);

EXTERN int asn1PD_RestrictionClassAssignment (OSCTXT* pctxt, ASN1T_RestrictionClassAssignment* pvalue);

EXTERN int XmlEnc_RestrictionClassAssignment (OSCTXT* pctxt, 
   ASN1T_RestrictionClassAssignment* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionClassAssignment (OSCTXT* pctxt, 
   ASN1T_RestrictionClassAssignment* pvalue);

EXTERN int asn1JsonEnc_RestrictionClassAssignment (OSCTXT *pctxt, ASN1T_RestrictionClassAssignment *pvalue);

EXTERN int asn1JsonDec_RestrictionClassAssignment (OSCTXT *pctxt, ASN1T_RestrictionClassAssignment *pvalue);

EXTERN int asn1PrtToStrm_RestrictionClassAssignment (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionClassAssignment* pvalue);

EXTERN ASN1T_RestrictionClassAssignment* 
   new_ASN1T_RestrictionClassAssignment (ASN1CType& ccobj);

EXTERN int asn1Init_RestrictionClassAssignment (
   ASN1T_RestrictionClassAssignment* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RestrictionClassAssignment (OSCTXT *pctxt, 
   ASN1T_RestrictionClassAssignment* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionClassList                                      */
/*                                                            */
/**************************************************************/
/*
RestrictionClassList ::= SEQUENCE (SIZE (1..254)) OF RestrictionClassAssignment
*/
/* List of ASN1T_RestrictionClassAssignment */
typedef ASN1TSeqOfList ASN1T_RestrictionClassList;

class EXTERN ASN1C_RestrictionClassList :
public ASN1CSeqOfList
{
protected:
   ASN1T_RestrictionClassList& msgData;
public:
   /**
    * Control class: ASN1C_RestrictionClassList
    * Data class:    ASN1T_RestrictionClassList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RestrictionClassList (ASN1T_RestrictionClassList& data);

   /**
    * Control class: ASN1C_RestrictionClassList<br/>
    * Data class: ASN1T_RestrictionClassList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RestrictionClassList (OSRTMessageBufferIF& msgBuf
      , ASN1T_RestrictionClassList& data);

   /**
    * Control class: ASN1C_RestrictionClassList<br/>
    * Data class: ASN1T_RestrictionClassList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RestrictionClassList (ASN1CType& ccobj
      , ASN1T_RestrictionClassList& data);

   virtual ~ASN1C_RestrictionClassList () {}

   /**
    * Data class: ASN1T_RestrictionClassAssignment<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RestrictionClassAssignment* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RestrictionClassAssignment.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RestrictionClassAssignment* NewElement ();

   /**
    * Data class: ASN1T_RestrictionClassAssignment.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RestrictionClassAssignment* AppendNewElement ();

private:
   ASN1C_RestrictionClassList& operator= (const ASN1C_RestrictionClassList&) {return *this;}
} ;

EXTERN int asn1PE_RestrictionClassList (OSCTXT* pctxt, ASN1T_RestrictionClassList* pvalue);

EXTERN int asn1PD_RestrictionClassList (OSCTXT* pctxt, ASN1T_RestrictionClassList* pvalue);

EXTERN int XmlEnc_RestrictionClassList (OSCTXT* pctxt, 
   ASN1T_RestrictionClassList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionClassList (OSCTXT* pctxt, 
   ASN1T_RestrictionClassList* pvalue);

EXTERN int asn1JsonEnc_RestrictionClassList (OSCTXT *pctxt, ASN1T_RestrictionClassList *pvalue);

EXTERN int asn1JsonDec_RestrictionClassList (OSCTXT *pctxt, ASN1T_RestrictionClassList *pvalue);

EXTERN int asn1PrtToStrm_RestrictionClassList (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionClassList* pvalue);

EXTERN int asn1Init_RestrictionClassList (ASN1T_RestrictionClassList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RestrictionClassList (OSCTXT *pctxt, 
   ASN1T_RestrictionClassList* pvalue);

/**************************************************************/
/*                                                            */
/*  MapData_regional_element                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MapData'
*/
struct EXTERN ASN1T_MapData_regional_element {
   OSUINT8 regionId;
   struct  {
      /**
       * information object selector
       */
      OSUINT16 t;

      /**
       * Reg-MapData information objects
       */
      union {
         /**
          * id: addGrpC
          */
         struct ASN1T_MapData_addGrpC *_Reg_MapData_addGrpC;

         ASN1TOpenType* extElem1;
      } u;
   } regExtValue;
   ASN1T_MapData_regional_element ();
} ;

EXTERN int asn1PE_MapData_regional_element (OSCTXT* pctxt, ASN1T_MapData_regional_element* pvalue);

EXTERN int asn1PD_MapData_regional_element (OSCTXT* pctxt, ASN1T_MapData_regional_element* pvalue);

EXTERN int XmlEnc_MapData_regional_element (OSCTXT* pctxt, 
   ASN1T_MapData_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MapData_regional_element (OSCTXT* pctxt, 
   ASN1T_MapData_regional_element* pvalue);

EXTERN int asn1JsonEnc_MapData_regional_element (OSCTXT *pctxt, ASN1T_MapData_regional_element *pvalue);

EXTERN int asn1JsonDec_MapData_regional_element (OSCTXT *pctxt, ASN1T_MapData_regional_element *pvalue);

EXTERN int asn1PrtToStrm_MapData_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_MapData_regional_element* pvalue);

EXTERN ASN1T_MapData_regional_element* 
   new_ASN1T_MapData_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_MapData_regional_element (ASN1T_MapData_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MapData_regional_element (OSCTXT *pctxt, 
   ASN1T_MapData_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  MapData_regional                                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MapData'
*/
/* List of ASN1T_MapData_regional_element */
typedef ASN1TSeqOfList ASN1T_MapData_regional;

class EXTERN ASN1C_MapData_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_MapData_regional& msgData;
public:
   /**
    * Control class: ASN1C_MapData_regional
    * Data class:    ASN1T_MapData_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_MapData_regional (ASN1T_MapData_regional& data);

   /**
    * Control class: ASN1C_MapData_regional<br/>
    * Data class: ASN1T_MapData_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_MapData_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_MapData_regional& data);

   /**
    * Control class: ASN1C_MapData_regional<br/>
    * Data class: ASN1T_MapData_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_MapData_regional (ASN1CType& ccobj, ASN1T_MapData_regional& data);

   virtual ~ASN1C_MapData_regional () {}

   /**
    * Data class: ASN1T_MapData_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_MapData_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_MapData_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_MapData_regional_element* NewElement ();

   /**
    * Data class: ASN1T_MapData_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_MapData_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_MapData_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, ASN1T_MapData_regional* pmatches);

private:
   ASN1C_MapData_regional& operator= (const ASN1C_MapData_regional&) {return *this;}
} ;

EXTERN int asn1PE_MapData_regional (OSCTXT* pctxt, ASN1T_MapData_regional* pvalue);

EXTERN int asn1PD_MapData_regional (OSCTXT* pctxt, ASN1T_MapData_regional* pvalue);

EXTERN int XmlEnc_MapData_regional (OSCTXT* pctxt, 
   ASN1T_MapData_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MapData_regional (OSCTXT* pctxt, 
   ASN1T_MapData_regional* pvalue);

EXTERN int asn1JsonEnc_MapData_regional (OSCTXT *pctxt, ASN1T_MapData_regional *pvalue);

EXTERN int asn1JsonDec_MapData_regional (OSCTXT *pctxt, ASN1T_MapData_regional *pvalue);

EXTERN int asn1PrtToStrm_MapData_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_MapData_regional* pvalue);

EXTERN int asn1Init_MapData_regional (ASN1T_MapData_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MapData_regional (OSCTXT *pctxt, ASN1T_MapData_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  MapData                                                   */
/*                                                            */
/**************************************************************/
/*
MapData ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   msgIssueRevision [1] MsgCount,
   layerType [2] LayerType OPTIONAL,
   layerID [3] LayerID OPTIONAL,
   intersections [4] IntersectionGeometryList OPTIONAL,
                     -- All Intersection definitions 
   roadSegments [5] RoadSegmentList OPTIONAL,
                     -- All roadway descriptions
   dataParameters [6] DataParameters OPTIONAL,
                     -- Any meta data regarding the map contents
   restrictionList [7] RestrictionClassList OPTIONAL,
                     -- Any restriction ID tables which have  
                     -- established for these map entries 
   regional [8] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-MapData}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-MapData}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_MapData {
   struct {
      unsigned timeStampPresent : 1;
      unsigned layerTypePresent : 1;
      unsigned layerIDPresent : 1;
      unsigned intersectionsPresent : 1;
      unsigned roadSegmentsPresent : 1;
      unsigned dataParametersPresent : 1;
      unsigned restrictionListPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   OSUINT32 timeStamp;
   OSUINT8 msgIssueRevision;
   ASN1T_LayerType layerType;
   ASN1T_LayerID layerID;
   ASN1T_IntersectionGeometryList intersections;
   ASN1T_RoadSegmentList roadSegments;
   ASN1T_DataParameters dataParameters;
   ASN1T_RestrictionClassList restrictionList;
   ASN1T_MapData_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_MapData ();
} ;

EXTERN int asn1PE_MapData (OSCTXT* pctxt, ASN1T_MapData* pvalue);

EXTERN int asn1PD_MapData (OSCTXT* pctxt, ASN1T_MapData* pvalue);

EXTERN int XmlEnc_MapData (OSCTXT* pctxt, ASN1T_MapData* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MapData (OSCTXT* pctxt, ASN1T_MapData* pvalue);

EXTERN int asn1JsonEnc_MapData (OSCTXT *pctxt, ASN1T_MapData *pvalue);

EXTERN int asn1JsonDec_MapData (OSCTXT *pctxt, ASN1T_MapData *pvalue);

EXTERN int asn1PrtToStrm_MapData (OSCTXT *pctxt, 
   const char* name, const ASN1T_MapData* pvalue);

EXTERN ASN1T_MapData* new_ASN1T_MapData (ASN1CType& ccobj);

EXTERN int asn1Init_MapData (ASN1T_MapData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MapData (OSCTXT *pctxt, ASN1T_MapData* pvalue);

#endif
