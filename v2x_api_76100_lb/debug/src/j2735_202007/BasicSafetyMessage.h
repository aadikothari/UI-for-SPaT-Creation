/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).
 */
#ifndef BASICSAFETYMESSAGE_H
#define BASICSAFETYMESSAGE_H

#include <stdio.h>
#include <stdlib.h>
#include "rtpersrc/asn1PerCppTypes.h"
#include "rtsrc/asn1CppTypes.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtsrc/asn1type.h"
#include "rtxmlsrc/asn1xml.h"
#include "rtxmlsrc/rtXmlCppMsgBuf.h"
#include "rtsrc/asn1type.h"
#include "rtjsonsrc/asn1json.h"
#include "rtjsonsrc/rtJsonCppMsgBuf.h"

#include "rtsrc/ASN1CSeqOfList.h"
#include "NTCIP.h"
#include "ITIS.h"

/**
 * Header file for ASN.1 module BasicSafetyMessage
 */
class BSMpartIIExtension {
public:
   enum TVALUE {
      T_UNDEF_,
      T_vehicleSafetyExt,
      T_specialVehicleExt,
      T_supplementalVehicleExt
   } ;
} ;

/**************************************************************/
/*                                                            */
/*  PartII_Id                                                 */
/*                                                            */
/**************************************************************/
/*
PartII-Id ::= INTEGER (0..63)
*/
typedef OSUINT8 ASN1T_PartII_Id;

EXTERN int asn1PE_PartII_Id (OSCTXT* pctxt, ASN1T_PartII_Id value);

EXTERN int asn1PD_PartII_Id (OSCTXT* pctxt, ASN1T_PartII_Id* pvalue);

EXTERN int XmlEnc_PartII_Id (OSCTXT* pctxt, ASN1T_PartII_Id value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PartII_Id (OSCTXT* pctxt, ASN1T_PartII_Id* pvalue);

EXTERN int asn1JsonEnc_PartII_Id (OSCTXT *pctxt, ASN1T_PartII_Id *pvalue);

EXTERN int asn1JsonDec_PartII_Id (OSCTXT *pctxt, ASN1T_PartII_Id *pvalue);

EXTERN int asn1PrtToStrm_PartII_Id (OSCTXT *pctxt, 
   const char* name, const ASN1T_PartII_Id* pvalue);

EXTERN ASN1T_PartII_Id* new_ASN1T_PartII_Id (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  IsDolly                                                   */
/*                                                            */
/**************************************************************/
/*
IsDolly ::= BOOLEAN
                     When false indicates a trailer unit

*/
typedef OSBOOL ASN1T_IsDolly;

EXTERN int asn1PE_IsDolly (OSCTXT* pctxt, ASN1T_IsDolly value);

EXTERN int asn1PD_IsDolly (OSCTXT* pctxt, ASN1T_IsDolly* pvalue);

EXTERN int XmlEnc_IsDolly (OSCTXT* pctxt, ASN1T_IsDolly value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IsDolly (OSCTXT* pctxt, ASN1T_IsDolly* pvalue);

EXTERN int asn1JsonEnc_IsDolly (OSCTXT *pctxt, ASN1T_IsDolly *pvalue);

EXTERN int asn1JsonDec_IsDolly (OSCTXT *pctxt, ASN1T_IsDolly *pvalue);

EXTERN int asn1PrtToStrm_IsDolly (OSCTXT *pctxt, 
   const char* name, const ASN1T_IsDolly* pvalue);

EXTERN ASN1T_IsDolly* new_ASN1T_IsDolly (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ObstacleDirection                                         */
/*                                                            */
/**************************************************************/
/*
ObstacleDirection ::= Angle
*/
typedef OSUINT16 ASN1T_ObstacleDirection;

EXTERN int asn1PE_ObstacleDirection (OSCTXT* pctxt, ASN1T_ObstacleDirection value);

EXTERN int asn1PD_ObstacleDirection (OSCTXT* pctxt, ASN1T_ObstacleDirection* pvalue);

EXTERN int XmlEnc_ObstacleDirection (OSCTXT* pctxt, 
   ASN1T_ObstacleDirection value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ObstacleDirection (OSCTXT* pctxt, 
   ASN1T_ObstacleDirection* pvalue);

EXTERN int asn1JsonEnc_ObstacleDirection (OSCTXT *pctxt, ASN1T_ObstacleDirection *pvalue);

EXTERN int asn1JsonDec_ObstacleDirection (OSCTXT *pctxt, ASN1T_ObstacleDirection *pvalue);

EXTERN int asn1PrtToStrm_ObstacleDirection (OSCTXT *pctxt, 
   const char* name, const ASN1T_ObstacleDirection* pvalue);

/**************************************************************/
/*                                                            */
/*  PivotingAllowed                                           */
/*                                                            */
/**************************************************************/
/*
PivotingAllowed ::= BOOLEAN
*/
typedef OSBOOL ASN1T_PivotingAllowed;

EXTERN int asn1PE_PivotingAllowed (OSCTXT* pctxt, ASN1T_PivotingAllowed value);

EXTERN int asn1PD_PivotingAllowed (OSCTXT* pctxt, ASN1T_PivotingAllowed* pvalue);

EXTERN int XmlEnc_PivotingAllowed (OSCTXT* pctxt, ASN1T_PivotingAllowed value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PivotingAllowed (OSCTXT* pctxt, ASN1T_PivotingAllowed* pvalue
   );

EXTERN int asn1JsonEnc_PivotingAllowed (OSCTXT *pctxt, ASN1T_PivotingAllowed *pvalue);

EXTERN int asn1JsonDec_PivotingAllowed (OSCTXT *pctxt, ASN1T_PivotingAllowed *pvalue);

EXTERN int asn1PrtToStrm_PivotingAllowed (OSCTXT *pctxt, 
   const char* name, const ASN1T_PivotingAllowed* pvalue);

EXTERN ASN1T_PivotingAllowed* new_ASN1T_PivotingAllowed (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SpeedProfileMeasurement                                   */
/*                                                            */
/**************************************************************/
/*
SpeedProfileMeasurement ::= GrossSpeed
*/
typedef OSUINT8 ASN1T_SpeedProfileMeasurement;

EXTERN int asn1PE_SpeedProfileMeasurement (OSCTXT* pctxt, ASN1T_SpeedProfileMeasurement value);

EXTERN int asn1PD_SpeedProfileMeasurement (OSCTXT* pctxt, ASN1T_SpeedProfileMeasurement* pvalue);

EXTERN int XmlEnc_SpeedProfileMeasurement (OSCTXT* pctxt, 
   ASN1T_SpeedProfileMeasurement value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedProfileMeasurement (OSCTXT* pctxt, 
   ASN1T_SpeedProfileMeasurement* pvalue);

EXTERN int asn1JsonEnc_SpeedProfileMeasurement (OSCTXT *pctxt, ASN1T_SpeedProfileMeasurement *pvalue);

EXTERN int asn1JsonDec_SpeedProfileMeasurement (OSCTXT *pctxt, ASN1T_SpeedProfileMeasurement *pvalue);

EXTERN int asn1PrtToStrm_SpeedProfileMeasurement (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedProfileMeasurement* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerMass                                               */
/*                                                            */
/**************************************************************/
/*
TrailerMass ::= INTEGER (0..255)
    object mass with LSB steps of 500 kg (~1100 lbs)
    the value zero shall be uaed for an unknown mass value
    the value 255 shall be used any mass larger than 127,500kg
    a useful range of 0~127.5 metric tons.

*/
typedef OSUINT8 ASN1T_TrailerMass;

EXTERN int asn1PE_TrailerMass (OSCTXT* pctxt, ASN1T_TrailerMass value);

EXTERN int asn1PD_TrailerMass (OSCTXT* pctxt, ASN1T_TrailerMass* pvalue);

EXTERN int XmlEnc_TrailerMass (OSCTXT* pctxt, ASN1T_TrailerMass value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerMass (OSCTXT* pctxt, ASN1T_TrailerMass* pvalue);

EXTERN int asn1JsonEnc_TrailerMass (OSCTXT *pctxt, ASN1T_TrailerMass *pvalue);

EXTERN int asn1JsonDec_TrailerMass (OSCTXT *pctxt, ASN1T_TrailerMass *pvalue);

EXTERN int asn1PrtToStrm_TrailerMass (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerMass* pvalue);

EXTERN ASN1T_TrailerMass* new_ASN1T_TrailerMass (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VertOffset_B07                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B07 ::= INTEGER (-64..63)
    LSB units of of 10 cm
    with a range of +- 6.3 meters vertical 
    value  63 to be used for  63 or greater
    value -63 to be used for -63 or greater
    value -64 to be unavailable

*/
typedef OSINT8 ASN1T_VertOffset_B07;

EXTERN int asn1PE_VertOffset_B07 (OSCTXT* pctxt, ASN1T_VertOffset_B07 value);

EXTERN int asn1PD_VertOffset_B07 (OSCTXT* pctxt, ASN1T_VertOffset_B07* pvalue);

EXTERN int XmlEnc_VertOffset_B07 (OSCTXT* pctxt, ASN1T_VertOffset_B07 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VertOffset_B07 (OSCTXT* pctxt, ASN1T_VertOffset_B07* pvalue)
   ;

EXTERN int asn1JsonEnc_VertOffset_B07 (OSCTXT *pctxt, ASN1T_VertOffset_B07 *pvalue);

EXTERN int asn1JsonDec_VertOffset_B07 (OSCTXT *pctxt, ASN1T_VertOffset_B07 *pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B07 (OSCTXT *pctxt, 
   const char* name, const ASN1T_VertOffset_B07* pvalue);

EXTERN ASN1T_VertOffset_B07* new_ASN1T_VertOffset_B07 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  EventDescription_description                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'EventDescription'
*/
typedef struct EXTERN ASN1T_EventDescription_description {
   OSUINT8 n;
   ASN1T_ITIScodes elem[8];
   ASN1T_EventDescription_description () : n(0) {}
} ASN1T_EventDescription_description;

class EXTERN ASN1C_EventDescription_description :
public ASN1CType
{
protected:
   ASN1T_EventDescription_description& msgData;
public:
   /**
    * Control class: ASN1C_EventDescription_description
    * Data class:    ASN1T_EventDescription_description
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_EventDescription_description
       (ASN1T_EventDescription_description& data);

   /**
    * Control class: ASN1C_EventDescription_description<br/>
    * Data class: ASN1T_EventDescription_description<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_EventDescription_description (OSRTMessageBufferIF& msgBuf
      , ASN1T_EventDescription_description& data);

   /**
    * Control class: ASN1C_EventDescription_description<br/>
    * Data class: ASN1T_EventDescription_description<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_EventDescription_description (ASN1CType& ccobj
      , ASN1T_EventDescription_description& data);

   virtual ~ASN1C_EventDescription_description () {}

private:
   ASN1C_EventDescription_description& operator= (const ASN1C_EventDescription_description&) {return *this;}
} ;

EXTERN int asn1PE_EventDescription_description (OSCTXT* pctxt, ASN1T_EventDescription_description* pvalue);

EXTERN int asn1PD_EventDescription_description (OSCTXT* pctxt, ASN1T_EventDescription_description* pvalue);

EXTERN int XmlEnc_EventDescription_description (OSCTXT* pctxt, 
   ASN1T_EventDescription_description* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EventDescription_description (OSCTXT* pctxt, 
   ASN1T_EventDescription_description* pvalue);

EXTERN int asn1JsonEnc_EventDescription_description (OSCTXT *pctxt, ASN1T_EventDescription_description *pvalue);

EXTERN int asn1JsonDec_EventDescription_description (OSCTXT *pctxt, ASN1T_EventDescription_description *pvalue);

EXTERN int asn1PrtToStrm_EventDescription_description (OSCTXT *pctxt, 
   const char* name, const ASN1T_EventDescription_description* pvalue);

EXTERN int asn1Init_EventDescription_description (
   ASN1T_EventDescription_description* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  EventDescription_regional_element                         */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'EventDescription'
*/
struct EXTERN ASN1T_EventDescription_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_EventDescription_regional_element (OSCTXT* pctxt, ASN1T_EventDescription_regional_element* pvalue);

EXTERN int asn1PD_EventDescription_regional_element (OSCTXT* pctxt, ASN1T_EventDescription_regional_element* pvalue);

EXTERN int XmlEnc_EventDescription_regional_element (OSCTXT* pctxt, 
   ASN1T_EventDescription_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EventDescription_regional_element (OSCTXT* pctxt, 
   ASN1T_EventDescription_regional_element* pvalue);

EXTERN int asn1JsonEnc_EventDescription_regional_element (OSCTXT *pctxt, ASN1T_EventDescription_regional_element *pvalue);

EXTERN int asn1JsonDec_EventDescription_regional_element (OSCTXT *pctxt, ASN1T_EventDescription_regional_element *pvalue);

EXTERN int asn1PrtToStrm_EventDescription_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_EventDescription_regional_element* pvalue);

EXTERN ASN1T_EventDescription_regional_element* 
   new_ASN1T_EventDescription_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_EventDescription_regional_element (
   ASN1T_EventDescription_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_EventDescription_regional_element (OSCTXT *pctxt, 
   ASN1T_EventDescription_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  EventDescription_regional                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'EventDescription'
*/
/* List of ASN1T_EventDescription_regional_element */
typedef ASN1TSeqOfList ASN1T_EventDescription_regional;

class EXTERN ASN1C_EventDescription_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_EventDescription_regional& msgData;
public:
   /**
    * Control class: ASN1C_EventDescription_regional
    * Data class:    ASN1T_EventDescription_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_EventDescription_regional (ASN1T_EventDescription_regional& data);

   /**
    * Control class: ASN1C_EventDescription_regional<br/>
    * Data class: ASN1T_EventDescription_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_EventDescription_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_EventDescription_regional& data);

   /**
    * Control class: ASN1C_EventDescription_regional<br/>
    * Data class: ASN1T_EventDescription_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_EventDescription_regional (ASN1CType& ccobj
      , ASN1T_EventDescription_regional& data);

   virtual ~ASN1C_EventDescription_regional () {}

   /**
    * Data class: ASN1T_EventDescription_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_EventDescription_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_EventDescription_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_EventDescription_regional_element* NewElement ();

   /**
    * Data class: ASN1T_EventDescription_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_EventDescription_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_EventDescription_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_EventDescription_regional* pmatches);

private:
   ASN1C_EventDescription_regional& operator= (const ASN1C_EventDescription_regional&) {return *this;}
} ;

EXTERN int asn1PE_EventDescription_regional (OSCTXT* pctxt, ASN1T_EventDescription_regional* pvalue);

EXTERN int asn1PD_EventDescription_regional (OSCTXT* pctxt, ASN1T_EventDescription_regional* pvalue);

EXTERN int XmlEnc_EventDescription_regional (OSCTXT* pctxt, 
   ASN1T_EventDescription_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EventDescription_regional (OSCTXT* pctxt, 
   ASN1T_EventDescription_regional* pvalue);

EXTERN int asn1JsonEnc_EventDescription_regional (OSCTXT *pctxt, ASN1T_EventDescription_regional *pvalue);

EXTERN int asn1JsonDec_EventDescription_regional (OSCTXT *pctxt, ASN1T_EventDescription_regional *pvalue);

EXTERN int asn1PrtToStrm_EventDescription_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_EventDescription_regional* pvalue);

EXTERN int asn1Init_EventDescription_regional (
   ASN1T_EventDescription_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_EventDescription_regional (OSCTXT *pctxt, 
   ASN1T_EventDescription_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  EventDescription                                          */
/*                                                            */
/**************************************************************/
/*
EventDescription ::= SEQUENCE {
   typeEvent [0] ITIScodes,
                 -- A category and an item from that category 
                 -- all ITS stds use the same types here
                 -- to explain the type of  the 
                 -- alert / danger / hazard involved
   description [1] SEQUENCE (SIZE (1..8)) OF ITIScodes OPTIONAL,
                 -- Up to eight ITIS code set entries to further
                 -- describe the event, give advice, or any 
                 -- other ITIS codes
   priority [2] Priority OPTIONAL,
                 -- The urgency of this message, a relative
                 -- degree of merit compared with other 
                 -- similar messages for this type (not other
                 -- messages being sent by the device), nor  
                 -- is it a priority of display urgency
   heading [3] HeadingSlice OPTIONAL,
                 -- Applicable headings/direction
   extent [4] Extent OPTIONAL,
                 -- The spatial distance over which this
                 -- message applies and should be presented to the driver
   regional [5] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-EventDescription}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-EventDescription}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_EventDescription {
   struct {
      unsigned descriptionPresent : 1;
      unsigned priorityPresent : 1;
      unsigned headingPresent : 1;
      unsigned extentPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_ITIScodes typeEvent;
   ASN1T_EventDescription_description description;
   struct ASN1T_Priority *priority;
   struct ASN1T_HeadingSlice *heading;
   OSUINT32 extent;
   ASN1T_EventDescription_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_EventDescription ();
} ;

EXTERN int asn1PE_EventDescription (OSCTXT* pctxt, ASN1T_EventDescription* pvalue);

EXTERN int asn1PD_EventDescription (OSCTXT* pctxt, ASN1T_EventDescription* pvalue);

EXTERN int XmlEnc_EventDescription (OSCTXT* pctxt, 
   ASN1T_EventDescription* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EventDescription (OSCTXT* pctxt, 
   ASN1T_EventDescription* pvalue);

EXTERN int asn1JsonEnc_EventDescription (OSCTXT *pctxt, ASN1T_EventDescription *pvalue);

EXTERN int asn1JsonDec_EventDescription (OSCTXT *pctxt, ASN1T_EventDescription *pvalue);

EXTERN int asn1PrtToStrm_EventDescription (OSCTXT *pctxt, 
   const char* name, const ASN1T_EventDescription* pvalue);

EXTERN ASN1T_EventDescription* new_ASN1T_EventDescription (ASN1CType& ccobj);

EXTERN int asn1Init_EventDescription (ASN1T_EventDescription* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_EventDescription (OSCTXT *pctxt, ASN1T_EventDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  PivotPointDescription                                     */
/*                                                            */
/**************************************************************/
/*
PivotPointDescription ::= SEQUENCE {
   pivotOffset [0] Offset-B11,
                -- This gives a +- 10m range from the edge of the outline
                -- measured from the edge of the length of this unit
                -- a negative value is offset to inside the units
                -- a positive value is offset beyond the unit
   pivotAngle [1] Angle,
                -- Measured between the center-line of this unit 
                -- and the unit ahead which is pulling it.
                -- This value is required to project the units relative position
   pivots [2] PivotingAllowed,
   ...
}
*/
struct EXTERN ASN1T_PivotPointDescription {
   OSINT16 pivotOffset;
   OSUINT16 pivotAngle;
   ASN1T_PivotingAllowed pivots;
   ASN1TSeqExt extElem1;
} ;

EXTERN int asn1PE_PivotPointDescription (OSCTXT* pctxt, ASN1T_PivotPointDescription* pvalue);

EXTERN int asn1PD_PivotPointDescription (OSCTXT* pctxt, ASN1T_PivotPointDescription* pvalue);

EXTERN int XmlEnc_PivotPointDescription (OSCTXT* pctxt, 
   ASN1T_PivotPointDescription* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PivotPointDescription (OSCTXT* pctxt, 
   ASN1T_PivotPointDescription* pvalue);

EXTERN int asn1JsonEnc_PivotPointDescription (OSCTXT *pctxt, ASN1T_PivotPointDescription *pvalue);

EXTERN int asn1JsonDec_PivotPointDescription (OSCTXT *pctxt, ASN1T_PivotPointDescription *pvalue);

EXTERN int asn1PrtToStrm_PivotPointDescription (OSCTXT *pctxt, 
   const char* name, const ASN1T_PivotPointDescription* pvalue);

EXTERN ASN1T_PivotPointDescription* 
   new_ASN1T_PivotPointDescription (ASN1CType& ccobj);

EXTERN int asn1Init_PivotPointDescription (ASN1T_PivotPointDescription* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PivotPointDescription (OSCTXT *pctxt, 
   ASN1T_PivotPointDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerHistoryPoint                                       */
/*                                                            */
/**************************************************************/
/*
TrailerHistoryPoint ::= SEQUENCE {
   pivotAngle [0] Angle,
                    -- angle with respect to the lead unit
   timeOffset [1] TimeOffset,
                    -- offset backwards in time 
   -- Position relative to the hauling Vehicle
   positionOffset [2] Node-XY-24b,
   elevationOffset [3] VertOffset-B07 OPTIONAL,
   heading [4] CoarseHeading OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TrailerHistoryPoint {
   struct {
      unsigned elevationOffsetPresent : 1;
      unsigned headingPresent : 1;
   } m;
   OSUINT16 pivotAngle;
   OSUINT16 timeOffset;
   struct ASN1T_Node_XY_24b *positionOffset;
   ASN1T_VertOffset_B07 elevationOffset;
   OSUINT8 heading;
   ASN1TSeqExt extElem1;
   ASN1T_TrailerHistoryPoint ();
} ;

EXTERN int asn1PE_TrailerHistoryPoint (OSCTXT* pctxt, ASN1T_TrailerHistoryPoint* pvalue);

EXTERN int asn1PD_TrailerHistoryPoint (OSCTXT* pctxt, ASN1T_TrailerHistoryPoint* pvalue);

EXTERN int XmlEnc_TrailerHistoryPoint (OSCTXT* pctxt, 
   ASN1T_TrailerHistoryPoint* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerHistoryPoint (OSCTXT* pctxt, 
   ASN1T_TrailerHistoryPoint* pvalue);

EXTERN int asn1JsonEnc_TrailerHistoryPoint (OSCTXT *pctxt, ASN1T_TrailerHistoryPoint *pvalue);

EXTERN int asn1JsonDec_TrailerHistoryPoint (OSCTXT *pctxt, ASN1T_TrailerHistoryPoint *pvalue);

EXTERN int asn1PrtToStrm_TrailerHistoryPoint (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerHistoryPoint* pvalue);

EXTERN ASN1T_TrailerHistoryPoint* 
   new_ASN1T_TrailerHistoryPoint (ASN1CType& ccobj);

EXTERN int asn1Init_TrailerHistoryPoint (ASN1T_TrailerHistoryPoint* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TrailerHistoryPoint (OSCTXT *pctxt, 
   ASN1T_TrailerHistoryPoint* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerHistoryPointList                                   */
/*                                                            */
/**************************************************************/
/*
TrailerHistoryPointList ::= SEQUENCE (SIZE (1..23)) OF TrailerHistoryPoint
*/
/* List of ASN1T_TrailerHistoryPoint */
typedef ASN1TSeqOfList ASN1T_TrailerHistoryPointList;

class EXTERN ASN1C_TrailerHistoryPointList :
public ASN1CSeqOfList
{
protected:
   ASN1T_TrailerHistoryPointList& msgData;
public:
   /**
    * Control class: ASN1C_TrailerHistoryPointList
    * Data class:    ASN1T_TrailerHistoryPointList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TrailerHistoryPointList (ASN1T_TrailerHistoryPointList& data);

   /**
    * Control class: ASN1C_TrailerHistoryPointList<br/>
    * Data class: ASN1T_TrailerHistoryPointList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TrailerHistoryPointList (OSRTMessageBufferIF& msgBuf
      , ASN1T_TrailerHistoryPointList& data);

   /**
    * Control class: ASN1C_TrailerHistoryPointList<br/>
    * Data class: ASN1T_TrailerHistoryPointList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_TrailerHistoryPointList (ASN1CType& ccobj
      , ASN1T_TrailerHistoryPointList& data);

   virtual ~ASN1C_TrailerHistoryPointList () {}

   /**
    * Data class: ASN1T_TrailerHistoryPoint<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_TrailerHistoryPoint* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_TrailerHistoryPoint.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_TrailerHistoryPoint* NewElement ();

   /**
    * Data class: ASN1T_TrailerHistoryPoint.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_TrailerHistoryPoint* AppendNewElement ();

private:
   ASN1C_TrailerHistoryPointList& operator= (const ASN1C_TrailerHistoryPointList&) {return *this;}
} ;

EXTERN int asn1PE_TrailerHistoryPointList (OSCTXT* pctxt, ASN1T_TrailerHistoryPointList* pvalue);

EXTERN int asn1PD_TrailerHistoryPointList (OSCTXT* pctxt, ASN1T_TrailerHistoryPointList* pvalue);

EXTERN int XmlEnc_TrailerHistoryPointList (OSCTXT* pctxt, 
   ASN1T_TrailerHistoryPointList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerHistoryPointList (OSCTXT* pctxt, 
   ASN1T_TrailerHistoryPointList* pvalue);

EXTERN int asn1JsonEnc_TrailerHistoryPointList (OSCTXT *pctxt, ASN1T_TrailerHistoryPointList *pvalue);

EXTERN int asn1JsonDec_TrailerHistoryPointList (OSCTXT *pctxt, ASN1T_TrailerHistoryPointList *pvalue);

EXTERN int asn1PrtToStrm_TrailerHistoryPointList (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerHistoryPointList* pvalue);

EXTERN int asn1Init_TrailerHistoryPointList (ASN1T_TrailerHistoryPointList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TrailerHistoryPointList (OSCTXT *pctxt, 
   ASN1T_TrailerHistoryPointList* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerUnitDescription                                    */
/*                                                            */
/**************************************************************/
/*
TrailerUnitDescription ::= SEQUENCE {
   isDolly [0] IsDolly, -- if false this is a trailer
   width [1] VehicleWidth,
   length [2] VehicleLength,
   height [3] VehicleHeight OPTIONAL,
   mass [4] TrailerMass OPTIONAL,
   bumperHeights [5] BumperHeights OPTIONAL,
   centerOfGravity [6] VehicleHeight OPTIONAL,
   -- The front pivot point of the unit
   frontPivot [7] PivotPointDescription,
   -- The rear pivot point connecting to the next element, 
   -- if present and used (implies another unit is connected)
   rearPivot [8] PivotPointDescription OPTIONAL,
   -- Rear wheel pivot point center-line offset
   -- measured from the rear of the above length
   rearWheelOffset [9] Offset-B12 OPTIONAL,
                    -- the effective center-line of the wheel set
   -- Current Position relative to the hauling Vehicle
   positionOffset [10] Node-XY-24b,
   elevationOffset [11] VertOffset-B07 OPTIONAL,
   -- Past Position history relative to the hauling Vehicle
   crumbData [12] TrailerHistoryPointList OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TrailerUnitDescription {
   struct {
      unsigned heightPresent : 1;
      unsigned massPresent : 1;
      unsigned bumperHeightsPresent : 1;
      unsigned centerOfGravityPresent : 1;
      unsigned rearPivotPresent : 1;
      unsigned rearWheelOffsetPresent : 1;
      unsigned elevationOffsetPresent : 1;
      unsigned crumbDataPresent : 1;
   } m;
   ASN1T_IsDolly isDolly;
   OSUINT16 width;
   OSUINT16 length;
   OSUINT8 height;
   ASN1T_TrailerMass mass;
   struct ASN1T_BumperHeights *bumperHeights;
   OSUINT8 centerOfGravity;
   ASN1T_PivotPointDescription frontPivot;
   ASN1T_PivotPointDescription rearPivot;
   OSINT16 rearWheelOffset;
   struct ASN1T_Node_XY_24b *positionOffset;
   ASN1T_VertOffset_B07 elevationOffset;
   ASN1T_TrailerHistoryPointList crumbData;
   ASN1TSeqExt extElem1;
   ASN1T_TrailerUnitDescription ();
} ;

EXTERN int asn1PE_TrailerUnitDescription (OSCTXT* pctxt, ASN1T_TrailerUnitDescription* pvalue);

EXTERN int asn1PD_TrailerUnitDescription (OSCTXT* pctxt, ASN1T_TrailerUnitDescription* pvalue);

EXTERN int XmlEnc_TrailerUnitDescription (OSCTXT* pctxt, 
   ASN1T_TrailerUnitDescription* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerUnitDescription (OSCTXT* pctxt, 
   ASN1T_TrailerUnitDescription* pvalue);

EXTERN int asn1JsonEnc_TrailerUnitDescription (OSCTXT *pctxt, ASN1T_TrailerUnitDescription *pvalue);

EXTERN int asn1JsonDec_TrailerUnitDescription (OSCTXT *pctxt, ASN1T_TrailerUnitDescription *pvalue);

EXTERN int asn1PrtToStrm_TrailerUnitDescription (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerUnitDescription* pvalue);

EXTERN ASN1T_TrailerUnitDescription* 
   new_ASN1T_TrailerUnitDescription (ASN1CType& ccobj);

EXTERN int asn1Init_TrailerUnitDescription (ASN1T_TrailerUnitDescription* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TrailerUnitDescription (OSCTXT *pctxt, 
   ASN1T_TrailerUnitDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerUnitDescriptionList                                */
/*                                                            */
/**************************************************************/
/*
TrailerUnitDescriptionList ::= SEQUENCE (SIZE (1..8)) OF TrailerUnitDescription
*/
/* List of ASN1T_TrailerUnitDescription */
typedef ASN1TSeqOfList ASN1T_TrailerUnitDescriptionList;

class EXTERN ASN1C_TrailerUnitDescriptionList :
public ASN1CSeqOfList
{
protected:
   ASN1T_TrailerUnitDescriptionList& msgData;
public:
   /**
    * Control class: ASN1C_TrailerUnitDescriptionList
    * Data class:    ASN1T_TrailerUnitDescriptionList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TrailerUnitDescriptionList (ASN1T_TrailerUnitDescriptionList& data);

   /**
    * Control class: ASN1C_TrailerUnitDescriptionList<br/>
    * Data class: ASN1T_TrailerUnitDescriptionList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TrailerUnitDescriptionList (OSRTMessageBufferIF& msgBuf
      , ASN1T_TrailerUnitDescriptionList& data);

   /**
    * Control class: ASN1C_TrailerUnitDescriptionList<br/>
    * Data class: ASN1T_TrailerUnitDescriptionList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_TrailerUnitDescriptionList (ASN1CType& ccobj
      , ASN1T_TrailerUnitDescriptionList& data);

   virtual ~ASN1C_TrailerUnitDescriptionList () {}

   /**
    * Data class: ASN1T_TrailerUnitDescription<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_TrailerUnitDescription* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_TrailerUnitDescription.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_TrailerUnitDescription* NewElement ();

   /**
    * Data class: ASN1T_TrailerUnitDescription.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_TrailerUnitDescription* AppendNewElement ();

private:
   ASN1C_TrailerUnitDescriptionList& operator= (const ASN1C_TrailerUnitDescriptionList&) {return *this;}
} ;

EXTERN int asn1PE_TrailerUnitDescriptionList (OSCTXT* pctxt, ASN1T_TrailerUnitDescriptionList* pvalue);

EXTERN int asn1PD_TrailerUnitDescriptionList (OSCTXT* pctxt, ASN1T_TrailerUnitDescriptionList* pvalue);

EXTERN int XmlEnc_TrailerUnitDescriptionList (OSCTXT* pctxt, 
   ASN1T_TrailerUnitDescriptionList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerUnitDescriptionList (OSCTXT* pctxt, 
   ASN1T_TrailerUnitDescriptionList* pvalue);

EXTERN int asn1JsonEnc_TrailerUnitDescriptionList (OSCTXT *pctxt, ASN1T_TrailerUnitDescriptionList *pvalue);

EXTERN int asn1JsonDec_TrailerUnitDescriptionList (OSCTXT *pctxt, ASN1T_TrailerUnitDescriptionList *pvalue);

EXTERN int asn1PrtToStrm_TrailerUnitDescriptionList (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerUnitDescriptionList* pvalue);

EXTERN int asn1Init_TrailerUnitDescriptionList (
   ASN1T_TrailerUnitDescriptionList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TrailerUnitDescriptionList (OSCTXT *pctxt, 
   ASN1T_TrailerUnitDescriptionList* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerData                                               */
/*                                                            */
/**************************************************************/
/*
TrailerData ::= SEQUENCE {
   notUsed [0] SSPindex,
        -- always set to 0 and carries no meaning;
        -- legacy field maintained for backward compatibility
   -- Offset connection point details from the 
   -- hauling vehicle to the first trailer unit
   connection [1] PivotPointDescription,
   -- One of more Trailer or Dolly Descriptions 
   -- (each called a unit)
   units [2] TrailerUnitDescriptionList,
   ...
}
*/
struct EXTERN ASN1T_TrailerData {
   OSUINT8 notUsed;
   ASN1T_PivotPointDescription connection;
   ASN1T_TrailerUnitDescriptionList units;
   ASN1TSeqExt extElem1;
} ;

EXTERN int asn1PE_TrailerData (OSCTXT* pctxt, ASN1T_TrailerData* pvalue);

EXTERN int asn1PD_TrailerData (OSCTXT* pctxt, ASN1T_TrailerData* pvalue);

EXTERN int XmlEnc_TrailerData (OSCTXT* pctxt, ASN1T_TrailerData* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerData (OSCTXT* pctxt, ASN1T_TrailerData* pvalue);

EXTERN int asn1JsonEnc_TrailerData (OSCTXT *pctxt, ASN1T_TrailerData *pvalue);

EXTERN int asn1JsonDec_TrailerData (OSCTXT *pctxt, ASN1T_TrailerData *pvalue);

EXTERN int asn1PrtToStrm_TrailerData (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerData* pvalue);

EXTERN ASN1T_TrailerData* new_ASN1T_TrailerData (ASN1CType& ccobj);

EXTERN int asn1Init_TrailerData (ASN1T_TrailerData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TrailerData (OSCTXT *pctxt, ASN1T_TrailerData* pvalue);

/**************************************************************/
/*                                                            */
/*  SpecialVehicleExtensions                                  */
/*                                                            */
/**************************************************************/
/*
SpecialVehicleExtensions ::= SEQUENCE {
   -- The entire EVA message has been reduced to these items
   vehicleAlerts [0] EmergencyDetails OPTIONAL,
   -- Description or Direction from an emergency vehicle
   description [1] EventDescription OPTIONAL, -- short ITIS description
   -- Trailers for both passenger vehicles and heavy trucks
   trailers [2] TrailerData OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SpecialVehicleExtensions {
   struct {
      unsigned vehicleAlertsPresent : 1;
      unsigned descriptionPresent : 1;
      unsigned trailersPresent : 1;
   } m;
   struct ASN1T_EmergencyDetails *vehicleAlerts;
   ASN1T_EventDescription description;
   ASN1T_TrailerData trailers;
   ASN1TSeqExt extElem1;
   ASN1T_SpecialVehicleExtensions ();
} ;

EXTERN int asn1PE_SpecialVehicleExtensions (OSCTXT* pctxt, ASN1T_SpecialVehicleExtensions* pvalue);

EXTERN int asn1PD_SpecialVehicleExtensions (OSCTXT* pctxt, ASN1T_SpecialVehicleExtensions* pvalue);

EXTERN int XmlEnc_SpecialVehicleExtensions (OSCTXT* pctxt, 
   ASN1T_SpecialVehicleExtensions* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpecialVehicleExtensions (OSCTXT* pctxt, 
   ASN1T_SpecialVehicleExtensions* pvalue);

EXTERN int asn1JsonEnc_SpecialVehicleExtensions (OSCTXT *pctxt, ASN1T_SpecialVehicleExtensions *pvalue);

EXTERN int asn1JsonDec_SpecialVehicleExtensions (OSCTXT *pctxt, ASN1T_SpecialVehicleExtensions *pvalue);

EXTERN int asn1PrtToStrm_SpecialVehicleExtensions (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpecialVehicleExtensions* pvalue);

EXTERN ASN1T_SpecialVehicleExtensions* 
   new_ASN1T_SpecialVehicleExtensions (ASN1CType& ccobj);

EXTERN int asn1Init_SpecialVehicleExtensions (ASN1T_SpecialVehicleExtensions* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SpecialVehicleExtensions (OSCTXT *pctxt, 
   ASN1T_SpecialVehicleExtensions* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleData                                               */
/*                                                            */
/**************************************************************/
/*
VehicleData ::= SEQUENCE {
   -- Values for width and length are sent in BSM part I 
   height [0] VehicleHeight OPTIONAL,
   bumpers [1] BumperHeights OPTIONAL,
   mass [2] VehicleMass OPTIONAL,
   trailerWeight [3] TrailerWeight OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_VehicleData {
   struct {
      unsigned heightPresent : 1;
      unsigned bumpersPresent : 1;
      unsigned massPresent : 1;
      unsigned trailerWeightPresent : 1;
   } m;
   OSUINT8 height;
   struct ASN1T_BumperHeights *bumpers;
   OSUINT8 mass;
   OSUINT16 trailerWeight;
   ASN1TSeqExt extElem1;
   ASN1T_VehicleData ();
} ;

EXTERN int asn1PE_VehicleData (OSCTXT* pctxt, ASN1T_VehicleData* pvalue);

EXTERN int asn1PD_VehicleData (OSCTXT* pctxt, ASN1T_VehicleData* pvalue);

EXTERN int XmlEnc_VehicleData (OSCTXT* pctxt, ASN1T_VehicleData* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleData (OSCTXT* pctxt, ASN1T_VehicleData* pvalue);

EXTERN int asn1JsonEnc_VehicleData (OSCTXT *pctxt, ASN1T_VehicleData *pvalue);

EXTERN int asn1JsonDec_VehicleData (OSCTXT *pctxt, ASN1T_VehicleData *pvalue);

EXTERN int asn1PrtToStrm_VehicleData (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleData* pvalue);

EXTERN ASN1T_VehicleData* new_ASN1T_VehicleData (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleData (ASN1T_VehicleData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleData (OSCTXT *pctxt, ASN1T_VehicleData* pvalue);

/**************************************************************/
/*                                                            */
/*  WeatherReport                                             */
/*                                                            */
/**************************************************************/
/*
WeatherReport ::= SEQUENCE {
   isRaining [0] EssPrecipYesNo,
   rainRate [1] EssPrecipRate OPTIONAL,
   precipSituation [2] EssPrecipSituation OPTIONAL,
   solarRadiation [3] EssSolarRadiation OPTIONAL,
   friction [4] EssMobileFriction OPTIONAL,
   roadFriction [5] CoefficientOfFriction OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_WeatherReport {
   struct {
      unsigned rainRatePresent : 1;
      unsigned precipSituationPresent : 1;
      unsigned solarRadiationPresent : 1;
      unsigned frictionPresent : 1;
      unsigned roadFrictionPresent : 1;
   } m;
   ASN1T_EssPrecipYesNo isRaining;
   ASN1T_EssPrecipRate rainRate;
   ASN1T_EssPrecipSituation precipSituation;
   ASN1T_EssSolarRadiation solarRadiation;
   ASN1T_EssMobileFriction friction;
   OSUINT8 roadFriction;
   ASN1TSeqExt extElem1;
   ASN1T_WeatherReport ();
} ;

EXTERN int asn1PE_WeatherReport (OSCTXT* pctxt, ASN1T_WeatherReport* pvalue);

EXTERN int asn1PD_WeatherReport (OSCTXT* pctxt, ASN1T_WeatherReport* pvalue);

EXTERN int XmlEnc_WeatherReport (OSCTXT* pctxt, ASN1T_WeatherReport* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WeatherReport (OSCTXT* pctxt, ASN1T_WeatherReport* pvalue);

EXTERN int asn1JsonEnc_WeatherReport (OSCTXT *pctxt, ASN1T_WeatherReport *pvalue);

EXTERN int asn1JsonDec_WeatherReport (OSCTXT *pctxt, ASN1T_WeatherReport *pvalue);

EXTERN int asn1PrtToStrm_WeatherReport (OSCTXT *pctxt, 
   const char* name, const ASN1T_WeatherReport* pvalue);

EXTERN ASN1T_WeatherReport* new_ASN1T_WeatherReport (ASN1CType& ccobj);

EXTERN int asn1Init_WeatherReport (ASN1T_WeatherReport* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_WeatherReport (OSCTXT *pctxt, ASN1T_WeatherReport* pvalue);

/**************************************************************/
/*                                                            */
/*  WeatherProbe                                              */
/*                                                            */
/**************************************************************/
/*
WeatherProbe ::= SEQUENCE {
   airTemp [0] AmbientAirTemperature OPTIONAL,
   airPressure [1] AmbientAirPressure OPTIONAL,
   rainRates [2] WiperSet OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_WeatherProbe {
   struct {
      unsigned airTempPresent : 1;
      unsigned airPressurePresent : 1;
      unsigned rainRatesPresent : 1;
   } m;
   OSUINT8 airTemp;
   OSUINT8 airPressure;
   struct ASN1T_WiperSet *rainRates;
   ASN1TSeqExt extElem1;
   ASN1T_WeatherProbe ();
} ;

EXTERN int asn1PE_WeatherProbe (OSCTXT* pctxt, ASN1T_WeatherProbe* pvalue);

EXTERN int asn1PD_WeatherProbe (OSCTXT* pctxt, ASN1T_WeatherProbe* pvalue);

EXTERN int XmlEnc_WeatherProbe (OSCTXT* pctxt, ASN1T_WeatherProbe* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WeatherProbe (OSCTXT* pctxt, ASN1T_WeatherProbe* pvalue);

EXTERN int asn1JsonEnc_WeatherProbe (OSCTXT *pctxt, ASN1T_WeatherProbe *pvalue);

EXTERN int asn1JsonDec_WeatherProbe (OSCTXT *pctxt, ASN1T_WeatherProbe *pvalue);

EXTERN int asn1PrtToStrm_WeatherProbe (OSCTXT *pctxt, 
   const char* name, const ASN1T_WeatherProbe* pvalue);

EXTERN ASN1T_WeatherProbe* new_ASN1T_WeatherProbe (ASN1CType& ccobj);

EXTERN int asn1Init_WeatherProbe (ASN1T_WeatherProbe* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_WeatherProbe (OSCTXT *pctxt, ASN1T_WeatherProbe* pvalue);

/**************************************************************/
/*                                                            */
/*  ObstacleDetection                                         */
/*                                                            */
/**************************************************************/
/*
ObstacleDetection ::= SEQUENCE {
   obDist [0] ObstacleDistance, -- Obstacle Distance        
   obDirect [1] ObstacleDirection, -- Obstacle Direction
   description [2] ITIScodes (523..541) OPTIONAL,
                                            -- Uses a limited set of ITIS codes        
   locationDetails [3] GenericLocations OPTIONAL,
   dateTime [4] DDateTime, -- Time detected
   vertEvent [5] VerticalAccelerationThreshold OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_ObstacleDetection {
   struct {
      unsigned descriptionPresent : 1;
      unsigned locationDetailsPresent : 1;
      unsigned vertEventPresent : 1;
   } m;
   OSUINT16 obDist;
   OSUINT16 obDirect;
   OSUINT16 description;
   ASN1T_GenericLocations locationDetails;
   struct ASN1T_DDateTime *dateTime;
   struct ASN1T_VerticalAccelerationThreshold *vertEvent;
   ASN1TSeqExt extElem1;
   ASN1T_ObstacleDetection ();
} ;

EXTERN int asn1PE_ObstacleDetection (OSCTXT* pctxt, ASN1T_ObstacleDetection* pvalue);

EXTERN int asn1PD_ObstacleDetection (OSCTXT* pctxt, ASN1T_ObstacleDetection* pvalue);

EXTERN int XmlEnc_ObstacleDetection (OSCTXT* pctxt, 
   ASN1T_ObstacleDetection* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ObstacleDetection (OSCTXT* pctxt, 
   ASN1T_ObstacleDetection* pvalue);

EXTERN int asn1JsonEnc_ObstacleDetection (OSCTXT *pctxt, ASN1T_ObstacleDetection *pvalue);

EXTERN int asn1JsonDec_ObstacleDetection (OSCTXT *pctxt, ASN1T_ObstacleDetection *pvalue);

EXTERN int asn1PrtToStrm_ObstacleDetection (OSCTXT *pctxt, 
   const char* name, const ASN1T_ObstacleDetection* pvalue);

EXTERN ASN1T_ObstacleDetection* new_ASN1T_ObstacleDetection (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_ObstacleDetection (ASN1T_ObstacleDetection* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ObstacleDetection (OSCTXT *pctxt, 
   ASN1T_ObstacleDetection* pvalue);

/**************************************************************/
/*                                                            */
/*  DisabledVehicle                                           */
/*                                                            */
/**************************************************************/
/*
DisabledVehicle ::= SEQUENCE {
   statusDetails [0] ITIScodes (523..541),
                     -- Codes 532 to 541, as taken from J2540:
                     -- Disabled, etc.
                       -- stalled-vehicle (532),
                       -- abandoned-vehicle (533),
                       -- disabled-vehicle (534),
                       -- disabled-truck (535),
                       -- disabled-semi-trailer (536), -^- Alt: disabled
                     -- tractor-trailer
                       -- disabled-bus (537),
                       -- disabled-train (538),
                       -- vehicle-spun-out (539),
                       -- vehicle-on-fire (540),
                       -- vehicle-in-water (541),
   locationDetails [1] GenericLocations OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_DisabledVehicle {
   struct {
      unsigned locationDetailsPresent : 1;
   } m;
   OSUINT16 statusDetails;
   ASN1T_GenericLocations locationDetails;
   ASN1TSeqExt extElem1;
   ASN1T_DisabledVehicle ();
} ;

EXTERN int asn1PE_DisabledVehicle (OSCTXT* pctxt, ASN1T_DisabledVehicle* pvalue);

EXTERN int asn1PD_DisabledVehicle (OSCTXT* pctxt, ASN1T_DisabledVehicle* pvalue);

EXTERN int XmlEnc_DisabledVehicle (OSCTXT* pctxt, 
   ASN1T_DisabledVehicle* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DisabledVehicle (OSCTXT* pctxt, ASN1T_DisabledVehicle* pvalue
   );

EXTERN int asn1JsonEnc_DisabledVehicle (OSCTXT *pctxt, ASN1T_DisabledVehicle *pvalue);

EXTERN int asn1JsonDec_DisabledVehicle (OSCTXT *pctxt, ASN1T_DisabledVehicle *pvalue);

EXTERN int asn1PrtToStrm_DisabledVehicle (OSCTXT *pctxt, 
   const char* name, const ASN1T_DisabledVehicle* pvalue);

EXTERN ASN1T_DisabledVehicle* new_ASN1T_DisabledVehicle (ASN1CType& ccobj);

EXTERN int asn1Init_DisabledVehicle (ASN1T_DisabledVehicle* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_DisabledVehicle (OSCTXT *pctxt, ASN1T_DisabledVehicle* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedProfileMeasurementList                               */
/*                                                            */
/**************************************************************/
/*
SpeedProfileMeasurementList ::= SEQUENCE (SIZE (1..20)) OF SpeedProfileMeasurement
*/
typedef struct EXTERN ASN1T_SpeedProfileMeasurementList {
   OSSIZE n;
   OSUINT8 *elem;
   ASN1T_SpeedProfileMeasurementList () : n(0), elem(0) {}
} ASN1T_SpeedProfileMeasurementList;

class EXTERN ASN1C_SpeedProfileMeasurementList :
public ASN1CType
{
protected:
   ASN1T_SpeedProfileMeasurementList& msgData;
public:
   /**
    * Control class: ASN1C_SpeedProfileMeasurementList
    * Data class:    ASN1T_SpeedProfileMeasurementList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SpeedProfileMeasurementList (ASN1T_SpeedProfileMeasurementList& data);

   /**
    * Control class: ASN1C_SpeedProfileMeasurementList<br/>
    * Data class: ASN1T_SpeedProfileMeasurementList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SpeedProfileMeasurementList (OSRTMessageBufferIF& msgBuf
      , ASN1T_SpeedProfileMeasurementList& data);

   /**
    * Control class: ASN1C_SpeedProfileMeasurementList<br/>
    * Data class: ASN1T_SpeedProfileMeasurementList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SpeedProfileMeasurementList (ASN1CType& ccobj
      , ASN1T_SpeedProfileMeasurementList& data);

   virtual ~ASN1C_SpeedProfileMeasurementList () {}

private:
   ASN1C_SpeedProfileMeasurementList& operator= (const ASN1C_SpeedProfileMeasurementList&) {return *this;}
} ;

EXTERN int asn1PE_SpeedProfileMeasurementList (OSCTXT* pctxt, ASN1T_SpeedProfileMeasurementList* pvalue);

EXTERN int asn1PD_SpeedProfileMeasurementList (OSCTXT* pctxt, ASN1T_SpeedProfileMeasurementList* pvalue);

EXTERN int XmlEnc_SpeedProfileMeasurementList (OSCTXT* pctxt, 
   ASN1T_SpeedProfileMeasurementList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedProfileMeasurementList (OSCTXT* pctxt, 
   ASN1T_SpeedProfileMeasurementList* pvalue);

EXTERN int asn1JsonEnc_SpeedProfileMeasurementList (OSCTXT *pctxt, ASN1T_SpeedProfileMeasurementList *pvalue);

EXTERN int asn1JsonDec_SpeedProfileMeasurementList (OSCTXT *pctxt, ASN1T_SpeedProfileMeasurementList *pvalue);

EXTERN int asn1PrtToStrm_SpeedProfileMeasurementList (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedProfileMeasurementList* pvalue);

EXTERN int asn1Init_SpeedProfileMeasurementList (
   ASN1T_SpeedProfileMeasurementList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SpeedProfileMeasurementList (OSCTXT *pctxt, 
   ASN1T_SpeedProfileMeasurementList* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedProfile                                              */
/*                                                            */
/**************************************************************/
/*
SpeedProfile ::= SEQUENCE {
   -- Composed of set of measured average speeds
   speedReports [0] SpeedProfileMeasurementList,
   ...
}
*/
struct EXTERN ASN1T_SpeedProfile {
   ASN1T_SpeedProfileMeasurementList speedReports;
   ASN1TSeqExt extElem1;
   ASN1T_SpeedProfile ();
} ;

EXTERN int asn1PE_SpeedProfile (OSCTXT* pctxt, ASN1T_SpeedProfile* pvalue);

EXTERN int asn1PD_SpeedProfile (OSCTXT* pctxt, ASN1T_SpeedProfile* pvalue);

EXTERN int XmlEnc_SpeedProfile (OSCTXT* pctxt, ASN1T_SpeedProfile* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedProfile (OSCTXT* pctxt, ASN1T_SpeedProfile* pvalue);

EXTERN int asn1JsonEnc_SpeedProfile (OSCTXT *pctxt, ASN1T_SpeedProfile *pvalue);

EXTERN int asn1JsonDec_SpeedProfile (OSCTXT *pctxt, ASN1T_SpeedProfile *pvalue);

EXTERN int asn1PrtToStrm_SpeedProfile (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedProfile* pvalue);

EXTERN ASN1T_SpeedProfile* new_ASN1T_SpeedProfile (ASN1CType& ccobj);

EXTERN int asn1Init_SpeedProfile (ASN1T_SpeedProfile* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SpeedProfile (OSCTXT *pctxt, ASN1T_SpeedProfile* pvalue);

/**************************************************************/
/*                                                            */
/*  RTCMPackage                                               */
/*                                                            */
/**************************************************************/
/*
RTCMPackage ::= SEQUENCE {
   -- precise antenna position and noise data for a rover
   rtcmHeader [0] RTCMheader OPTIONAL,
   -- one or more RTCM messages
   msgs [1] RTCMmessageList,
   ...
}
*/
struct EXTERN ASN1T_RTCMPackage {
   struct {
      unsigned rtcmHeaderPresent : 1;
   } m;
   struct ASN1T_RTCMheader *rtcmHeader;
   struct ASN1T_RTCMmessageList *msgs;
   ASN1TSeqExt extElem1;
   ASN1T_RTCMPackage ();
} ;

EXTERN int asn1PE_RTCMPackage (OSCTXT* pctxt, ASN1T_RTCMPackage* pvalue);

EXTERN int asn1PD_RTCMPackage (OSCTXT* pctxt, ASN1T_RTCMPackage* pvalue);

EXTERN int XmlEnc_RTCMPackage (OSCTXT* pctxt, ASN1T_RTCMPackage* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RTCMPackage (OSCTXT* pctxt, ASN1T_RTCMPackage* pvalue);

EXTERN int asn1JsonEnc_RTCMPackage (OSCTXT *pctxt, ASN1T_RTCMPackage *pvalue);

EXTERN int asn1JsonDec_RTCMPackage (OSCTXT *pctxt, ASN1T_RTCMPackage *pvalue);

EXTERN int asn1PrtToStrm_RTCMPackage (OSCTXT *pctxt, 
   const char* name, const ASN1T_RTCMPackage* pvalue);

EXTERN ASN1T_RTCMPackage* new_ASN1T_RTCMPackage (ASN1CType& ccobj);

EXTERN int asn1Init_RTCMPackage (ASN1T_RTCMPackage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RTCMPackage (OSCTXT *pctxt, ASN1T_RTCMPackage* pvalue);

/**************************************************************/
/*                                                            */
/*  SupplementalVehicleExtensions_regional_element            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SupplementalVehicleExtensions'
*/
struct EXTERN ASN1T_SupplementalVehicleExtensions_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SupplementalVehicleExtensions_regional_element (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions_regional_element* pvalue);

EXTERN int asn1PD_SupplementalVehicleExtensions_regional_element (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions_regional_element* pvalue);

EXTERN int XmlEnc_SupplementalVehicleExtensions_regional_element 
   (OSCTXT* pctxt, 
   ASN1T_SupplementalVehicleExtensions_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SupplementalVehicleExtensions_regional_element 
   (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions_regional_element* pvalue
   );

EXTERN int asn1JsonEnc_SupplementalVehicleExtensions_regional_element (OSCTXT *pctxt, ASN1T_SupplementalVehicleExtensions_regional_element *pvalue);

EXTERN int asn1JsonDec_SupplementalVehicleExtensions_regional_element (OSCTXT *pctxt, ASN1T_SupplementalVehicleExtensions_regional_element *pvalue);

EXTERN int asn1PrtToStrm_SupplementalVehicleExtensions_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SupplementalVehicleExtensions_regional_element* pvalue);

EXTERN ASN1T_SupplementalVehicleExtensions_regional_element* 
   new_ASN1T_SupplementalVehicleExtensions_regional_element (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_SupplementalVehicleExtensions_regional_element (
   ASN1T_SupplementalVehicleExtensions_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SupplementalVehicleExtensions_regional_element (OSCTXT *pctxt, 
   ASN1T_SupplementalVehicleExtensions_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SupplementalVehicleExtensions_regional                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SupplementalVehicleExtensions'
*/
/* List of ASN1T_SupplementalVehicleExtensions_regional_element */
typedef ASN1TSeqOfList ASN1T_SupplementalVehicleExtensions_regional;

class EXTERN ASN1C_SupplementalVehicleExtensions_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_SupplementalVehicleExtensions_regional& msgData;
public:
   /**
    * Control class: ASN1C_SupplementalVehicleExtensions_regional
    * Data class:    ASN1T_SupplementalVehicleExtensions_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SupplementalVehicleExtensions_regional
       (ASN1T_SupplementalVehicleExtensions_regional& data);

   /**
    * Control class: ASN1C_SupplementalVehicleExtensions_regional<br/>
    * Data class: ASN1T_SupplementalVehicleExtensions_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SupplementalVehicleExtensions_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_SupplementalVehicleExtensions_regional& data);

   /**
    * Control class: ASN1C_SupplementalVehicleExtensions_regional<br/>
    * Data class: ASN1T_SupplementalVehicleExtensions_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SupplementalVehicleExtensions_regional (ASN1CType& ccobj
      , ASN1T_SupplementalVehicleExtensions_regional& data);

   virtual ~ASN1C_SupplementalVehicleExtensions_regional () {}

   /**
    * Data class: ASN1T_SupplementalVehicleExtensions_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SupplementalVehicleExtensions_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SupplementalVehicleExtensions_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SupplementalVehicleExtensions_regional_element* NewElement ();

   /**
    * Data class: ASN1T_SupplementalVehicleExtensions_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SupplementalVehicleExtensions_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_SupplementalVehicleExtensions_regional_element* 
      GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_SupplementalVehicleExtensions_regional* pmatches);

private:
   ASN1C_SupplementalVehicleExtensions_regional& operator= (const ASN1C_SupplementalVehicleExtensions_regional&) {return *this;}
} ;

EXTERN int asn1PE_SupplementalVehicleExtensions_regional (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions_regional* pvalue);

EXTERN int asn1PD_SupplementalVehicleExtensions_regional (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions_regional* pvalue);

EXTERN int XmlEnc_SupplementalVehicleExtensions_regional (OSCTXT* pctxt, 
   ASN1T_SupplementalVehicleExtensions_regional* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SupplementalVehicleExtensions_regional (OSCTXT* pctxt, 
   ASN1T_SupplementalVehicleExtensions_regional* pvalue);

EXTERN int asn1JsonEnc_SupplementalVehicleExtensions_regional (OSCTXT *pctxt, ASN1T_SupplementalVehicleExtensions_regional *pvalue);

EXTERN int asn1JsonDec_SupplementalVehicleExtensions_regional (OSCTXT *pctxt, ASN1T_SupplementalVehicleExtensions_regional *pvalue);

EXTERN int asn1PrtToStrm_SupplementalVehicleExtensions_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_SupplementalVehicleExtensions_regional* pvalue);

EXTERN int asn1Init_SupplementalVehicleExtensions_regional (
   ASN1T_SupplementalVehicleExtensions_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SupplementalVehicleExtensions_regional (OSCTXT *pctxt, 
   ASN1T_SupplementalVehicleExtensions_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SupplementalVehicleExtensions                             */
/*                                                            */
/**************************************************************/
/*
SupplementalVehicleExtensions ::= SEQUENCE {
   -- Note that VehicleEventFlags, ExteriorLights, 
   -- PathHistory, and PathPrediction are in VehicleSafetyExtensions 
   -- Vehicle Type Classification Data
   classification [0] BasicVehicleClass OPTIONAL,
                    -- May be required to be present for non passenger vehicles
   classDetails [1] VehicleClassification OPTIONAL,
   vehicleData [2] VehicleData OPTIONAL,
   -- Various V2V Probe Data
   weatherReport [3] WeatherReport OPTIONAL,
   weatherProbe [4] WeatherProbe OPTIONAL,
   -- Detected Obstacle data
   obstacle [5] ObstacleDetection OPTIONAL,
   -- Disabled Vehicle Report
   status [6] DisabledVehicle OPTIONAL,
   -- Oncoming lane speed reporting
   speedProfile [7] SpeedProfile OPTIONAL,
   -- Raw GNSS measurements
   theRTCM [8] RTCMPackage OPTIONAL,
   regional [9] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-SupplementalVehicleExtensions}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-SupplementalVehicleExtensions}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SupplementalVehicleExtensions {
   struct {
      unsigned classificationPresent : 1;
      unsigned classDetailsPresent : 1;
      unsigned vehicleDataPresent : 1;
      unsigned weatherReportPresent : 1;
      unsigned weatherProbePresent : 1;
      unsigned obstaclePresent : 1;
      unsigned statusPresent : 1;
      unsigned speedProfilePresent : 1;
      unsigned theRTCMPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   OSUINT8 classification;
   struct ASN1T_VehicleClassification *classDetails;
   ASN1T_VehicleData vehicleData;
   ASN1T_WeatherReport weatherReport;
   ASN1T_WeatherProbe weatherProbe;
   ASN1T_ObstacleDetection obstacle;
   ASN1T_DisabledVehicle status;
   ASN1T_SpeedProfile speedProfile;
   ASN1T_RTCMPackage theRTCM;
   ASN1T_SupplementalVehicleExtensions_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_SupplementalVehicleExtensions ();
} ;

EXTERN int asn1PE_SupplementalVehicleExtensions (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions* pvalue);

EXTERN int asn1PD_SupplementalVehicleExtensions (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions* pvalue);

EXTERN int XmlEnc_SupplementalVehicleExtensions (OSCTXT* pctxt, 
   ASN1T_SupplementalVehicleExtensions* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SupplementalVehicleExtensions (OSCTXT* pctxt, 
   ASN1T_SupplementalVehicleExtensions* pvalue);

EXTERN int asn1JsonEnc_SupplementalVehicleExtensions (OSCTXT *pctxt, ASN1T_SupplementalVehicleExtensions *pvalue);

EXTERN int asn1JsonDec_SupplementalVehicleExtensions (OSCTXT *pctxt, ASN1T_SupplementalVehicleExtensions *pvalue);

EXTERN int asn1PrtToStrm_SupplementalVehicleExtensions (OSCTXT *pctxt, 
   const char* name, const ASN1T_SupplementalVehicleExtensions* pvalue);

EXTERN ASN1T_SupplementalVehicleExtensions* 
   new_ASN1T_SupplementalVehicleExtensions (ASN1CType& ccobj);

EXTERN int asn1Init_SupplementalVehicleExtensions (
   ASN1T_SupplementalVehicleExtensions* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SupplementalVehicleExtensions (OSCTXT *pctxt, 
   ASN1T_SupplementalVehicleExtensions* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage_partII_element                         */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'BasicSafetyMessage'
*/
struct EXTERN ASN1T_BasicSafetyMessage_partII_element {
   ASN1T_PartII_Id partII_Id;
   struct  {
      /**
       * information object selector
       */
      BSMpartIIExtension::TVALUE t;

      /**
       * BSMpartIIExtension information objects
       */
      union {
         /**
          * id: vehicleSafetyExt
          */
         struct ASN1T_VehicleSafetyExtensions *_BSMpartIIExtension_vehicleSafetyExt;
         /**
          * id: specialVehicleExt
          */
         ASN1T_SpecialVehicleExtensions *_BSMpartIIExtension_specialVehicleExt;
         /**
          * id: supplementalVehicleExt
          */
         ASN1T_SupplementalVehicleExtensions *_BSMpartIIExtension_supplementalVehicleExt;

         ASN1TOpenType* extElem1;
      } u;
   } partII_Value;
   ASN1T_BasicSafetyMessage_partII_element ();
} ;

EXTERN int asn1PE_BasicSafetyMessage_partII_element (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII_element* pvalue);

EXTERN int asn1PD_BasicSafetyMessage_partII_element (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII_element* pvalue);

EXTERN int XmlEnc_BasicSafetyMessage_partII_element (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_partII_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BasicSafetyMessage_partII_element (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_partII_element* pvalue);

EXTERN int asn1JsonEnc_BasicSafetyMessage_partII_element (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_partII_element *pvalue);

EXTERN int asn1JsonDec_BasicSafetyMessage_partII_element (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_partII_element *pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage_partII_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_BasicSafetyMessage_partII_element* pvalue);

struct ASN1T_VehicleSafetyExtensions ;
EXTERN void asn1SetTC_BasicSafetyMessage_partII_element_BSMpartIIExtension_vehicleSafetyExt
   (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII_element* pElem, struct 
   ASN1T_VehicleSafetyExtensions *pvalue);

EXTERN void asn1SetTC_BasicSafetyMessage_partII_element_BSMpartIIExtension_specialVehicleExt
   (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII_element* pElem, 
   ASN1T_SpecialVehicleExtensions *pvalue);

EXTERN void asn1SetTC_BasicSafetyMessage_partII_element_BSMpartIIExtension_supplementalVehicleExt
   (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII_element* pElem, 
   ASN1T_SupplementalVehicleExtensions *pvalue);

EXTERN ASN1T_BasicSafetyMessage_partII_element* 
   new_ASN1T_BasicSafetyMessage_partII_element (ASN1CType& ccobj);

EXTERN int asn1Init_BasicSafetyMessage_partII_element (
   ASN1T_BasicSafetyMessage_partII_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_BasicSafetyMessage_partII_element (OSCTXT *pctxt, 
   ASN1T_BasicSafetyMessage_partII_element* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage_partII                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'BasicSafetyMessage'
*/
/* List of ASN1T_BasicSafetyMessage_partII_element */
typedef ASN1TSeqOfList ASN1T_BasicSafetyMessage_partII;

class EXTERN ASN1C_BasicSafetyMessage_partII :
public ASN1CSeqOfList
{
protected:
   ASN1T_BasicSafetyMessage_partII& msgData;
public:
   /**
    * Control class: ASN1C_BasicSafetyMessage_partII
    * Data class:    ASN1T_BasicSafetyMessage_partII
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_BasicSafetyMessage_partII (ASN1T_BasicSafetyMessage_partII& data);

   /**
    * Control class: ASN1C_BasicSafetyMessage_partII<br/>
    * Data class: ASN1T_BasicSafetyMessage_partII<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_BasicSafetyMessage_partII (OSRTMessageBufferIF& msgBuf
      , ASN1T_BasicSafetyMessage_partII& data);

   /**
    * Control class: ASN1C_BasicSafetyMessage_partII<br/>
    * Data class: ASN1T_BasicSafetyMessage_partII<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_BasicSafetyMessage_partII (ASN1CType& ccobj
      , ASN1T_BasicSafetyMessage_partII& data);

   virtual ~ASN1C_BasicSafetyMessage_partII () {}

   /**
    * Data class: ASN1T_BasicSafetyMessage_partII_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_BasicSafetyMessage_partII_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_BasicSafetyMessage_partII_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_BasicSafetyMessage_partII_element* NewElement ();

   /**
    * Data class: ASN1T_BasicSafetyMessage_partII_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_BasicSafetyMessage_partII_element* AppendNewElement ();

   /* Append IE with value type ASN1T_VehicleSafetyExtensions to list */
   int Append_vehicleSafetyExt (struct ASN1T_VehicleSafetyExtensions *pvalue);

   /* Append IE with value type ASN1T_SpecialVehicleExtensions to list */
   int Append_specialVehicleExt (ASN1T_SpecialVehicleExtensions *pvalue);

   /* Append IE with value type ASN1T_SupplementalVehicleExtensions to list */
   int Append_supplementalVehicleExt (ASN1T_SupplementalVehicleExtensions 
      *pvalue);

   /* Get IE using partII_Id key value */
   ASN1T_BasicSafetyMessage_partII_element* GetIE (ASN1T_PartII_Id partII_Id);

   /* Get all matching IEs using partII_Id key value */
   int GetAllIEs (ASN1T_PartII_Id partII_Id, 
      ASN1T_BasicSafetyMessage_partII* pmatches);

private:
   ASN1C_BasicSafetyMessage_partII& operator= (const ASN1C_BasicSafetyMessage_partII&) {return *this;}
} ;

EXTERN int asn1PE_BasicSafetyMessage_partII (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII* pvalue);

EXTERN int asn1PD_BasicSafetyMessage_partII (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII* pvalue);

EXTERN int XmlEnc_BasicSafetyMessage_partII (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_partII* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BasicSafetyMessage_partII (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_partII* pvalue);

EXTERN int asn1JsonEnc_BasicSafetyMessage_partII (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_partII *pvalue);

EXTERN int asn1JsonDec_BasicSafetyMessage_partII (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_partII *pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage_partII (OSCTXT *pctxt, 
   const char* name, const ASN1T_BasicSafetyMessage_partII* pvalue);

EXTERN int asn1Init_BasicSafetyMessage_partII (
   ASN1T_BasicSafetyMessage_partII* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_BasicSafetyMessage_partII (OSCTXT *pctxt, 
   ASN1T_BasicSafetyMessage_partII* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage_regional_element                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'BasicSafetyMessage'
*/
struct EXTERN ASN1T_BasicSafetyMessage_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_BasicSafetyMessage_regional_element (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_regional_element* pvalue);

EXTERN int asn1PD_BasicSafetyMessage_regional_element (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_regional_element* pvalue);

EXTERN int XmlEnc_BasicSafetyMessage_regional_element (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BasicSafetyMessage_regional_element (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_regional_element* pvalue);

EXTERN int asn1JsonEnc_BasicSafetyMessage_regional_element (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_regional_element *pvalue);

EXTERN int asn1JsonDec_BasicSafetyMessage_regional_element (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_regional_element *pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_BasicSafetyMessage_regional_element* pvalue);

EXTERN ASN1T_BasicSafetyMessage_regional_element* 
   new_ASN1T_BasicSafetyMessage_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_BasicSafetyMessage_regional_element (
   ASN1T_BasicSafetyMessage_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_BasicSafetyMessage_regional_element (OSCTXT *pctxt, 
   ASN1T_BasicSafetyMessage_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage_regional                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'BasicSafetyMessage'
*/
/* List of ASN1T_BasicSafetyMessage_regional_element */
typedef ASN1TSeqOfList ASN1T_BasicSafetyMessage_regional;

class EXTERN ASN1C_BasicSafetyMessage_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_BasicSafetyMessage_regional& msgData;
public:
   /**
    * Control class: ASN1C_BasicSafetyMessage_regional
    * Data class:    ASN1T_BasicSafetyMessage_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_BasicSafetyMessage_regional (ASN1T_BasicSafetyMessage_regional& data);

   /**
    * Control class: ASN1C_BasicSafetyMessage_regional<br/>
    * Data class: ASN1T_BasicSafetyMessage_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_BasicSafetyMessage_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_BasicSafetyMessage_regional& data);

   /**
    * Control class: ASN1C_BasicSafetyMessage_regional<br/>
    * Data class: ASN1T_BasicSafetyMessage_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_BasicSafetyMessage_regional (ASN1CType& ccobj
      , ASN1T_BasicSafetyMessage_regional& data);

   virtual ~ASN1C_BasicSafetyMessage_regional () {}

   /**
    * Data class: ASN1T_BasicSafetyMessage_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_BasicSafetyMessage_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_BasicSafetyMessage_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_BasicSafetyMessage_regional_element* NewElement ();

   /**
    * Data class: ASN1T_BasicSafetyMessage_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_BasicSafetyMessage_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_BasicSafetyMessage_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_BasicSafetyMessage_regional* pmatches);

private:
   ASN1C_BasicSafetyMessage_regional& operator= (const ASN1C_BasicSafetyMessage_regional&) {return *this;}
} ;

EXTERN int asn1PE_BasicSafetyMessage_regional (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_regional* pvalue);

EXTERN int asn1PD_BasicSafetyMessage_regional (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_regional* pvalue);

EXTERN int XmlEnc_BasicSafetyMessage_regional (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BasicSafetyMessage_regional (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_regional* pvalue);

EXTERN int asn1JsonEnc_BasicSafetyMessage_regional (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_regional *pvalue);

EXTERN int asn1JsonDec_BasicSafetyMessage_regional (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_regional *pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_BasicSafetyMessage_regional* pvalue);

EXTERN int asn1Init_BasicSafetyMessage_regional (
   ASN1T_BasicSafetyMessage_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_BasicSafetyMessage_regional (OSCTXT *pctxt, 
   ASN1T_BasicSafetyMessage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage                                        */
/*                                                            */
/**************************************************************/
/*
BasicSafetyMessage ::= SEQUENCE {
   -- Part I, Sent at all times with each message
   coreData [0] BSMcoreData,
   -- Part II Content
   partII [1] SEQUENCE (SIZE (1..8)) OF SEQUENCE {
      partII-Id [0] PARTII-EXT-ID-AND-TYPE.&id ({BSMpartIIExtension}),
      partII-Value [1] EXPLICIT PARTII-EXT-ID-AND-TYPE.&Type ({BSMpartIIExtension}{@partII-Id})
   } OPTIONAL,
   regional [2] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-BasicSafetyMessage}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-BasicSafetyMessage}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_BasicSafetyMessage {
   struct {
      unsigned partIIPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   struct ASN1T_BSMcoreData *coreData;
   ASN1T_BasicSafetyMessage_partII partII;
   ASN1T_BasicSafetyMessage_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_BasicSafetyMessage ();
} ;

EXTERN int asn1PE_BasicSafetyMessage (OSCTXT* pctxt, ASN1T_BasicSafetyMessage* pvalue);

EXTERN int asn1PD_BasicSafetyMessage (OSCTXT* pctxt, ASN1T_BasicSafetyMessage* pvalue);

EXTERN int XmlEnc_BasicSafetyMessage (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BasicSafetyMessage (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage* pvalue);

EXTERN int asn1JsonEnc_BasicSafetyMessage (OSCTXT *pctxt, ASN1T_BasicSafetyMessage *pvalue);

EXTERN int asn1JsonDec_BasicSafetyMessage (OSCTXT *pctxt, ASN1T_BasicSafetyMessage *pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage (OSCTXT *pctxt, 
   const char* name, const ASN1T_BasicSafetyMessage* pvalue);

EXTERN ASN1T_BasicSafetyMessage* 
   new_ASN1T_BasicSafetyMessage (ASN1CType& ccobj);

EXTERN int asn1Init_BasicSafetyMessage (ASN1T_BasicSafetyMessage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_BasicSafetyMessage (OSCTXT *pctxt, 
   ASN1T_BasicSafetyMessage* pvalue);

/* Value definitions */

#define ASN1V_vehicleSafetyExt 0
#define ASN1V_specialVehicleExt 1
#define ASN1V_supplementalVehicleExt 2

#endif
