/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).
 */
#ifndef DSRC_H
#define DSRC_H

#include <stdio.h>
#include <stdlib.h>
#include "rtpersrc/asn1PerCppTypes.h"
#include "rtsrc/asn1CppTypes.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtsrc/asn1type.h"
#include "rtxmlsrc/asn1xml.h"
#include "rtxmlsrc/rtXmlCppMsgBuf.h"
#include "rtsrc/asn1type.h"
#include "rtjsonsrc/asn1json.h"
#include "rtjsonsrc/rtJsonCppMsgBuf.h"

#include "rtsrc/ASN1CBitStr.h"
#include "rtsrc/ASN1CSeqOfList.h"
#include "ITIS.h"
#include "NTCIP.h"
#include "REGION.h"

/**
 * Header file for ASN.1 module DSRC
 */
class MessageTypes {
public:
   enum TVALUE {
      T_UNDEF_,
      T_basicSafetyMessage,
      T_mapData,
      T_signalPhaseAndTimingMessage,
      T_commonSafetyRequest,
      T_emergencyVehicleAlert,
      T_intersectionCollision,
      T_nmeaCorrections,
      T_probeDataManagement,
      T_probeVehicleData,
      T_roadSideAlert,
      T_rtcmCorrections,
      T_signalRequestMessage,
      T_signalStatusMessage,
      T_travelerInformation,
      T_personalSafetyMessage,
      T_testMessage00,
      T_testMessage01,
      T_testMessage02,
      T_testMessage03,
      T_testMessage04,
      T_testMessage05,
      T_testMessage06,
      T_testMessage07,
      T_testMessage08,
      T_testMessage09,
      T_testMessage10,
      T_testMessage11,
      T_testMessage12,
      T_testMessage13,
      T_testMessage14,
      T_testMessage15
   } ;
} ;

class BSMpartIIExtension {
public:
   enum TVALUE {
      T_UNDEF_,
      T_vehicleSafetyExt,
      T_specialVehicleExt,
      T_supplementalVehicleExt
   } ;
} ;

/**************************************************************/
/*                                                            */
/*  PartII_Id                                                 */
/*                                                            */
/**************************************************************/
/*
PartII-Id ::= INTEGER (0..63)
*/
typedef OSUINT8 ASN1T_PartII_Id;

EXTERN int asn1PE_PartII_Id (OSCTXT* pctxt, ASN1T_PartII_Id value);

EXTERN int asn1PD_PartII_Id (OSCTXT* pctxt, ASN1T_PartII_Id* pvalue);

EXTERN int XmlEnc_PartII_Id (OSCTXT* pctxt, ASN1T_PartII_Id value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PartII_Id (OSCTXT* pctxt, ASN1T_PartII_Id* pvalue);

EXTERN int asn1JsonEnc_PartII_Id (OSCTXT *pctxt, ASN1T_PartII_Id *pvalue);

EXTERN int asn1JsonDec_PartII_Id (OSCTXT *pctxt, ASN1T_PartII_Id *pvalue);

EXTERN int asn1PrtToStrm_PartII_Id (OSCTXT *pctxt, 
   const char* name, const ASN1T_PartII_Id* pvalue);

EXTERN ASN1T_PartII_Id* new_ASN1T_PartII_Id (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Acceleration                                              */
/*                                                            */
/**************************************************************/
/*
 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 
 Start of entries from table Data_Elements...
 This table typically contains data element entries.
 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 
Acceleration ::= INTEGER (-2000..2001)
    LSB units are 0.01 m/s^2
    the value 2000 shall be used for values greater than 2000     
    the value -2000 shall be used for values less than -2000  
    a value of 2001 shall be used for Unavailable

*/
typedef OSINT16 ASN1T_Acceleration;

EXTERN int asn1PE_Acceleration (OSCTXT* pctxt, ASN1T_Acceleration value);

EXTERN int asn1PD_Acceleration (OSCTXT* pctxt, ASN1T_Acceleration* pvalue);

EXTERN int XmlEnc_Acceleration (OSCTXT* pctxt, ASN1T_Acceleration value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Acceleration (OSCTXT* pctxt, ASN1T_Acceleration* pvalue);

EXTERN int asn1JsonEnc_Acceleration (OSCTXT *pctxt, ASN1T_Acceleration *pvalue);

EXTERN int asn1JsonDec_Acceleration (OSCTXT *pctxt, ASN1T_Acceleration *pvalue);

EXTERN int asn1PrtToStrm_Acceleration (OSCTXT *pctxt, 
   const char* name, const ASN1T_Acceleration* pvalue);

EXTERN ASN1T_Acceleration* new_ASN1T_Acceleration (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  AccelerationConfidence                                    */
/*                                                            */
/**************************************************************/
/*
AccelerationConfidence ::= ENUMERATED { unavailable(0), accl-100-00(1), accl-010-00(2), accl-005-00(3), accl-001-00(4), accl-000-10(5), accl-000-05(6), accl-000-01(7) }
      Encoded as a 3 bit value

*/
struct EXTERN AccelerationConfidence {
   enum Root {
      unavailable = 0,
      accl_100_00 = 1,
      accl_010_00 = 2,
      accl_005_00 = 3,
      accl_001_00 = 4,
      accl_000_10 = 5,
      accl_000_05 = 6,
      accl_000_01 = 7
   } ;
} ;

typedef OSUINT32 ASN1T_AccelerationConfidence;

EXTERN int asn1PE_AccelerationConfidence (OSCTXT* pctxt, ASN1T_AccelerationConfidence value);

EXTERN int asn1PD_AccelerationConfidence (OSCTXT* pctxt, ASN1T_AccelerationConfidence* pvalue);

EXTERN int XmlEnc_AccelerationConfidence (OSCTXT* pctxt, 
   ASN1T_AccelerationConfidence value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AccelerationConfidence (OSCTXT* pctxt, 
   ASN1T_AccelerationConfidence* pvalue);

EXTERN int asn1JsonEnc_AccelerationConfidence (OSCTXT *pctxt, ASN1T_AccelerationConfidence *pvalue);

EXTERN int asn1JsonDec_AccelerationConfidence (OSCTXT *pctxt, ASN1T_AccelerationConfidence *pvalue);

EXTERN int asn1PrtToStrm_AccelerationConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_AccelerationConfidence* pvalue);

EXTERN ASN1T_AccelerationConfidence* 
   new_ASN1T_AccelerationConfidence (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_AccelerationConfidence_ENUMTAB[];
#define ASN1T_AccelerationConfidence_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_AccelerationConfidence_ToString (OSINT32 value);

EXTERN int ASN1T_AccelerationConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_AccelerationConfidence* pvalue);

EXTERN int ASN1T_AccelerationConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_AccelerationConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  AdvisorySpeedType                                         */
/*                                                            */
/**************************************************************/
/*
AdvisorySpeedType ::= ENUMERATED { none(0), greenwave(1), ecoDrive(2), transit(3), ... }
       Note: subject to further growth

*/
struct EXTERN AdvisorySpeedType {
   enum Root {
      none = 0,
      greenwave = 1,
      ecoDrive = 2,
      transit = 3
   } ;
} ;

typedef OSUINT32 ASN1T_AdvisorySpeedType;

EXTERN int asn1PE_AdvisorySpeedType (OSCTXT* pctxt, ASN1T_AdvisorySpeedType value);

EXTERN int asn1PD_AdvisorySpeedType (OSCTXT* pctxt, ASN1T_AdvisorySpeedType* pvalue);

EXTERN int XmlEnc_AdvisorySpeedType (OSCTXT* pctxt, 
   ASN1T_AdvisorySpeedType value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AdvisorySpeedType (OSCTXT* pctxt, 
   ASN1T_AdvisorySpeedType* pvalue);

EXTERN int asn1JsonEnc_AdvisorySpeedType (OSCTXT *pctxt, ASN1T_AdvisorySpeedType *pvalue);

EXTERN int asn1JsonDec_AdvisorySpeedType (OSCTXT *pctxt, ASN1T_AdvisorySpeedType *pvalue);

EXTERN int asn1PrtToStrm_AdvisorySpeedType (OSCTXT *pctxt, 
   const char* name, const ASN1T_AdvisorySpeedType* pvalue);

EXTERN ASN1T_AdvisorySpeedType* new_ASN1T_AdvisorySpeedType (ASN1CType& ccobj)
   ;

EXTERN extern const OSEnumItem ASN1T_AdvisorySpeedType_ENUMTAB[];
#define ASN1T_AdvisorySpeedType_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_AdvisorySpeedType_ToString (OSINT32 value);

EXTERN int ASN1T_AdvisorySpeedType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_AdvisorySpeedType* pvalue);

EXTERN int ASN1T_AdvisorySpeedType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_AdvisorySpeedType* pvalue);

/**************************************************************/
/*                                                            */
/*  AllowedManeuvers                                          */
/*                                                            */
/**************************************************************/
/*
AllowedManeuvers ::= BIT STRING  { maneuverStraightAllowed(0), maneuverLeftAllowed(1), maneuverRightAllowed(2), maneuverUTurnAllowed(3), maneuverLeftTurnOnRedAllowed(4), maneuverRightTurnOnRedAllowed(5), maneuverLaneChangeAllowed(6), maneuverNoStoppingAllowed(7), yieldAllwaysRequired(8), goWithHalt(9), caution(10), reserved1(11) } (SIZE (12))
*/
struct EXTERN ASN1T_AllowedManeuvers {
   OSOCTET data[2];
   // ctors
   ASN1T_AllowedManeuvers ()  {}
   ASN1T_AllowedManeuvers (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_AllowedManeuvers :
public ASN1CBitStr
{
protected:
   ASN1T_AllowedManeuvers& msgData;
public:
   // named bits
   enum { maneuverStraightAllowed = 0, maneuverLeftAllowed = 1, maneuverRightAllowed = 2, maneuverUTurnAllowed = 3, maneuverLeftTurnOnRedAllowed = 4, maneuverRightTurnOnRedAllowed = 5, maneuverLaneChangeAllowed = 6, maneuverNoStoppingAllowed = 7, yieldAllwaysRequired = 8, goWithHalt = 9, caution = 10, reserved1 = 11 };

   /**
    * Control class: ASN1C_AllowedManeuvers
    * Data class:    ASN1T_AllowedManeuvers
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_AllowedManeuvers (ASN1T_AllowedManeuvers& data);

   /**
    * Control class: ASN1C_AllowedManeuvers<br/>
    * Data class: ASN1T_AllowedManeuvers<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_AllowedManeuvers (OSRTMessageBufferIF& msgBuf
      , ASN1T_AllowedManeuvers& data);

   virtual ~ASN1C_AllowedManeuvers () {}

private:
   ASN1C_AllowedManeuvers& operator= (const ASN1C_AllowedManeuvers&) {return *this;}
} ;

EXTERN int asn1PE_AllowedManeuvers (OSCTXT* pctxt, ASN1T_AllowedManeuvers* pvalue);

EXTERN int asn1PD_AllowedManeuvers (OSCTXT* pctxt, ASN1T_AllowedManeuvers* pvalue);

EXTERN int XmlEnc_AllowedManeuvers (OSCTXT* pctxt, 
   ASN1T_AllowedManeuvers* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AllowedManeuvers (OSCTXT* pctxt, 
   ASN1T_AllowedManeuvers* pvalue);

EXTERN int asn1JsonEnc_AllowedManeuvers (OSCTXT *pctxt, ASN1T_AllowedManeuvers *pvalue);

EXTERN int asn1JsonDec_AllowedManeuvers (OSCTXT *pctxt, ASN1T_AllowedManeuvers *pvalue);

EXTERN int asn1PrtToStrm_AllowedManeuvers (OSCTXT *pctxt, 
   const char* name, const ASN1T_AllowedManeuvers* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_AllowedManeuvers_NAMEDBITTAB[13];

EXTERN ASN1T_AllowedManeuvers* new_ASN1T_AllowedManeuvers (ASN1CType& ccobj);

EXTERN int asn1Init_AllowedManeuvers (ASN1T_AllowedManeuvers* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  AmbientAirPressure                                        */
/*                                                            */
/**************************************************************/
/*
AmbientAirPressure ::= INTEGER (0..255)
    8 Bits in hPa starting at 580 with a resolution of 
    2 hPa resulting in a range of 580 to 1088

*/
typedef OSUINT8 ASN1T_AmbientAirPressure;

EXTERN int asn1PE_AmbientAirPressure (OSCTXT* pctxt, ASN1T_AmbientAirPressure value);

EXTERN int asn1PD_AmbientAirPressure (OSCTXT* pctxt, ASN1T_AmbientAirPressure* pvalue);

EXTERN int XmlEnc_AmbientAirPressure (OSCTXT* pctxt, 
   ASN1T_AmbientAirPressure value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AmbientAirPressure (OSCTXT* pctxt, 
   ASN1T_AmbientAirPressure* pvalue);

EXTERN int asn1JsonEnc_AmbientAirPressure (OSCTXT *pctxt, ASN1T_AmbientAirPressure *pvalue);

EXTERN int asn1JsonDec_AmbientAirPressure (OSCTXT *pctxt, ASN1T_AmbientAirPressure *pvalue);

EXTERN int asn1PrtToStrm_AmbientAirPressure (OSCTXT *pctxt, 
   const char* name, const ASN1T_AmbientAirPressure* pvalue);

EXTERN ASN1T_AmbientAirPressure* 
   new_ASN1T_AmbientAirPressure (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  AmbientAirTemperature                                     */
/*                                                            */
/**************************************************************/
/*
AmbientAirTemperature ::= INTEGER (0..191)
                                            in deg C with a -40 offset
     The value 191 shall indicate an unknown value

*/
typedef OSUINT8 ASN1T_AmbientAirTemperature;

EXTERN int asn1PE_AmbientAirTemperature (OSCTXT* pctxt, ASN1T_AmbientAirTemperature value);

EXTERN int asn1PD_AmbientAirTemperature (OSCTXT* pctxt, ASN1T_AmbientAirTemperature* pvalue);

EXTERN int XmlEnc_AmbientAirTemperature (OSCTXT* pctxt, 
   ASN1T_AmbientAirTemperature value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AmbientAirTemperature (OSCTXT* pctxt, 
   ASN1T_AmbientAirTemperature* pvalue);

EXTERN int asn1JsonEnc_AmbientAirTemperature (OSCTXT *pctxt, ASN1T_AmbientAirTemperature *pvalue);

EXTERN int asn1JsonDec_AmbientAirTemperature (OSCTXT *pctxt, ASN1T_AmbientAirTemperature *pvalue);

EXTERN int asn1PrtToStrm_AmbientAirTemperature (OSCTXT *pctxt, 
   const char* name, const ASN1T_AmbientAirTemperature* pvalue);

EXTERN ASN1T_AmbientAirTemperature* 
   new_ASN1T_AmbientAirTemperature (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Angle                                                     */
/*                                                            */
/**************************************************************/
/*
Angle ::= INTEGER (0..28800)
    LSB of 0.0125 degrees
    A range of 0 to 359.9875 degrees

*/
typedef OSUINT16 ASN1T_Angle;

EXTERN int asn1PE_Angle (OSCTXT* pctxt, ASN1T_Angle value);

EXTERN int asn1PD_Angle (OSCTXT* pctxt, ASN1T_Angle* pvalue);

EXTERN int XmlEnc_Angle (OSCTXT* pctxt, ASN1T_Angle value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Angle (OSCTXT* pctxt, ASN1T_Angle* pvalue);

EXTERN int asn1JsonEnc_Angle (OSCTXT *pctxt, ASN1T_Angle *pvalue);

EXTERN int asn1JsonDec_Angle (OSCTXT *pctxt, ASN1T_Angle *pvalue);

EXTERN int asn1PrtToStrm_Angle (OSCTXT *pctxt, 
   const char* name, const ASN1T_Angle* pvalue);

EXTERN ASN1T_Angle* new_ASN1T_Angle (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  AnimalPropelledType                                       */
/*                                                            */
/**************************************************************/
/*
AnimalPropelledType ::= ENUMERATED { unavailable(0), otherTypes(1), animalMounted(2), animalDrawnCarriage(3), ... }
*/
struct EXTERN AnimalPropelledType {
   enum Root {
      unavailable = 0,
      otherTypes = 1,
      animalMounted = 2,
      animalDrawnCarriage = 3
   } ;
} ;

typedef OSUINT32 ASN1T_AnimalPropelledType;

EXTERN int asn1PE_AnimalPropelledType (OSCTXT* pctxt, ASN1T_AnimalPropelledType value);

EXTERN int asn1PD_AnimalPropelledType (OSCTXT* pctxt, ASN1T_AnimalPropelledType* pvalue);

EXTERN int XmlEnc_AnimalPropelledType (OSCTXT* pctxt, 
   ASN1T_AnimalPropelledType value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AnimalPropelledType (OSCTXT* pctxt, 
   ASN1T_AnimalPropelledType* pvalue);

EXTERN int asn1JsonEnc_AnimalPropelledType (OSCTXT *pctxt, ASN1T_AnimalPropelledType *pvalue);

EXTERN int asn1JsonDec_AnimalPropelledType (OSCTXT *pctxt, ASN1T_AnimalPropelledType *pvalue);

EXTERN int asn1PrtToStrm_AnimalPropelledType (OSCTXT *pctxt, 
   const char* name, const ASN1T_AnimalPropelledType* pvalue);

EXTERN ASN1T_AnimalPropelledType* 
   new_ASN1T_AnimalPropelledType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_AnimalPropelledType_ENUMTAB[];
#define ASN1T_AnimalPropelledType_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_AnimalPropelledType_ToString (OSINT32 value);

EXTERN int ASN1T_AnimalPropelledType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_AnimalPropelledType* pvalue);

EXTERN int ASN1T_AnimalPropelledType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_AnimalPropelledType* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  AnimalType                                                */
/*                                                            */
/**************************************************************/
/*
AnimalType ::= ENUMERATED { unavailable(0), serviceUse(1), pet(2), farm(3), ... }
*/
struct EXTERN AnimalType {
   enum Root {
      unavailable = 0,
      serviceUse = 1,
      pet = 2,
      farm = 3
   } ;
} ;

typedef OSUINT32 ASN1T_AnimalType;

EXTERN int asn1PE_AnimalType (OSCTXT* pctxt, ASN1T_AnimalType value);

EXTERN int asn1PD_AnimalType (OSCTXT* pctxt, ASN1T_AnimalType* pvalue);

EXTERN int XmlEnc_AnimalType (OSCTXT* pctxt, ASN1T_AnimalType value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AnimalType (OSCTXT* pctxt, ASN1T_AnimalType* pvalue);

EXTERN int asn1JsonEnc_AnimalType (OSCTXT *pctxt, ASN1T_AnimalType *pvalue);

EXTERN int asn1JsonDec_AnimalType (OSCTXT *pctxt, ASN1T_AnimalType *pvalue);

EXTERN int asn1PrtToStrm_AnimalType (OSCTXT *pctxt, 
   const char* name, const ASN1T_AnimalType* pvalue);

EXTERN ASN1T_AnimalType* new_ASN1T_AnimalType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_AnimalType_ENUMTAB[];
#define ASN1T_AnimalType_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_AnimalType_ToString (OSINT32 value);

EXTERN int ASN1T_AnimalType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_AnimalType* pvalue);

EXTERN int ASN1T_AnimalType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_AnimalType* pvalue);

/**************************************************************/
/*                                                            */
/*  AntiLockBrakeStatus                                       */
/*                                                            */
/**************************************************************/
/*
AntiLockBrakeStatus ::= ENUMERATED { unavailable(0), off(1), on(2), engaged(3) }
*/
struct EXTERN AntiLockBrakeStatus {
   enum Root {
      unavailable = 0,
      off = 1,
      on = 2,
      engaged = 3
   } ;
} ;

typedef OSUINT32 ASN1T_AntiLockBrakeStatus;

EXTERN int asn1PE_AntiLockBrakeStatus (OSCTXT* pctxt, ASN1T_AntiLockBrakeStatus value);

EXTERN int asn1PD_AntiLockBrakeStatus (OSCTXT* pctxt, ASN1T_AntiLockBrakeStatus* pvalue);

EXTERN int XmlEnc_AntiLockBrakeStatus (OSCTXT* pctxt, 
   ASN1T_AntiLockBrakeStatus value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AntiLockBrakeStatus (OSCTXT* pctxt, 
   ASN1T_AntiLockBrakeStatus* pvalue);

EXTERN int asn1JsonEnc_AntiLockBrakeStatus (OSCTXT *pctxt, ASN1T_AntiLockBrakeStatus *pvalue);

EXTERN int asn1JsonDec_AntiLockBrakeStatus (OSCTXT *pctxt, ASN1T_AntiLockBrakeStatus *pvalue);

EXTERN int asn1PrtToStrm_AntiLockBrakeStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_AntiLockBrakeStatus* pvalue);

EXTERN ASN1T_AntiLockBrakeStatus* 
   new_ASN1T_AntiLockBrakeStatus (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_AntiLockBrakeStatus_ENUMTAB[];
#define ASN1T_AntiLockBrakeStatus_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_AntiLockBrakeStatus_ToString (OSINT32 value);

EXTERN int ASN1T_AntiLockBrakeStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_AntiLockBrakeStatus* pvalue);

EXTERN int ASN1T_AntiLockBrakeStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_AntiLockBrakeStatus* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  ApproachID                                                */
/*                                                            */
/**************************************************************/
/*
ApproachID ::= INTEGER (0..15)
                                zero to be used when valid value is unknown

*/
typedef OSUINT8 ASN1T_ApproachID;

EXTERN int asn1PE_ApproachID (OSCTXT* pctxt, ASN1T_ApproachID value);

EXTERN int asn1PD_ApproachID (OSCTXT* pctxt, ASN1T_ApproachID* pvalue);

EXTERN int XmlEnc_ApproachID (OSCTXT* pctxt, ASN1T_ApproachID value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ApproachID (OSCTXT* pctxt, ASN1T_ApproachID* pvalue);

EXTERN int asn1JsonEnc_ApproachID (OSCTXT *pctxt, ASN1T_ApproachID *pvalue);

EXTERN int asn1JsonDec_ApproachID (OSCTXT *pctxt, ASN1T_ApproachID *pvalue);

EXTERN int asn1PrtToStrm_ApproachID (OSCTXT *pctxt, 
   const char* name, const ASN1T_ApproachID* pvalue);

EXTERN ASN1T_ApproachID* new_ASN1T_ApproachID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Attachment                                                */
/*                                                            */
/**************************************************************/
/*
Attachment ::= ENUMERATED { unavailable(0), stroller(1), bicycleTrailer(2), cart(3), wheelchair(4), otherWalkAssistAttachments(5), pet(6), ... }
*/
struct EXTERN Attachment {
   enum Root {
      unavailable = 0,
      stroller = 1,
      bicycleTrailer = 2,
      cart = 3,
      wheelchair = 4,
      otherWalkAssistAttachments = 5,
      pet = 6
   } ;
} ;

typedef OSUINT32 ASN1T_Attachment;

EXTERN int asn1PE_Attachment (OSCTXT* pctxt, ASN1T_Attachment value);

EXTERN int asn1PD_Attachment (OSCTXT* pctxt, ASN1T_Attachment* pvalue);

EXTERN int XmlEnc_Attachment (OSCTXT* pctxt, ASN1T_Attachment value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Attachment (OSCTXT* pctxt, ASN1T_Attachment* pvalue);

EXTERN int asn1JsonEnc_Attachment (OSCTXT *pctxt, ASN1T_Attachment *pvalue);

EXTERN int asn1JsonDec_Attachment (OSCTXT *pctxt, ASN1T_Attachment *pvalue);

EXTERN int asn1PrtToStrm_Attachment (OSCTXT *pctxt, 
   const char* name, const ASN1T_Attachment* pvalue);

EXTERN ASN1T_Attachment* new_ASN1T_Attachment (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_Attachment_ENUMTAB[];
#define ASN1T_Attachment_ENUMTABSIZE 7

EXTERN const OSUTF8CHAR* ASN1T_Attachment_ToString (OSINT32 value);

EXTERN int ASN1T_Attachment_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_Attachment* pvalue);

EXTERN int ASN1T_Attachment_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_Attachment* pvalue);

/**************************************************************/
/*                                                            */
/*  AttachmentRadius                                          */
/*                                                            */
/**************************************************************/
/*
AttachmentRadius ::= INTEGER (0..200)
                                       In LSB units of one decimeter

*/
typedef OSUINT8 ASN1T_AttachmentRadius;

EXTERN int asn1PE_AttachmentRadius (OSCTXT* pctxt, ASN1T_AttachmentRadius value);

EXTERN int asn1PD_AttachmentRadius (OSCTXT* pctxt, ASN1T_AttachmentRadius* pvalue);

EXTERN int XmlEnc_AttachmentRadius (OSCTXT* pctxt, 
   ASN1T_AttachmentRadius value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AttachmentRadius (OSCTXT* pctxt, 
   ASN1T_AttachmentRadius* pvalue);

EXTERN int asn1JsonEnc_AttachmentRadius (OSCTXT *pctxt, ASN1T_AttachmentRadius *pvalue);

EXTERN int asn1JsonDec_AttachmentRadius (OSCTXT *pctxt, ASN1T_AttachmentRadius *pvalue);

EXTERN int asn1PrtToStrm_AttachmentRadius (OSCTXT *pctxt, 
   const char* name, const ASN1T_AttachmentRadius* pvalue);

EXTERN ASN1T_AttachmentRadius* new_ASN1T_AttachmentRadius (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  AuxiliaryBrakeStatus                                      */
/*                                                            */
/**************************************************************/
/*
AuxiliaryBrakeStatus ::= ENUMERATED { unavailable(0), off(1), on(2), reserved(3) }
*/
struct EXTERN AuxiliaryBrakeStatus {
   enum Root {
      unavailable = 0,
      off = 1,
      on = 2,
      reserved = 3
   } ;
} ;

typedef OSUINT32 ASN1T_AuxiliaryBrakeStatus;

EXTERN int asn1PE_AuxiliaryBrakeStatus (OSCTXT* pctxt, ASN1T_AuxiliaryBrakeStatus value);

EXTERN int asn1PD_AuxiliaryBrakeStatus (OSCTXT* pctxt, ASN1T_AuxiliaryBrakeStatus* pvalue);

EXTERN int XmlEnc_AuxiliaryBrakeStatus (OSCTXT* pctxt, 
   ASN1T_AuxiliaryBrakeStatus value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AuxiliaryBrakeStatus (OSCTXT* pctxt, 
   ASN1T_AuxiliaryBrakeStatus* pvalue);

EXTERN int asn1JsonEnc_AuxiliaryBrakeStatus (OSCTXT *pctxt, ASN1T_AuxiliaryBrakeStatus *pvalue);

EXTERN int asn1JsonDec_AuxiliaryBrakeStatus (OSCTXT *pctxt, ASN1T_AuxiliaryBrakeStatus *pvalue);

EXTERN int asn1PrtToStrm_AuxiliaryBrakeStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_AuxiliaryBrakeStatus* pvalue);

EXTERN ASN1T_AuxiliaryBrakeStatus* 
   new_ASN1T_AuxiliaryBrakeStatus (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_AuxiliaryBrakeStatus_ENUMTAB[];
#define ASN1T_AuxiliaryBrakeStatus_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_AuxiliaryBrakeStatus_ToString (OSINT32 value);

EXTERN int ASN1T_AuxiliaryBrakeStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_AuxiliaryBrakeStatus* pvalue);

EXTERN int ASN1T_AuxiliaryBrakeStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_AuxiliaryBrakeStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicVehicleClass                                         */
/*                                                            */
/**************************************************************/
/*
BasicVehicleClass ::= INTEGER (0..255)
*/
typedef OSUINT8 ASN1T_BasicVehicleClass;

EXTERN int asn1PE_BasicVehicleClass (OSCTXT* pctxt, ASN1T_BasicVehicleClass value);

EXTERN int asn1PD_BasicVehicleClass (OSCTXT* pctxt, ASN1T_BasicVehicleClass* pvalue);

EXTERN int XmlEnc_BasicVehicleClass (OSCTXT* pctxt, 
   ASN1T_BasicVehicleClass value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BasicVehicleClass (OSCTXT* pctxt, 
   ASN1T_BasicVehicleClass* pvalue);

EXTERN int asn1JsonEnc_BasicVehicleClass (OSCTXT *pctxt, ASN1T_BasicVehicleClass *pvalue);

EXTERN int asn1JsonDec_BasicVehicleClass (OSCTXT *pctxt, ASN1T_BasicVehicleClass *pvalue);

EXTERN int asn1PrtToStrm_BasicVehicleClass (OSCTXT *pctxt, 
   const char* name, const ASN1T_BasicVehicleClass* pvalue);

EXTERN ASN1T_BasicVehicleClass* new_ASN1T_BasicVehicleClass (ASN1CType& ccobj)
   ;

/**************************************************************/
/*                                                            */
/*  BasicVehicleRole                                          */
/*                                                            */
/**************************************************************/
/*
BasicVehicleRole ::= ENUMERATED { basicVehicle(0), publicTransport(1), specialTransport(2), dangerousGoods(3), roadWork(4), roadRescue(5), emergency(6), safetyCar(7), none-unknown(8), truck(9), motorcycle(10), roadSideSource(11), police(12), fire(13), ambulance(14), dot(15), transit(16), slowMoving(17), stopNgo(18), cyclist(19), pedestrian(20), nonMotorized(21), military(22), ... }
*/
struct EXTERN BasicVehicleRole {
   enum Root {
      basicVehicle = 0,
      publicTransport = 1,
      specialTransport = 2,
      dangerousGoods = 3,
      roadWork = 4,
      roadRescue = 5,
      emergency = 6,
      safetyCar = 7,
      none_unknown = 8,
      truck = 9,
      motorcycle = 10,
      roadSideSource = 11,
      police = 12,
      fire = 13,
      ambulance = 14,
      dot = 15,
      transit = 16,
      slowMoving = 17,
      stopNgo = 18,
      cyclist = 19,
      pedestrian = 20,
      nonMotorized = 21,
      military = 22
   } ;
} ;

typedef OSUINT32 ASN1T_BasicVehicleRole;

EXTERN int asn1PE_BasicVehicleRole (OSCTXT* pctxt, ASN1T_BasicVehicleRole value);

EXTERN int asn1PD_BasicVehicleRole (OSCTXT* pctxt, ASN1T_BasicVehicleRole* pvalue);

EXTERN int XmlEnc_BasicVehicleRole (OSCTXT* pctxt, 
   ASN1T_BasicVehicleRole value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BasicVehicleRole (OSCTXT* pctxt, 
   ASN1T_BasicVehicleRole* pvalue);

EXTERN int asn1JsonEnc_BasicVehicleRole (OSCTXT *pctxt, ASN1T_BasicVehicleRole *pvalue);

EXTERN int asn1JsonDec_BasicVehicleRole (OSCTXT *pctxt, ASN1T_BasicVehicleRole *pvalue);

EXTERN int asn1PrtToStrm_BasicVehicleRole (OSCTXT *pctxt, 
   const char* name, const ASN1T_BasicVehicleRole* pvalue);

EXTERN ASN1T_BasicVehicleRole* new_ASN1T_BasicVehicleRole (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_BasicVehicleRole_ENUMTAB[];
#define ASN1T_BasicVehicleRole_ENUMTABSIZE 23

EXTERN const OSUTF8CHAR* ASN1T_BasicVehicleRole_ToString (OSINT32 value);

EXTERN int ASN1T_BasicVehicleRole_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_BasicVehicleRole* pvalue);

EXTERN int ASN1T_BasicVehicleRole_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_BasicVehicleRole* pvalue);

/**************************************************************/
/*                                                            */
/*  BrakeAppliedPressure                                      */
/*                                                            */
/**************************************************************/
/*
BrakeAppliedPressure ::= ENUMERATED { unavailable(0), minPressure(1), bkLvl-2(2), bkLvl-3(3), bkLvl-4(4), bkLvl-5(5), bkLvl-6(6), bkLvl-7(7), bkLvl-8(8), bkLvl-9(9), bkLvl-10(10), bkLvl-11(11), bkLvl-12(12), bkLvl-13(13), bkLvl-14(14), maxPressure(15) }
       Encoded as a 4 bit value

*/
struct EXTERN BrakeAppliedPressure {
   enum Root {
      unavailable = 0,
      minPressure = 1,
      bkLvl_2 = 2,
      bkLvl_3 = 3,
      bkLvl_4 = 4,
      bkLvl_5 = 5,
      bkLvl_6 = 6,
      bkLvl_7 = 7,
      bkLvl_8 = 8,
      bkLvl_9 = 9,
      bkLvl_10 = 10,
      bkLvl_11 = 11,
      bkLvl_12 = 12,
      bkLvl_13 = 13,
      bkLvl_14 = 14,
      maxPressure = 15
   } ;
} ;

typedef OSUINT32 ASN1T_BrakeAppliedPressure;

EXTERN int asn1PE_BrakeAppliedPressure (OSCTXT* pctxt, ASN1T_BrakeAppliedPressure value);

EXTERN int asn1PD_BrakeAppliedPressure (OSCTXT* pctxt, ASN1T_BrakeAppliedPressure* pvalue);

EXTERN int XmlEnc_BrakeAppliedPressure (OSCTXT* pctxt, 
   ASN1T_BrakeAppliedPressure value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BrakeAppliedPressure (OSCTXT* pctxt, 
   ASN1T_BrakeAppliedPressure* pvalue);

EXTERN int asn1JsonEnc_BrakeAppliedPressure (OSCTXT *pctxt, ASN1T_BrakeAppliedPressure *pvalue);

EXTERN int asn1JsonDec_BrakeAppliedPressure (OSCTXT *pctxt, ASN1T_BrakeAppliedPressure *pvalue);

EXTERN int asn1PrtToStrm_BrakeAppliedPressure (OSCTXT *pctxt, 
   const char* name, const ASN1T_BrakeAppliedPressure* pvalue);

EXTERN ASN1T_BrakeAppliedPressure* 
   new_ASN1T_BrakeAppliedPressure (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_BrakeAppliedPressure_ENUMTAB[];
#define ASN1T_BrakeAppliedPressure_ENUMTABSIZE 16

EXTERN const OSUTF8CHAR* ASN1T_BrakeAppliedPressure_ToString (OSINT32 value);

EXTERN int ASN1T_BrakeAppliedPressure_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_BrakeAppliedPressure* pvalue);

EXTERN int ASN1T_BrakeAppliedPressure_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_BrakeAppliedPressure* pvalue);

/**************************************************************/
/*                                                            */
/*  BrakeAppliedStatus                                        */
/*                                                            */
/**************************************************************/
/*
BrakeAppliedStatus ::= BIT STRING  { unavailable(0), leftFront(1), leftRear(2), rightFront(3), rightRear(4) } (SIZE (5))
*/
struct EXTERN ASN1T_BrakeAppliedStatus {
   OSOCTET data[1];
   // ctors
   ASN1T_BrakeAppliedStatus ()  {}
   ASN1T_BrakeAppliedStatus (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 1, _data, 1);
   }
} ;

class EXTERN ASN1C_BrakeAppliedStatus :
public ASN1CBitStr
{
protected:
   ASN1T_BrakeAppliedStatus& msgData;
public:
   // named bits
   enum { unavailable = 0, leftFront = 1, leftRear = 2, rightFront = 3, rightRear = 4 };

   /**
    * Control class: ASN1C_BrakeAppliedStatus
    * Data class:    ASN1T_BrakeAppliedStatus
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_BrakeAppliedStatus (ASN1T_BrakeAppliedStatus& data);

   /**
    * Control class: ASN1C_BrakeAppliedStatus<br/>
    * Data class: ASN1T_BrakeAppliedStatus<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_BrakeAppliedStatus (OSRTMessageBufferIF& msgBuf
      , ASN1T_BrakeAppliedStatus& data);

   virtual ~ASN1C_BrakeAppliedStatus () {}

private:
   ASN1C_BrakeAppliedStatus& operator= (const ASN1C_BrakeAppliedStatus&) {return *this;}
} ;

EXTERN int asn1PE_BrakeAppliedStatus (OSCTXT* pctxt, ASN1T_BrakeAppliedStatus* pvalue);

EXTERN int asn1PD_BrakeAppliedStatus (OSCTXT* pctxt, ASN1T_BrakeAppliedStatus* pvalue);

EXTERN int XmlEnc_BrakeAppliedStatus (OSCTXT* pctxt, 
   ASN1T_BrakeAppliedStatus* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BrakeAppliedStatus (OSCTXT* pctxt, 
   ASN1T_BrakeAppliedStatus* pvalue);

EXTERN int asn1JsonEnc_BrakeAppliedStatus (OSCTXT *pctxt, ASN1T_BrakeAppliedStatus *pvalue);

EXTERN int asn1JsonDec_BrakeAppliedStatus (OSCTXT *pctxt, ASN1T_BrakeAppliedStatus *pvalue);

EXTERN int asn1PrtToStrm_BrakeAppliedStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_BrakeAppliedStatus* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_BrakeAppliedStatus_NAMEDBITTAB[6];

EXTERN ASN1T_BrakeAppliedStatus* 
   new_ASN1T_BrakeAppliedStatus (ASN1CType& ccobj);

EXTERN int asn1Init_BrakeAppliedStatus (ASN1T_BrakeAppliedStatus* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  BrakeBoostApplied                                         */
/*                                                            */
/**************************************************************/
/*
BrakeBoostApplied ::= ENUMERATED { unavailable(0), off(1), on(2) }
*/
struct EXTERN BrakeBoostApplied {
   enum Root {
      unavailable = 0,
      off = 1,
      on = 2
   } ;
} ;

typedef OSUINT32 ASN1T_BrakeBoostApplied;

EXTERN int asn1PE_BrakeBoostApplied (OSCTXT* pctxt, ASN1T_BrakeBoostApplied value);

EXTERN int asn1PD_BrakeBoostApplied (OSCTXT* pctxt, ASN1T_BrakeBoostApplied* pvalue);

EXTERN int XmlEnc_BrakeBoostApplied (OSCTXT* pctxt, 
   ASN1T_BrakeBoostApplied value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BrakeBoostApplied (OSCTXT* pctxt, 
   ASN1T_BrakeBoostApplied* pvalue);

EXTERN int asn1JsonEnc_BrakeBoostApplied (OSCTXT *pctxt, ASN1T_BrakeBoostApplied *pvalue);

EXTERN int asn1JsonDec_BrakeBoostApplied (OSCTXT *pctxt, ASN1T_BrakeBoostApplied *pvalue);

EXTERN int asn1PrtToStrm_BrakeBoostApplied (OSCTXT *pctxt, 
   const char* name, const ASN1T_BrakeBoostApplied* pvalue);

EXTERN ASN1T_BrakeBoostApplied* new_ASN1T_BrakeBoostApplied (ASN1CType& ccobj)
   ;

EXTERN extern const OSEnumItem ASN1T_BrakeBoostApplied_ENUMTAB[];
#define ASN1T_BrakeBoostApplied_ENUMTABSIZE 3

EXTERN const OSUTF8CHAR* ASN1T_BrakeBoostApplied_ToString (OSINT32 value);

EXTERN int ASN1T_BrakeBoostApplied_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_BrakeBoostApplied* pvalue);

EXTERN int ASN1T_BrakeBoostApplied_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_BrakeBoostApplied* pvalue);

/**************************************************************/
/*                                                            */
/*  BumperHeight                                              */
/*                                                            */
/**************************************************************/
/*
BumperHeight ::= INTEGER (0..127)
                                   in units of 0.01 meters from ground surface.

*/
typedef OSUINT8 ASN1T_BumperHeight;

EXTERN int asn1PE_BumperHeight (OSCTXT* pctxt, ASN1T_BumperHeight value);

EXTERN int asn1PD_BumperHeight (OSCTXT* pctxt, ASN1T_BumperHeight* pvalue);

EXTERN int XmlEnc_BumperHeight (OSCTXT* pctxt, ASN1T_BumperHeight value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BumperHeight (OSCTXT* pctxt, ASN1T_BumperHeight* pvalue);

EXTERN int asn1JsonEnc_BumperHeight (OSCTXT *pctxt, ASN1T_BumperHeight *pvalue);

EXTERN int asn1JsonDec_BumperHeight (OSCTXT *pctxt, ASN1T_BumperHeight *pvalue);

EXTERN int asn1PrtToStrm_BumperHeight (OSCTXT *pctxt, 
   const char* name, const ASN1T_BumperHeight* pvalue);

EXTERN ASN1T_BumperHeight* new_ASN1T_BumperHeight (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  CoarseHeading                                             */
/*                                                            */
/**************************************************************/
/*
CoarseHeading ::= INTEGER (0..240)
    Where the LSB is in units of 1.5 degrees 
    over a range of 0~358.5 degrees
    the value 240 shall be used for unavailable

*/
typedef OSUINT8 ASN1T_CoarseHeading;

EXTERN int asn1PE_CoarseHeading (OSCTXT* pctxt, ASN1T_CoarseHeading value);

EXTERN int asn1PD_CoarseHeading (OSCTXT* pctxt, ASN1T_CoarseHeading* pvalue);

EXTERN int XmlEnc_CoarseHeading (OSCTXT* pctxt, ASN1T_CoarseHeading value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CoarseHeading (OSCTXT* pctxt, ASN1T_CoarseHeading* pvalue);

EXTERN int asn1JsonEnc_CoarseHeading (OSCTXT *pctxt, ASN1T_CoarseHeading *pvalue);

EXTERN int asn1JsonDec_CoarseHeading (OSCTXT *pctxt, ASN1T_CoarseHeading *pvalue);

EXTERN int asn1PrtToStrm_CoarseHeading (OSCTXT *pctxt, 
   const char* name, const ASN1T_CoarseHeading* pvalue);

EXTERN ASN1T_CoarseHeading* new_ASN1T_CoarseHeading (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  CodeWord                                                  */
/*                                                            */
/**************************************************************/
/*
CodeWord ::= OCTET STRING (SIZE (1..16))
    any octet string up to 16 octets

*/
struct EXTERN ASN1T_CodeWord {
   OSUINT8 numocts;
   OSOCTET data[16];
   // ctors
   ASN1T_CodeWord () : numocts(0) {}
   ASN1T_CodeWord (OSUINT8 _numocts, const OSOCTET* _data) :
      numocts (_numocts) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, numocts);
   }
   ASN1T_CodeWord (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT8)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
   }
   // assignment operators
   ASN1T_CodeWord& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT8)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
      return *this;
   }
} ;

class EXTERN ASN1C_CodeWord :
public ASN1CType
{
protected:
   ASN1T_CodeWord& msgData;
public:
   /**
    * Control class: ASN1C_CodeWord
    * Data class:    ASN1T_CodeWord
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_CodeWord (ASN1T_CodeWord& data);

   /**
    * Control class: ASN1C_CodeWord<br/>
    * Data class: ASN1T_CodeWord<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_CodeWord (OSRTMessageBufferIF& msgBuf, ASN1T_CodeWord& data);

   virtual ~ASN1C_CodeWord () {}

   /**
    * Data class: ASN1T_CodeWord<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_CodeWord.
    */
   inline ASN1T_CodeWord& getData () { return msgData; }

   /**
    * Data class: ASN1T_CodeWord<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_CodeWord.
    */
   inline const ASN1T_CodeWord& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             CodeWord will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "CodeWord");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_CodeWord& operator= (const ASN1C_CodeWord&) {return *this;}
} ;

EXTERN int asn1PE_CodeWord (OSCTXT* pctxt, ASN1T_CodeWord* pvalue);

EXTERN int asn1PD_CodeWord (OSCTXT* pctxt, ASN1T_CodeWord* pvalue);

EXTERN int XmlEnc_CodeWord (OSCTXT* pctxt, ASN1T_CodeWord* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CodeWord (OSCTXT* pctxt, ASN1T_CodeWord* pvalue);

EXTERN int asn1JsonEnc_CodeWord (OSCTXT *pctxt, ASN1T_CodeWord *pvalue);

EXTERN int asn1JsonDec_CodeWord (OSCTXT *pctxt, ASN1T_CodeWord *pvalue);

EXTERN int asn1PrtToStrm_CodeWord (OSCTXT *pctxt, 
   const char* name, const ASN1T_CodeWord* pvalue);

EXTERN ASN1T_CodeWord* new_ASN1T_CodeWord (ASN1CType& ccobj);

EXTERN int asn1Init_CodeWord (ASN1T_CodeWord* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  CoefficientOfFriction                                     */
/*                                                            */
/**************************************************************/
/*
CoefficientOfFriction ::= INTEGER (0..50)
    where 0 = 0.00 micro (frictionless), also used when data is unavailable 
    and  50 = 1.00 micro, in steps of 0.02

*/
typedef OSUINT8 ASN1T_CoefficientOfFriction;

EXTERN int asn1PE_CoefficientOfFriction (OSCTXT* pctxt, ASN1T_CoefficientOfFriction value);

EXTERN int asn1PD_CoefficientOfFriction (OSCTXT* pctxt, ASN1T_CoefficientOfFriction* pvalue);

EXTERN int XmlEnc_CoefficientOfFriction (OSCTXT* pctxt, 
   ASN1T_CoefficientOfFriction value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CoefficientOfFriction (OSCTXT* pctxt, 
   ASN1T_CoefficientOfFriction* pvalue);

EXTERN int asn1JsonEnc_CoefficientOfFriction (OSCTXT *pctxt, ASN1T_CoefficientOfFriction *pvalue);

EXTERN int asn1JsonDec_CoefficientOfFriction (OSCTXT *pctxt, ASN1T_CoefficientOfFriction *pvalue);

EXTERN int asn1PrtToStrm_CoefficientOfFriction (OSCTXT *pctxt, 
   const char* name, const ASN1T_CoefficientOfFriction* pvalue);

EXTERN ASN1T_CoefficientOfFriction* 
   new_ASN1T_CoefficientOfFriction (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Confidence                                                */
/*                                                            */
/**************************************************************/
/*
Confidence ::= INTEGER (0..200)
    LSB units of 0.5 percent

*/
typedef OSUINT8 ASN1T_Confidence;

EXTERN int asn1PE_Confidence (OSCTXT* pctxt, ASN1T_Confidence value);

EXTERN int asn1PD_Confidence (OSCTXT* pctxt, ASN1T_Confidence* pvalue);

EXTERN int XmlEnc_Confidence (OSCTXT* pctxt, ASN1T_Confidence value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Confidence (OSCTXT* pctxt, ASN1T_Confidence* pvalue);

EXTERN int asn1JsonEnc_Confidence (OSCTXT *pctxt, ASN1T_Confidence *pvalue);

EXTERN int asn1JsonDec_Confidence (OSCTXT *pctxt, ASN1T_Confidence *pvalue);

EXTERN int asn1PrtToStrm_Confidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_Confidence* pvalue);

EXTERN ASN1T_Confidence* new_ASN1T_Confidence (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Count                                                     */
/*                                                            */
/**************************************************************/
/*
Count ::= INTEGER (0..32)
*/
typedef OSUINT8 ASN1T_Count;

class EXTERN ASN1C_Count :
public ASN1CType
{
protected:
   ASN1T_Count& msgData;
public:
   /**
    * Control class: ASN1C_Count
    * Data class:    ASN1T_Count
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_Count (ASN1T_Count& data);

   /**
    * Control class: ASN1C_Count<br/>
    * Data class: ASN1T_Count<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_Count (OSRTMessageBufferIF& msgBuf, ASN1T_Count& data);

   virtual ~ASN1C_Count () {}

   /**
    * Data class: ASN1T_Count<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_Count.
    */
   inline ASN1T_Count& getData () { return msgData; }

   /**
    * Data class: ASN1T_Count<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_Count.
    */
   inline const ASN1T_Count& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             Count will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "Count");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_Count& operator= (const ASN1C_Count&) {return *this;}
} ;

EXTERN int asn1PE_Count (OSCTXT* pctxt, ASN1T_Count value);

EXTERN int asn1PD_Count (OSCTXT* pctxt, ASN1T_Count* pvalue);

EXTERN int XmlEnc_Count (OSCTXT* pctxt, ASN1T_Count value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Count (OSCTXT* pctxt, ASN1T_Count* pvalue);

EXTERN int asn1JsonEnc_Count (OSCTXT *pctxt, ASN1T_Count *pvalue);

EXTERN int asn1JsonDec_Count (OSCTXT *pctxt, ASN1T_Count *pvalue);

EXTERN int asn1PrtToStrm_Count (OSCTXT *pctxt, 
   const char* name, const ASN1T_Count* pvalue);

EXTERN ASN1T_Count* new_ASN1T_Count (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DDay                                                      */
/*                                                            */
/**************************************************************/
/*
DDay ::= INTEGER (0..31)
                           units of days

*/
typedef OSUINT8 ASN1T_DDay;

EXTERN int asn1PE_DDay (OSCTXT* pctxt, ASN1T_DDay value);

EXTERN int asn1PD_DDay (OSCTXT* pctxt, ASN1T_DDay* pvalue);

EXTERN int XmlEnc_DDay (OSCTXT* pctxt, ASN1T_DDay value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DDay (OSCTXT* pctxt, ASN1T_DDay* pvalue);

EXTERN int asn1JsonEnc_DDay (OSCTXT *pctxt, ASN1T_DDay *pvalue);

EXTERN int asn1JsonDec_DDay (OSCTXT *pctxt, ASN1T_DDay *pvalue);

EXTERN int asn1PrtToStrm_DDay (OSCTXT *pctxt, 
   const char* name, const ASN1T_DDay* pvalue);

EXTERN ASN1T_DDay* new_ASN1T_DDay (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DeltaAngle                                                */
/*                                                            */
/**************************************************************/
/*
DeltaAngle ::= INTEGER (-150..150)
    With an angle range from 
    negative 150 to positive 150 
    in one degree steps where zero is directly
    along the axis or the lane center line as defined by the
    two closest points

*/
typedef OSINT16 ASN1T_DeltaAngle;

EXTERN int asn1PE_DeltaAngle (OSCTXT* pctxt, ASN1T_DeltaAngle value);

EXTERN int asn1PD_DeltaAngle (OSCTXT* pctxt, ASN1T_DeltaAngle* pvalue);

EXTERN int XmlEnc_DeltaAngle (OSCTXT* pctxt, ASN1T_DeltaAngle value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DeltaAngle (OSCTXT* pctxt, ASN1T_DeltaAngle* pvalue);

EXTERN int asn1JsonEnc_DeltaAngle (OSCTXT *pctxt, ASN1T_DeltaAngle *pvalue);

EXTERN int asn1JsonDec_DeltaAngle (OSCTXT *pctxt, ASN1T_DeltaAngle *pvalue);

EXTERN int asn1PrtToStrm_DeltaAngle (OSCTXT *pctxt, 
   const char* name, const ASN1T_DeltaAngle* pvalue);

EXTERN ASN1T_DeltaAngle* new_ASN1T_DeltaAngle (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DeltaTime                                                 */
/*                                                            */
/**************************************************************/
/*
DeltaTime ::= INTEGER (-122..121)
    Supporting a range of +/- 20 minute in steps of 10 seconds
    the value of -121 shall be used when more than -20 minutes
    the value of +120 shall be used when more than +20 minutes
    the value -122 shall be used when the value is unavailable

*/
typedef OSINT8 ASN1T_DeltaTime;

EXTERN int asn1PE_DeltaTime (OSCTXT* pctxt, ASN1T_DeltaTime value);

EXTERN int asn1PD_DeltaTime (OSCTXT* pctxt, ASN1T_DeltaTime* pvalue);

EXTERN int XmlEnc_DeltaTime (OSCTXT* pctxt, ASN1T_DeltaTime value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DeltaTime (OSCTXT* pctxt, ASN1T_DeltaTime* pvalue);

EXTERN int asn1JsonEnc_DeltaTime (OSCTXT *pctxt, ASN1T_DeltaTime *pvalue);

EXTERN int asn1JsonDec_DeltaTime (OSCTXT *pctxt, ASN1T_DeltaTime *pvalue);

EXTERN int asn1PrtToStrm_DeltaTime (OSCTXT *pctxt, 
   const char* name, const ASN1T_DeltaTime* pvalue);

EXTERN ASN1T_DeltaTime* new_ASN1T_DeltaTime (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DescriptiveName                                           */
/*                                                            */
/**************************************************************/
/*
DescriptiveName ::= IA5String (SIZE (1..63))
*/
typedef const char* ASN1T_DescriptiveName;

EXTERN int asn1PE_DescriptiveName (OSCTXT* pctxt, ASN1T_DescriptiveName value);

EXTERN int asn1PD_DescriptiveName (OSCTXT* pctxt, ASN1T_DescriptiveName* pvalue);

EXTERN int XmlEnc_DescriptiveName (OSCTXT* pctxt, ASN1T_DescriptiveName value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DescriptiveName (OSCTXT* pctxt, ASN1T_DescriptiveName* pvalue
   );

EXTERN int asn1JsonEnc_DescriptiveName (OSCTXT *pctxt, ASN1T_DescriptiveName value);

EXTERN int asn1JsonDec_DescriptiveName (OSCTXT *pctxt, ASN1T_DescriptiveName *pvalue);

EXTERN int asn1PrtToStrm_DescriptiveName (OSCTXT *pctxt, 
   const char* name, const ASN1T_DescriptiveName pvalue);

EXTERN void asn1Free_DescriptiveName (OSCTXT *pctxt, ASN1T_DescriptiveName pvalue);

/**************************************************************/
/*                                                            */
/*  DHour                                                     */
/*                                                            */
/**************************************************************/
/*
DHour ::= INTEGER (0..31)
                           units of hours

*/
typedef OSUINT8 ASN1T_DHour;

EXTERN int asn1PE_DHour (OSCTXT* pctxt, ASN1T_DHour value);

EXTERN int asn1PD_DHour (OSCTXT* pctxt, ASN1T_DHour* pvalue);

EXTERN int XmlEnc_DHour (OSCTXT* pctxt, ASN1T_DHour value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DHour (OSCTXT* pctxt, ASN1T_DHour* pvalue);

EXTERN int asn1JsonEnc_DHour (OSCTXT *pctxt, ASN1T_DHour *pvalue);

EXTERN int asn1JsonDec_DHour (OSCTXT *pctxt, ASN1T_DHour *pvalue);

EXTERN int asn1PrtToStrm_DHour (OSCTXT *pctxt, 
   const char* name, const ASN1T_DHour* pvalue);

EXTERN ASN1T_DHour* new_ASN1T_DHour (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DirectionOfUse                                            */
/*                                                            */
/**************************************************************/
/*
DirectionOfUse ::= ENUMERATED { unavailable(0), forward(1), reverse(2), both(3) }
*/
struct EXTERN DirectionOfUse {
   enum Root {
      unavailable = 0,
      forward = 1,
      reverse = 2,
      both = 3
   } ;
} ;

typedef OSUINT32 ASN1T_DirectionOfUse;

EXTERN int asn1PE_DirectionOfUse (OSCTXT* pctxt, ASN1T_DirectionOfUse value);

EXTERN int asn1PD_DirectionOfUse (OSCTXT* pctxt, ASN1T_DirectionOfUse* pvalue);

EXTERN int XmlEnc_DirectionOfUse (OSCTXT* pctxt, ASN1T_DirectionOfUse value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DirectionOfUse (OSCTXT* pctxt, ASN1T_DirectionOfUse* pvalue)
   ;

EXTERN int asn1JsonEnc_DirectionOfUse (OSCTXT *pctxt, ASN1T_DirectionOfUse *pvalue);

EXTERN int asn1JsonDec_DirectionOfUse (OSCTXT *pctxt, ASN1T_DirectionOfUse *pvalue);

EXTERN int asn1PrtToStrm_DirectionOfUse (OSCTXT *pctxt, 
   const char* name, const ASN1T_DirectionOfUse* pvalue);

EXTERN ASN1T_DirectionOfUse* new_ASN1T_DirectionOfUse (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_DirectionOfUse_ENUMTAB[];
#define ASN1T_DirectionOfUse_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_DirectionOfUse_ToString (OSINT32 value);

EXTERN int ASN1T_DirectionOfUse_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_DirectionOfUse* pvalue);

EXTERN int ASN1T_DirectionOfUse_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_DirectionOfUse* pvalue);

/**************************************************************/
/*                                                            */
/*  DistanceUnits                                             */
/*                                                            */
/**************************************************************/
/*
DistanceUnits ::= ENUMERATED { centimeter(0), cm2-5(1), decimeter(2), meter(3), kilometer(4), foot(5), yard(6), mile(7) }
*/
struct EXTERN DistanceUnits {
   enum Root {
      centimeter = 0,
      cm2_5 = 1,
      decimeter = 2,
      meter = 3,
      kilometer = 4,
      foot = 5,
      yard = 6,
      mile = 7
   } ;
} ;

typedef OSUINT32 ASN1T_DistanceUnits;

EXTERN int asn1PE_DistanceUnits (OSCTXT* pctxt, ASN1T_DistanceUnits value);

EXTERN int asn1PD_DistanceUnits (OSCTXT* pctxt, ASN1T_DistanceUnits* pvalue);

EXTERN int XmlEnc_DistanceUnits (OSCTXT* pctxt, ASN1T_DistanceUnits value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DistanceUnits (OSCTXT* pctxt, ASN1T_DistanceUnits* pvalue);

EXTERN int asn1JsonEnc_DistanceUnits (OSCTXT *pctxt, ASN1T_DistanceUnits *pvalue);

EXTERN int asn1JsonDec_DistanceUnits (OSCTXT *pctxt, ASN1T_DistanceUnits *pvalue);

EXTERN int asn1PrtToStrm_DistanceUnits (OSCTXT *pctxt, 
   const char* name, const ASN1T_DistanceUnits* pvalue);

EXTERN ASN1T_DistanceUnits* new_ASN1T_DistanceUnits (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_DistanceUnits_ENUMTAB[];
#define ASN1T_DistanceUnits_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_DistanceUnits_ToString (OSINT32 value);

EXTERN int ASN1T_DistanceUnits_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_DistanceUnits* pvalue);

EXTERN int ASN1T_DistanceUnits_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_DistanceUnits* pvalue);

/**************************************************************/
/*                                                            */
/*  DMinute                                                   */
/*                                                            */
/**************************************************************/
/*
DMinute ::= INTEGER (0..60)
                             units of minutes

*/
typedef OSUINT8 ASN1T_DMinute;

EXTERN int asn1PE_DMinute (OSCTXT* pctxt, ASN1T_DMinute value);

EXTERN int asn1PD_DMinute (OSCTXT* pctxt, ASN1T_DMinute* pvalue);

EXTERN int XmlEnc_DMinute (OSCTXT* pctxt, ASN1T_DMinute value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DMinute (OSCTXT* pctxt, ASN1T_DMinute* pvalue);

EXTERN int asn1JsonEnc_DMinute (OSCTXT *pctxt, ASN1T_DMinute *pvalue);

EXTERN int asn1JsonDec_DMinute (OSCTXT *pctxt, ASN1T_DMinute *pvalue);

EXTERN int asn1PrtToStrm_DMinute (OSCTXT *pctxt, 
   const char* name, const ASN1T_DMinute* pvalue);

EXTERN ASN1T_DMinute* new_ASN1T_DMinute (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DMonth                                                    */
/*                                                            */
/**************************************************************/
/*
DMonth ::= INTEGER (0..12)
                            units of months

*/
typedef OSUINT8 ASN1T_DMonth;

EXTERN int asn1PE_DMonth (OSCTXT* pctxt, ASN1T_DMonth value);

EXTERN int asn1PD_DMonth (OSCTXT* pctxt, ASN1T_DMonth* pvalue);

EXTERN int XmlEnc_DMonth (OSCTXT* pctxt, ASN1T_DMonth value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DMonth (OSCTXT* pctxt, ASN1T_DMonth* pvalue);

EXTERN int asn1JsonEnc_DMonth (OSCTXT *pctxt, ASN1T_DMonth *pvalue);

EXTERN int asn1JsonDec_DMonth (OSCTXT *pctxt, ASN1T_DMonth *pvalue);

EXTERN int asn1PrtToStrm_DMonth (OSCTXT *pctxt, 
   const char* name, const ASN1T_DMonth* pvalue);

EXTERN ASN1T_DMonth* new_ASN1T_DMonth (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DOffset                                                   */
/*                                                            */
/**************************************************************/
/*
DOffset ::= INTEGER (-840..840)
                                 units of minutes from UTC time

*/
typedef OSINT16 ASN1T_DOffset;

EXTERN int asn1PE_DOffset (OSCTXT* pctxt, ASN1T_DOffset value);

EXTERN int asn1PD_DOffset (OSCTXT* pctxt, ASN1T_DOffset* pvalue);

EXTERN int XmlEnc_DOffset (OSCTXT* pctxt, ASN1T_DOffset value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DOffset (OSCTXT* pctxt, ASN1T_DOffset* pvalue);

EXTERN int asn1JsonEnc_DOffset (OSCTXT *pctxt, ASN1T_DOffset *pvalue);

EXTERN int asn1JsonDec_DOffset (OSCTXT *pctxt, ASN1T_DOffset *pvalue);

EXTERN int asn1PrtToStrm_DOffset (OSCTXT *pctxt, 
   const char* name, const ASN1T_DOffset* pvalue);

EXTERN ASN1T_DOffset* new_ASN1T_DOffset (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DrivenLineOffsetLg                                        */
/*                                                            */
/**************************************************************/
/*
DrivenLineOffsetLg ::= INTEGER (-32767..32767)
    LSB units are 1 cm.

*/
typedef OSINT16 ASN1T_DrivenLineOffsetLg;

EXTERN int asn1PE_DrivenLineOffsetLg (OSCTXT* pctxt, ASN1T_DrivenLineOffsetLg value);

EXTERN int asn1PD_DrivenLineOffsetLg (OSCTXT* pctxt, ASN1T_DrivenLineOffsetLg* pvalue);

EXTERN int XmlEnc_DrivenLineOffsetLg (OSCTXT* pctxt, 
   ASN1T_DrivenLineOffsetLg value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DrivenLineOffsetLg (OSCTXT* pctxt, 
   ASN1T_DrivenLineOffsetLg* pvalue);

EXTERN int asn1JsonEnc_DrivenLineOffsetLg (OSCTXT *pctxt, ASN1T_DrivenLineOffsetLg *pvalue);

EXTERN int asn1JsonDec_DrivenLineOffsetLg (OSCTXT *pctxt, ASN1T_DrivenLineOffsetLg *pvalue);

EXTERN int asn1PrtToStrm_DrivenLineOffsetLg (OSCTXT *pctxt, 
   const char* name, const ASN1T_DrivenLineOffsetLg* pvalue);

EXTERN ASN1T_DrivenLineOffsetLg* 
   new_ASN1T_DrivenLineOffsetLg (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DrivenLineOffsetSm                                        */
/*                                                            */
/**************************************************************/
/*
DrivenLineOffsetSm ::= INTEGER (-2047..2047)
    LSB units are 1 cm.

*/
typedef OSINT16 ASN1T_DrivenLineOffsetSm;

EXTERN int asn1PE_DrivenLineOffsetSm (OSCTXT* pctxt, ASN1T_DrivenLineOffsetSm value);

EXTERN int asn1PD_DrivenLineOffsetSm (OSCTXT* pctxt, ASN1T_DrivenLineOffsetSm* pvalue);

EXTERN int XmlEnc_DrivenLineOffsetSm (OSCTXT* pctxt, 
   ASN1T_DrivenLineOffsetSm value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DrivenLineOffsetSm (OSCTXT* pctxt, 
   ASN1T_DrivenLineOffsetSm* pvalue);

EXTERN int asn1JsonEnc_DrivenLineOffsetSm (OSCTXT *pctxt, ASN1T_DrivenLineOffsetSm *pvalue);

EXTERN int asn1JsonDec_DrivenLineOffsetSm (OSCTXT *pctxt, ASN1T_DrivenLineOffsetSm *pvalue);

EXTERN int asn1PrtToStrm_DrivenLineOffsetSm (OSCTXT *pctxt, 
   const char* name, const ASN1T_DrivenLineOffsetSm* pvalue);

EXTERN ASN1T_DrivenLineOffsetSm* 
   new_ASN1T_DrivenLineOffsetSm (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DrivingWheelAngle                                         */
/*                                                            */
/**************************************************************/
/*
DrivingWheelAngle ::= INTEGER (-128..127)
    LSB units of 0.3333 degrees.  
    a range of 42.33 degrees each way

*/
typedef OSINT8 ASN1T_DrivingWheelAngle;

EXTERN int asn1PE_DrivingWheelAngle (OSCTXT* pctxt, ASN1T_DrivingWheelAngle value);

EXTERN int asn1PD_DrivingWheelAngle (OSCTXT* pctxt, ASN1T_DrivingWheelAngle* pvalue);

EXTERN int XmlEnc_DrivingWheelAngle (OSCTXT* pctxt, 
   ASN1T_DrivingWheelAngle value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DrivingWheelAngle (OSCTXT* pctxt, 
   ASN1T_DrivingWheelAngle* pvalue);

EXTERN int asn1JsonEnc_DrivingWheelAngle (OSCTXT *pctxt, ASN1T_DrivingWheelAngle *pvalue);

EXTERN int asn1JsonDec_DrivingWheelAngle (OSCTXT *pctxt, ASN1T_DrivingWheelAngle *pvalue);

EXTERN int asn1PrtToStrm_DrivingWheelAngle (OSCTXT *pctxt, 
   const char* name, const ASN1T_DrivingWheelAngle* pvalue);

EXTERN ASN1T_DrivingWheelAngle* new_ASN1T_DrivingWheelAngle (ASN1CType& ccobj)
   ;

/**************************************************************/
/*                                                            */
/*  DSecond                                                   */
/*                                                            */
/**************************************************************/
/*
DSecond ::= INTEGER (0..65535)
                                units of milliseconds

*/
typedef OSUINT16 ASN1T_DSecond;

EXTERN int asn1PE_DSecond (OSCTXT* pctxt, ASN1T_DSecond value);

EXTERN int asn1PD_DSecond (OSCTXT* pctxt, ASN1T_DSecond* pvalue);

EXTERN int XmlEnc_DSecond (OSCTXT* pctxt, ASN1T_DSecond value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DSecond (OSCTXT* pctxt, ASN1T_DSecond* pvalue);

EXTERN int asn1JsonEnc_DSecond (OSCTXT *pctxt, ASN1T_DSecond *pvalue);

EXTERN int asn1JsonDec_DSecond (OSCTXT *pctxt, ASN1T_DSecond *pvalue);

EXTERN int asn1PrtToStrm_DSecond (OSCTXT *pctxt, 
   const char* name, const ASN1T_DSecond* pvalue);

EXTERN ASN1T_DSecond* new_ASN1T_DSecond (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DSRCmsgID                                                 */
/*                                                            */
/**************************************************************/
/*
DSRCmsgID ::= INTEGER (0..32767)
*/
typedef OSUINT16 ASN1T_DSRCmsgID;

EXTERN int asn1PE_DSRCmsgID (OSCTXT* pctxt, ASN1T_DSRCmsgID value);

EXTERN int asn1PD_DSRCmsgID (OSCTXT* pctxt, ASN1T_DSRCmsgID* pvalue);

EXTERN int XmlEnc_DSRCmsgID (OSCTXT* pctxt, ASN1T_DSRCmsgID value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DSRCmsgID (OSCTXT* pctxt, ASN1T_DSRCmsgID* pvalue);

EXTERN int asn1JsonEnc_DSRCmsgID (OSCTXT *pctxt, ASN1T_DSRCmsgID *pvalue);

EXTERN int asn1JsonDec_DSRCmsgID (OSCTXT *pctxt, ASN1T_DSRCmsgID *pvalue);

EXTERN int asn1PrtToStrm_DSRCmsgID (OSCTXT *pctxt, 
   const char* name, const ASN1T_DSRCmsgID* pvalue);

EXTERN ASN1T_DSRCmsgID* new_ASN1T_DSRCmsgID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Duration                                                  */
/*                                                            */
/**************************************************************/
/*
Duration ::= INTEGER (0..3600)
                                units of seconds

*/
typedef OSUINT16 ASN1T_Duration;

class EXTERN ASN1C_Duration :
public ASN1CType
{
protected:
   ASN1T_Duration& msgData;
public:
   /**
    * Control class: ASN1C_Duration
    * Data class:    ASN1T_Duration
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_Duration (ASN1T_Duration& data);

   /**
    * Control class: ASN1C_Duration<br/>
    * Data class: ASN1T_Duration<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_Duration (OSRTMessageBufferIF& msgBuf, ASN1T_Duration& data);

   virtual ~ASN1C_Duration () {}

   /**
    * Data class: ASN1T_Duration<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_Duration.
    */
   inline ASN1T_Duration& getData () { return msgData; }

   /**
    * Data class: ASN1T_Duration<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_Duration.
    */
   inline const ASN1T_Duration& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             Duration will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "Duration");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_Duration& operator= (const ASN1C_Duration&) {return *this;}
} ;

EXTERN int asn1PE_Duration (OSCTXT* pctxt, ASN1T_Duration value);

EXTERN int asn1PD_Duration (OSCTXT* pctxt, ASN1T_Duration* pvalue);

EXTERN int XmlEnc_Duration (OSCTXT* pctxt, ASN1T_Duration value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Duration (OSCTXT* pctxt, ASN1T_Duration* pvalue);

EXTERN int asn1JsonEnc_Duration (OSCTXT *pctxt, ASN1T_Duration *pvalue);

EXTERN int asn1JsonDec_Duration (OSCTXT *pctxt, ASN1T_Duration *pvalue);

EXTERN int asn1PrtToStrm_Duration (OSCTXT *pctxt, 
   const char* name, const ASN1T_Duration* pvalue);

EXTERN ASN1T_Duration* new_ASN1T_Duration (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DYear                                                     */
/*                                                            */
/**************************************************************/
/*
DYear ::= INTEGER (0..4095)
                             units of years

*/
typedef OSUINT16 ASN1T_DYear;

EXTERN int asn1PE_DYear (OSCTXT* pctxt, ASN1T_DYear value);

EXTERN int asn1PD_DYear (OSCTXT* pctxt, ASN1T_DYear* pvalue);

EXTERN int XmlEnc_DYear (OSCTXT* pctxt, ASN1T_DYear value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DYear (OSCTXT* pctxt, ASN1T_DYear* pvalue);

EXTERN int asn1JsonEnc_DYear (OSCTXT *pctxt, ASN1T_DYear *pvalue);

EXTERN int asn1JsonDec_DYear (OSCTXT *pctxt, ASN1T_DYear *pvalue);

EXTERN int asn1PrtToStrm_DYear (OSCTXT *pctxt, 
   const char* name, const ASN1T_DYear* pvalue);

EXTERN ASN1T_DYear* new_ASN1T_DYear (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ElevationConfidence                                       */
/*                                                            */
/**************************************************************/
/*
ElevationConfidence ::= ENUMERATED { unavailable(0), elev-500-00(1), elev-200-00(2), elev-100-00(3), elev-050-00(4), elev-020-00(5), elev-010-00(6), elev-005-00(7), elev-002-00(8), elev-001-00(9), elev-000-50(10), elev-000-20(11), elev-000-10(12), elev-000-05(13), elev-000-02(14), elev-000-01(15) }
       Encoded as a 4 bit value

*/
struct EXTERN ElevationConfidence {
   enum Root {
      unavailable = 0,
      elev_500_00 = 1,
      elev_200_00 = 2,
      elev_100_00 = 3,
      elev_050_00 = 4,
      elev_020_00 = 5,
      elev_010_00 = 6,
      elev_005_00 = 7,
      elev_002_00 = 8,
      elev_001_00 = 9,
      elev_000_50 = 10,
      elev_000_20 = 11,
      elev_000_10 = 12,
      elev_000_05 = 13,
      elev_000_02 = 14,
      elev_000_01 = 15
   } ;
} ;

typedef OSUINT32 ASN1T_ElevationConfidence;

EXTERN int asn1PE_ElevationConfidence (OSCTXT* pctxt, ASN1T_ElevationConfidence value);

EXTERN int asn1PD_ElevationConfidence (OSCTXT* pctxt, ASN1T_ElevationConfidence* pvalue);

EXTERN int XmlEnc_ElevationConfidence (OSCTXT* pctxt, 
   ASN1T_ElevationConfidence value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ElevationConfidence (OSCTXT* pctxt, 
   ASN1T_ElevationConfidence* pvalue);

EXTERN int asn1JsonEnc_ElevationConfidence (OSCTXT *pctxt, ASN1T_ElevationConfidence *pvalue);

EXTERN int asn1JsonDec_ElevationConfidence (OSCTXT *pctxt, ASN1T_ElevationConfidence *pvalue);

EXTERN int asn1PrtToStrm_ElevationConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_ElevationConfidence* pvalue);

EXTERN ASN1T_ElevationConfidence* 
   new_ASN1T_ElevationConfidence (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_ElevationConfidence_ENUMTAB[];
#define ASN1T_ElevationConfidence_ENUMTABSIZE 16

EXTERN const OSUTF8CHAR* ASN1T_ElevationConfidence_ToString (OSINT32 value);

EXTERN int ASN1T_ElevationConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_ElevationConfidence* pvalue);

EXTERN int ASN1T_ElevationConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_ElevationConfidence* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  Elevation                                                 */
/*                                                            */
/**************************************************************/
/*
Elevation ::= INTEGER (-4096..61439)
     In units of 10 cm steps above or below the reference ellipsoid
     Providing a range of -409.5 to + 6143.9 meters
     The value -4096 shall be used when Unknown is to be sent

*/
typedef OSINT32 ASN1T_Elevation;

EXTERN int asn1PE_Elevation (OSCTXT* pctxt, ASN1T_Elevation value);

EXTERN int asn1PD_Elevation (OSCTXT* pctxt, ASN1T_Elevation* pvalue);

EXTERN int XmlEnc_Elevation (OSCTXT* pctxt, ASN1T_Elevation value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Elevation (OSCTXT* pctxt, ASN1T_Elevation* pvalue);

EXTERN int asn1JsonEnc_Elevation (OSCTXT *pctxt, ASN1T_Elevation *pvalue);

EXTERN int asn1JsonDec_Elevation (OSCTXT *pctxt, ASN1T_Elevation *pvalue);

EXTERN int asn1PrtToStrm_Elevation (OSCTXT *pctxt, 
   const char* name, const ASN1T_Elevation* pvalue);

EXTERN ASN1T_Elevation* new_ASN1T_Elevation (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Extent                                                    */
/*                                                            */
/**************************************************************/
/*
Extent ::= ENUMERATED { useInstantlyOnly(0), useFor3meters(1), useFor10meters(2), useFor50meters(3), useFor100meters(4), useFor500meters(5), useFor1000meters(6), useFor5000meters(7), useFor10000meters(8), useFor50000meters(9), useFor100000meters(10), useFor500000meters(11), useFor1000000meters(12), useFor5000000meters(13), useFor10000000meters(14), forever(15) }
       Encoded as a 4 bit value

*/
struct EXTERN Extent {
   enum Root {
      useInstantlyOnly = 0,
      useFor3meters = 1,
      useFor10meters = 2,
      useFor50meters = 3,
      useFor100meters = 4,
      useFor500meters = 5,
      useFor1000meters = 6,
      useFor5000meters = 7,
      useFor10000meters = 8,
      useFor50000meters = 9,
      useFor100000meters = 10,
      useFor500000meters = 11,
      useFor1000000meters = 12,
      useFor5000000meters = 13,
      useFor10000000meters = 14,
      forever = 15
   } ;
} ;

typedef OSUINT32 ASN1T_Extent;

EXTERN int asn1PE_Extent (OSCTXT* pctxt, ASN1T_Extent value);

EXTERN int asn1PD_Extent (OSCTXT* pctxt, ASN1T_Extent* pvalue);

EXTERN int XmlEnc_Extent (OSCTXT* pctxt, ASN1T_Extent value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Extent (OSCTXT* pctxt, ASN1T_Extent* pvalue);

EXTERN int asn1JsonEnc_Extent (OSCTXT *pctxt, ASN1T_Extent *pvalue);

EXTERN int asn1JsonDec_Extent (OSCTXT *pctxt, ASN1T_Extent *pvalue);

EXTERN int asn1PrtToStrm_Extent (OSCTXT *pctxt, 
   const char* name, const ASN1T_Extent* pvalue);

EXTERN ASN1T_Extent* new_ASN1T_Extent (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_Extent_ENUMTAB[];
#define ASN1T_Extent_ENUMTABSIZE 16

EXTERN const OSUTF8CHAR* ASN1T_Extent_ToString (OSINT32 value);

EXTERN int ASN1T_Extent_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_Extent* pvalue);

EXTERN int ASN1T_Extent_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_Extent* pvalue);

/**************************************************************/
/*                                                            */
/*  ExteriorLights                                            */
/*                                                            */
/**************************************************************/
/*
ExteriorLights ::= BIT STRING  { lowBeamHeadlightsOn(0), highBeamHeadlightsOn(1), leftTurnSignalOn(2), rightTurnSignalOn(3), hazardSignalOn(4), automaticLightControlOn(5), daytimeRunningLightsOn(6), fogLightOn(7), parkingLightsOn(8) } (SIZE (9, ...))
*/
struct EXTERN ASN1T_ExteriorLights {
   OSUINT8 numbits;
   OSOCTET data[2];
   OSOCTET* extdata;
   // ctors
   ASN1T_ExteriorLights () : numbits(0), extdata(0) {}
} ;

class EXTERN ASN1C_ExteriorLights :
public ASN1CBitStr
{
protected:
   ASN1T_ExteriorLights& msgData;
public:
   // named bits
   enum { lowBeamHeadlightsOn = 0, highBeamHeadlightsOn = 1, leftTurnSignalOn = 2, rightTurnSignalOn = 3, hazardSignalOn = 4, automaticLightControlOn = 5, daytimeRunningLightsOn = 6, fogLightOn = 7, parkingLightsOn = 8 };

   /**
    * Control class: ASN1C_ExteriorLights
    * Data class:    ASN1T_ExteriorLights
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ExteriorLights (ASN1T_ExteriorLights& data);

   /**
    * Control class: ASN1C_ExteriorLights<br/>
    * Data class: ASN1T_ExteriorLights<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ExteriorLights (OSRTMessageBufferIF& msgBuf
      , ASN1T_ExteriorLights& data);

   virtual ~ASN1C_ExteriorLights () {}

private:
   ASN1C_ExteriorLights& operator= (const ASN1C_ExteriorLights&) {return *this;}
} ;

EXTERN int asn1PE_ExteriorLights (OSCTXT* pctxt, ASN1T_ExteriorLights* pvalue);

EXTERN int asn1PD_ExteriorLights (OSCTXT* pctxt, ASN1T_ExteriorLights* pvalue);

EXTERN int XmlEnc_ExteriorLights (OSCTXT* pctxt, ASN1T_ExteriorLights* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ExteriorLights (OSCTXT* pctxt, ASN1T_ExteriorLights* pvalue)
   ;

EXTERN int asn1JsonEnc_ExteriorLights (OSCTXT *pctxt, ASN1T_ExteriorLights *pvalue);

EXTERN int asn1JsonDec_ExteriorLights (OSCTXT *pctxt, ASN1T_ExteriorLights *pvalue);

EXTERN int asn1PrtToStrm_ExteriorLights (OSCTXT *pctxt, 
   const char* name, const ASN1T_ExteriorLights* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_ExteriorLights_NAMEDBITTAB[10];

EXTERN ASN1T_ExteriorLights* new_ASN1T_ExteriorLights (ASN1CType& ccobj);

EXTERN int asn1Init_ExteriorLights (ASN1T_ExteriorLights* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  FuelType                                                  */
/*                                                            */
/**************************************************************/
/*
FuelType ::= INTEGER (0..15)
*/
typedef OSUINT8 ASN1T_FuelType;

EXTERN int asn1PE_FuelType (OSCTXT* pctxt, ASN1T_FuelType value);

EXTERN int asn1PD_FuelType (OSCTXT* pctxt, ASN1T_FuelType* pvalue);

EXTERN int XmlEnc_FuelType (OSCTXT* pctxt, ASN1T_FuelType value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_FuelType (OSCTXT* pctxt, ASN1T_FuelType* pvalue);

EXTERN int asn1JsonEnc_FuelType (OSCTXT *pctxt, ASN1T_FuelType *pvalue);

EXTERN int asn1JsonDec_FuelType (OSCTXT *pctxt, ASN1T_FuelType *pvalue);

EXTERN int asn1PrtToStrm_FuelType (OSCTXT *pctxt, 
   const char* name, const ASN1T_FuelType* pvalue);

EXTERN ASN1T_FuelType* new_ASN1T_FuelType (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  FurtherInfoID                                             */
/*                                                            */
/**************************************************************/
/*
FurtherInfoID ::= OCTET STRING (SIZE (2))
    a link to any other incident 
    information data that may be available 
    in the normal ATIS incident description 
    or other messages

*/
struct EXTERN ASN1T_FurtherInfoID {
   OSOCTET data[2];
   // ctors
   ASN1T_FurtherInfoID () {}
   ASN1T_FurtherInfoID (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, 2);
   }
   ASN1T_FurtherInfoID (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
   }
   // assignment operators
   ASN1T_FurtherInfoID& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
      return *this;
   }
} ;

EXTERN int asn1PE_FurtherInfoID (OSCTXT* pctxt, ASN1T_FurtherInfoID* pvalue);

EXTERN int asn1PD_FurtherInfoID (OSCTXT* pctxt, ASN1T_FurtherInfoID* pvalue);

EXTERN int XmlEnc_FurtherInfoID (OSCTXT* pctxt, ASN1T_FurtherInfoID* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_FurtherInfoID (OSCTXT* pctxt, ASN1T_FurtherInfoID* pvalue);

EXTERN int asn1JsonEnc_FurtherInfoID (OSCTXT *pctxt, ASN1T_FurtherInfoID *pvalue);

EXTERN int asn1JsonDec_FurtherInfoID (OSCTXT *pctxt, ASN1T_FurtherInfoID *pvalue);

EXTERN int asn1PrtToStrm_FurtherInfoID (OSCTXT *pctxt, 
   const char* name, const ASN1T_FurtherInfoID* pvalue);

EXTERN ASN1T_FurtherInfoID* new_ASN1T_FurtherInfoID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  GNSSstatus                                                */
/*                                                            */
/**************************************************************/
/*
GNSSstatus ::= BIT STRING  { unavailable(0), isHealthy(1), isMonitored(2), baseStationType(3), aPDOPofUnder5(4), inViewOfUnder5(5), localCorrectionsPresent(6), networkCorrectionsPresent(7) } (SIZE (8))
*/
struct EXTERN ASN1T_GNSSstatus {
   OSOCTET data[1];
   // ctors
   ASN1T_GNSSstatus ()  {}
   ASN1T_GNSSstatus (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 1, _data, 1);
   }
} ;

class EXTERN ASN1C_GNSSstatus :
public ASN1CBitStr
{
protected:
   ASN1T_GNSSstatus& msgData;
public:
   // named bits
   enum { unavailable = 0, isHealthy = 1, isMonitored = 2, baseStationType = 3, aPDOPofUnder5 = 4, inViewOfUnder5 = 5, localCorrectionsPresent = 6, networkCorrectionsPresent = 7 };

   /**
    * Control class: ASN1C_GNSSstatus
    * Data class:    ASN1T_GNSSstatus
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_GNSSstatus (ASN1T_GNSSstatus& data);

   /**
    * Control class: ASN1C_GNSSstatus<br/>
    * Data class: ASN1T_GNSSstatus<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_GNSSstatus (OSRTMessageBufferIF& msgBuf, ASN1T_GNSSstatus& data);

   virtual ~ASN1C_GNSSstatus () {}

private:
   ASN1C_GNSSstatus& operator= (const ASN1C_GNSSstatus&) {return *this;}
} ;

EXTERN int asn1PE_GNSSstatus (OSCTXT* pctxt, ASN1T_GNSSstatus* pvalue);

EXTERN int asn1PD_GNSSstatus (OSCTXT* pctxt, ASN1T_GNSSstatus* pvalue);

EXTERN int XmlEnc_GNSSstatus (OSCTXT* pctxt, ASN1T_GNSSstatus* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GNSSstatus (OSCTXT* pctxt, ASN1T_GNSSstatus* pvalue);

EXTERN int asn1JsonEnc_GNSSstatus (OSCTXT *pctxt, ASN1T_GNSSstatus *pvalue);

EXTERN int asn1JsonDec_GNSSstatus (OSCTXT *pctxt, ASN1T_GNSSstatus *pvalue);

EXTERN int asn1PrtToStrm_GNSSstatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_GNSSstatus* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_GNSSstatus_NAMEDBITTAB[9];

EXTERN ASN1T_GNSSstatus* new_ASN1T_GNSSstatus (ASN1CType& ccobj);

EXTERN int asn1Init_GNSSstatus (ASN1T_GNSSstatus* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  GrossDistance                                             */
/*                                                            */
/**************************************************************/
/*
GrossDistance ::= INTEGER (0..1023)
                                     Units of 1.00 meters
    The value 1023 shall indicate unavailable

*/
typedef OSUINT16 ASN1T_GrossDistance;

EXTERN int asn1PE_GrossDistance (OSCTXT* pctxt, ASN1T_GrossDistance value);

EXTERN int asn1PD_GrossDistance (OSCTXT* pctxt, ASN1T_GrossDistance* pvalue);

EXTERN int XmlEnc_GrossDistance (OSCTXT* pctxt, ASN1T_GrossDistance value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GrossDistance (OSCTXT* pctxt, ASN1T_GrossDistance* pvalue);

EXTERN int asn1JsonEnc_GrossDistance (OSCTXT *pctxt, ASN1T_GrossDistance *pvalue);

EXTERN int asn1JsonDec_GrossDistance (OSCTXT *pctxt, ASN1T_GrossDistance *pvalue);

EXTERN int asn1PrtToStrm_GrossDistance (OSCTXT *pctxt, 
   const char* name, const ASN1T_GrossDistance* pvalue);

EXTERN ASN1T_GrossDistance* new_ASN1T_GrossDistance (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  GrossSpeed                                                */
/*                                                            */
/**************************************************************/
/*
GrossSpeed ::= INTEGER (0..31)
                                Units of 1.00 m/s
    The value 30 shall be used for speeds of 30 m/s or greater (67.1 mph)
    The value 31 shall indicate that the speed is unavailable

*/
typedef OSUINT8 ASN1T_GrossSpeed;

EXTERN int asn1PE_GrossSpeed (OSCTXT* pctxt, ASN1T_GrossSpeed value);

EXTERN int asn1PD_GrossSpeed (OSCTXT* pctxt, ASN1T_GrossSpeed* pvalue);

EXTERN int XmlEnc_GrossSpeed (OSCTXT* pctxt, ASN1T_GrossSpeed value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GrossSpeed (OSCTXT* pctxt, ASN1T_GrossSpeed* pvalue);

EXTERN int asn1JsonEnc_GrossSpeed (OSCTXT *pctxt, ASN1T_GrossSpeed *pvalue);

EXTERN int asn1JsonDec_GrossSpeed (OSCTXT *pctxt, ASN1T_GrossSpeed *pvalue);

EXTERN int asn1PrtToStrm_GrossSpeed (OSCTXT *pctxt, 
   const char* name, const ASN1T_GrossSpeed* pvalue);

EXTERN ASN1T_GrossSpeed* new_ASN1T_GrossSpeed (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  HeadingConfidence                                         */
/*                                                            */
/**************************************************************/
/*
HeadingConfidence ::= ENUMERATED { unavailable(0), prec10deg(1), prec05deg(2), prec01deg(3), prec0-1deg(4), prec0-05deg(5), prec0-01deg(6), prec0-0125deg(7) }
       Encoded as a 3 bit value

*/
struct EXTERN HeadingConfidence {
   enum Root {
      unavailable = 0,
      prec10deg = 1,
      prec05deg = 2,
      prec01deg = 3,
      prec0_1deg = 4,
      prec0_05deg = 5,
      prec0_01deg = 6,
      prec0_0125deg = 7
   } ;
} ;

typedef OSUINT32 ASN1T_HeadingConfidence;

EXTERN int asn1PE_HeadingConfidence (OSCTXT* pctxt, ASN1T_HeadingConfidence value);

EXTERN int asn1PD_HeadingConfidence (OSCTXT* pctxt, ASN1T_HeadingConfidence* pvalue);

EXTERN int XmlEnc_HeadingConfidence (OSCTXT* pctxt, 
   ASN1T_HeadingConfidence value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_HeadingConfidence (OSCTXT* pctxt, 
   ASN1T_HeadingConfidence* pvalue);

EXTERN int asn1JsonEnc_HeadingConfidence (OSCTXT *pctxt, ASN1T_HeadingConfidence *pvalue);

EXTERN int asn1JsonDec_HeadingConfidence (OSCTXT *pctxt, ASN1T_HeadingConfidence *pvalue);

EXTERN int asn1PrtToStrm_HeadingConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_HeadingConfidence* pvalue);

EXTERN ASN1T_HeadingConfidence* new_ASN1T_HeadingConfidence (ASN1CType& ccobj)
   ;

EXTERN extern const OSEnumItem ASN1T_HeadingConfidence_ENUMTAB[];
#define ASN1T_HeadingConfidence_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_HeadingConfidence_ToString (OSINT32 value);

EXTERN int ASN1T_HeadingConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_HeadingConfidence* pvalue);

EXTERN int ASN1T_HeadingConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_HeadingConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  Heading                                                   */
/*                                                            */
/**************************************************************/
/*
Heading ::= INTEGER (0..28800)
    LSB of 0.0125 degrees
    A range of 0 to 359.9875 degrees

*/
typedef OSUINT16 ASN1T_Heading;

EXTERN int asn1PE_Heading (OSCTXT* pctxt, ASN1T_Heading value);

EXTERN int asn1PD_Heading (OSCTXT* pctxt, ASN1T_Heading* pvalue);

EXTERN int XmlEnc_Heading (OSCTXT* pctxt, ASN1T_Heading value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Heading (OSCTXT* pctxt, ASN1T_Heading* pvalue);

EXTERN int asn1JsonEnc_Heading (OSCTXT *pctxt, ASN1T_Heading *pvalue);

EXTERN int asn1JsonDec_Heading (OSCTXT *pctxt, ASN1T_Heading *pvalue);

EXTERN int asn1PrtToStrm_Heading (OSCTXT *pctxt, 
   const char* name, const ASN1T_Heading* pvalue);

EXTERN ASN1T_Heading* new_ASN1T_Heading (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  HeadingSlice                                              */
/*                                                            */
/**************************************************************/
/*
HeadingSlice ::= BIT STRING  { from000-0to022-5degrees(0), from022-5to045-0degrees(1), from045-0to067-5degrees(2), from067-5to090-0degrees(3), from090-0to112-5degrees(4), from112-5to135-0degrees(5), from135-0to157-5degrees(6), from157-5to180-0degrees(7), from180-0to202-5degrees(8), from202-5to225-0degrees(9), from225-0to247-5degrees(10), from247-5to270-0degrees(11), from270-0to292-5degrees(12), from292-5to315-0degrees(13), from315-0to337-5degrees(14), from337-5to360-0degrees(15) } (SIZE (16))
*/
struct EXTERN ASN1T_HeadingSlice {
   OSOCTET data[2];
   // ctors
   ASN1T_HeadingSlice ()  {}
   ASN1T_HeadingSlice (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_HeadingSlice :
public ASN1CBitStr
{
protected:
   ASN1T_HeadingSlice& msgData;
public:
   // named bits
   enum { from000_0to022_5degrees = 0, from022_5to045_0degrees = 1, from045_0to067_5degrees = 2, from067_5to090_0degrees = 3, from090_0to112_5degrees = 4, from112_5to135_0degrees = 5, from135_0to157_5degrees = 6, from157_5to180_0degrees = 7, from180_0to202_5degrees = 8, from202_5to225_0degrees = 9, from225_0to247_5degrees = 10, from247_5to270_0degrees = 11, from270_0to292_5degrees = 12, from292_5to315_0degrees = 13, from315_0to337_5degrees = 14, from337_5to360_0degrees = 15 };

   /**
    * Control class: ASN1C_HeadingSlice
    * Data class:    ASN1T_HeadingSlice
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_HeadingSlice (ASN1T_HeadingSlice& data);

   /**
    * Control class: ASN1C_HeadingSlice<br/>
    * Data class: ASN1T_HeadingSlice<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_HeadingSlice (OSRTMessageBufferIF& msgBuf, ASN1T_HeadingSlice& data);

   virtual ~ASN1C_HeadingSlice () {}

private:
   ASN1C_HeadingSlice& operator= (const ASN1C_HeadingSlice&) {return *this;}
} ;

EXTERN int asn1PE_HeadingSlice (OSCTXT* pctxt, ASN1T_HeadingSlice* pvalue);

EXTERN int asn1PD_HeadingSlice (OSCTXT* pctxt, ASN1T_HeadingSlice* pvalue);

EXTERN int XmlEnc_HeadingSlice (OSCTXT* pctxt, ASN1T_HeadingSlice* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_HeadingSlice (OSCTXT* pctxt, ASN1T_HeadingSlice* pvalue);

EXTERN int asn1JsonEnc_HeadingSlice (OSCTXT *pctxt, ASN1T_HeadingSlice *pvalue);

EXTERN int asn1JsonDec_HeadingSlice (OSCTXT *pctxt, ASN1T_HeadingSlice *pvalue);

EXTERN int asn1PrtToStrm_HeadingSlice (OSCTXT *pctxt, 
   const char* name, const ASN1T_HeadingSlice* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_HeadingSlice_NAMEDBITTAB[17];

EXTERN ASN1T_HeadingSlice* new_ASN1T_HeadingSlice (ASN1CType& ccobj);

EXTERN int asn1Init_HeadingSlice (ASN1T_HeadingSlice* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  IntersectionID                                            */
/*                                                            */
/**************************************************************/
/*
IntersectionID ::= INTEGER (0..65535)
    The values zero through 255 are allocated for testing purposes
    Note that the value assigned to an intersection will be
    unique within a given regional ID only

*/
typedef OSUINT16 ASN1T_IntersectionID;

EXTERN int asn1PE_IntersectionID (OSCTXT* pctxt, ASN1T_IntersectionID value);

EXTERN int asn1PD_IntersectionID (OSCTXT* pctxt, ASN1T_IntersectionID* pvalue);

EXTERN int XmlEnc_IntersectionID (OSCTXT* pctxt, ASN1T_IntersectionID value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionID (OSCTXT* pctxt, ASN1T_IntersectionID* pvalue)
   ;

EXTERN int asn1JsonEnc_IntersectionID (OSCTXT *pctxt, ASN1T_IntersectionID *pvalue);

EXTERN int asn1JsonDec_IntersectionID (OSCTXT *pctxt, ASN1T_IntersectionID *pvalue);

EXTERN int asn1PrtToStrm_IntersectionID (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionID* pvalue);

EXTERN ASN1T_IntersectionID* new_ASN1T_IntersectionID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  IntersectionStatusObject                                  */
/*                                                            */
/**************************************************************/
/*
IntersectionStatusObject ::= BIT STRING  { manualControlIsEnabled(0), stopTimeIsActivated(1), failureFlash(2), preemptIsActive(3), signalPriorityIsActive(4), fixedTimeOperation(5), trafficDependentOperation(6), standbyOperation(7), failureMode(8), off(9), recentMAPmessageUpdate(10), recentChangeInMAPassignedLanesIDsUsed(11), noValidMAPisAvailableAtThisTime(12), noValidSPATisAvailableAtThisTime(13) } (SIZE (16))
*/
struct EXTERN ASN1T_IntersectionStatusObject {
   OSOCTET data[2];
   // ctors
   ASN1T_IntersectionStatusObject ()  {}
   ASN1T_IntersectionStatusObject (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_IntersectionStatusObject :
public ASN1CBitStr
{
protected:
   ASN1T_IntersectionStatusObject& msgData;
public:
   // named bits
   enum { manualControlIsEnabled = 0, stopTimeIsActivated = 1, failureFlash = 2, preemptIsActive = 3, signalPriorityIsActive = 4, fixedTimeOperation = 5, trafficDependentOperation = 6, standbyOperation = 7, failureMode = 8, off = 9, recentMAPmessageUpdate = 10, recentChangeInMAPassignedLanesIDsUsed = 11, noValidMAPisAvailableAtThisTime = 12, noValidSPATisAvailableAtThisTime = 13 };

   /**
    * Control class: ASN1C_IntersectionStatusObject
    * Data class:    ASN1T_IntersectionStatusObject
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_IntersectionStatusObject (ASN1T_IntersectionStatusObject& data);

   /**
    * Control class: ASN1C_IntersectionStatusObject<br/>
    * Data class: ASN1T_IntersectionStatusObject<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_IntersectionStatusObject (OSRTMessageBufferIF& msgBuf
      , ASN1T_IntersectionStatusObject& data);

   virtual ~ASN1C_IntersectionStatusObject () {}

private:
   ASN1C_IntersectionStatusObject& operator= (const ASN1C_IntersectionStatusObject&) {return *this;}
} ;

EXTERN int asn1PE_IntersectionStatusObject (OSCTXT* pctxt, ASN1T_IntersectionStatusObject* pvalue);

EXTERN int asn1PD_IntersectionStatusObject (OSCTXT* pctxt, ASN1T_IntersectionStatusObject* pvalue);

EXTERN int XmlEnc_IntersectionStatusObject (OSCTXT* pctxt, 
   ASN1T_IntersectionStatusObject* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionStatusObject (OSCTXT* pctxt, 
   ASN1T_IntersectionStatusObject* pvalue);

EXTERN int asn1JsonEnc_IntersectionStatusObject (OSCTXT *pctxt, ASN1T_IntersectionStatusObject *pvalue);

EXTERN int asn1JsonDec_IntersectionStatusObject (OSCTXT *pctxt, ASN1T_IntersectionStatusObject *pvalue);

EXTERN int asn1PrtToStrm_IntersectionStatusObject (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionStatusObject* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_IntersectionStatusObject_NAMEDBITTAB[15];

EXTERN ASN1T_IntersectionStatusObject* 
   new_ASN1T_IntersectionStatusObject (ASN1CType& ccobj);

EXTERN int asn1Init_IntersectionStatusObject (ASN1T_IntersectionStatusObject* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  IsDolly                                                   */
/*                                                            */
/**************************************************************/
/*
IsDolly ::= BOOLEAN
                     When false indicates a trailer unit

*/
typedef OSBOOL ASN1T_IsDolly;

EXTERN int asn1PE_IsDolly (OSCTXT* pctxt, ASN1T_IsDolly value);

EXTERN int asn1PD_IsDolly (OSCTXT* pctxt, ASN1T_IsDolly* pvalue);

EXTERN int XmlEnc_IsDolly (OSCTXT* pctxt, ASN1T_IsDolly value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IsDolly (OSCTXT* pctxt, ASN1T_IsDolly* pvalue);

EXTERN int asn1JsonEnc_IsDolly (OSCTXT *pctxt, ASN1T_IsDolly *pvalue);

EXTERN int asn1JsonDec_IsDolly (OSCTXT *pctxt, ASN1T_IsDolly *pvalue);

EXTERN int asn1PrtToStrm_IsDolly (OSCTXT *pctxt, 
   const char* name, const ASN1T_IsDolly* pvalue);

EXTERN ASN1T_IsDolly* new_ASN1T_IsDolly (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Iso3833VehicleType                                        */
/*                                                            */
/**************************************************************/
/*
Iso3833VehicleType ::= INTEGER (0..100)
*/
typedef OSUINT8 ASN1T_Iso3833VehicleType;

EXTERN int asn1PE_Iso3833VehicleType (OSCTXT* pctxt, ASN1T_Iso3833VehicleType value);

EXTERN int asn1PD_Iso3833VehicleType (OSCTXT* pctxt, ASN1T_Iso3833VehicleType* pvalue);

EXTERN int XmlEnc_Iso3833VehicleType (OSCTXT* pctxt, 
   ASN1T_Iso3833VehicleType value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Iso3833VehicleType (OSCTXT* pctxt, 
   ASN1T_Iso3833VehicleType* pvalue);

EXTERN int asn1JsonEnc_Iso3833VehicleType (OSCTXT *pctxt, ASN1T_Iso3833VehicleType *pvalue);

EXTERN int asn1JsonDec_Iso3833VehicleType (OSCTXT *pctxt, ASN1T_Iso3833VehicleType *pvalue);

EXTERN int asn1PrtToStrm_Iso3833VehicleType (OSCTXT *pctxt, 
   const char* name, const ASN1T_Iso3833VehicleType* pvalue);

EXTERN ASN1T_Iso3833VehicleType* 
   new_ASN1T_Iso3833VehicleType (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ITIStextPhrase                                            */
/*                                                            */
/**************************************************************/
/*
ITIStextPhrase ::= IA5String (SIZE (1..16))
*/
typedef const char* ASN1T_ITIStextPhrase;

EXTERN int asn1PE_ITIStextPhrase (OSCTXT* pctxt, ASN1T_ITIStextPhrase value);

EXTERN int asn1PD_ITIStextPhrase (OSCTXT* pctxt, ASN1T_ITIStextPhrase* pvalue);

EXTERN int XmlEnc_ITIStextPhrase (OSCTXT* pctxt, ASN1T_ITIStextPhrase value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ITIStextPhrase (OSCTXT* pctxt, ASN1T_ITIStextPhrase* pvalue)
   ;

EXTERN int asn1JsonEnc_ITIStextPhrase (OSCTXT *pctxt, ASN1T_ITIStextPhrase value);

EXTERN int asn1JsonDec_ITIStextPhrase (OSCTXT *pctxt, ASN1T_ITIStextPhrase *pvalue);

EXTERN int asn1PrtToStrm_ITIStextPhrase (OSCTXT *pctxt, 
   const char* name, const ASN1T_ITIStextPhrase pvalue);

EXTERN void asn1Free_ITIStextPhrase (OSCTXT *pctxt, ASN1T_ITIStextPhrase pvalue);

/**************************************************************/
/*                                                            */
/*  AxleLocation                                              */
/*                                                            */
/**************************************************************/
/*
AxleLocation ::= INTEGER (0..255)
*/
typedef OSUINT8 ASN1T_AxleLocation;

EXTERN int asn1PE_AxleLocation (OSCTXT* pctxt, ASN1T_AxleLocation value);

EXTERN int asn1PD_AxleLocation (OSCTXT* pctxt, ASN1T_AxleLocation* pvalue);

EXTERN int XmlEnc_AxleLocation (OSCTXT* pctxt, ASN1T_AxleLocation value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AxleLocation (OSCTXT* pctxt, ASN1T_AxleLocation* pvalue);

EXTERN int asn1JsonEnc_AxleLocation (OSCTXT *pctxt, ASN1T_AxleLocation *pvalue);

EXTERN int asn1JsonDec_AxleLocation (OSCTXT *pctxt, ASN1T_AxleLocation *pvalue);

EXTERN int asn1PrtToStrm_AxleLocation (OSCTXT *pctxt, 
   const char* name, const ASN1T_AxleLocation* pvalue);

EXTERN ASN1T_AxleLocation* new_ASN1T_AxleLocation (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  AxleWeight                                                */
/*                                                            */
/**************************************************************/
/*
AxleWeight ::= INTEGER (0..64255)
*/
typedef OSUINT16 ASN1T_AxleWeight;

EXTERN int asn1PE_AxleWeight (OSCTXT* pctxt, ASN1T_AxleWeight value);

EXTERN int asn1PD_AxleWeight (OSCTXT* pctxt, ASN1T_AxleWeight* pvalue);

EXTERN int XmlEnc_AxleWeight (OSCTXT* pctxt, ASN1T_AxleWeight value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AxleWeight (OSCTXT* pctxt, ASN1T_AxleWeight* pvalue);

EXTERN int asn1JsonEnc_AxleWeight (OSCTXT *pctxt, ASN1T_AxleWeight *pvalue);

EXTERN int asn1JsonDec_AxleWeight (OSCTXT *pctxt, ASN1T_AxleWeight *pvalue);

EXTERN int asn1PrtToStrm_AxleWeight (OSCTXT *pctxt, 
   const char* name, const ASN1T_AxleWeight* pvalue);

EXTERN ASN1T_AxleWeight* new_ASN1T_AxleWeight (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  CargoWeight                                               */
/*                                                            */
/**************************************************************/
/*
CargoWeight ::= INTEGER (0..64255)
*/
typedef OSUINT16 ASN1T_CargoWeight;

EXTERN int asn1PE_CargoWeight (OSCTXT* pctxt, ASN1T_CargoWeight value);

EXTERN int asn1PD_CargoWeight (OSCTXT* pctxt, ASN1T_CargoWeight* pvalue);

EXTERN int XmlEnc_CargoWeight (OSCTXT* pctxt, ASN1T_CargoWeight value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CargoWeight (OSCTXT* pctxt, ASN1T_CargoWeight* pvalue);

EXTERN int asn1JsonEnc_CargoWeight (OSCTXT *pctxt, ASN1T_CargoWeight *pvalue);

EXTERN int asn1JsonDec_CargoWeight (OSCTXT *pctxt, ASN1T_CargoWeight *pvalue);

EXTERN int asn1PrtToStrm_CargoWeight (OSCTXT *pctxt, 
   const char* name, const ASN1T_CargoWeight* pvalue);

EXTERN ASN1T_CargoWeight* new_ASN1T_CargoWeight (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DriveAxleLiftAirPressure                                  */
/*                                                            */
/**************************************************************/
/*
DriveAxleLiftAirPressure ::= INTEGER (0..1000)
*/
typedef OSUINT16 ASN1T_DriveAxleLiftAirPressure;

EXTERN int asn1PE_DriveAxleLiftAirPressure (OSCTXT* pctxt, ASN1T_DriveAxleLiftAirPressure value);

EXTERN int asn1PD_DriveAxleLiftAirPressure (OSCTXT* pctxt, ASN1T_DriveAxleLiftAirPressure* pvalue);

EXTERN int XmlEnc_DriveAxleLiftAirPressure (OSCTXT* pctxt, 
   ASN1T_DriveAxleLiftAirPressure value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DriveAxleLiftAirPressure (OSCTXT* pctxt, 
   ASN1T_DriveAxleLiftAirPressure* pvalue);

EXTERN int asn1JsonEnc_DriveAxleLiftAirPressure (OSCTXT *pctxt, ASN1T_DriveAxleLiftAirPressure *pvalue);

EXTERN int asn1JsonDec_DriveAxleLiftAirPressure (OSCTXT *pctxt, ASN1T_DriveAxleLiftAirPressure *pvalue);

EXTERN int asn1PrtToStrm_DriveAxleLiftAirPressure (OSCTXT *pctxt, 
   const char* name, const ASN1T_DriveAxleLiftAirPressure* pvalue);

EXTERN ASN1T_DriveAxleLiftAirPressure* 
   new_ASN1T_DriveAxleLiftAirPressure (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DriveAxleLocation                                         */
/*                                                            */
/**************************************************************/
/*
DriveAxleLocation ::= INTEGER (0..255)
*/
typedef OSUINT8 ASN1T_DriveAxleLocation;

EXTERN int asn1PE_DriveAxleLocation (OSCTXT* pctxt, ASN1T_DriveAxleLocation value);

EXTERN int asn1PD_DriveAxleLocation (OSCTXT* pctxt, ASN1T_DriveAxleLocation* pvalue);

EXTERN int XmlEnc_DriveAxleLocation (OSCTXT* pctxt, 
   ASN1T_DriveAxleLocation value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DriveAxleLocation (OSCTXT* pctxt, 
   ASN1T_DriveAxleLocation* pvalue);

EXTERN int asn1JsonEnc_DriveAxleLocation (OSCTXT *pctxt, ASN1T_DriveAxleLocation *pvalue);

EXTERN int asn1JsonDec_DriveAxleLocation (OSCTXT *pctxt, ASN1T_DriveAxleLocation *pvalue);

EXTERN int asn1PrtToStrm_DriveAxleLocation (OSCTXT *pctxt, 
   const char* name, const ASN1T_DriveAxleLocation* pvalue);

EXTERN ASN1T_DriveAxleLocation* new_ASN1T_DriveAxleLocation (ASN1CType& ccobj)
   ;

/**************************************************************/
/*                                                            */
/*  DriveAxleLubePressure                                     */
/*                                                            */
/**************************************************************/
/*
DriveAxleLubePressure ::= INTEGER (0..250)
*/
typedef OSUINT8 ASN1T_DriveAxleLubePressure;

EXTERN int asn1PE_DriveAxleLubePressure (OSCTXT* pctxt, ASN1T_DriveAxleLubePressure value);

EXTERN int asn1PD_DriveAxleLubePressure (OSCTXT* pctxt, ASN1T_DriveAxleLubePressure* pvalue);

EXTERN int XmlEnc_DriveAxleLubePressure (OSCTXT* pctxt, 
   ASN1T_DriveAxleLubePressure value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DriveAxleLubePressure (OSCTXT* pctxt, 
   ASN1T_DriveAxleLubePressure* pvalue);

EXTERN int asn1JsonEnc_DriveAxleLubePressure (OSCTXT *pctxt, ASN1T_DriveAxleLubePressure *pvalue);

EXTERN int asn1JsonDec_DriveAxleLubePressure (OSCTXT *pctxt, ASN1T_DriveAxleLubePressure *pvalue);

EXTERN int asn1PrtToStrm_DriveAxleLubePressure (OSCTXT *pctxt, 
   const char* name, const ASN1T_DriveAxleLubePressure* pvalue);

EXTERN ASN1T_DriveAxleLubePressure* 
   new_ASN1T_DriveAxleLubePressure (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DriveAxleTemperature                                      */
/*                                                            */
/**************************************************************/
/*
DriveAxleTemperature ::= INTEGER (-40..210)
*/
typedef OSINT16 ASN1T_DriveAxleTemperature;

EXTERN int asn1PE_DriveAxleTemperature (OSCTXT* pctxt, ASN1T_DriveAxleTemperature value);

EXTERN int asn1PD_DriveAxleTemperature (OSCTXT* pctxt, ASN1T_DriveAxleTemperature* pvalue);

EXTERN int XmlEnc_DriveAxleTemperature (OSCTXT* pctxt, 
   ASN1T_DriveAxleTemperature value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DriveAxleTemperature (OSCTXT* pctxt, 
   ASN1T_DriveAxleTemperature* pvalue);

EXTERN int asn1JsonEnc_DriveAxleTemperature (OSCTXT *pctxt, ASN1T_DriveAxleTemperature *pvalue);

EXTERN int asn1JsonDec_DriveAxleTemperature (OSCTXT *pctxt, ASN1T_DriveAxleTemperature *pvalue);

EXTERN int asn1PrtToStrm_DriveAxleTemperature (OSCTXT *pctxt, 
   const char* name, const ASN1T_DriveAxleTemperature* pvalue);

EXTERN ASN1T_DriveAxleTemperature* 
   new_ASN1T_DriveAxleTemperature (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SteeringAxleLubePressure                                  */
/*                                                            */
/**************************************************************/
/*
SteeringAxleLubePressure ::= INTEGER (0..250)
*/
typedef OSUINT8 ASN1T_SteeringAxleLubePressure;

EXTERN int asn1PE_SteeringAxleLubePressure (OSCTXT* pctxt, ASN1T_SteeringAxleLubePressure value);

EXTERN int asn1PD_SteeringAxleLubePressure (OSCTXT* pctxt, ASN1T_SteeringAxleLubePressure* pvalue);

EXTERN int XmlEnc_SteeringAxleLubePressure (OSCTXT* pctxt, 
   ASN1T_SteeringAxleLubePressure value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SteeringAxleLubePressure (OSCTXT* pctxt, 
   ASN1T_SteeringAxleLubePressure* pvalue);

EXTERN int asn1JsonEnc_SteeringAxleLubePressure (OSCTXT *pctxt, ASN1T_SteeringAxleLubePressure *pvalue);

EXTERN int asn1JsonDec_SteeringAxleLubePressure (OSCTXT *pctxt, ASN1T_SteeringAxleLubePressure *pvalue);

EXTERN int asn1PrtToStrm_SteeringAxleLubePressure (OSCTXT *pctxt, 
   const char* name, const ASN1T_SteeringAxleLubePressure* pvalue);

EXTERN ASN1T_SteeringAxleLubePressure* 
   new_ASN1T_SteeringAxleLubePressure (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SteeringAxleTemperature                                   */
/*                                                            */
/**************************************************************/
/*
SteeringAxleTemperature ::= INTEGER (-40..210)
*/
typedef OSINT16 ASN1T_SteeringAxleTemperature;

EXTERN int asn1PE_SteeringAxleTemperature (OSCTXT* pctxt, ASN1T_SteeringAxleTemperature value);

EXTERN int asn1PD_SteeringAxleTemperature (OSCTXT* pctxt, ASN1T_SteeringAxleTemperature* pvalue);

EXTERN int XmlEnc_SteeringAxleTemperature (OSCTXT* pctxt, 
   ASN1T_SteeringAxleTemperature value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SteeringAxleTemperature (OSCTXT* pctxt, 
   ASN1T_SteeringAxleTemperature* pvalue);

EXTERN int asn1JsonEnc_SteeringAxleTemperature (OSCTXT *pctxt, ASN1T_SteeringAxleTemperature *pvalue);

EXTERN int asn1JsonDec_SteeringAxleTemperature (OSCTXT *pctxt, ASN1T_SteeringAxleTemperature *pvalue);

EXTERN int asn1PrtToStrm_SteeringAxleTemperature (OSCTXT *pctxt, 
   const char* name, const ASN1T_SteeringAxleTemperature* pvalue);

EXTERN ASN1T_SteeringAxleTemperature* 
   new_ASN1T_SteeringAxleTemperature (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TireLeakageRate                                           */
/*                                                            */
/**************************************************************/
/*
TireLeakageRate ::= INTEGER (0..64255)
*/
typedef OSUINT16 ASN1T_TireLeakageRate;

EXTERN int asn1PE_TireLeakageRate (OSCTXT* pctxt, ASN1T_TireLeakageRate value);

EXTERN int asn1PD_TireLeakageRate (OSCTXT* pctxt, ASN1T_TireLeakageRate* pvalue);

EXTERN int XmlEnc_TireLeakageRate (OSCTXT* pctxt, ASN1T_TireLeakageRate value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TireLeakageRate (OSCTXT* pctxt, ASN1T_TireLeakageRate* pvalue
   );

EXTERN int asn1JsonEnc_TireLeakageRate (OSCTXT *pctxt, ASN1T_TireLeakageRate *pvalue);

EXTERN int asn1JsonDec_TireLeakageRate (OSCTXT *pctxt, ASN1T_TireLeakageRate *pvalue);

EXTERN int asn1PrtToStrm_TireLeakageRate (OSCTXT *pctxt, 
   const char* name, const ASN1T_TireLeakageRate* pvalue);

EXTERN ASN1T_TireLeakageRate* new_ASN1T_TireLeakageRate (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TireLocation                                              */
/*                                                            */
/**************************************************************/
/*
TireLocation ::= INTEGER (0..255)
*/
typedef OSUINT8 ASN1T_TireLocation;

EXTERN int asn1PE_TireLocation (OSCTXT* pctxt, ASN1T_TireLocation value);

EXTERN int asn1PD_TireLocation (OSCTXT* pctxt, ASN1T_TireLocation* pvalue);

EXTERN int XmlEnc_TireLocation (OSCTXT* pctxt, ASN1T_TireLocation value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TireLocation (OSCTXT* pctxt, ASN1T_TireLocation* pvalue);

EXTERN int asn1JsonEnc_TireLocation (OSCTXT *pctxt, ASN1T_TireLocation *pvalue);

EXTERN int asn1JsonDec_TireLocation (OSCTXT *pctxt, ASN1T_TireLocation *pvalue);

EXTERN int asn1PrtToStrm_TireLocation (OSCTXT *pctxt, 
   const char* name, const ASN1T_TireLocation* pvalue);

EXTERN ASN1T_TireLocation* new_ASN1T_TireLocation (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TirePressureThresholdDetection                            */
/*                                                            */
/**************************************************************/
/*
TirePressureThresholdDetection ::= ENUMERATED { noData(0), overPressure(1), noWarningPressure(2), underPressure(3), extremeUnderPressure(4), undefined(5), errorIndicator(6), notAvailable(7) }
       Encoded as a 3 bit value

*/
struct EXTERN TirePressureThresholdDetection {
   enum Root {
      noData = 0,
      overPressure = 1,
      noWarningPressure = 2,
      underPressure = 3,
      extremeUnderPressure = 4,
      undefined = 5,
      errorIndicator = 6,
      notAvailable = 7
   } ;
} ;

typedef OSUINT32 ASN1T_TirePressureThresholdDetection;

EXTERN int asn1PE_TirePressureThresholdDetection (OSCTXT* pctxt, ASN1T_TirePressureThresholdDetection value);

EXTERN int asn1PD_TirePressureThresholdDetection (OSCTXT* pctxt, ASN1T_TirePressureThresholdDetection* pvalue);

EXTERN int XmlEnc_TirePressureThresholdDetection (OSCTXT* pctxt, 
   ASN1T_TirePressureThresholdDetection value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TirePressureThresholdDetection (OSCTXT* pctxt, 
   ASN1T_TirePressureThresholdDetection* pvalue);

EXTERN int asn1JsonEnc_TirePressureThresholdDetection (OSCTXT *pctxt, ASN1T_TirePressureThresholdDetection *pvalue);

EXTERN int asn1JsonDec_TirePressureThresholdDetection (OSCTXT *pctxt, ASN1T_TirePressureThresholdDetection *pvalue);

EXTERN int asn1PrtToStrm_TirePressureThresholdDetection (OSCTXT *pctxt, 
   const char* name, const ASN1T_TirePressureThresholdDetection* pvalue);

EXTERN ASN1T_TirePressureThresholdDetection* 
   new_ASN1T_TirePressureThresholdDetection (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_TirePressureThresholdDetection_ENUMTAB[];
#define ASN1T_TirePressureThresholdDetection_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_TirePressureThresholdDetection_ToString (OSINT32 value);

EXTERN int ASN1T_TirePressureThresholdDetection_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_TirePressureThresholdDetection* pvalue);

EXTERN int ASN1T_TirePressureThresholdDetection_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_TirePressureThresholdDetection* pvalue);

/**************************************************************/
/*                                                            */
/*  TirePressure                                              */
/*                                                            */
/**************************************************************/
/*
TirePressure ::= INTEGER (0..250)
*/
typedef OSUINT8 ASN1T_TirePressure;

EXTERN int asn1PE_TirePressure (OSCTXT* pctxt, ASN1T_TirePressure value);

EXTERN int asn1PD_TirePressure (OSCTXT* pctxt, ASN1T_TirePressure* pvalue);

EXTERN int XmlEnc_TirePressure (OSCTXT* pctxt, ASN1T_TirePressure value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TirePressure (OSCTXT* pctxt, ASN1T_TirePressure* pvalue);

EXTERN int asn1JsonEnc_TirePressure (OSCTXT *pctxt, ASN1T_TirePressure *pvalue);

EXTERN int asn1JsonDec_TirePressure (OSCTXT *pctxt, ASN1T_TirePressure *pvalue);

EXTERN int asn1PrtToStrm_TirePressure (OSCTXT *pctxt, 
   const char* name, const ASN1T_TirePressure* pvalue);

EXTERN ASN1T_TirePressure* new_ASN1T_TirePressure (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TireTemp                                                  */
/*                                                            */
/**************************************************************/
/*
TireTemp ::= INTEGER (-8736..55519)
*/
typedef OSINT32 ASN1T_TireTemp;

EXTERN int asn1PE_TireTemp (OSCTXT* pctxt, ASN1T_TireTemp value);

EXTERN int asn1PD_TireTemp (OSCTXT* pctxt, ASN1T_TireTemp* pvalue);

EXTERN int XmlEnc_TireTemp (OSCTXT* pctxt, ASN1T_TireTemp value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TireTemp (OSCTXT* pctxt, ASN1T_TireTemp* pvalue);

EXTERN int asn1JsonEnc_TireTemp (OSCTXT *pctxt, ASN1T_TireTemp *pvalue);

EXTERN int asn1JsonDec_TireTemp (OSCTXT *pctxt, ASN1T_TireTemp *pvalue);

EXTERN int asn1PrtToStrm_TireTemp (OSCTXT *pctxt, 
   const char* name, const ASN1T_TireTemp* pvalue);

EXTERN ASN1T_TireTemp* new_ASN1T_TireTemp (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TrailerWeight                                             */
/*                                                            */
/**************************************************************/
/*
TrailerWeight ::= INTEGER (0..64255)
*/
typedef OSUINT16 ASN1T_TrailerWeight;

EXTERN int asn1PE_TrailerWeight (OSCTXT* pctxt, ASN1T_TrailerWeight value);

EXTERN int asn1PD_TrailerWeight (OSCTXT* pctxt, ASN1T_TrailerWeight* pvalue);

EXTERN int XmlEnc_TrailerWeight (OSCTXT* pctxt, ASN1T_TrailerWeight value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerWeight (OSCTXT* pctxt, ASN1T_TrailerWeight* pvalue);

EXTERN int asn1JsonEnc_TrailerWeight (OSCTXT *pctxt, ASN1T_TrailerWeight *pvalue);

EXTERN int asn1JsonDec_TrailerWeight (OSCTXT *pctxt, ASN1T_TrailerWeight *pvalue);

EXTERN int asn1PrtToStrm_TrailerWeight (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerWeight* pvalue);

EXTERN ASN1T_TrailerWeight* new_ASN1T_TrailerWeight (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  WheelEndElectFault                                        */
/*                                                            */
/**************************************************************/
/*
WheelEndElectFault ::= ENUMERATED { isOk(0), isNotDefined(1), isError(2), isNotSupported(3) }
*/
struct EXTERN WheelEndElectFault {
   enum Root {
      isOk = 0,
      isNotDefined = 1,
      isError = 2,
      isNotSupported = 3
   } ;
} ;

typedef OSUINT32 ASN1T_WheelEndElectFault;

EXTERN int asn1PE_WheelEndElectFault (OSCTXT* pctxt, ASN1T_WheelEndElectFault value);

EXTERN int asn1PD_WheelEndElectFault (OSCTXT* pctxt, ASN1T_WheelEndElectFault* pvalue);

EXTERN int XmlEnc_WheelEndElectFault (OSCTXT* pctxt, 
   ASN1T_WheelEndElectFault value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WheelEndElectFault (OSCTXT* pctxt, 
   ASN1T_WheelEndElectFault* pvalue);

EXTERN int asn1JsonEnc_WheelEndElectFault (OSCTXT *pctxt, ASN1T_WheelEndElectFault *pvalue);

EXTERN int asn1JsonDec_WheelEndElectFault (OSCTXT *pctxt, ASN1T_WheelEndElectFault *pvalue);

EXTERN int asn1PrtToStrm_WheelEndElectFault (OSCTXT *pctxt, 
   const char* name, const ASN1T_WheelEndElectFault* pvalue);

EXTERN ASN1T_WheelEndElectFault* 
   new_ASN1T_WheelEndElectFault (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_WheelEndElectFault_ENUMTAB[];
#define ASN1T_WheelEndElectFault_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_WheelEndElectFault_ToString (OSINT32 value);

EXTERN int ASN1T_WheelEndElectFault_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_WheelEndElectFault* pvalue);

EXTERN int ASN1T_WheelEndElectFault_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_WheelEndElectFault* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  WheelSensorStatus                                         */
/*                                                            */
/**************************************************************/
/*
WheelSensorStatus ::= ENUMERATED { off(0), on(1), notDefined(2), notSupported(3) }
*/
struct EXTERN WheelSensorStatus {
   enum Root {
      off = 0,
      on = 1,
      notDefined = 2,
      notSupported = 3
   } ;
} ;

typedef OSUINT32 ASN1T_WheelSensorStatus;

EXTERN int asn1PE_WheelSensorStatus (OSCTXT* pctxt, ASN1T_WheelSensorStatus value);

EXTERN int asn1PD_WheelSensorStatus (OSCTXT* pctxt, ASN1T_WheelSensorStatus* pvalue);

EXTERN int XmlEnc_WheelSensorStatus (OSCTXT* pctxt, 
   ASN1T_WheelSensorStatus value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WheelSensorStatus (OSCTXT* pctxt, 
   ASN1T_WheelSensorStatus* pvalue);

EXTERN int asn1JsonEnc_WheelSensorStatus (OSCTXT *pctxt, ASN1T_WheelSensorStatus *pvalue);

EXTERN int asn1JsonDec_WheelSensorStatus (OSCTXT *pctxt, ASN1T_WheelSensorStatus *pvalue);

EXTERN int asn1PrtToStrm_WheelSensorStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_WheelSensorStatus* pvalue);

EXTERN ASN1T_WheelSensorStatus* new_ASN1T_WheelSensorStatus (ASN1CType& ccobj)
   ;

EXTERN extern const OSEnumItem ASN1T_WheelSensorStatus_ENUMTAB[];
#define ASN1T_WheelSensorStatus_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_WheelSensorStatus_ToString (OSINT32 value);

EXTERN int ASN1T_WheelSensorStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_WheelSensorStatus* pvalue);

EXTERN int ASN1T_WheelSensorStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_WheelSensorStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Barrier                                    */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Barrier ::= BIT STRING  { median-RevocableLane(0), median(1), whiteLineHashing(2), stripedLines(3), doubleStripedLines(4), trafficCones(5), constructionBarrier(6), trafficChannels(7), lowCurbs(8), highCurbs(9) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_Barrier {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_Barrier ()  {}
   ASN1T_LaneAttributes_Barrier (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_Barrier :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Barrier& msgData;
public:
   // named bits
   enum { median_RevocableLane = 0, median = 1, whiteLineHashing = 2, stripedLines = 3, doubleStripedLines = 4, trafficCones = 5, constructionBarrier = 6, trafficChannels = 7, lowCurbs = 8, highCurbs = 9 };

   /**
    * Control class: ASN1C_LaneAttributes_Barrier
    * Data class:    ASN1T_LaneAttributes_Barrier
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Barrier (ASN1T_LaneAttributes_Barrier& data);

   /**
    * Control class: ASN1C_LaneAttributes_Barrier<br/>
    * Data class: ASN1T_LaneAttributes_Barrier<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Barrier (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Barrier& data);

   virtual ~ASN1C_LaneAttributes_Barrier () {}

private:
   ASN1C_LaneAttributes_Barrier& operator= (const ASN1C_LaneAttributes_Barrier&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Barrier (OSCTXT* pctxt, ASN1T_LaneAttributes_Barrier* pvalue);

EXTERN int asn1PD_LaneAttributes_Barrier (OSCTXT* pctxt, ASN1T_LaneAttributes_Barrier* pvalue);

EXTERN int XmlEnc_LaneAttributes_Barrier (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Barrier* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Barrier (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Barrier* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Barrier (OSCTXT *pctxt, ASN1T_LaneAttributes_Barrier *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Barrier (OSCTXT *pctxt, ASN1T_LaneAttributes_Barrier *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Barrier (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Barrier* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Barrier_NAMEDBITTAB[11];

EXTERN ASN1T_LaneAttributes_Barrier* 
   new_ASN1T_LaneAttributes_Barrier (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Barrier (ASN1T_LaneAttributes_Barrier* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Bike                                       */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Bike ::= BIT STRING  { bikeRevocableLane(0), pedestrianUseAllowed(1), isBikeFlyOverLane(2), fixedCycleTime(3), biDirectionalCycleTimes(4), isolatedByBarrier(5), unsignalizedSegmentsPresent(6) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_Bike {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_Bike ()  {}
   ASN1T_LaneAttributes_Bike (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_Bike :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Bike& msgData;
public:
   // named bits
   enum { bikeRevocableLane = 0, pedestrianUseAllowed = 1, isBikeFlyOverLane = 2, fixedCycleTime = 3, biDirectionalCycleTimes = 4, isolatedByBarrier = 5, unsignalizedSegmentsPresent = 6 };

   /**
    * Control class: ASN1C_LaneAttributes_Bike
    * Data class:    ASN1T_LaneAttributes_Bike
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Bike (ASN1T_LaneAttributes_Bike& data);

   /**
    * Control class: ASN1C_LaneAttributes_Bike<br/>
    * Data class: ASN1T_LaneAttributes_Bike<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Bike (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Bike& data);

   virtual ~ASN1C_LaneAttributes_Bike () {}

private:
   ASN1C_LaneAttributes_Bike& operator= (const ASN1C_LaneAttributes_Bike&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Bike (OSCTXT* pctxt, ASN1T_LaneAttributes_Bike* pvalue);

EXTERN int asn1PD_LaneAttributes_Bike (OSCTXT* pctxt, ASN1T_LaneAttributes_Bike* pvalue);

EXTERN int XmlEnc_LaneAttributes_Bike (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Bike* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Bike (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Bike* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Bike (OSCTXT *pctxt, ASN1T_LaneAttributes_Bike *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Bike (OSCTXT *pctxt, ASN1T_LaneAttributes_Bike *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Bike (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Bike* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Bike_NAMEDBITTAB[8];

EXTERN ASN1T_LaneAttributes_Bike* 
   new_ASN1T_LaneAttributes_Bike (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Bike (ASN1T_LaneAttributes_Bike* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Crosswalk                                  */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Crosswalk ::= BIT STRING  { crosswalkRevocableLane(0), bicyleUseAllowed(1), isXwalkFlyOverLane(2), fixedCycleTime(3), biDirectionalCycleTimes(4), hasPushToWalkButton(5), audioSupport(6), rfSignalRequestPresent(7), unsignalizedSegmentsPresent(8) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_Crosswalk {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_Crosswalk ()  {}
   ASN1T_LaneAttributes_Crosswalk (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_Crosswalk :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Crosswalk& msgData;
public:
   // named bits
   enum { crosswalkRevocableLane = 0, bicyleUseAllowed = 1, isXwalkFlyOverLane = 2, fixedCycleTime = 3, biDirectionalCycleTimes = 4, hasPushToWalkButton = 5, audioSupport = 6, rfSignalRequestPresent = 7, unsignalizedSegmentsPresent = 8 };

   /**
    * Control class: ASN1C_LaneAttributes_Crosswalk
    * Data class:    ASN1T_LaneAttributes_Crosswalk
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Crosswalk (ASN1T_LaneAttributes_Crosswalk& data);

   /**
    * Control class: ASN1C_LaneAttributes_Crosswalk<br/>
    * Data class: ASN1T_LaneAttributes_Crosswalk<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Crosswalk (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Crosswalk& data);

   virtual ~ASN1C_LaneAttributes_Crosswalk () {}

private:
   ASN1C_LaneAttributes_Crosswalk& operator= (const ASN1C_LaneAttributes_Crosswalk&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Crosswalk (OSCTXT* pctxt, ASN1T_LaneAttributes_Crosswalk* pvalue);

EXTERN int asn1PD_LaneAttributes_Crosswalk (OSCTXT* pctxt, ASN1T_LaneAttributes_Crosswalk* pvalue);

EXTERN int XmlEnc_LaneAttributes_Crosswalk (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Crosswalk* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Crosswalk (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Crosswalk* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Crosswalk (OSCTXT *pctxt, ASN1T_LaneAttributes_Crosswalk *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Crosswalk (OSCTXT *pctxt, ASN1T_LaneAttributes_Crosswalk *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Crosswalk (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Crosswalk* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Crosswalk_NAMEDBITTAB[10];

EXTERN ASN1T_LaneAttributes_Crosswalk* 
   new_ASN1T_LaneAttributes_Crosswalk (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Crosswalk (ASN1T_LaneAttributes_Crosswalk* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Parking                                    */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Parking ::= BIT STRING  { parkingRevocableLane(0), parallelParkingInUse(1), headInParkingInUse(2), doNotParkZone(3), parkingForBusUse(4), parkingForTaxiUse(5), noPublicParkingUse(6) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_Parking {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_Parking ()  {}
   ASN1T_LaneAttributes_Parking (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_Parking :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Parking& msgData;
public:
   // named bits
   enum { parkingRevocableLane = 0, parallelParkingInUse = 1, headInParkingInUse = 2, doNotParkZone = 3, parkingForBusUse = 4, parkingForTaxiUse = 5, noPublicParkingUse = 6 };

   /**
    * Control class: ASN1C_LaneAttributes_Parking
    * Data class:    ASN1T_LaneAttributes_Parking
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Parking (ASN1T_LaneAttributes_Parking& data);

   /**
    * Control class: ASN1C_LaneAttributes_Parking<br/>
    * Data class: ASN1T_LaneAttributes_Parking<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Parking (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Parking& data);

   virtual ~ASN1C_LaneAttributes_Parking () {}

private:
   ASN1C_LaneAttributes_Parking& operator= (const ASN1C_LaneAttributes_Parking&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Parking (OSCTXT* pctxt, ASN1T_LaneAttributes_Parking* pvalue);

EXTERN int asn1PD_LaneAttributes_Parking (OSCTXT* pctxt, ASN1T_LaneAttributes_Parking* pvalue);

EXTERN int XmlEnc_LaneAttributes_Parking (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Parking* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Parking (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Parking* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Parking (OSCTXT *pctxt, ASN1T_LaneAttributes_Parking *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Parking (OSCTXT *pctxt, ASN1T_LaneAttributes_Parking *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Parking (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Parking* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Parking_NAMEDBITTAB[8];

EXTERN ASN1T_LaneAttributes_Parking* 
   new_ASN1T_LaneAttributes_Parking (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Parking (ASN1T_LaneAttributes_Parking* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Sidewalk                                   */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Sidewalk ::= BIT STRING  { sidewalk-RevocableLane(0), bicyleUseAllowed(1), isSidewalkFlyOverLane(2), walkBikes(3) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_Sidewalk {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_Sidewalk ()  {}
   ASN1T_LaneAttributes_Sidewalk (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_Sidewalk :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Sidewalk& msgData;
public:
   // named bits
   enum { sidewalk_RevocableLane = 0, bicyleUseAllowed = 1, isSidewalkFlyOverLane = 2, walkBikes = 3 };

   /**
    * Control class: ASN1C_LaneAttributes_Sidewalk
    * Data class:    ASN1T_LaneAttributes_Sidewalk
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Sidewalk (ASN1T_LaneAttributes_Sidewalk& data);

   /**
    * Control class: ASN1C_LaneAttributes_Sidewalk<br/>
    * Data class: ASN1T_LaneAttributes_Sidewalk<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Sidewalk (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Sidewalk& data);

   virtual ~ASN1C_LaneAttributes_Sidewalk () {}

private:
   ASN1C_LaneAttributes_Sidewalk& operator= (const ASN1C_LaneAttributes_Sidewalk&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Sidewalk (OSCTXT* pctxt, ASN1T_LaneAttributes_Sidewalk* pvalue);

EXTERN int asn1PD_LaneAttributes_Sidewalk (OSCTXT* pctxt, ASN1T_LaneAttributes_Sidewalk* pvalue);

EXTERN int XmlEnc_LaneAttributes_Sidewalk (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Sidewalk* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Sidewalk (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Sidewalk* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Sidewalk (OSCTXT *pctxt, ASN1T_LaneAttributes_Sidewalk *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Sidewalk (OSCTXT *pctxt, ASN1T_LaneAttributes_Sidewalk *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Sidewalk (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Sidewalk* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Sidewalk_NAMEDBITTAB[5];

EXTERN ASN1T_LaneAttributes_Sidewalk* 
   new_ASN1T_LaneAttributes_Sidewalk (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Sidewalk (ASN1T_LaneAttributes_Sidewalk* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Striping                                   */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Striping ::= BIT STRING  { stripeToConnectingLanesRevocableLane(0), stripeDrawOnLeft(1), stripeDrawOnRight(2), stripeToConnectingLanesLeft(3), stripeToConnectingLanesRight(4), stripeToConnectingLanesAhead(5) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_Striping {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_Striping ()  {}
   ASN1T_LaneAttributes_Striping (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_Striping :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Striping& msgData;
public:
   // named bits
   enum { stripeToConnectingLanesRevocableLane = 0, stripeDrawOnLeft = 1, stripeDrawOnRight = 2, stripeToConnectingLanesLeft = 3, stripeToConnectingLanesRight = 4, stripeToConnectingLanesAhead = 5 };

   /**
    * Control class: ASN1C_LaneAttributes_Striping
    * Data class:    ASN1T_LaneAttributes_Striping
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Striping (ASN1T_LaneAttributes_Striping& data);

   /**
    * Control class: ASN1C_LaneAttributes_Striping<br/>
    * Data class: ASN1T_LaneAttributes_Striping<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Striping (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Striping& data);

   virtual ~ASN1C_LaneAttributes_Striping () {}

private:
   ASN1C_LaneAttributes_Striping& operator= (const ASN1C_LaneAttributes_Striping&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Striping (OSCTXT* pctxt, ASN1T_LaneAttributes_Striping* pvalue);

EXTERN int asn1PD_LaneAttributes_Striping (OSCTXT* pctxt, ASN1T_LaneAttributes_Striping* pvalue);

EXTERN int XmlEnc_LaneAttributes_Striping (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Striping* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Striping (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Striping* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Striping (OSCTXT *pctxt, ASN1T_LaneAttributes_Striping *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Striping (OSCTXT *pctxt, ASN1T_LaneAttributes_Striping *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Striping (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Striping* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Striping_NAMEDBITTAB[7];

EXTERN ASN1T_LaneAttributes_Striping* 
   new_ASN1T_LaneAttributes_Striping (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Striping (ASN1T_LaneAttributes_Striping* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_TrackedVehicle                             */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-TrackedVehicle ::= BIT STRING  { spec-RevocableLane(0), spec-commuterRailRoadTrack(1), spec-lightRailRoadTrack(2), spec-heavyRailRoadTrack(3), spec-otherRailType(4) } (SIZE (16))
*/
struct EXTERN ASN1T_LaneAttributes_TrackedVehicle {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneAttributes_TrackedVehicle ()  {}
   ASN1T_LaneAttributes_TrackedVehicle (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneAttributes_TrackedVehicle :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_TrackedVehicle& msgData;
public:
   // named bits
   enum { spec_RevocableLane = 0, spec_commuterRailRoadTrack = 1, spec_lightRailRoadTrack = 2, spec_heavyRailRoadTrack = 3, spec_otherRailType = 4 };

   /**
    * Control class: ASN1C_LaneAttributes_TrackedVehicle
    * Data class:    ASN1T_LaneAttributes_TrackedVehicle
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_TrackedVehicle
       (ASN1T_LaneAttributes_TrackedVehicle& data);

   /**
    * Control class: ASN1C_LaneAttributes_TrackedVehicle<br/>
    * Data class: ASN1T_LaneAttributes_TrackedVehicle<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_TrackedVehicle (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_TrackedVehicle& data);

   virtual ~ASN1C_LaneAttributes_TrackedVehicle () {}

private:
   ASN1C_LaneAttributes_TrackedVehicle& operator= (const ASN1C_LaneAttributes_TrackedVehicle&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_TrackedVehicle (OSCTXT* pctxt, ASN1T_LaneAttributes_TrackedVehicle* pvalue);

EXTERN int asn1PD_LaneAttributes_TrackedVehicle (OSCTXT* pctxt, ASN1T_LaneAttributes_TrackedVehicle* pvalue);

EXTERN int XmlEnc_LaneAttributes_TrackedVehicle (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_TrackedVehicle* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_TrackedVehicle (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_TrackedVehicle* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_TrackedVehicle (OSCTXT *pctxt, ASN1T_LaneAttributes_TrackedVehicle *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_TrackedVehicle (OSCTXT *pctxt, ASN1T_LaneAttributes_TrackedVehicle *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_TrackedVehicle (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_TrackedVehicle* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_TrackedVehicle_NAMEDBITTAB[6];

EXTERN ASN1T_LaneAttributes_TrackedVehicle* 
   new_ASN1T_LaneAttributes_TrackedVehicle (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_TrackedVehicle (
   ASN1T_LaneAttributes_TrackedVehicle* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Vehicle                                    */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Vehicle ::= BIT STRING  { isVehicleRevocableLane(0), isVehicleFlyOverLane(1), hovLaneUseOnly(2), restrictedToBusUse(3), restrictedToTaxiUse(4), restrictedFromPublicUse(5), hasIRbeaconCoverage(6), permissionOnRequest(7) } (SIZE (8, ...))
*/
struct EXTERN ASN1T_LaneAttributes_Vehicle {
   OSUINT8 numbits;
   OSOCTET data[1];
   OSOCTET* extdata;
   // ctors
   ASN1T_LaneAttributes_Vehicle () : numbits(0), extdata(0) {}
} ;

class EXTERN ASN1C_LaneAttributes_Vehicle :
public ASN1CBitStr
{
protected:
   ASN1T_LaneAttributes_Vehicle& msgData;
public:
   // named bits
   enum { isVehicleRevocableLane = 0, isVehicleFlyOverLane = 1, hovLaneUseOnly = 2, restrictedToBusUse = 3, restrictedToTaxiUse = 4, restrictedFromPublicUse = 5, hasIRbeaconCoverage = 6, permissionOnRequest = 7 };

   /**
    * Control class: ASN1C_LaneAttributes_Vehicle
    * Data class:    ASN1T_LaneAttributes_Vehicle
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Vehicle (ASN1T_LaneAttributes_Vehicle& data);

   /**
    * Control class: ASN1C_LaneAttributes_Vehicle<br/>
    * Data class: ASN1T_LaneAttributes_Vehicle<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneAttributes_Vehicle (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneAttributes_Vehicle& data);

   virtual ~ASN1C_LaneAttributes_Vehicle () {}

private:
   ASN1C_LaneAttributes_Vehicle& operator= (const ASN1C_LaneAttributes_Vehicle&) {return *this;}
} ;

EXTERN int asn1PE_LaneAttributes_Vehicle (OSCTXT* pctxt, ASN1T_LaneAttributes_Vehicle* pvalue);

EXTERN int asn1PD_LaneAttributes_Vehicle (OSCTXT* pctxt, ASN1T_LaneAttributes_Vehicle* pvalue);

EXTERN int XmlEnc_LaneAttributes_Vehicle (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Vehicle* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_Vehicle (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_Vehicle* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_Vehicle (OSCTXT *pctxt, ASN1T_LaneAttributes_Vehicle *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_Vehicle (OSCTXT *pctxt, ASN1T_LaneAttributes_Vehicle *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Vehicle (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_Vehicle* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneAttributes_Vehicle_NAMEDBITTAB[9];

EXTERN ASN1T_LaneAttributes_Vehicle* 
   new_ASN1T_LaneAttributes_Vehicle (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_Vehicle (ASN1T_LaneAttributes_Vehicle* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneConnectionID                                          */
/*                                                            */
/**************************************************************/
/*
LaneConnectionID ::= INTEGER (0..255)
*/
typedef OSUINT8 ASN1T_LaneConnectionID;

EXTERN int asn1PE_LaneConnectionID (OSCTXT* pctxt, ASN1T_LaneConnectionID value);

EXTERN int asn1PD_LaneConnectionID (OSCTXT* pctxt, ASN1T_LaneConnectionID* pvalue);

EXTERN int XmlEnc_LaneConnectionID (OSCTXT* pctxt, 
   ASN1T_LaneConnectionID value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneConnectionID (OSCTXT* pctxt, 
   ASN1T_LaneConnectionID* pvalue);

EXTERN int asn1JsonEnc_LaneConnectionID (OSCTXT *pctxt, ASN1T_LaneConnectionID *pvalue);

EXTERN int asn1JsonDec_LaneConnectionID (OSCTXT *pctxt, ASN1T_LaneConnectionID *pvalue);

EXTERN int asn1PrtToStrm_LaneConnectionID (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneConnectionID* pvalue);

EXTERN ASN1T_LaneConnectionID* new_ASN1T_LaneConnectionID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  LaneDirection                                             */
/*                                                            */
/**************************************************************/
/*
LaneDirection ::= BIT STRING  { ingressPath(0), egressPath(1) } (SIZE (2))
*/
struct EXTERN ASN1T_LaneDirection {
   OSOCTET data[1];
   // ctors
   ASN1T_LaneDirection ()  {}
   ASN1T_LaneDirection (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 1, _data, 1);
   }
} ;

class EXTERN ASN1C_LaneDirection :
public ASN1CBitStr
{
protected:
   ASN1T_LaneDirection& msgData;
public:
   // named bits
   enum { ingressPath = 0, egressPath = 1 };

   /**
    * Control class: ASN1C_LaneDirection
    * Data class:    ASN1T_LaneDirection
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneDirection (ASN1T_LaneDirection& data);

   /**
    * Control class: ASN1C_LaneDirection<br/>
    * Data class: ASN1T_LaneDirection<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneDirection (OSRTMessageBufferIF& msgBuf, ASN1T_LaneDirection& data);

   virtual ~ASN1C_LaneDirection () {}

private:
   ASN1C_LaneDirection& operator= (const ASN1C_LaneDirection&) {return *this;}
} ;

EXTERN int asn1PE_LaneDirection (OSCTXT* pctxt, ASN1T_LaneDirection* pvalue);

EXTERN int asn1PD_LaneDirection (OSCTXT* pctxt, ASN1T_LaneDirection* pvalue);

EXTERN int XmlEnc_LaneDirection (OSCTXT* pctxt, ASN1T_LaneDirection* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneDirection (OSCTXT* pctxt, ASN1T_LaneDirection* pvalue);

EXTERN int asn1JsonEnc_LaneDirection (OSCTXT *pctxt, ASN1T_LaneDirection *pvalue);

EXTERN int asn1JsonDec_LaneDirection (OSCTXT *pctxt, ASN1T_LaneDirection *pvalue);

EXTERN int asn1PrtToStrm_LaneDirection (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneDirection* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneDirection_NAMEDBITTAB[3];

EXTERN ASN1T_LaneDirection* new_ASN1T_LaneDirection (ASN1CType& ccobj);

EXTERN int asn1Init_LaneDirection (ASN1T_LaneDirection* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneID                                                    */
/*                                                            */
/**************************************************************/
/*
LaneID ::= INTEGER (0..255)
    the value 0 shall be used when the lane ID is
    not available or not known
    the value 255 is reserved for future use

*/
typedef OSUINT8 ASN1T_LaneID;

EXTERN int asn1PE_LaneID (OSCTXT* pctxt, ASN1T_LaneID value);

EXTERN int asn1PD_LaneID (OSCTXT* pctxt, ASN1T_LaneID* pvalue);

EXTERN int XmlEnc_LaneID (OSCTXT* pctxt, ASN1T_LaneID value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneID (OSCTXT* pctxt, ASN1T_LaneID* pvalue);

EXTERN int asn1JsonEnc_LaneID (OSCTXT *pctxt, ASN1T_LaneID *pvalue);

EXTERN int asn1JsonDec_LaneID (OSCTXT *pctxt, ASN1T_LaneID *pvalue);

EXTERN int asn1PrtToStrm_LaneID (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneID* pvalue);

EXTERN ASN1T_LaneID* new_ASN1T_LaneID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  LaneSharing                                               */
/*                                                            */
/**************************************************************/
/*
LaneSharing ::= BIT STRING  { overlappingLaneDescriptionProvided(0), multipleLanesTreatedAsOneLane(1), otherNonMotorizedTrafficTypes(2), individualMotorizedVehicleTraffic(3), busVehicleTraffic(4), taxiVehicleTraffic(5), pedestriansTraffic(6), cyclistVehicleTraffic(7), trackedVehicleTraffic(8), pedestrianTraffic(9) } (SIZE (10))
     All zeros would indicate 'not shared' and 'not overlapping'

*/
struct EXTERN ASN1T_LaneSharing {
   OSOCTET data[2];
   // ctors
   ASN1T_LaneSharing ()  {}
   ASN1T_LaneSharing (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_LaneSharing :
public ASN1CBitStr
{
protected:
   ASN1T_LaneSharing& msgData;
public:
   // named bits
   enum { overlappingLaneDescriptionProvided = 0, multipleLanesTreatedAsOneLane = 1, otherNonMotorizedTrafficTypes = 2, individualMotorizedVehicleTraffic = 3, busVehicleTraffic = 4, taxiVehicleTraffic = 5, pedestriansTraffic = 6, cyclistVehicleTraffic = 7, trackedVehicleTraffic = 8, pedestrianTraffic = 9 };

   /**
    * Control class: ASN1C_LaneSharing
    * Data class:    ASN1T_LaneSharing
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneSharing (ASN1T_LaneSharing& data);

   /**
    * Control class: ASN1C_LaneSharing<br/>
    * Data class: ASN1T_LaneSharing<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneSharing (OSRTMessageBufferIF& msgBuf, ASN1T_LaneSharing& data);

   virtual ~ASN1C_LaneSharing () {}

private:
   ASN1C_LaneSharing& operator= (const ASN1C_LaneSharing&) {return *this;}
} ;

EXTERN int asn1PE_LaneSharing (OSCTXT* pctxt, ASN1T_LaneSharing* pvalue);

EXTERN int asn1PD_LaneSharing (OSCTXT* pctxt, ASN1T_LaneSharing* pvalue);

EXTERN int XmlEnc_LaneSharing (OSCTXT* pctxt, ASN1T_LaneSharing* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneSharing (OSCTXT* pctxt, ASN1T_LaneSharing* pvalue);

EXTERN int asn1JsonEnc_LaneSharing (OSCTXT *pctxt, ASN1T_LaneSharing *pvalue);

EXTERN int asn1JsonDec_LaneSharing (OSCTXT *pctxt, ASN1T_LaneSharing *pvalue);

EXTERN int asn1PrtToStrm_LaneSharing (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneSharing* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_LaneSharing_NAMEDBITTAB[11];

EXTERN ASN1T_LaneSharing* new_ASN1T_LaneSharing (ASN1CType& ccobj);

EXTERN int asn1Init_LaneSharing (ASN1T_LaneSharing* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneWidth                                                 */
/*                                                            */
/**************************************************************/
/*
LaneWidth ::= INTEGER (0..32767)
                                  units of 1 cm

*/
typedef OSUINT16 ASN1T_LaneWidth;

EXTERN int asn1PE_LaneWidth (OSCTXT* pctxt, ASN1T_LaneWidth value);

EXTERN int asn1PD_LaneWidth (OSCTXT* pctxt, ASN1T_LaneWidth* pvalue);

EXTERN int XmlEnc_LaneWidth (OSCTXT* pctxt, ASN1T_LaneWidth value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneWidth (OSCTXT* pctxt, ASN1T_LaneWidth* pvalue);

EXTERN int asn1JsonEnc_LaneWidth (OSCTXT *pctxt, ASN1T_LaneWidth *pvalue);

EXTERN int asn1JsonDec_LaneWidth (OSCTXT *pctxt, ASN1T_LaneWidth *pvalue);

EXTERN int asn1PrtToStrm_LaneWidth (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneWidth* pvalue);

EXTERN ASN1T_LaneWidth* new_ASN1T_LaneWidth (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Latitude                                                  */
/*                                                            */
/**************************************************************/
/*
Latitude ::= INTEGER (-900000000..900000001)
    LSB = 1/10 micro degree
    Providing a range of plus-minus 90 degrees

*/
typedef OSINT32 ASN1T_Latitude;

EXTERN int asn1PE_Latitude (OSCTXT* pctxt, ASN1T_Latitude value);

EXTERN int asn1PD_Latitude (OSCTXT* pctxt, ASN1T_Latitude* pvalue);

EXTERN int XmlEnc_Latitude (OSCTXT* pctxt, ASN1T_Latitude value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Latitude (OSCTXT* pctxt, ASN1T_Latitude* pvalue);

EXTERN int asn1JsonEnc_Latitude (OSCTXT *pctxt, ASN1T_Latitude *pvalue);

EXTERN int asn1JsonDec_Latitude (OSCTXT *pctxt, ASN1T_Latitude *pvalue);

EXTERN int asn1PrtToStrm_Latitude (OSCTXT *pctxt, 
   const char* name, const ASN1T_Latitude* pvalue);

EXTERN ASN1T_Latitude* new_ASN1T_Latitude (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  LayerID                                                   */
/*                                                            */
/**************************************************************/
/*
LayerID ::= INTEGER (0..100)
*/
typedef OSUINT8 ASN1T_LayerID;

EXTERN int asn1PE_LayerID (OSCTXT* pctxt, ASN1T_LayerID value);

EXTERN int asn1PD_LayerID (OSCTXT* pctxt, ASN1T_LayerID* pvalue);

EXTERN int XmlEnc_LayerID (OSCTXT* pctxt, ASN1T_LayerID value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LayerID (OSCTXT* pctxt, ASN1T_LayerID* pvalue);

EXTERN int asn1JsonEnc_LayerID (OSCTXT *pctxt, ASN1T_LayerID *pvalue);

EXTERN int asn1JsonDec_LayerID (OSCTXT *pctxt, ASN1T_LayerID *pvalue);

EXTERN int asn1PrtToStrm_LayerID (OSCTXT *pctxt, 
   const char* name, const ASN1T_LayerID* pvalue);

EXTERN ASN1T_LayerID* new_ASN1T_LayerID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  LayerType                                                 */
/*                                                            */
/**************************************************************/
/*
LayerType ::= ENUMERATED { none(0), mixedContent(1), generalMapData(2), intersectionData(3), curveData(4), roadwaySectionData(5), parkingAreaData(6), sharedLaneData(7), ... }
*/
struct EXTERN LayerType {
   enum Root {
      none = 0,
      mixedContent = 1,
      generalMapData = 2,
      intersectionData = 3,
      curveData = 4,
      roadwaySectionData = 5,
      parkingAreaData = 6,
      sharedLaneData = 7
   } ;
} ;

typedef OSUINT32 ASN1T_LayerType;

EXTERN int asn1PE_LayerType (OSCTXT* pctxt, ASN1T_LayerType value);

EXTERN int asn1PD_LayerType (OSCTXT* pctxt, ASN1T_LayerType* pvalue);

EXTERN int XmlEnc_LayerType (OSCTXT* pctxt, ASN1T_LayerType value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LayerType (OSCTXT* pctxt, ASN1T_LayerType* pvalue);

EXTERN int asn1JsonEnc_LayerType (OSCTXT *pctxt, ASN1T_LayerType *pvalue);

EXTERN int asn1JsonDec_LayerType (OSCTXT *pctxt, ASN1T_LayerType *pvalue);

EXTERN int asn1PrtToStrm_LayerType (OSCTXT *pctxt, 
   const char* name, const ASN1T_LayerType* pvalue);

EXTERN ASN1T_LayerType* new_ASN1T_LayerType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_LayerType_ENUMTAB[];
#define ASN1T_LayerType_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_LayerType_ToString (OSINT32 value);

EXTERN int ASN1T_LayerType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_LayerType* pvalue);

EXTERN int ASN1T_LayerType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_LayerType* pvalue);

/**************************************************************/
/*                                                            */
/*  LightbarInUse                                             */
/*                                                            */
/**************************************************************/
/*
LightbarInUse ::= ENUMERATED { unavailable(0), notInUse(1), inUse(2), yellowCautionLights(3), schooldBusLights(4), arrowSignsActive(5), slowMovingVehicle(6), freqStops(7) }
*/
struct EXTERN LightbarInUse {
   enum Root {
      unavailable = 0,
      notInUse = 1,
      inUse = 2,
      yellowCautionLights = 3,
      schooldBusLights = 4,
      arrowSignsActive = 5,
      slowMovingVehicle = 6,
      freqStops = 7
   } ;
} ;

typedef OSUINT32 ASN1T_LightbarInUse;

EXTERN int asn1PE_LightbarInUse (OSCTXT* pctxt, ASN1T_LightbarInUse value);

EXTERN int asn1PD_LightbarInUse (OSCTXT* pctxt, ASN1T_LightbarInUse* pvalue);

EXTERN int XmlEnc_LightbarInUse (OSCTXT* pctxt, ASN1T_LightbarInUse value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LightbarInUse (OSCTXT* pctxt, ASN1T_LightbarInUse* pvalue);

EXTERN int asn1JsonEnc_LightbarInUse (OSCTXT *pctxt, ASN1T_LightbarInUse *pvalue);

EXTERN int asn1JsonDec_LightbarInUse (OSCTXT *pctxt, ASN1T_LightbarInUse *pvalue);

EXTERN int asn1PrtToStrm_LightbarInUse (OSCTXT *pctxt, 
   const char* name, const ASN1T_LightbarInUse* pvalue);

EXTERN ASN1T_LightbarInUse* new_ASN1T_LightbarInUse (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_LightbarInUse_ENUMTAB[];
#define ASN1T_LightbarInUse_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_LightbarInUse_ToString (OSINT32 value);

EXTERN int ASN1T_LightbarInUse_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_LightbarInUse* pvalue);

EXTERN int ASN1T_LightbarInUse_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_LightbarInUse* pvalue);

/**************************************************************/
/*                                                            */
/*  Longitude                                                 */
/*                                                            */
/**************************************************************/
/*
Longitude ::= INTEGER (-1799999999..1800000001)
    LSB = 1/10 micro degree
    Providing a range of plus-minus 180 degrees

*/
typedef OSINT32 ASN1T_Longitude;

EXTERN int asn1PE_Longitude (OSCTXT* pctxt, ASN1T_Longitude value);

EXTERN int asn1PD_Longitude (OSCTXT* pctxt, ASN1T_Longitude* pvalue);

EXTERN int XmlEnc_Longitude (OSCTXT* pctxt, ASN1T_Longitude value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Longitude (OSCTXT* pctxt, ASN1T_Longitude* pvalue);

EXTERN int asn1JsonEnc_Longitude (OSCTXT *pctxt, ASN1T_Longitude *pvalue);

EXTERN int asn1JsonDec_Longitude (OSCTXT *pctxt, ASN1T_Longitude *pvalue);

EXTERN int asn1PrtToStrm_Longitude (OSCTXT *pctxt, 
   const char* name, const ASN1T_Longitude* pvalue);

EXTERN ASN1T_Longitude* new_ASN1T_Longitude (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Location_quality                                          */
/*                                                            */
/**************************************************************/
/*
Location-quality ::= ENUMERATED { loc-qual-bt1m(0), loc-qual-bt5m(1), loc-qual-bt12m(2), loc-qual-bt50m(3), loc-qual-bt125m(4), loc-qual-bt500m(5), loc-qual-bt1250m(6), loc-qual-unknown(7) }
        3 bits, appends with loc-tech to make one octet (0..7)

*/
struct EXTERN Location_quality {
   enum Root {
      loc_qual_bt1m = 0,
      loc_qual_bt5m = 1,
      loc_qual_bt12m = 2,
      loc_qual_bt50m = 3,
      loc_qual_bt125m = 4,
      loc_qual_bt500m = 5,
      loc_qual_bt1250m = 6,
      loc_qual_unknown = 7
   } ;
} ;

typedef OSUINT32 ASN1T_Location_quality;

class EXTERN ASN1C_Location_quality :
public ASN1CType
{
protected:
   ASN1T_Location_quality& msgData;
public:
   /**
    * Control class: ASN1C_Location_quality
    * Data class:    ASN1T_Location_quality
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_Location_quality (ASN1T_Location_quality& data);

   /**
    * Control class: ASN1C_Location_quality<br/>
    * Data class: ASN1T_Location_quality<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_Location_quality (OSRTMessageBufferIF& msgBuf
      , ASN1T_Location_quality& data);

   virtual ~ASN1C_Location_quality () {}

   /**
    * Data class: ASN1T_Location_quality<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_Location_quality.
    */
   inline ASN1T_Location_quality& getData () { return msgData; }

   /**
    * Data class: ASN1T_Location_quality<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_Location_quality.
    */
   inline const ASN1T_Location_quality& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             Location_quality will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "Location_quality");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_Location_quality& operator= (const ASN1C_Location_quality&) {return *this;}
} ;

EXTERN int asn1PE_Location_quality (OSCTXT* pctxt, ASN1T_Location_quality value);

EXTERN int asn1PD_Location_quality (OSCTXT* pctxt, ASN1T_Location_quality* pvalue);

EXTERN int XmlEnc_Location_quality (OSCTXT* pctxt, 
   ASN1T_Location_quality value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Location_quality (OSCTXT* pctxt, 
   ASN1T_Location_quality* pvalue);

EXTERN int asn1JsonEnc_Location_quality (OSCTXT *pctxt, ASN1T_Location_quality *pvalue);

EXTERN int asn1JsonDec_Location_quality (OSCTXT *pctxt, ASN1T_Location_quality *pvalue);

EXTERN int asn1PrtToStrm_Location_quality (OSCTXT *pctxt, 
   const char* name, const ASN1T_Location_quality* pvalue);

EXTERN ASN1T_Location_quality* new_ASN1T_Location_quality (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_Location_quality_ENUMTAB[];
#define ASN1T_Location_quality_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_Location_quality_ToString (OSINT32 value);

EXTERN int ASN1T_Location_quality_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_Location_quality* pvalue);

EXTERN int ASN1T_Location_quality_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_Location_quality* pvalue);

/**************************************************************/
/*                                                            */
/*  Location_tech                                             */
/*                                                            */
/**************************************************************/
/*
Location-tech ::= ENUMERATED { loc-tech-unknown(0), loc-tech-GNSS(1), loc-tech-DGPS(2), loc-tech-RTK(3), loc-tech-PPP(4), loc-tech-drGPS(5), loc-tech-drDGPS(6), loc-tech-dr(7), loc-tech-nav(8), loc-tech-fault(9), ... }
*/
struct EXTERN Location_tech {
   enum Root {
      loc_tech_unknown = 0,
      loc_tech_GNSS = 1,
      loc_tech_DGPS = 2,
      loc_tech_RTK = 3,
      loc_tech_PPP = 4,
      loc_tech_drGPS = 5,
      loc_tech_drDGPS = 6,
      loc_tech_dr = 7,
      loc_tech_nav = 8,
      loc_tech_fault = 9
   } ;
} ;

typedef OSUINT32 ASN1T_Location_tech;

class EXTERN ASN1C_Location_tech :
public ASN1CType
{
protected:
   ASN1T_Location_tech& msgData;
public:
   /**
    * Control class: ASN1C_Location_tech
    * Data class:    ASN1T_Location_tech
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_Location_tech (ASN1T_Location_tech& data);

   /**
    * Control class: ASN1C_Location_tech<br/>
    * Data class: ASN1T_Location_tech<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_Location_tech (OSRTMessageBufferIF& msgBuf, ASN1T_Location_tech& data);

   virtual ~ASN1C_Location_tech () {}

   /**
    * Data class: ASN1T_Location_tech<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_Location_tech.
    */
   inline ASN1T_Location_tech& getData () { return msgData; }

   /**
    * Data class: ASN1T_Location_tech<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_Location_tech.
    */
   inline const ASN1T_Location_tech& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             Location_tech will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "Location_tech");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_Location_tech& operator= (const ASN1C_Location_tech&) {return *this;}
} ;

EXTERN int asn1PE_Location_tech (OSCTXT* pctxt, ASN1T_Location_tech value);

EXTERN int asn1PD_Location_tech (OSCTXT* pctxt, ASN1T_Location_tech* pvalue);

EXTERN int XmlEnc_Location_tech (OSCTXT* pctxt, ASN1T_Location_tech value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Location_tech (OSCTXT* pctxt, ASN1T_Location_tech* pvalue);

EXTERN int asn1JsonEnc_Location_tech (OSCTXT *pctxt, ASN1T_Location_tech *pvalue);

EXTERN int asn1JsonDec_Location_tech (OSCTXT *pctxt, ASN1T_Location_tech *pvalue);

EXTERN int asn1PrtToStrm_Location_tech (OSCTXT *pctxt, 
   const char* name, const ASN1T_Location_tech* pvalue);

EXTERN ASN1T_Location_tech* new_ASN1T_Location_tech (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_Location_tech_ENUMTAB[];
#define ASN1T_Location_tech_ENUMTABSIZE 10

EXTERN const OSUTF8CHAR* ASN1T_Location_tech_ToString (OSINT32 value);

EXTERN int ASN1T_Location_tech_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_Location_tech* pvalue);

EXTERN int ASN1T_Location_tech_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_Location_tech* pvalue);

/**************************************************************/
/*                                                            */
/*  MergeDivergeNodeAngle                                     */
/*                                                            */
/**************************************************************/
/*
MergeDivergeNodeAngle ::= INTEGER (-180..180)
    In units of 1.5 degrees from north
    the value -180 shall be used to represent 
    data is not available or unknown

*/
typedef OSINT16 ASN1T_MergeDivergeNodeAngle;

EXTERN int asn1PE_MergeDivergeNodeAngle (OSCTXT* pctxt, ASN1T_MergeDivergeNodeAngle value);

EXTERN int asn1PD_MergeDivergeNodeAngle (OSCTXT* pctxt, ASN1T_MergeDivergeNodeAngle* pvalue);

EXTERN int XmlEnc_MergeDivergeNodeAngle (OSCTXT* pctxt, 
   ASN1T_MergeDivergeNodeAngle value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MergeDivergeNodeAngle (OSCTXT* pctxt, 
   ASN1T_MergeDivergeNodeAngle* pvalue);

EXTERN int asn1JsonEnc_MergeDivergeNodeAngle (OSCTXT *pctxt, ASN1T_MergeDivergeNodeAngle *pvalue);

EXTERN int asn1JsonDec_MergeDivergeNodeAngle (OSCTXT *pctxt, ASN1T_MergeDivergeNodeAngle *pvalue);

EXTERN int asn1PrtToStrm_MergeDivergeNodeAngle (OSCTXT *pctxt, 
   const char* name, const ASN1T_MergeDivergeNodeAngle* pvalue);

EXTERN ASN1T_MergeDivergeNodeAngle* 
   new_ASN1T_MergeDivergeNodeAngle (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  MessageBLOB                                               */
/*                                                            */
/**************************************************************/
/*
MessageBLOB ::= OCTET STRING (SIZE (10..2000))
     Final size range may be further 
     limited by the transport layer used

*/
struct EXTERN ASN1T_MessageBLOB {
   OSUINT16 numocts;
   OSOCTET data[2000];
   // ctors
   ASN1T_MessageBLOB () : numocts(0) {}
   ASN1T_MessageBLOB (OSUINT16 _numocts, const OSOCTET* _data) :
      numocts (_numocts) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, numocts);
   }
   ASN1T_MessageBLOB (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT16)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
   }
   // assignment operators
   ASN1T_MessageBLOB& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT16)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
      return *this;
   }
} ;

class EXTERN ASN1C_MessageBLOB :
public ASN1CType
{
protected:
   ASN1T_MessageBLOB& msgData;
public:
   /**
    * Control class: ASN1C_MessageBLOB
    * Data class:    ASN1T_MessageBLOB
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_MessageBLOB (ASN1T_MessageBLOB& data);

   /**
    * Control class: ASN1C_MessageBLOB<br/>
    * Data class: ASN1T_MessageBLOB<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_MessageBLOB (OSRTMessageBufferIF& msgBuf, ASN1T_MessageBLOB& data);

   virtual ~ASN1C_MessageBLOB () {}

   /**
    * Data class: ASN1T_MessageBLOB<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_MessageBLOB.
    */
   inline ASN1T_MessageBLOB& getData () { return msgData; }

   /**
    * Data class: ASN1T_MessageBLOB<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_MessageBLOB.
    */
   inline const ASN1T_MessageBLOB& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             MessageBLOB will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "MessageBLOB");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_MessageBLOB& operator= (const ASN1C_MessageBLOB&) {return *this;}
} ;

EXTERN int asn1PE_MessageBLOB (OSCTXT* pctxt, ASN1T_MessageBLOB* pvalue);

EXTERN int asn1PD_MessageBLOB (OSCTXT* pctxt, ASN1T_MessageBLOB* pvalue);

EXTERN int XmlEnc_MessageBLOB (OSCTXT* pctxt, ASN1T_MessageBLOB* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MessageBLOB (OSCTXT* pctxt, ASN1T_MessageBLOB* pvalue);

EXTERN int asn1JsonEnc_MessageBLOB (OSCTXT *pctxt, ASN1T_MessageBLOB *pvalue);

EXTERN int asn1JsonDec_MessageBLOB (OSCTXT *pctxt, ASN1T_MessageBLOB *pvalue);

EXTERN int asn1PrtToStrm_MessageBLOB (OSCTXT *pctxt, 
   const char* name, const ASN1T_MessageBLOB* pvalue);

EXTERN ASN1T_MessageBLOB* new_ASN1T_MessageBLOB (ASN1CType& ccobj);

EXTERN int asn1Init_MessageBLOB (ASN1T_MessageBLOB* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  MinuteOfTheYear                                           */
/*                                                            */
/**************************************************************/
/*
MinuteOfTheYear ::= INTEGER (0..527040)
    the value 527040 shall be used for invalid

*/
typedef OSUINT32 ASN1T_MinuteOfTheYear;

EXTERN int asn1PE_MinuteOfTheYear (OSCTXT* pctxt, ASN1T_MinuteOfTheYear value);

EXTERN int asn1PD_MinuteOfTheYear (OSCTXT* pctxt, ASN1T_MinuteOfTheYear* pvalue);

EXTERN int XmlEnc_MinuteOfTheYear (OSCTXT* pctxt, ASN1T_MinuteOfTheYear value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MinuteOfTheYear (OSCTXT* pctxt, ASN1T_MinuteOfTheYear* pvalue
   );

EXTERN int asn1JsonEnc_MinuteOfTheYear (OSCTXT *pctxt, ASN1T_MinuteOfTheYear *pvalue);

EXTERN int asn1JsonDec_MinuteOfTheYear (OSCTXT *pctxt, ASN1T_MinuteOfTheYear *pvalue);

EXTERN int asn1PrtToStrm_MinuteOfTheYear (OSCTXT *pctxt, 
   const char* name, const ASN1T_MinuteOfTheYear* pvalue);

EXTERN ASN1T_MinuteOfTheYear* new_ASN1T_MinuteOfTheYear (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  MinutesDuration                                           */
/*                                                            */
/**************************************************************/
/*
MinutesDuration ::= INTEGER (0..32000)
                                        units of minutes

*/
typedef OSUINT16 ASN1T_MinutesDuration;

EXTERN int asn1PE_MinutesDuration (OSCTXT* pctxt, ASN1T_MinutesDuration value);

EXTERN int asn1PD_MinutesDuration (OSCTXT* pctxt, ASN1T_MinutesDuration* pvalue);

EXTERN int XmlEnc_MinutesDuration (OSCTXT* pctxt, ASN1T_MinutesDuration value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MinutesDuration (OSCTXT* pctxt, ASN1T_MinutesDuration* pvalue
   );

EXTERN int asn1JsonEnc_MinutesDuration (OSCTXT *pctxt, ASN1T_MinutesDuration *pvalue);

EXTERN int asn1JsonDec_MinutesDuration (OSCTXT *pctxt, ASN1T_MinutesDuration *pvalue);

EXTERN int asn1PrtToStrm_MinutesDuration (OSCTXT *pctxt, 
   const char* name, const ASN1T_MinutesDuration* pvalue);

EXTERN ASN1T_MinutesDuration* new_ASN1T_MinutesDuration (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  MotorizedPropelledType                                    */
/*                                                            */
/**************************************************************/
/*
MotorizedPropelledType ::= ENUMERATED { unavailable(0), otherTypes(1), wheelChair(2), bicycle(3), scooter(4), selfBalancingDevice(5), ... }
*/
struct EXTERN MotorizedPropelledType {
   enum Root {
      unavailable = 0,
      otherTypes = 1,
      wheelChair = 2,
      bicycle = 3,
      scooter = 4,
      selfBalancingDevice = 5
   } ;
} ;

typedef OSUINT32 ASN1T_MotorizedPropelledType;

EXTERN int asn1PE_MotorizedPropelledType (OSCTXT* pctxt, ASN1T_MotorizedPropelledType value);

EXTERN int asn1PD_MotorizedPropelledType (OSCTXT* pctxt, ASN1T_MotorizedPropelledType* pvalue);

EXTERN int XmlEnc_MotorizedPropelledType (OSCTXT* pctxt, 
   ASN1T_MotorizedPropelledType value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MotorizedPropelledType (OSCTXT* pctxt, 
   ASN1T_MotorizedPropelledType* pvalue);

EXTERN int asn1JsonEnc_MotorizedPropelledType (OSCTXT *pctxt, ASN1T_MotorizedPropelledType *pvalue);

EXTERN int asn1JsonDec_MotorizedPropelledType (OSCTXT *pctxt, ASN1T_MotorizedPropelledType *pvalue);

EXTERN int asn1PrtToStrm_MotorizedPropelledType (OSCTXT *pctxt, 
   const char* name, const ASN1T_MotorizedPropelledType* pvalue);

EXTERN ASN1T_MotorizedPropelledType* 
   new_ASN1T_MotorizedPropelledType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_MotorizedPropelledType_ENUMTAB[];
#define ASN1T_MotorizedPropelledType_ENUMTABSIZE 6

EXTERN const OSUTF8CHAR* ASN1T_MotorizedPropelledType_ToString (OSINT32 value);

EXTERN int ASN1T_MotorizedPropelledType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_MotorizedPropelledType* pvalue);

EXTERN int ASN1T_MotorizedPropelledType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_MotorizedPropelledType* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementPhaseState                                        */
/*                                                            */
/**************************************************************/
/*
MovementPhaseState ::= ENUMERATED { unavailable(0), dark(1), stop-Then-Proceed(2), stop-And-Remain(3), pre-Movement(4), permissive-Movement-Allowed(5), protected-Movement-Allowed(6), permissive-clearance(7), protected-clearance(8), caution-Conflicting-Traffic(9) }
     The above number assignments are not used with UPER encoding
     and are only to be used with DER or implicit encoding

*/
struct EXTERN MovementPhaseState {
   enum Root {
      unavailable = 0,
      dark = 1,
      stop_Then_Proceed = 2,
      stop_And_Remain = 3,
      pre_Movement = 4,
      permissive_Movement_Allowed = 5,
      protected_Movement_Allowed = 6,
      permissive_clearance = 7,
      protected_clearance = 8,
      caution_Conflicting_Traffic = 9
   } ;
} ;

typedef OSUINT32 ASN1T_MovementPhaseState;

EXTERN int asn1PE_MovementPhaseState (OSCTXT* pctxt, ASN1T_MovementPhaseState value);

EXTERN int asn1PD_MovementPhaseState (OSCTXT* pctxt, ASN1T_MovementPhaseState* pvalue);

EXTERN int XmlEnc_MovementPhaseState (OSCTXT* pctxt, 
   ASN1T_MovementPhaseState value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MovementPhaseState (OSCTXT* pctxt, 
   ASN1T_MovementPhaseState* pvalue);

EXTERN int asn1JsonEnc_MovementPhaseState (OSCTXT *pctxt, ASN1T_MovementPhaseState *pvalue);

EXTERN int asn1JsonDec_MovementPhaseState (OSCTXT *pctxt, ASN1T_MovementPhaseState *pvalue);

EXTERN int asn1PrtToStrm_MovementPhaseState (OSCTXT *pctxt, 
   const char* name, const ASN1T_MovementPhaseState* pvalue);

EXTERN ASN1T_MovementPhaseState* 
   new_ASN1T_MovementPhaseState (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_MovementPhaseState_ENUMTAB[];
#define ASN1T_MovementPhaseState_ENUMTABSIZE 10

EXTERN const OSUTF8CHAR* ASN1T_MovementPhaseState_ToString (OSINT32 value);

EXTERN int ASN1T_MovementPhaseState_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_MovementPhaseState* pvalue);

EXTERN int ASN1T_MovementPhaseState_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_MovementPhaseState* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  MsgCount                                                  */
/*                                                            */
/**************************************************************/
/*
MsgCount ::= INTEGER (0..127)
*/
typedef OSUINT8 ASN1T_MsgCount;

EXTERN int asn1PE_MsgCount (OSCTXT* pctxt, ASN1T_MsgCount value);

EXTERN int asn1PD_MsgCount (OSCTXT* pctxt, ASN1T_MsgCount* pvalue);

EXTERN int XmlEnc_MsgCount (OSCTXT* pctxt, ASN1T_MsgCount value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MsgCount (OSCTXT* pctxt, ASN1T_MsgCount* pvalue);

EXTERN int asn1JsonEnc_MsgCount (OSCTXT *pctxt, ASN1T_MsgCount *pvalue);

EXTERN int asn1JsonDec_MsgCount (OSCTXT *pctxt, ASN1T_MsgCount *pvalue);

EXTERN int asn1PrtToStrm_MsgCount (OSCTXT *pctxt, 
   const char* name, const ASN1T_MsgCount* pvalue);

EXTERN ASN1T_MsgCount* new_ASN1T_MsgCount (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  MsgCRC                                                    */
/*                                                            */
/**************************************************************/
/*
MsgCRC ::= OCTET STRING (SIZE (2))
                                   created with the CRC-CCITT polynomial

*/
struct EXTERN ASN1T_MsgCRC {
   OSOCTET data[2];
   // ctors
   ASN1T_MsgCRC () {}
   ASN1T_MsgCRC (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, 2);
   }
   ASN1T_MsgCRC (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
   }
   // assignment operators
   ASN1T_MsgCRC& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
      return *this;
   }
} ;

EXTERN int asn1PE_MsgCRC (OSCTXT* pctxt, ASN1T_MsgCRC* pvalue);

EXTERN int asn1PD_MsgCRC (OSCTXT* pctxt, ASN1T_MsgCRC* pvalue);

EXTERN int XmlEnc_MsgCRC (OSCTXT* pctxt, ASN1T_MsgCRC* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MsgCRC (OSCTXT* pctxt, ASN1T_MsgCRC* pvalue);

EXTERN int asn1JsonEnc_MsgCRC (OSCTXT *pctxt, ASN1T_MsgCRC *pvalue);

EXTERN int asn1JsonDec_MsgCRC (OSCTXT *pctxt, ASN1T_MsgCRC *pvalue);

EXTERN int asn1PrtToStrm_MsgCRC (OSCTXT *pctxt, 
   const char* name, const ASN1T_MsgCRC* pvalue);

EXTERN ASN1T_MsgCRC* new_ASN1T_MsgCRC (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  MultiVehicleResponse                                      */
/*                                                            */
/**************************************************************/
/*
MultiVehicleResponse ::= ENUMERATED { unavailable(0), singleVehicle(1), multiVehicle(2), reserved(3) }
*/
struct EXTERN MultiVehicleResponse {
   enum Root {
      unavailable = 0,
      singleVehicle = 1,
      multiVehicle = 2,
      reserved = 3
   } ;
} ;

typedef OSUINT32 ASN1T_MultiVehicleResponse;

EXTERN int asn1PE_MultiVehicleResponse (OSCTXT* pctxt, ASN1T_MultiVehicleResponse value);

EXTERN int asn1PD_MultiVehicleResponse (OSCTXT* pctxt, ASN1T_MultiVehicleResponse* pvalue);

EXTERN int XmlEnc_MultiVehicleResponse (OSCTXT* pctxt, 
   ASN1T_MultiVehicleResponse value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MultiVehicleResponse (OSCTXT* pctxt, 
   ASN1T_MultiVehicleResponse* pvalue);

EXTERN int asn1JsonEnc_MultiVehicleResponse (OSCTXT *pctxt, ASN1T_MultiVehicleResponse *pvalue);

EXTERN int asn1JsonDec_MultiVehicleResponse (OSCTXT *pctxt, ASN1T_MultiVehicleResponse *pvalue);

EXTERN int asn1PrtToStrm_MultiVehicleResponse (OSCTXT *pctxt, 
   const char* name, const ASN1T_MultiVehicleResponse* pvalue);

EXTERN ASN1T_MultiVehicleResponse* 
   new_ASN1T_MultiVehicleResponse (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_MultiVehicleResponse_ENUMTAB[];
#define ASN1T_MultiVehicleResponse_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_MultiVehicleResponse_ToString (OSINT32 value);

EXTERN int ASN1T_MultiVehicleResponse_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_MultiVehicleResponse* pvalue);

EXTERN int ASN1T_MultiVehicleResponse_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_MultiVehicleResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  MUTCDCode                                                 */
/*                                                            */
/**************************************************************/
/*
MUTCDCode ::= ENUMERATED { none(0), regulatory(1), warning(2), maintenance(3), motoristService(4), guide(5), rec(6), ... }
*/
struct EXTERN MUTCDCode {
   enum Root {
      none = 0,
      regulatory = 1,
      warning = 2,
      maintenance = 3,
      motoristService = 4,
      guide = 5,
      rec = 6
   } ;
} ;

typedef OSUINT32 ASN1T_MUTCDCode;

EXTERN int asn1PE_MUTCDCode (OSCTXT* pctxt, ASN1T_MUTCDCode value);

EXTERN int asn1PD_MUTCDCode (OSCTXT* pctxt, ASN1T_MUTCDCode* pvalue);

EXTERN int XmlEnc_MUTCDCode (OSCTXT* pctxt, ASN1T_MUTCDCode value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MUTCDCode (OSCTXT* pctxt, ASN1T_MUTCDCode* pvalue);

EXTERN int asn1JsonEnc_MUTCDCode (OSCTXT *pctxt, ASN1T_MUTCDCode *pvalue);

EXTERN int asn1JsonDec_MUTCDCode (OSCTXT *pctxt, ASN1T_MUTCDCode *pvalue);

EXTERN int asn1PrtToStrm_MUTCDCode (OSCTXT *pctxt, 
   const char* name, const ASN1T_MUTCDCode* pvalue);

EXTERN ASN1T_MUTCDCode* new_ASN1T_MUTCDCode (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_MUTCDCode_ENUMTAB[];
#define ASN1T_MUTCDCode_ENUMTABSIZE 7

EXTERN const OSUTF8CHAR* ASN1T_MUTCDCode_ToString (OSINT32 value);

EXTERN int ASN1T_MUTCDCode_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_MUTCDCode* pvalue);

EXTERN int ASN1T_MUTCDCode_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_MUTCDCode* pvalue);

/**************************************************************/
/*                                                            */
/*  NMEA_MsgType                                              */
/*                                                            */
/**************************************************************/
/*
NMEA-MsgType ::= INTEGER (0..32767)
*/
typedef OSUINT16 ASN1T_NMEA_MsgType;

EXTERN int asn1PE_NMEA_MsgType (OSCTXT* pctxt, ASN1T_NMEA_MsgType value);

EXTERN int asn1PD_NMEA_MsgType (OSCTXT* pctxt, ASN1T_NMEA_MsgType* pvalue);

EXTERN int XmlEnc_NMEA_MsgType (OSCTXT* pctxt, ASN1T_NMEA_MsgType value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NMEA_MsgType (OSCTXT* pctxt, ASN1T_NMEA_MsgType* pvalue);

EXTERN int asn1JsonEnc_NMEA_MsgType (OSCTXT *pctxt, ASN1T_NMEA_MsgType *pvalue);

EXTERN int asn1JsonDec_NMEA_MsgType (OSCTXT *pctxt, ASN1T_NMEA_MsgType *pvalue);

EXTERN int asn1PrtToStrm_NMEA_MsgType (OSCTXT *pctxt, 
   const char* name, const ASN1T_NMEA_MsgType* pvalue);

EXTERN ASN1T_NMEA_MsgType* new_ASN1T_NMEA_MsgType (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  NMEA_Payload                                              */
/*                                                            */
/**************************************************************/
/*
NMEA-Payload ::= OCTET STRING (SIZE (1..1023))
*/
struct EXTERN ASN1T_NMEA_Payload {
   OSUINT16 numocts;
   OSOCTET data[1023];
   // ctors
   ASN1T_NMEA_Payload () : numocts(0) {}
   ASN1T_NMEA_Payload (OSUINT16 _numocts, const OSOCTET* _data) :
      numocts (_numocts) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, numocts);
   }
   ASN1T_NMEA_Payload (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT16)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
   }
   // assignment operators
   ASN1T_NMEA_Payload& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT16)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
      return *this;
   }
} ;

EXTERN int asn1PE_NMEA_Payload (OSCTXT* pctxt, ASN1T_NMEA_Payload* pvalue);

EXTERN int asn1PD_NMEA_Payload (OSCTXT* pctxt, ASN1T_NMEA_Payload* pvalue);

EXTERN int XmlEnc_NMEA_Payload (OSCTXT* pctxt, ASN1T_NMEA_Payload* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NMEA_Payload (OSCTXT* pctxt, ASN1T_NMEA_Payload* pvalue);

EXTERN int asn1JsonEnc_NMEA_Payload (OSCTXT *pctxt, ASN1T_NMEA_Payload *pvalue);

EXTERN int asn1JsonDec_NMEA_Payload (OSCTXT *pctxt, ASN1T_NMEA_Payload *pvalue);

EXTERN int asn1PrtToStrm_NMEA_Payload (OSCTXT *pctxt, 
   const char* name, const ASN1T_NMEA_Payload* pvalue);

EXTERN ASN1T_NMEA_Payload* new_ASN1T_NMEA_Payload (ASN1CType& ccobj);

EXTERN int asn1Init_NMEA_Payload (ASN1T_NMEA_Payload* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  NMEA_Revision                                             */
/*                                                            */
/**************************************************************/
/*
NMEA-Revision ::= ENUMERATED { unknown(0), reserved(1), rev1(2), rev2(3), rev3(4), rev4(5), rev5(6), ... }
*/
struct EXTERN NMEA_Revision {
   enum Root {
      unknown = 0,
      reserved = 1,
      rev1 = 2,
      rev2 = 3,
      rev3 = 4,
      rev4 = 5,
      rev5 = 6
   } ;
} ;

typedef OSUINT32 ASN1T_NMEA_Revision;

EXTERN int asn1PE_NMEA_Revision (OSCTXT* pctxt, ASN1T_NMEA_Revision value);

EXTERN int asn1PD_NMEA_Revision (OSCTXT* pctxt, ASN1T_NMEA_Revision* pvalue);

EXTERN int XmlEnc_NMEA_Revision (OSCTXT* pctxt, ASN1T_NMEA_Revision value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NMEA_Revision (OSCTXT* pctxt, ASN1T_NMEA_Revision* pvalue);

EXTERN int asn1JsonEnc_NMEA_Revision (OSCTXT *pctxt, ASN1T_NMEA_Revision *pvalue);

EXTERN int asn1JsonDec_NMEA_Revision (OSCTXT *pctxt, ASN1T_NMEA_Revision *pvalue);

EXTERN int asn1PrtToStrm_NMEA_Revision (OSCTXT *pctxt, 
   const char* name, const ASN1T_NMEA_Revision* pvalue);

EXTERN ASN1T_NMEA_Revision* new_ASN1T_NMEA_Revision (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_NMEA_Revision_ENUMTAB[];
#define ASN1T_NMEA_Revision_ENUMTABSIZE 7

EXTERN const OSUTF8CHAR* ASN1T_NMEA_Revision_ToString (OSINT32 value);

EXTERN int ASN1T_NMEA_Revision_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_NMEA_Revision* pvalue);

EXTERN int ASN1T_NMEA_Revision_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_NMEA_Revision* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeLL                                           */
/*                                                            */
/**************************************************************/
/*
NodeAttributeLL ::= ENUMERATED { reserved(0), stopLine(1), roundedCapStyleA(2), roundedCapStyleB(3), mergePoint(4), divergePoint(5), downstreamStopLine(6), downstreamStartNode(7), closedToTraffic(8), safeIsland(9), curbPresentAtStepOff(10), hydrantPresent(11), ... }
*/
struct EXTERN NodeAttributeLL {
   enum Root {
      reserved = 0,
      stopLine = 1,
      roundedCapStyleA = 2,
      roundedCapStyleB = 3,
      mergePoint = 4,
      divergePoint = 5,
      downstreamStopLine = 6,
      downstreamStartNode = 7,
      closedToTraffic = 8,
      safeIsland = 9,
      curbPresentAtStepOff = 10,
      hydrantPresent = 11
   } ;
} ;

typedef OSUINT32 ASN1T_NodeAttributeLL;

EXTERN int asn1PE_NodeAttributeLL (OSCTXT* pctxt, ASN1T_NodeAttributeLL value);

EXTERN int asn1PD_NodeAttributeLL (OSCTXT* pctxt, ASN1T_NodeAttributeLL* pvalue);

EXTERN int XmlEnc_NodeAttributeLL (OSCTXT* pctxt, ASN1T_NodeAttributeLL value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeLL (OSCTXT* pctxt, ASN1T_NodeAttributeLL* pvalue
   );

EXTERN int asn1JsonEnc_NodeAttributeLL (OSCTXT *pctxt, ASN1T_NodeAttributeLL *pvalue);

EXTERN int asn1JsonDec_NodeAttributeLL (OSCTXT *pctxt, ASN1T_NodeAttributeLL *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeLL* pvalue);

EXTERN ASN1T_NodeAttributeLL* new_ASN1T_NodeAttributeLL (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_NodeAttributeLL_ENUMTAB[];
#define ASN1T_NodeAttributeLL_ENUMTABSIZE 12

EXTERN const OSUTF8CHAR* ASN1T_NodeAttributeLL_ToString (OSINT32 value);

EXTERN int ASN1T_NodeAttributeLL_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_NodeAttributeLL* pvalue);

EXTERN int ASN1T_NodeAttributeLL_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_NodeAttributeLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeXY                                           */
/*                                                            */
/**************************************************************/
/*
NodeAttributeXY ::= ENUMERATED { reserved(0), stopLine(1), roundedCapStyleA(2), roundedCapStyleB(3), mergePoint(4), divergePoint(5), downstreamStopLine(6), downstreamStartNode(7), closedToTraffic(8), safeIsland(9), curbPresentAtStepOff(10), hydrantPresent(11), ... }
*/
struct EXTERN NodeAttributeXY {
   enum Root {
      reserved = 0,
      stopLine = 1,
      roundedCapStyleA = 2,
      roundedCapStyleB = 3,
      mergePoint = 4,
      divergePoint = 5,
      downstreamStopLine = 6,
      downstreamStartNode = 7,
      closedToTraffic = 8,
      safeIsland = 9,
      curbPresentAtStepOff = 10,
      hydrantPresent = 11
   } ;
} ;

typedef OSUINT32 ASN1T_NodeAttributeXY;

EXTERN int asn1PE_NodeAttributeXY (OSCTXT* pctxt, ASN1T_NodeAttributeXY value);

EXTERN int asn1PD_NodeAttributeXY (OSCTXT* pctxt, ASN1T_NodeAttributeXY* pvalue);

EXTERN int XmlEnc_NodeAttributeXY (OSCTXT* pctxt, ASN1T_NodeAttributeXY value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeXY (OSCTXT* pctxt, ASN1T_NodeAttributeXY* pvalue
   );

EXTERN int asn1JsonEnc_NodeAttributeXY (OSCTXT *pctxt, ASN1T_NodeAttributeXY *pvalue);

EXTERN int asn1JsonDec_NodeAttributeXY (OSCTXT *pctxt, ASN1T_NodeAttributeXY *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeXY (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeXY* pvalue);

EXTERN ASN1T_NodeAttributeXY* new_ASN1T_NodeAttributeXY (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_NodeAttributeXY_ENUMTAB[];
#define ASN1T_NodeAttributeXY_ENUMTABSIZE 12

EXTERN const OSUTF8CHAR* ASN1T_NodeAttributeXY_ToString (OSINT32 value);

EXTERN int ASN1T_NodeAttributeXY_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_NodeAttributeXY* pvalue);

EXTERN int ASN1T_NodeAttributeXY_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_NodeAttributeXY* pvalue);

/**************************************************************/
/*                                                            */
/*  NumberOfParticipantsInCluster                             */
/*                                                            */
/**************************************************************/
/*
NumberOfParticipantsInCluster ::= ENUMERATED { unavailable(0), small(1), medium(2), large(3), ... }
*/
struct EXTERN NumberOfParticipantsInCluster {
   enum Root {
      unavailable = 0,
      small_ = 1,
      medium = 2,
      large_ = 3
   } ;
} ;

typedef OSUINT32 ASN1T_NumberOfParticipantsInCluster;

EXTERN int asn1PE_NumberOfParticipantsInCluster (OSCTXT* pctxt, ASN1T_NumberOfParticipantsInCluster value);

EXTERN int asn1PD_NumberOfParticipantsInCluster (OSCTXT* pctxt, ASN1T_NumberOfParticipantsInCluster* pvalue);

EXTERN int XmlEnc_NumberOfParticipantsInCluster (OSCTXT* pctxt, 
   ASN1T_NumberOfParticipantsInCluster value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NumberOfParticipantsInCluster (OSCTXT* pctxt, 
   ASN1T_NumberOfParticipantsInCluster* pvalue);

EXTERN int asn1JsonEnc_NumberOfParticipantsInCluster (OSCTXT *pctxt, ASN1T_NumberOfParticipantsInCluster *pvalue);

EXTERN int asn1JsonDec_NumberOfParticipantsInCluster (OSCTXT *pctxt, ASN1T_NumberOfParticipantsInCluster *pvalue);

EXTERN int asn1PrtToStrm_NumberOfParticipantsInCluster (OSCTXT *pctxt, 
   const char* name, const ASN1T_NumberOfParticipantsInCluster* pvalue);

EXTERN ASN1T_NumberOfParticipantsInCluster* 
   new_ASN1T_NumberOfParticipantsInCluster (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_NumberOfParticipantsInCluster_ENUMTAB[];
#define ASN1T_NumberOfParticipantsInCluster_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_NumberOfParticipantsInCluster_ToString (OSINT32 value);

EXTERN int ASN1T_NumberOfParticipantsInCluster_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_NumberOfParticipantsInCluster* pvalue);

EXTERN int ASN1T_NumberOfParticipantsInCluster_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_NumberOfParticipantsInCluster* pvalue);

/**************************************************************/
/*                                                            */
/*  ObjectCount                                               */
/*                                                            */
/**************************************************************/
/*
ObjectCount ::= INTEGER (0..1023)
                                   a count of objects

*/
typedef OSUINT16 ASN1T_ObjectCount;

EXTERN int asn1PE_ObjectCount (OSCTXT* pctxt, ASN1T_ObjectCount value);

EXTERN int asn1PD_ObjectCount (OSCTXT* pctxt, ASN1T_ObjectCount* pvalue);

EXTERN int XmlEnc_ObjectCount (OSCTXT* pctxt, ASN1T_ObjectCount value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ObjectCount (OSCTXT* pctxt, ASN1T_ObjectCount* pvalue);

EXTERN int asn1JsonEnc_ObjectCount (OSCTXT *pctxt, ASN1T_ObjectCount *pvalue);

EXTERN int asn1JsonDec_ObjectCount (OSCTXT *pctxt, ASN1T_ObjectCount *pvalue);

EXTERN int asn1PrtToStrm_ObjectCount (OSCTXT *pctxt, 
   const char* name, const ASN1T_ObjectCount* pvalue);

EXTERN ASN1T_ObjectCount* new_ASN1T_ObjectCount (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ObstacleDirection                                         */
/*                                                            */
/**************************************************************/
/*
ObstacleDirection ::= Angle
*/
typedef ASN1T_Angle ASN1T_ObstacleDirection;

EXTERN int asn1PE_ObstacleDirection (OSCTXT* pctxt, ASN1T_ObstacleDirection value);

EXTERN int asn1PD_ObstacleDirection (OSCTXT* pctxt, ASN1T_ObstacleDirection* pvalue);

EXTERN int XmlEnc_ObstacleDirection (OSCTXT* pctxt, 
   ASN1T_ObstacleDirection value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ObstacleDirection (OSCTXT* pctxt, 
   ASN1T_ObstacleDirection* pvalue);

EXTERN int asn1JsonEnc_ObstacleDirection (OSCTXT *pctxt, ASN1T_ObstacleDirection *pvalue);

EXTERN int asn1JsonDec_ObstacleDirection (OSCTXT *pctxt, ASN1T_ObstacleDirection *pvalue);

EXTERN int asn1PrtToStrm_ObstacleDirection (OSCTXT *pctxt, 
   const char* name, const ASN1T_ObstacleDirection* pvalue);

EXTERN ASN1T_ObstacleDirection* new_ASN1T_ObstacleDirection (ASN1CType& ccobj)
   ;

/**************************************************************/
/*                                                            */
/*  ObstacleDistance                                          */
/*                                                            */
/**************************************************************/
/*
ObstacleDistance ::= INTEGER (0..32767)
                                         LSB units of meters

*/
typedef OSUINT16 ASN1T_ObstacleDistance;

EXTERN int asn1PE_ObstacleDistance (OSCTXT* pctxt, ASN1T_ObstacleDistance value);

EXTERN int asn1PD_ObstacleDistance (OSCTXT* pctxt, ASN1T_ObstacleDistance* pvalue);

EXTERN int XmlEnc_ObstacleDistance (OSCTXT* pctxt, 
   ASN1T_ObstacleDistance value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ObstacleDistance (OSCTXT* pctxt, 
   ASN1T_ObstacleDistance* pvalue);

EXTERN int asn1JsonEnc_ObstacleDistance (OSCTXT *pctxt, ASN1T_ObstacleDistance *pvalue);

EXTERN int asn1JsonDec_ObstacleDistance (OSCTXT *pctxt, ASN1T_ObstacleDistance *pvalue);

EXTERN int asn1PrtToStrm_ObstacleDistance (OSCTXT *pctxt, 
   const char* name, const ASN1T_ObstacleDistance* pvalue);

EXTERN ASN1T_ObstacleDistance* new_ASN1T_ObstacleDistance (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Offset_B09                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B09 ::= INTEGER (-256..255)
    a range of +- 2.55 meters

*/
typedef OSINT16 ASN1T_Offset_B09;

EXTERN int asn1PE_Offset_B09 (OSCTXT* pctxt, ASN1T_Offset_B09 value);

EXTERN int asn1PD_Offset_B09 (OSCTXT* pctxt, ASN1T_Offset_B09* pvalue);

EXTERN int XmlEnc_Offset_B09 (OSCTXT* pctxt, ASN1T_Offset_B09 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Offset_B09 (OSCTXT* pctxt, ASN1T_Offset_B09* pvalue);

EXTERN int asn1JsonEnc_Offset_B09 (OSCTXT *pctxt, ASN1T_Offset_B09 *pvalue);

EXTERN int asn1JsonDec_Offset_B09 (OSCTXT *pctxt, ASN1T_Offset_B09 *pvalue);

EXTERN int asn1PrtToStrm_Offset_B09 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Offset_B09* pvalue);

EXTERN ASN1T_Offset_B09* new_ASN1T_Offset_B09 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Offset_B10                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B10 ::= INTEGER (-512..511)
    a range of +- 5.11 meters

*/
typedef OSINT16 ASN1T_Offset_B10;

EXTERN int asn1PE_Offset_B10 (OSCTXT* pctxt, ASN1T_Offset_B10 value);

EXTERN int asn1PD_Offset_B10 (OSCTXT* pctxt, ASN1T_Offset_B10* pvalue);

EXTERN int XmlEnc_Offset_B10 (OSCTXT* pctxt, ASN1T_Offset_B10 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Offset_B10 (OSCTXT* pctxt, ASN1T_Offset_B10* pvalue);

EXTERN int asn1JsonEnc_Offset_B10 (OSCTXT *pctxt, ASN1T_Offset_B10 *pvalue);

EXTERN int asn1JsonDec_Offset_B10 (OSCTXT *pctxt, ASN1T_Offset_B10 *pvalue);

EXTERN int asn1PrtToStrm_Offset_B10 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Offset_B10* pvalue);

EXTERN ASN1T_Offset_B10* new_ASN1T_Offset_B10 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Offset_B11                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B11 ::= INTEGER (-1024..1023)
    a range of +- 10.23 meters

*/
typedef OSINT16 ASN1T_Offset_B11;

EXTERN int asn1PE_Offset_B11 (OSCTXT* pctxt, ASN1T_Offset_B11 value);

EXTERN int asn1PD_Offset_B11 (OSCTXT* pctxt, ASN1T_Offset_B11* pvalue);

EXTERN int XmlEnc_Offset_B11 (OSCTXT* pctxt, ASN1T_Offset_B11 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Offset_B11 (OSCTXT* pctxt, ASN1T_Offset_B11* pvalue);

EXTERN int asn1JsonEnc_Offset_B11 (OSCTXT *pctxt, ASN1T_Offset_B11 *pvalue);

EXTERN int asn1JsonDec_Offset_B11 (OSCTXT *pctxt, ASN1T_Offset_B11 *pvalue);

EXTERN int asn1PrtToStrm_Offset_B11 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Offset_B11* pvalue);

EXTERN ASN1T_Offset_B11* new_ASN1T_Offset_B11 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Offset_B12                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B12 ::= INTEGER (-2048..2047)
    a range of +- 20.47 meters

*/
typedef OSINT16 ASN1T_Offset_B12;

EXTERN int asn1PE_Offset_B12 (OSCTXT* pctxt, ASN1T_Offset_B12 value);

EXTERN int asn1PD_Offset_B12 (OSCTXT* pctxt, ASN1T_Offset_B12* pvalue);

EXTERN int XmlEnc_Offset_B12 (OSCTXT* pctxt, ASN1T_Offset_B12 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Offset_B12 (OSCTXT* pctxt, ASN1T_Offset_B12* pvalue);

EXTERN int asn1JsonEnc_Offset_B12 (OSCTXT *pctxt, ASN1T_Offset_B12 *pvalue);

EXTERN int asn1JsonDec_Offset_B12 (OSCTXT *pctxt, ASN1T_Offset_B12 *pvalue);

EXTERN int asn1PrtToStrm_Offset_B12 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Offset_B12* pvalue);

EXTERN ASN1T_Offset_B12* new_ASN1T_Offset_B12 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Offset_B13                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B13 ::= INTEGER (-4096..4095)
    a range of +- 40.95 meters

*/
typedef OSINT16 ASN1T_Offset_B13;

EXTERN int asn1PE_Offset_B13 (OSCTXT* pctxt, ASN1T_Offset_B13 value);

EXTERN int asn1PD_Offset_B13 (OSCTXT* pctxt, ASN1T_Offset_B13* pvalue);

EXTERN int XmlEnc_Offset_B13 (OSCTXT* pctxt, ASN1T_Offset_B13 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Offset_B13 (OSCTXT* pctxt, ASN1T_Offset_B13* pvalue);

EXTERN int asn1JsonEnc_Offset_B13 (OSCTXT *pctxt, ASN1T_Offset_B13 *pvalue);

EXTERN int asn1JsonDec_Offset_B13 (OSCTXT *pctxt, ASN1T_Offset_B13 *pvalue);

EXTERN int asn1PrtToStrm_Offset_B13 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Offset_B13* pvalue);

EXTERN ASN1T_Offset_B13* new_ASN1T_Offset_B13 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Offset_B14                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B14 ::= INTEGER (-8192..8191)
    a range of +- 81.91 meters

*/
typedef OSINT16 ASN1T_Offset_B14;

EXTERN int asn1PE_Offset_B14 (OSCTXT* pctxt, ASN1T_Offset_B14 value);

EXTERN int asn1PD_Offset_B14 (OSCTXT* pctxt, ASN1T_Offset_B14* pvalue);

EXTERN int XmlEnc_Offset_B14 (OSCTXT* pctxt, ASN1T_Offset_B14 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Offset_B14 (OSCTXT* pctxt, ASN1T_Offset_B14* pvalue);

EXTERN int asn1JsonEnc_Offset_B14 (OSCTXT *pctxt, ASN1T_Offset_B14 *pvalue);

EXTERN int asn1JsonDec_Offset_B14 (OSCTXT *pctxt, ASN1T_Offset_B14 *pvalue);

EXTERN int asn1PrtToStrm_Offset_B14 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Offset_B14* pvalue);

EXTERN ASN1T_Offset_B14* new_ASN1T_Offset_B14 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Offset_B16                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B16 ::= INTEGER (-32768..32767)
    a range of +- 327.68 meters

*/
typedef OSINT16 ASN1T_Offset_B16;

EXTERN int asn1PE_Offset_B16 (OSCTXT* pctxt, ASN1T_Offset_B16 value);

EXTERN int asn1PD_Offset_B16 (OSCTXT* pctxt, ASN1T_Offset_B16* pvalue);

EXTERN int XmlEnc_Offset_B16 (OSCTXT* pctxt, ASN1T_Offset_B16 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Offset_B16 (OSCTXT* pctxt, ASN1T_Offset_B16* pvalue);

EXTERN int asn1JsonEnc_Offset_B16 (OSCTXT *pctxt, ASN1T_Offset_B16 *pvalue);

EXTERN int asn1JsonDec_Offset_B16 (OSCTXT *pctxt, ASN1T_Offset_B16 *pvalue);

EXTERN int asn1PrtToStrm_Offset_B16 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Offset_B16* pvalue);

EXTERN ASN1T_Offset_B16* new_ASN1T_Offset_B16 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B12                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B12 ::= INTEGER (-2048..2047)
    A range of +- 0.0002047 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT16 ASN1T_OffsetLL_B12;

EXTERN int asn1PE_OffsetLL_B12 (OSCTXT* pctxt, ASN1T_OffsetLL_B12 value);

EXTERN int asn1PD_OffsetLL_B12 (OSCTXT* pctxt, ASN1T_OffsetLL_B12* pvalue);

EXTERN int XmlEnc_OffsetLL_B12 (OSCTXT* pctxt, ASN1T_OffsetLL_B12 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetLL_B12 (OSCTXT* pctxt, ASN1T_OffsetLL_B12* pvalue);

EXTERN int asn1JsonEnc_OffsetLL_B12 (OSCTXT *pctxt, ASN1T_OffsetLL_B12 *pvalue);

EXTERN int asn1JsonDec_OffsetLL_B12 (OSCTXT *pctxt, ASN1T_OffsetLL_B12 *pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B12 (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetLL_B12* pvalue);

EXTERN ASN1T_OffsetLL_B12* new_ASN1T_OffsetLL_B12 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B14                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B14 ::= INTEGER (-8192..8191)
    A range of +- 0.0008191 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT16 ASN1T_OffsetLL_B14;

EXTERN int asn1PE_OffsetLL_B14 (OSCTXT* pctxt, ASN1T_OffsetLL_B14 value);

EXTERN int asn1PD_OffsetLL_B14 (OSCTXT* pctxt, ASN1T_OffsetLL_B14* pvalue);

EXTERN int XmlEnc_OffsetLL_B14 (OSCTXT* pctxt, ASN1T_OffsetLL_B14 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetLL_B14 (OSCTXT* pctxt, ASN1T_OffsetLL_B14* pvalue);

EXTERN int asn1JsonEnc_OffsetLL_B14 (OSCTXT *pctxt, ASN1T_OffsetLL_B14 *pvalue);

EXTERN int asn1JsonDec_OffsetLL_B14 (OSCTXT *pctxt, ASN1T_OffsetLL_B14 *pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B14 (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetLL_B14* pvalue);

EXTERN ASN1T_OffsetLL_B14* new_ASN1T_OffsetLL_B14 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B16                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B16 ::= INTEGER (-32768..32767)
    A range of +- 0.0032767 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT16 ASN1T_OffsetLL_B16;

EXTERN int asn1PE_OffsetLL_B16 (OSCTXT* pctxt, ASN1T_OffsetLL_B16 value);

EXTERN int asn1PD_OffsetLL_B16 (OSCTXT* pctxt, ASN1T_OffsetLL_B16* pvalue);

EXTERN int XmlEnc_OffsetLL_B16 (OSCTXT* pctxt, ASN1T_OffsetLL_B16 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetLL_B16 (OSCTXT* pctxt, ASN1T_OffsetLL_B16* pvalue);

EXTERN int asn1JsonEnc_OffsetLL_B16 (OSCTXT *pctxt, ASN1T_OffsetLL_B16 *pvalue);

EXTERN int asn1JsonDec_OffsetLL_B16 (OSCTXT *pctxt, ASN1T_OffsetLL_B16 *pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B16 (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetLL_B16* pvalue);

EXTERN ASN1T_OffsetLL_B16* new_ASN1T_OffsetLL_B16 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B18                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B18 ::= INTEGER (-131072..131071)
    A range of +- 0.0131071 degrees
    The value +131071 shall be used for values >= than +0.0131071 degrees
    The value -131071 shall be used for values <= than -0.0131071 degrees
    The value -131072 shall be used unknown
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT32 ASN1T_OffsetLL_B18;

EXTERN int asn1PE_OffsetLL_B18 (OSCTXT* pctxt, ASN1T_OffsetLL_B18 value);

EXTERN int asn1PD_OffsetLL_B18 (OSCTXT* pctxt, ASN1T_OffsetLL_B18* pvalue);

EXTERN int XmlEnc_OffsetLL_B18 (OSCTXT* pctxt, ASN1T_OffsetLL_B18 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetLL_B18 (OSCTXT* pctxt, ASN1T_OffsetLL_B18* pvalue);

EXTERN int asn1JsonEnc_OffsetLL_B18 (OSCTXT *pctxt, ASN1T_OffsetLL_B18 *pvalue);

EXTERN int asn1JsonDec_OffsetLL_B18 (OSCTXT *pctxt, ASN1T_OffsetLL_B18 *pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B18 (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetLL_B18* pvalue);

EXTERN ASN1T_OffsetLL_B18* new_ASN1T_OffsetLL_B18 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B22                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B22 ::= INTEGER (-2097152..2097151)
    A range of +- 0.2097151 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed) 

*/
typedef OSINT32 ASN1T_OffsetLL_B22;

EXTERN int asn1PE_OffsetLL_B22 (OSCTXT* pctxt, ASN1T_OffsetLL_B22 value);

EXTERN int asn1PD_OffsetLL_B22 (OSCTXT* pctxt, ASN1T_OffsetLL_B22* pvalue);

EXTERN int XmlEnc_OffsetLL_B22 (OSCTXT* pctxt, ASN1T_OffsetLL_B22 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetLL_B22 (OSCTXT* pctxt, ASN1T_OffsetLL_B22* pvalue);

EXTERN int asn1JsonEnc_OffsetLL_B22 (OSCTXT *pctxt, ASN1T_OffsetLL_B22 *pvalue);

EXTERN int asn1JsonDec_OffsetLL_B22 (OSCTXT *pctxt, ASN1T_OffsetLL_B22 *pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B22 (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetLL_B22* pvalue);

EXTERN ASN1T_OffsetLL_B22* new_ASN1T_OffsetLL_B22 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B24                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B24 ::= INTEGER (-8388608..8388607)
    A range of +- 0.8388607 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT32 ASN1T_OffsetLL_B24;

EXTERN int asn1PE_OffsetLL_B24 (OSCTXT* pctxt, ASN1T_OffsetLL_B24 value);

EXTERN int asn1PD_OffsetLL_B24 (OSCTXT* pctxt, ASN1T_OffsetLL_B24* pvalue);

EXTERN int XmlEnc_OffsetLL_B24 (OSCTXT* pctxt, ASN1T_OffsetLL_B24 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetLL_B24 (OSCTXT* pctxt, ASN1T_OffsetLL_B24* pvalue);

EXTERN int asn1JsonEnc_OffsetLL_B24 (OSCTXT *pctxt, ASN1T_OffsetLL_B24 *pvalue);

EXTERN int asn1JsonDec_OffsetLL_B24 (OSCTXT *pctxt, ASN1T_OffsetLL_B24 *pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B24 (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetLL_B24* pvalue);

EXTERN ASN1T_OffsetLL_B24* new_ASN1T_OffsetLL_B24 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PayloadData                                               */
/*                                                            */
/**************************************************************/
/*
PayloadData ::= OCTET STRING (SIZE (1..2048))
*/
struct EXTERN ASN1T_PayloadData {
   OSUINT16 numocts;
   OSOCTET data[2048];
   // ctors
   ASN1T_PayloadData () : numocts(0) {}
   ASN1T_PayloadData (OSUINT16 _numocts, const OSOCTET* _data) :
      numocts (_numocts) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, numocts);
   }
   ASN1T_PayloadData (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT16)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
   }
   // assignment operators
   ASN1T_PayloadData& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT16)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
      return *this;
   }
} ;

class EXTERN ASN1C_PayloadData :
public ASN1CType
{
protected:
   ASN1T_PayloadData& msgData;
public:
   /**
    * Control class: ASN1C_PayloadData
    * Data class:    ASN1T_PayloadData
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PayloadData (ASN1T_PayloadData& data);

   /**
    * Control class: ASN1C_PayloadData<br/>
    * Data class: ASN1T_PayloadData<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PayloadData (OSRTMessageBufferIF& msgBuf, ASN1T_PayloadData& data);

   virtual ~ASN1C_PayloadData () {}

   /**
    * Data class: ASN1T_PayloadData<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_PayloadData.
    */
   inline ASN1T_PayloadData& getData () { return msgData; }

   /**
    * Data class: ASN1T_PayloadData<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_PayloadData.
    */
   inline const ASN1T_PayloadData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             PayloadData will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "PayloadData");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_PayloadData& operator= (const ASN1C_PayloadData&) {return *this;}
} ;

EXTERN int asn1PE_PayloadData (OSCTXT* pctxt, ASN1T_PayloadData* pvalue);

EXTERN int asn1PD_PayloadData (OSCTXT* pctxt, ASN1T_PayloadData* pvalue);

EXTERN int XmlEnc_PayloadData (OSCTXT* pctxt, ASN1T_PayloadData* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PayloadData (OSCTXT* pctxt, ASN1T_PayloadData* pvalue);

EXTERN int asn1JsonEnc_PayloadData (OSCTXT *pctxt, ASN1T_PayloadData *pvalue);

EXTERN int asn1JsonDec_PayloadData (OSCTXT *pctxt, ASN1T_PayloadData *pvalue);

EXTERN int asn1PrtToStrm_PayloadData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PayloadData* pvalue);

EXTERN ASN1T_PayloadData* new_ASN1T_PayloadData (ASN1CType& ccobj);

EXTERN int asn1Init_PayloadData (ASN1T_PayloadData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  PedestrianBicycleDetect                                   */
/*                                                            */
/**************************************************************/
/*
PedestrianBicycleDetect ::= BOOLEAN
                  true if ANY Pedestrians or Bicyclists are 
                  detected crossing the target lane or lanes

*/
typedef OSBOOL ASN1T_PedestrianBicycleDetect;

EXTERN int asn1PE_PedestrianBicycleDetect (OSCTXT* pctxt, ASN1T_PedestrianBicycleDetect value);

EXTERN int asn1PD_PedestrianBicycleDetect (OSCTXT* pctxt, ASN1T_PedestrianBicycleDetect* pvalue);

EXTERN int XmlEnc_PedestrianBicycleDetect (OSCTXT* pctxt, 
   ASN1T_PedestrianBicycleDetect value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PedestrianBicycleDetect (OSCTXT* pctxt, 
   ASN1T_PedestrianBicycleDetect* pvalue);

EXTERN int asn1JsonEnc_PedestrianBicycleDetect (OSCTXT *pctxt, ASN1T_PedestrianBicycleDetect *pvalue);

EXTERN int asn1JsonDec_PedestrianBicycleDetect (OSCTXT *pctxt, ASN1T_PedestrianBicycleDetect *pvalue);

EXTERN int asn1PrtToStrm_PedestrianBicycleDetect (OSCTXT *pctxt, 
   const char* name, const ASN1T_PedestrianBicycleDetect* pvalue);

EXTERN ASN1T_PedestrianBicycleDetect* 
   new_ASN1T_PedestrianBicycleDetect (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  HumanPropelledType                                        */
/*                                                            */
/**************************************************************/
/*
HumanPropelledType ::= ENUMERATED { unavailable(0), otherTypes(1), onFoot(2), skateboard(3), pushOrKickScooter(4), wheelchair(5), ... }
*/
struct EXTERN HumanPropelledType {
   enum Root {
      unavailable = 0,
      otherTypes = 1,
      onFoot = 2,
      skateboard = 3,
      pushOrKickScooter = 4,
      wheelchair = 5
   } ;
} ;

typedef OSUINT32 ASN1T_HumanPropelledType;

EXTERN int asn1PE_HumanPropelledType (OSCTXT* pctxt, ASN1T_HumanPropelledType value);

EXTERN int asn1PD_HumanPropelledType (OSCTXT* pctxt, ASN1T_HumanPropelledType* pvalue);

EXTERN int XmlEnc_HumanPropelledType (OSCTXT* pctxt, 
   ASN1T_HumanPropelledType value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_HumanPropelledType (OSCTXT* pctxt, 
   ASN1T_HumanPropelledType* pvalue);

EXTERN int asn1JsonEnc_HumanPropelledType (OSCTXT *pctxt, ASN1T_HumanPropelledType *pvalue);

EXTERN int asn1JsonDec_HumanPropelledType (OSCTXT *pctxt, ASN1T_HumanPropelledType *pvalue);

EXTERN int asn1PrtToStrm_HumanPropelledType (OSCTXT *pctxt, 
   const char* name, const ASN1T_HumanPropelledType* pvalue);

EXTERN ASN1T_HumanPropelledType* 
   new_ASN1T_HumanPropelledType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_HumanPropelledType_ENUMTAB[];
#define ASN1T_HumanPropelledType_ENUMTABSIZE 6

EXTERN const OSUTF8CHAR* ASN1T_HumanPropelledType_ToString (OSINT32 value);

EXTERN int ASN1T_HumanPropelledType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_HumanPropelledType* pvalue);

EXTERN int ASN1T_HumanPropelledType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_HumanPropelledType* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  PersonalAssistive                                         */
/*                                                            */
/**************************************************************/
/*
PersonalAssistive ::= BIT STRING  { unavailable(0), otherType(1), vision(2), hearing(3), movement(4), cognition(5) } (SIZE (6, ...))
*/
struct EXTERN ASN1T_PersonalAssistive {
   OSUINT8 numbits;
   OSOCTET data[1];
   OSOCTET* extdata;
   // ctors
   ASN1T_PersonalAssistive () : numbits(0), extdata(0) {}
} ;

class EXTERN ASN1C_PersonalAssistive :
public ASN1CBitStr
{
protected:
   ASN1T_PersonalAssistive& msgData;
public:
   // named bits
   enum { unavailable = 0, otherType = 1, vision = 2, hearing = 3, movement = 4, cognition = 5 };

   /**
    * Control class: ASN1C_PersonalAssistive
    * Data class:    ASN1T_PersonalAssistive
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PersonalAssistive (ASN1T_PersonalAssistive& data);

   /**
    * Control class: ASN1C_PersonalAssistive<br/>
    * Data class: ASN1T_PersonalAssistive<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PersonalAssistive (OSRTMessageBufferIF& msgBuf
      , ASN1T_PersonalAssistive& data);

   virtual ~ASN1C_PersonalAssistive () {}

private:
   ASN1C_PersonalAssistive& operator= (const ASN1C_PersonalAssistive&) {return *this;}
} ;

EXTERN int asn1PE_PersonalAssistive (OSCTXT* pctxt, ASN1T_PersonalAssistive* pvalue);

EXTERN int asn1PD_PersonalAssistive (OSCTXT* pctxt, ASN1T_PersonalAssistive* pvalue);

EXTERN int XmlEnc_PersonalAssistive (OSCTXT* pctxt, 
   ASN1T_PersonalAssistive* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PersonalAssistive (OSCTXT* pctxt, 
   ASN1T_PersonalAssistive* pvalue);

EXTERN int asn1JsonEnc_PersonalAssistive (OSCTXT *pctxt, ASN1T_PersonalAssistive *pvalue);

EXTERN int asn1JsonDec_PersonalAssistive (OSCTXT *pctxt, ASN1T_PersonalAssistive *pvalue);

EXTERN int asn1PrtToStrm_PersonalAssistive (OSCTXT *pctxt, 
   const char* name, const ASN1T_PersonalAssistive* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_PersonalAssistive_NAMEDBITTAB[7];

EXTERN ASN1T_PersonalAssistive* new_ASN1T_PersonalAssistive (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_PersonalAssistive (ASN1T_PersonalAssistive* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  PersonalClusterRadius                                     */
/*                                                            */
/**************************************************************/
/*
PersonalClusterRadius ::= INTEGER (0..100)
                                            units of meters

*/
typedef OSUINT8 ASN1T_PersonalClusterRadius;

EXTERN int asn1PE_PersonalClusterRadius (OSCTXT* pctxt, ASN1T_PersonalClusterRadius value);

EXTERN int asn1PD_PersonalClusterRadius (OSCTXT* pctxt, ASN1T_PersonalClusterRadius* pvalue);

EXTERN int XmlEnc_PersonalClusterRadius (OSCTXT* pctxt, 
   ASN1T_PersonalClusterRadius value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PersonalClusterRadius (OSCTXT* pctxt, 
   ASN1T_PersonalClusterRadius* pvalue);

EXTERN int asn1JsonEnc_PersonalClusterRadius (OSCTXT *pctxt, ASN1T_PersonalClusterRadius *pvalue);

EXTERN int asn1JsonDec_PersonalClusterRadius (OSCTXT *pctxt, ASN1T_PersonalClusterRadius *pvalue);

EXTERN int asn1PrtToStrm_PersonalClusterRadius (OSCTXT *pctxt, 
   const char* name, const ASN1T_PersonalClusterRadius* pvalue);

EXTERN ASN1T_PersonalClusterRadius* 
   new_ASN1T_PersonalClusterRadius (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PersonalCrossingInProgress                                */
/*                                                            */
/**************************************************************/
/*
PersonalCrossingInProgress ::= BOOLEAN
                                        Use:
    True  = Yes, is in maneuver
    False = No

*/
typedef OSBOOL ASN1T_PersonalCrossingInProgress;

EXTERN int asn1PE_PersonalCrossingInProgress (OSCTXT* pctxt, ASN1T_PersonalCrossingInProgress value);

EXTERN int asn1PD_PersonalCrossingInProgress (OSCTXT* pctxt, ASN1T_PersonalCrossingInProgress* pvalue);

EXTERN int XmlEnc_PersonalCrossingInProgress (OSCTXT* pctxt, 
   ASN1T_PersonalCrossingInProgress value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PersonalCrossingInProgress (OSCTXT* pctxt, 
   ASN1T_PersonalCrossingInProgress* pvalue);

EXTERN int asn1JsonEnc_PersonalCrossingInProgress (OSCTXT *pctxt, ASN1T_PersonalCrossingInProgress *pvalue);

EXTERN int asn1JsonDec_PersonalCrossingInProgress (OSCTXT *pctxt, ASN1T_PersonalCrossingInProgress *pvalue);

EXTERN int asn1PrtToStrm_PersonalCrossingInProgress (OSCTXT *pctxt, 
   const char* name, const ASN1T_PersonalCrossingInProgress* pvalue);

EXTERN ASN1T_PersonalCrossingInProgress* 
   new_ASN1T_PersonalCrossingInProgress (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PersonalCrossingRequest                                   */
/*                                                            */
/**************************************************************/
/*
PersonalCrossingRequest ::= BOOLEAN
    Use:
    True  = On  (request crossing)
    False = Off (no request)

*/
typedef OSBOOL ASN1T_PersonalCrossingRequest;

EXTERN int asn1PE_PersonalCrossingRequest (OSCTXT* pctxt, ASN1T_PersonalCrossingRequest value);

EXTERN int asn1PD_PersonalCrossingRequest (OSCTXT* pctxt, ASN1T_PersonalCrossingRequest* pvalue);

EXTERN int XmlEnc_PersonalCrossingRequest (OSCTXT* pctxt, 
   ASN1T_PersonalCrossingRequest value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PersonalCrossingRequest (OSCTXT* pctxt, 
   ASN1T_PersonalCrossingRequest* pvalue);

EXTERN int asn1JsonEnc_PersonalCrossingRequest (OSCTXT *pctxt, ASN1T_PersonalCrossingRequest *pvalue);

EXTERN int asn1JsonDec_PersonalCrossingRequest (OSCTXT *pctxt, ASN1T_PersonalCrossingRequest *pvalue);

EXTERN int asn1PrtToStrm_PersonalCrossingRequest (OSCTXT *pctxt, 
   const char* name, const ASN1T_PersonalCrossingRequest* pvalue);

EXTERN ASN1T_PersonalCrossingRequest* 
   new_ASN1T_PersonalCrossingRequest (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PersonalDeviceUsageState                                  */
/*                                                            */
/**************************************************************/
/*
PersonalDeviceUsageState ::= BIT STRING  { unavailable(0), other(1), idle(2), listeningToAudio(3), typing(4), calling(5), playingGames(6), reading(7), viewing(8) } (SIZE (9, ...))
    All bits shall be set to zero when unknown state

*/
struct EXTERN ASN1T_PersonalDeviceUsageState {
   OSUINT8 numbits;
   OSOCTET data[2];
   OSOCTET* extdata;
   // ctors
   ASN1T_PersonalDeviceUsageState () : numbits(0), extdata(0) {}
} ;

class EXTERN ASN1C_PersonalDeviceUsageState :
public ASN1CBitStr
{
protected:
   ASN1T_PersonalDeviceUsageState& msgData;
public:
   // named bits
   enum { unavailable = 0, other = 1, idle = 2, listeningToAudio = 3, typing = 4, calling = 5, playingGames = 6, reading = 7, viewing = 8 };

   /**
    * Control class: ASN1C_PersonalDeviceUsageState
    * Data class:    ASN1T_PersonalDeviceUsageState
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PersonalDeviceUsageState (ASN1T_PersonalDeviceUsageState& data);

   /**
    * Control class: ASN1C_PersonalDeviceUsageState<br/>
    * Data class: ASN1T_PersonalDeviceUsageState<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PersonalDeviceUsageState (OSRTMessageBufferIF& msgBuf
      , ASN1T_PersonalDeviceUsageState& data);

   virtual ~ASN1C_PersonalDeviceUsageState () {}

private:
   ASN1C_PersonalDeviceUsageState& operator= (const ASN1C_PersonalDeviceUsageState&) {return *this;}
} ;

EXTERN int asn1PE_PersonalDeviceUsageState (OSCTXT* pctxt, ASN1T_PersonalDeviceUsageState* pvalue);

EXTERN int asn1PD_PersonalDeviceUsageState (OSCTXT* pctxt, ASN1T_PersonalDeviceUsageState* pvalue);

EXTERN int XmlEnc_PersonalDeviceUsageState (OSCTXT* pctxt, 
   ASN1T_PersonalDeviceUsageState* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PersonalDeviceUsageState (OSCTXT* pctxt, 
   ASN1T_PersonalDeviceUsageState* pvalue);

EXTERN int asn1JsonEnc_PersonalDeviceUsageState (OSCTXT *pctxt, ASN1T_PersonalDeviceUsageState *pvalue);

EXTERN int asn1JsonDec_PersonalDeviceUsageState (OSCTXT *pctxt, ASN1T_PersonalDeviceUsageState *pvalue);

EXTERN int asn1PrtToStrm_PersonalDeviceUsageState (OSCTXT *pctxt, 
   const char* name, const ASN1T_PersonalDeviceUsageState* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_PersonalDeviceUsageState_NAMEDBITTAB[10];

EXTERN ASN1T_PersonalDeviceUsageState* 
   new_ASN1T_PersonalDeviceUsageState (ASN1CType& ccobj);

EXTERN int asn1Init_PersonalDeviceUsageState (ASN1T_PersonalDeviceUsageState* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  PersonalDeviceUserType                                    */
/*                                                            */
/**************************************************************/
/*
PersonalDeviceUserType ::= ENUMERATED { unavailable(0), aPEDESTRIAN(1), aPEDALCYCLIST(2), aPUBLICSAFETYWORKER(3), anANIMAL(4), ... }
*/
struct EXTERN PersonalDeviceUserType {
   enum Root {
      unavailable = 0,
      aPEDESTRIAN = 1,
      aPEDALCYCLIST = 2,
      aPUBLICSAFETYWORKER = 3,
      anANIMAL = 4
   } ;
} ;

typedef OSUINT32 ASN1T_PersonalDeviceUserType;

EXTERN int asn1PE_PersonalDeviceUserType (OSCTXT* pctxt, ASN1T_PersonalDeviceUserType value);

EXTERN int asn1PD_PersonalDeviceUserType (OSCTXT* pctxt, ASN1T_PersonalDeviceUserType* pvalue);

EXTERN int XmlEnc_PersonalDeviceUserType (OSCTXT* pctxt, 
   ASN1T_PersonalDeviceUserType value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PersonalDeviceUserType (OSCTXT* pctxt, 
   ASN1T_PersonalDeviceUserType* pvalue);

EXTERN int asn1JsonEnc_PersonalDeviceUserType (OSCTXT *pctxt, ASN1T_PersonalDeviceUserType *pvalue);

EXTERN int asn1JsonDec_PersonalDeviceUserType (OSCTXT *pctxt, ASN1T_PersonalDeviceUserType *pvalue);

EXTERN int asn1PrtToStrm_PersonalDeviceUserType (OSCTXT *pctxt, 
   const char* name, const ASN1T_PersonalDeviceUserType* pvalue);

EXTERN ASN1T_PersonalDeviceUserType* 
   new_ASN1T_PersonalDeviceUserType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_PersonalDeviceUserType_ENUMTAB[];
#define ASN1T_PersonalDeviceUserType_ENUMTABSIZE 5

EXTERN const OSUTF8CHAR* ASN1T_PersonalDeviceUserType_ToString (OSINT32 value);

EXTERN int ASN1T_PersonalDeviceUserType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_PersonalDeviceUserType* pvalue);

EXTERN int ASN1T_PersonalDeviceUserType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_PersonalDeviceUserType* pvalue);

/**************************************************************/
/*                                                            */
/*  PivotingAllowed                                           */
/*                                                            */
/**************************************************************/
/*
PivotingAllowed ::= BOOLEAN
*/
typedef OSBOOL ASN1T_PivotingAllowed;

EXTERN int asn1PE_PivotingAllowed (OSCTXT* pctxt, ASN1T_PivotingAllowed value);

EXTERN int asn1PD_PivotingAllowed (OSCTXT* pctxt, ASN1T_PivotingAllowed* pvalue);

EXTERN int XmlEnc_PivotingAllowed (OSCTXT* pctxt, ASN1T_PivotingAllowed value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PivotingAllowed (OSCTXT* pctxt, ASN1T_PivotingAllowed* pvalue
   );

EXTERN int asn1JsonEnc_PivotingAllowed (OSCTXT *pctxt, ASN1T_PivotingAllowed *pvalue);

EXTERN int asn1JsonDec_PivotingAllowed (OSCTXT *pctxt, ASN1T_PivotingAllowed *pvalue);

EXTERN int asn1PrtToStrm_PivotingAllowed (OSCTXT *pctxt, 
   const char* name, const ASN1T_PivotingAllowed* pvalue);

EXTERN ASN1T_PivotingAllowed* new_ASN1T_PivotingAllowed (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PositionConfidence                                        */
/*                                                            */
/**************************************************************/
/*
PositionConfidence ::= ENUMERATED { unavailable(0), a500m(1), a200m(2), a100m(3), a50m(4), a20m(5), a10m(6), a5m(7), a2m(8), a1m(9), a50cm(10), a20cm(11), a10cm(12), a5cm(13), a2cm(14), a1cm(15) }
    Encoded as a 4 bit value

*/
struct EXTERN PositionConfidence {
   enum Root {
      unavailable = 0,
      a500m = 1,
      a200m = 2,
      a100m = 3,
      a50m = 4,
      a20m = 5,
      a10m = 6,
      a5m = 7,
      a2m = 8,
      a1m = 9,
      a50cm = 10,
      a20cm = 11,
      a10cm = 12,
      a5cm = 13,
      a2cm = 14,
      a1cm = 15
   } ;
} ;

typedef OSUINT32 ASN1T_PositionConfidence;

EXTERN int asn1PE_PositionConfidence (OSCTXT* pctxt, ASN1T_PositionConfidence value);

EXTERN int asn1PD_PositionConfidence (OSCTXT* pctxt, ASN1T_PositionConfidence* pvalue);

EXTERN int XmlEnc_PositionConfidence (OSCTXT* pctxt, 
   ASN1T_PositionConfidence value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PositionConfidence (OSCTXT* pctxt, 
   ASN1T_PositionConfidence* pvalue);

EXTERN int asn1JsonEnc_PositionConfidence (OSCTXT *pctxt, ASN1T_PositionConfidence *pvalue);

EXTERN int asn1JsonDec_PositionConfidence (OSCTXT *pctxt, ASN1T_PositionConfidence *pvalue);

EXTERN int asn1PrtToStrm_PositionConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_PositionConfidence* pvalue);

EXTERN ASN1T_PositionConfidence* 
   new_ASN1T_PositionConfidence (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_PositionConfidence_ENUMTAB[];
#define ASN1T_PositionConfidence_ENUMTABSIZE 16

EXTERN const OSUTF8CHAR* ASN1T_PositionConfidence_ToString (OSINT32 value);

EXTERN int ASN1T_PositionConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_PositionConfidence* pvalue);

EXTERN int ASN1T_PositionConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_PositionConfidence* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  PrioritizationResponseStatus                              */
/*                                                            */
/**************************************************************/
/*
PrioritizationResponseStatus ::= ENUMERATED { unknown(0), requested(1), processing(2), watchOtherTraffic(3), granted(4), rejected(5), maxPresence(6), reserviceLocked(7), ... }
*/
struct EXTERN PrioritizationResponseStatus {
   enum Root {
      unknown = 0,
      requested = 1,
      processing = 2,
      watchOtherTraffic = 3,
      granted = 4,
      rejected = 5,
      maxPresence = 6,
      reserviceLocked = 7
   } ;
} ;

typedef OSUINT32 ASN1T_PrioritizationResponseStatus;

EXTERN int asn1PE_PrioritizationResponseStatus (OSCTXT* pctxt, ASN1T_PrioritizationResponseStatus value);

EXTERN int asn1PD_PrioritizationResponseStatus (OSCTXT* pctxt, ASN1T_PrioritizationResponseStatus* pvalue);

EXTERN int XmlEnc_PrioritizationResponseStatus (OSCTXT* pctxt, 
   ASN1T_PrioritizationResponseStatus value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PrioritizationResponseStatus (OSCTXT* pctxt, 
   ASN1T_PrioritizationResponseStatus* pvalue);

EXTERN int asn1JsonEnc_PrioritizationResponseStatus (OSCTXT *pctxt, ASN1T_PrioritizationResponseStatus *pvalue);

EXTERN int asn1JsonDec_PrioritizationResponseStatus (OSCTXT *pctxt, ASN1T_PrioritizationResponseStatus *pvalue);

EXTERN int asn1PrtToStrm_PrioritizationResponseStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_PrioritizationResponseStatus* pvalue);

EXTERN ASN1T_PrioritizationResponseStatus* 
   new_ASN1T_PrioritizationResponseStatus (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_PrioritizationResponseStatus_ENUMTAB[];
#define ASN1T_PrioritizationResponseStatus_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_PrioritizationResponseStatus_ToString (OSINT32 value);

EXTERN int ASN1T_PrioritizationResponseStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_PrioritizationResponseStatus* pvalue);

EXTERN int ASN1T_PrioritizationResponseStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_PrioritizationResponseStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  Priority                                                  */
/*                                                            */
/**************************************************************/
/*
Priority ::= OCTET STRING (SIZE (1))
     Follow definition notes on setting these bits

*/
struct EXTERN ASN1T_Priority {
   OSOCTET data[1];
   // ctors
   ASN1T_Priority () {}
   ASN1T_Priority (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, 1);
   }
   ASN1T_Priority (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
   }
   // assignment operators
   ASN1T_Priority& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
      return *this;
   }
} ;

EXTERN int asn1PE_Priority (OSCTXT* pctxt, ASN1T_Priority* pvalue);

EXTERN int asn1PD_Priority (OSCTXT* pctxt, ASN1T_Priority* pvalue);

EXTERN int XmlEnc_Priority (OSCTXT* pctxt, ASN1T_Priority* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Priority (OSCTXT* pctxt, ASN1T_Priority* pvalue);

EXTERN int asn1JsonEnc_Priority (OSCTXT *pctxt, ASN1T_Priority *pvalue);

EXTERN int asn1JsonDec_Priority (OSCTXT *pctxt, ASN1T_Priority *pvalue);

EXTERN int asn1PrtToStrm_Priority (OSCTXT *pctxt, 
   const char* name, const ASN1T_Priority* pvalue);

EXTERN ASN1T_Priority* new_ASN1T_Priority (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PriorityRequestType                                       */
/*                                                            */
/**************************************************************/
/*
PriorityRequestType ::= ENUMERATED { priorityRequestTypeReserved(0), priorityRequest(1), priorityRequestUpdate(2), priorityCancellation(3), ... }
*/
struct EXTERN PriorityRequestType {
   enum Root {
      priorityRequestTypeReserved = 0,
      priorityRequest = 1,
      priorityRequestUpdate = 2,
      priorityCancellation = 3
   } ;
} ;

typedef OSUINT32 ASN1T_PriorityRequestType;

EXTERN int asn1PE_PriorityRequestType (OSCTXT* pctxt, ASN1T_PriorityRequestType value);

EXTERN int asn1PD_PriorityRequestType (OSCTXT* pctxt, ASN1T_PriorityRequestType* pvalue);

EXTERN int XmlEnc_PriorityRequestType (OSCTXT* pctxt, 
   ASN1T_PriorityRequestType value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PriorityRequestType (OSCTXT* pctxt, 
   ASN1T_PriorityRequestType* pvalue);

EXTERN int asn1JsonEnc_PriorityRequestType (OSCTXT *pctxt, ASN1T_PriorityRequestType *pvalue);

EXTERN int asn1JsonDec_PriorityRequestType (OSCTXT *pctxt, ASN1T_PriorityRequestType *pvalue);

EXTERN int asn1PrtToStrm_PriorityRequestType (OSCTXT *pctxt, 
   const char* name, const ASN1T_PriorityRequestType* pvalue);

EXTERN ASN1T_PriorityRequestType* 
   new_ASN1T_PriorityRequestType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_PriorityRequestType_ENUMTAB[];
#define ASN1T_PriorityRequestType_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_PriorityRequestType_ToString (OSINT32 value);

EXTERN int ASN1T_PriorityRequestType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_PriorityRequestType* pvalue);

EXTERN int ASN1T_PriorityRequestType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_PriorityRequestType* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  PrivilegedEventFlags                                      */
/*                                                            */
/**************************************************************/
/*
PrivilegedEventFlags ::= BIT STRING  { peUnavailable(0), peEmergencyResponse(1), peEmergencyLightsActive(2), peEmergencySoundActive(3), peNonEmergencyLightsActive(4), peNonEmergencySoundActive(5) } (SIZE (16))
*/
struct EXTERN ASN1T_PrivilegedEventFlags {
   OSOCTET data[2];
   // ctors
   ASN1T_PrivilegedEventFlags ()  {}
   ASN1T_PrivilegedEventFlags (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 2, _data, 2);
   }
} ;

class EXTERN ASN1C_PrivilegedEventFlags :
public ASN1CBitStr
{
protected:
   ASN1T_PrivilegedEventFlags& msgData;
public:
   // named bits
   enum { peUnavailable = 0, peEmergencyResponse = 1, peEmergencyLightsActive = 2, peEmergencySoundActive = 3, peNonEmergencyLightsActive = 4, peNonEmergencySoundActive = 5 };

   /**
    * Control class: ASN1C_PrivilegedEventFlags
    * Data class:    ASN1T_PrivilegedEventFlags
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PrivilegedEventFlags (ASN1T_PrivilegedEventFlags& data);

   /**
    * Control class: ASN1C_PrivilegedEventFlags<br/>
    * Data class: ASN1T_PrivilegedEventFlags<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PrivilegedEventFlags (OSRTMessageBufferIF& msgBuf
      , ASN1T_PrivilegedEventFlags& data);

   virtual ~ASN1C_PrivilegedEventFlags () {}

private:
   ASN1C_PrivilegedEventFlags& operator= (const ASN1C_PrivilegedEventFlags&) {return *this;}
} ;

EXTERN int asn1PE_PrivilegedEventFlags (OSCTXT* pctxt, ASN1T_PrivilegedEventFlags* pvalue);

EXTERN int asn1PD_PrivilegedEventFlags (OSCTXT* pctxt, ASN1T_PrivilegedEventFlags* pvalue);

EXTERN int XmlEnc_PrivilegedEventFlags (OSCTXT* pctxt, 
   ASN1T_PrivilegedEventFlags* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PrivilegedEventFlags (OSCTXT* pctxt, 
   ASN1T_PrivilegedEventFlags* pvalue);

EXTERN int asn1JsonEnc_PrivilegedEventFlags (OSCTXT *pctxt, ASN1T_PrivilegedEventFlags *pvalue);

EXTERN int asn1JsonDec_PrivilegedEventFlags (OSCTXT *pctxt, ASN1T_PrivilegedEventFlags *pvalue);

EXTERN int asn1PrtToStrm_PrivilegedEventFlags (OSCTXT *pctxt, 
   const char* name, const ASN1T_PrivilegedEventFlags* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_PrivilegedEventFlags_NAMEDBITTAB[7];

EXTERN ASN1T_PrivilegedEventFlags* 
   new_ASN1T_PrivilegedEventFlags (ASN1CType& ccobj);

EXTERN int asn1Init_PrivilegedEventFlags (ASN1T_PrivilegedEventFlags* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  ProbeSegmentNumber                                        */
/*                                                            */
/**************************************************************/
/*
ProbeSegmentNumber ::= INTEGER (0..32767)
    value determined by local device 
    as per standard

*/
typedef OSUINT16 ASN1T_ProbeSegmentNumber;

EXTERN int asn1PE_ProbeSegmentNumber (OSCTXT* pctxt, ASN1T_ProbeSegmentNumber value);

EXTERN int asn1PD_ProbeSegmentNumber (OSCTXT* pctxt, ASN1T_ProbeSegmentNumber* pvalue);

EXTERN int XmlEnc_ProbeSegmentNumber (OSCTXT* pctxt, 
   ASN1T_ProbeSegmentNumber value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeSegmentNumber (OSCTXT* pctxt, 
   ASN1T_ProbeSegmentNumber* pvalue);

EXTERN int asn1JsonEnc_ProbeSegmentNumber (OSCTXT *pctxt, ASN1T_ProbeSegmentNumber *pvalue);

EXTERN int asn1JsonDec_ProbeSegmentNumber (OSCTXT *pctxt, ASN1T_ProbeSegmentNumber *pvalue);

EXTERN int asn1PrtToStrm_ProbeSegmentNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeSegmentNumber* pvalue);

EXTERN ASN1T_ProbeSegmentNumber* 
   new_ASN1T_ProbeSegmentNumber (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PublicSafetyAndRoadWorkerActivity                         */
/*                                                            */
/**************************************************************/
/*
PublicSafetyAndRoadWorkerActivity ::= BIT STRING  { unavailable(0), workingOnRoad(1), settingUpClosures(2), respondingToEvents(3), directingTraffic(4), otherActivities(5) } (SIZE (6, ...))
*/
struct EXTERN ASN1T_PublicSafetyAndRoadWorkerActivity {
   OSUINT8 numbits;
   OSOCTET data[1];
   OSOCTET* extdata;
   // ctors
   ASN1T_PublicSafetyAndRoadWorkerActivity () : numbits(0), extdata(0) {}
} ;

class EXTERN ASN1C_PublicSafetyAndRoadWorkerActivity :
public ASN1CBitStr
{
protected:
   ASN1T_PublicSafetyAndRoadWorkerActivity& msgData;
public:
   // named bits
   enum { unavailable = 0, workingOnRoad = 1, settingUpClosures = 2, respondingToEvents = 3, directingTraffic = 4, otherActivities = 5 };

   /**
    * Control class: ASN1C_PublicSafetyAndRoadWorkerActivity
    * Data class:    ASN1T_PublicSafetyAndRoadWorkerActivity
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PublicSafetyAndRoadWorkerActivity
       (ASN1T_PublicSafetyAndRoadWorkerActivity& data);

   /**
    * Control class: ASN1C_PublicSafetyAndRoadWorkerActivity<br/>
    * Data class: ASN1T_PublicSafetyAndRoadWorkerActivity<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PublicSafetyAndRoadWorkerActivity (OSRTMessageBufferIF& msgBuf
      , ASN1T_PublicSafetyAndRoadWorkerActivity& data);

   virtual ~ASN1C_PublicSafetyAndRoadWorkerActivity () {}

private:
   ASN1C_PublicSafetyAndRoadWorkerActivity& operator= (const ASN1C_PublicSafetyAndRoadWorkerActivity&) {return *this;}
} ;

EXTERN int asn1PE_PublicSafetyAndRoadWorkerActivity (OSCTXT* pctxt, ASN1T_PublicSafetyAndRoadWorkerActivity* pvalue);

EXTERN int asn1PD_PublicSafetyAndRoadWorkerActivity (OSCTXT* pctxt, ASN1T_PublicSafetyAndRoadWorkerActivity* pvalue);

EXTERN int XmlEnc_PublicSafetyAndRoadWorkerActivity (OSCTXT* pctxt, 
   ASN1T_PublicSafetyAndRoadWorkerActivity* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PublicSafetyAndRoadWorkerActivity (OSCTXT* pctxt, 
   ASN1T_PublicSafetyAndRoadWorkerActivity* pvalue);

EXTERN int asn1JsonEnc_PublicSafetyAndRoadWorkerActivity (OSCTXT *pctxt, ASN1T_PublicSafetyAndRoadWorkerActivity *pvalue);

EXTERN int asn1JsonDec_PublicSafetyAndRoadWorkerActivity (OSCTXT *pctxt, ASN1T_PublicSafetyAndRoadWorkerActivity *pvalue);

EXTERN int asn1PrtToStrm_PublicSafetyAndRoadWorkerActivity (OSCTXT *pctxt, 
   const char* name, const ASN1T_PublicSafetyAndRoadWorkerActivity* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_PublicSafetyAndRoadWorkerActivity_NAMEDBITTAB[7];

EXTERN ASN1T_PublicSafetyAndRoadWorkerActivity* 
   new_ASN1T_PublicSafetyAndRoadWorkerActivity (ASN1CType& ccobj);

EXTERN int asn1Init_PublicSafetyAndRoadWorkerActivity (
   ASN1T_PublicSafetyAndRoadWorkerActivity* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  PublicSafetyDirectingTrafficSubType                       */
/*                                                            */
/**************************************************************/
/*
PublicSafetyDirectingTrafficSubType ::= BIT STRING  { unavailable(0), policeAndTrafficOfficers(1), trafficControlPersons(2), railroadCrossingGuards(3), civilDefenseNationalGuardMilitaryPolice(4), emergencyOrganizationPersonnel(5), highwayServiceVehiclePersonnel(6) } (SIZE (7, ...))
*/
struct EXTERN ASN1T_PublicSafetyDirectingTrafficSubType {
   OSUINT8 numbits;
   OSOCTET data[1];
   OSOCTET* extdata;
   // ctors
   ASN1T_PublicSafetyDirectingTrafficSubType () : numbits(0), extdata(0) {}
} ;

class EXTERN ASN1C_PublicSafetyDirectingTrafficSubType :
public ASN1CBitStr
{
protected:
   ASN1T_PublicSafetyDirectingTrafficSubType& msgData;
public:
   // named bits
   enum { unavailable = 0, policeAndTrafficOfficers = 1, trafficControlPersons = 2, railroadCrossingGuards = 3, civilDefenseNationalGuardMilitaryPolice = 4, emergencyOrganizationPersonnel = 5, highwayServiceVehiclePersonnel = 6 };

   /**
    * Control class: ASN1C_PublicSafetyDirectingTrafficSubType
    * Data class:    ASN1T_PublicSafetyDirectingTrafficSubType
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PublicSafetyDirectingTrafficSubType
       (ASN1T_PublicSafetyDirectingTrafficSubType& data);

   /**
    * Control class: ASN1C_PublicSafetyDirectingTrafficSubType<br/>
    * Data class: ASN1T_PublicSafetyDirectingTrafficSubType<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PublicSafetyDirectingTrafficSubType (OSRTMessageBufferIF& msgBuf
      , ASN1T_PublicSafetyDirectingTrafficSubType& data);

   virtual ~ASN1C_PublicSafetyDirectingTrafficSubType () {}

private:
   ASN1C_PublicSafetyDirectingTrafficSubType& operator= (const ASN1C_PublicSafetyDirectingTrafficSubType&) {return *this;}
} ;

EXTERN int asn1PE_PublicSafetyDirectingTrafficSubType (OSCTXT* pctxt, ASN1T_PublicSafetyDirectingTrafficSubType* pvalue);

EXTERN int asn1PD_PublicSafetyDirectingTrafficSubType (OSCTXT* pctxt, ASN1T_PublicSafetyDirectingTrafficSubType* pvalue);

EXTERN int XmlEnc_PublicSafetyDirectingTrafficSubType (OSCTXT* pctxt, 
   ASN1T_PublicSafetyDirectingTrafficSubType* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PublicSafetyDirectingTrafficSubType (OSCTXT* pctxt, 
   ASN1T_PublicSafetyDirectingTrafficSubType* pvalue);

EXTERN int asn1JsonEnc_PublicSafetyDirectingTrafficSubType (OSCTXT *pctxt, ASN1T_PublicSafetyDirectingTrafficSubType *pvalue);

EXTERN int asn1JsonDec_PublicSafetyDirectingTrafficSubType (OSCTXT *pctxt, ASN1T_PublicSafetyDirectingTrafficSubType *pvalue);

EXTERN int asn1PrtToStrm_PublicSafetyDirectingTrafficSubType (OSCTXT *pctxt, 
   const char* name, const ASN1T_PublicSafetyDirectingTrafficSubType* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_PublicSafetyDirectingTrafficSubType_NAMEDBITTAB[8];

EXTERN ASN1T_PublicSafetyDirectingTrafficSubType* 
   new_ASN1T_PublicSafetyDirectingTrafficSubType (ASN1CType& ccobj);

EXTERN int asn1Init_PublicSafetyDirectingTrafficSubType (
   ASN1T_PublicSafetyDirectingTrafficSubType* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  PublicSafetyEventResponderWorkerType                      */
/*                                                            */
/**************************************************************/
/*
PublicSafetyEventResponderWorkerType ::= ENUMERATED { unavailable(0), towOperater(1), fireAndEMSWorker(2), aDOTWorker(3), lawEnforcement(4), hazmatResponder(5), animalControlWorker(6), otherPersonnel(7), ... }
*/
struct EXTERN PublicSafetyEventResponderWorkerType {
   enum Root {
      unavailable = 0,
      towOperater = 1,
      fireAndEMSWorker = 2,
      aDOTWorker = 3,
      lawEnforcement = 4,
      hazmatResponder = 5,
      animalControlWorker = 6,
      otherPersonnel = 7
   } ;
} ;

typedef OSUINT32 ASN1T_PublicSafetyEventResponderWorkerType;

EXTERN int asn1PE_PublicSafetyEventResponderWorkerType (OSCTXT* pctxt, ASN1T_PublicSafetyEventResponderWorkerType value);

EXTERN int asn1PD_PublicSafetyEventResponderWorkerType (OSCTXT* pctxt, ASN1T_PublicSafetyEventResponderWorkerType* pvalue);

EXTERN int XmlEnc_PublicSafetyEventResponderWorkerType (OSCTXT* pctxt, 
   ASN1T_PublicSafetyEventResponderWorkerType value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PublicSafetyEventResponderWorkerType (OSCTXT* pctxt, 
   ASN1T_PublicSafetyEventResponderWorkerType* pvalue);

EXTERN int asn1JsonEnc_PublicSafetyEventResponderWorkerType (OSCTXT *pctxt, ASN1T_PublicSafetyEventResponderWorkerType *pvalue);

EXTERN int asn1JsonDec_PublicSafetyEventResponderWorkerType (OSCTXT *pctxt, ASN1T_PublicSafetyEventResponderWorkerType *pvalue);

EXTERN int asn1PrtToStrm_PublicSafetyEventResponderWorkerType (OSCTXT *pctxt, 
   const char* name, const ASN1T_PublicSafetyEventResponderWorkerType* pvalue);

EXTERN ASN1T_PublicSafetyEventResponderWorkerType* 
   new_ASN1T_PublicSafetyEventResponderWorkerType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_PublicSafetyEventResponderWorkerType_ENUMTAB[];
#define ASN1T_PublicSafetyEventResponderWorkerType_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_PublicSafetyEventResponderWorkerType_ToString (OSINT32 value);

EXTERN int ASN1T_PublicSafetyEventResponderWorkerType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_PublicSafetyEventResponderWorkerType* pvalue)
      ;

EXTERN int ASN1T_PublicSafetyEventResponderWorkerType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_PublicSafetyEventResponderWorkerType* pvalue);

/**************************************************************/
/*                                                            */
/*  RadiusOfCurvature                                         */
/*                                                            */
/**************************************************************/
/*
RadiusOfCurvature ::= INTEGER (-32767..32767)
    LSB units of 10cm
    A straight path to use value of 32767

*/
typedef OSINT16 ASN1T_RadiusOfCurvature;

EXTERN int asn1PE_RadiusOfCurvature (OSCTXT* pctxt, ASN1T_RadiusOfCurvature value);

EXTERN int asn1PD_RadiusOfCurvature (OSCTXT* pctxt, ASN1T_RadiusOfCurvature* pvalue);

EXTERN int XmlEnc_RadiusOfCurvature (OSCTXT* pctxt, 
   ASN1T_RadiusOfCurvature value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RadiusOfCurvature (OSCTXT* pctxt, 
   ASN1T_RadiusOfCurvature* pvalue);

EXTERN int asn1JsonEnc_RadiusOfCurvature (OSCTXT *pctxt, ASN1T_RadiusOfCurvature *pvalue);

EXTERN int asn1JsonDec_RadiusOfCurvature (OSCTXT *pctxt, ASN1T_RadiusOfCurvature *pvalue);

EXTERN int asn1PrtToStrm_RadiusOfCurvature (OSCTXT *pctxt, 
   const char* name, const ASN1T_RadiusOfCurvature* pvalue);

EXTERN ASN1T_RadiusOfCurvature* new_ASN1T_RadiusOfCurvature (ASN1CType& ccobj)
   ;

/**************************************************************/
/*                                                            */
/*  Radius_B12                                                */
/*                                                            */
/**************************************************************/
/*
Radius-B12 ::= INTEGER (0..4095)
    with the LSB unit value determined elsewhere
    the value 4095 shall be used for unknown

*/
typedef OSUINT16 ASN1T_Radius_B12;

EXTERN int asn1PE_Radius_B12 (OSCTXT* pctxt, ASN1T_Radius_B12 value);

EXTERN int asn1PD_Radius_B12 (OSCTXT* pctxt, ASN1T_Radius_B12* pvalue);

EXTERN int XmlEnc_Radius_B12 (OSCTXT* pctxt, ASN1T_Radius_B12 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Radius_B12 (OSCTXT* pctxt, ASN1T_Radius_B12* pvalue);

EXTERN int asn1JsonEnc_Radius_B12 (OSCTXT *pctxt, ASN1T_Radius_B12 *pvalue);

EXTERN int asn1JsonDec_Radius_B12 (OSCTXT *pctxt, ASN1T_Radius_B12 *pvalue);

EXTERN int asn1PrtToStrm_Radius_B12 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Radius_B12* pvalue);

EXTERN ASN1T_Radius_B12* new_ASN1T_Radius_B12 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  RainSensor                                                */
/*                                                            */
/**************************************************************/
/*
RainSensor ::= ENUMERATED { none(0), lightMist(1), heavyMist(2), lightRainOrDrizzle(3), rain(4), moderateRain(5), heavyRain(6), heavyDownpour(7) }
*/
struct EXTERN RainSensor {
   enum Root {
      none = 0,
      lightMist = 1,
      heavyMist = 2,
      lightRainOrDrizzle = 3,
      rain = 4,
      moderateRain = 5,
      heavyRain = 6,
      heavyDownpour = 7
   } ;
} ;

typedef OSUINT32 ASN1T_RainSensor;

EXTERN int asn1PE_RainSensor (OSCTXT* pctxt, ASN1T_RainSensor value);

EXTERN int asn1PD_RainSensor (OSCTXT* pctxt, ASN1T_RainSensor* pvalue);

EXTERN int XmlEnc_RainSensor (OSCTXT* pctxt, ASN1T_RainSensor value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RainSensor (OSCTXT* pctxt, ASN1T_RainSensor* pvalue);

EXTERN int asn1JsonEnc_RainSensor (OSCTXT *pctxt, ASN1T_RainSensor *pvalue);

EXTERN int asn1JsonDec_RainSensor (OSCTXT *pctxt, ASN1T_RainSensor *pvalue);

EXTERN int asn1PrtToStrm_RainSensor (OSCTXT *pctxt, 
   const char* name, const ASN1T_RainSensor* pvalue);

EXTERN ASN1T_RainSensor* new_ASN1T_RainSensor (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_RainSensor_ENUMTAB[];
#define ASN1T_RainSensor_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_RainSensor_ToString (OSINT32 value);

EXTERN int ASN1T_RainSensor_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_RainSensor* pvalue);

EXTERN int ASN1T_RainSensor_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_RainSensor* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionId                                                  */
/*                                                            */
/**************************************************************/
/*
RegionId ::= INTEGER (0..255)
*/
typedef OSUINT8 ASN1T_RegionId;

EXTERN int asn1PE_RegionId (OSCTXT* pctxt, ASN1T_RegionId value);

EXTERN int asn1PD_RegionId (OSCTXT* pctxt, ASN1T_RegionId* pvalue);

EXTERN int XmlEnc_RegionId (OSCTXT* pctxt, ASN1T_RegionId value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RegionId (OSCTXT* pctxt, ASN1T_RegionId* pvalue);

EXTERN int asn1JsonEnc_RegionId (OSCTXT *pctxt, ASN1T_RegionId *pvalue);

EXTERN int asn1JsonDec_RegionId (OSCTXT *pctxt, ASN1T_RegionId *pvalue);

EXTERN int asn1PrtToStrm_RegionId (OSCTXT *pctxt, 
   const char* name, const ASN1T_RegionId* pvalue);

EXTERN ASN1T_RegionId* new_ASN1T_RegionId (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  RequestedItem                                             */
/*                                                            */
/**************************************************************/
/*
RequestedItem ::= ENUMERATED { reserved(0), itemA(1), itemB(2), itemC(3), itemD(4), itemE(5), itemF(6), itemG(7), itemI(8), itemJ(9), itemK(10), itemL(11), itemM(12), itemN(13), itemO(14), itemP(15), itemQ(16), ... }
*/
struct EXTERN RequestedItem {
   enum Root {
      reserved = 0,
      itemA = 1,
      itemB = 2,
      itemC = 3,
      itemD = 4,
      itemE = 5,
      itemF = 6,
      itemG = 7,
      itemI = 8,
      itemJ = 9,
      itemK = 10,
      itemL = 11,
      itemM = 12,
      itemN = 13,
      itemO = 14,
      itemP = 15,
      itemQ = 16
   } ;
} ;

typedef OSUINT32 ASN1T_RequestedItem;

EXTERN int asn1PE_RequestedItem (OSCTXT* pctxt, ASN1T_RequestedItem value);

EXTERN int asn1PD_RequestedItem (OSCTXT* pctxt, ASN1T_RequestedItem* pvalue);

EXTERN int XmlEnc_RequestedItem (OSCTXT* pctxt, ASN1T_RequestedItem value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestedItem (OSCTXT* pctxt, ASN1T_RequestedItem* pvalue);

EXTERN int asn1JsonEnc_RequestedItem (OSCTXT *pctxt, ASN1T_RequestedItem *pvalue);

EXTERN int asn1JsonDec_RequestedItem (OSCTXT *pctxt, ASN1T_RequestedItem *pvalue);

EXTERN int asn1PrtToStrm_RequestedItem (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestedItem* pvalue);

EXTERN ASN1T_RequestedItem* new_ASN1T_RequestedItem (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_RequestedItem_ENUMTAB[];
#define ASN1T_RequestedItem_ENUMTABSIZE 17

EXTERN const OSUTF8CHAR* ASN1T_RequestedItem_ToString (OSINT32 value);

EXTERN int ASN1T_RequestedItem_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_RequestedItem* pvalue);

EXTERN int ASN1T_RequestedItem_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_RequestedItem* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestID                                                 */
/*                                                            */
/**************************************************************/
/*
RequestID ::= INTEGER (0..255)
*/
typedef OSUINT8 ASN1T_RequestID;

EXTERN int asn1PE_RequestID (OSCTXT* pctxt, ASN1T_RequestID value);

EXTERN int asn1PD_RequestID (OSCTXT* pctxt, ASN1T_RequestID* pvalue);

EXTERN int XmlEnc_RequestID (OSCTXT* pctxt, ASN1T_RequestID value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestID (OSCTXT* pctxt, ASN1T_RequestID* pvalue);

EXTERN int asn1JsonEnc_RequestID (OSCTXT *pctxt, ASN1T_RequestID *pvalue);

EXTERN int asn1JsonDec_RequestID (OSCTXT *pctxt, ASN1T_RequestID *pvalue);

EXTERN int asn1PrtToStrm_RequestID (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestID* pvalue);

EXTERN ASN1T_RequestID* new_ASN1T_RequestID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  RequestImportanceLevel                                    */
/*                                                            */
/**************************************************************/
/*
RequestImportanceLevel ::= ENUMERATED { requestImportanceLevelUnKnown(0), requestImportanceLevel1(1), requestImportanceLevel2(2), requestImportanceLevel3(3), requestImportanceLevel4(4), requestImportanceLevel5(5), requestImportanceLevel6(6), requestImportanceLevel7(7), requestImportanceLevel8(8), requestImportanceLevel9(9), requestImportanceLevel10(10), requestImportanceLevel11(11), requestImportanceLevel12(12), requestImportanceLevel13(13), requestImportanceLevel14(14), requestImportanceReserved(15) }
*/
struct EXTERN RequestImportanceLevel {
   enum Root {
      requestImportanceLevelUnKnown = 0,
      requestImportanceLevel1 = 1,
      requestImportanceLevel2 = 2,
      requestImportanceLevel3 = 3,
      requestImportanceLevel4 = 4,
      requestImportanceLevel5 = 5,
      requestImportanceLevel6 = 6,
      requestImportanceLevel7 = 7,
      requestImportanceLevel8 = 8,
      requestImportanceLevel9 = 9,
      requestImportanceLevel10 = 10,
      requestImportanceLevel11 = 11,
      requestImportanceLevel12 = 12,
      requestImportanceLevel13 = 13,
      requestImportanceLevel14 = 14,
      requestImportanceReserved = 15
   } ;
} ;

typedef OSUINT32 ASN1T_RequestImportanceLevel;

EXTERN int asn1PE_RequestImportanceLevel (OSCTXT* pctxt, ASN1T_RequestImportanceLevel value);

EXTERN int asn1PD_RequestImportanceLevel (OSCTXT* pctxt, ASN1T_RequestImportanceLevel* pvalue);

EXTERN int XmlEnc_RequestImportanceLevel (OSCTXT* pctxt, 
   ASN1T_RequestImportanceLevel value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestImportanceLevel (OSCTXT* pctxt, 
   ASN1T_RequestImportanceLevel* pvalue);

EXTERN int asn1JsonEnc_RequestImportanceLevel (OSCTXT *pctxt, ASN1T_RequestImportanceLevel *pvalue);

EXTERN int asn1JsonDec_RequestImportanceLevel (OSCTXT *pctxt, ASN1T_RequestImportanceLevel *pvalue);

EXTERN int asn1PrtToStrm_RequestImportanceLevel (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestImportanceLevel* pvalue);

EXTERN ASN1T_RequestImportanceLevel* 
   new_ASN1T_RequestImportanceLevel (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_RequestImportanceLevel_ENUMTAB[];
#define ASN1T_RequestImportanceLevel_ENUMTABSIZE 16

EXTERN const OSUTF8CHAR* ASN1T_RequestImportanceLevel_ToString (OSINT32 value);

EXTERN int ASN1T_RequestImportanceLevel_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_RequestImportanceLevel* pvalue);

EXTERN int ASN1T_RequestImportanceLevel_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_RequestImportanceLevel* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestSubRole                                            */
/*                                                            */
/**************************************************************/
/*
RequestSubRole ::= ENUMERATED { requestSubRoleUnKnown(0), requestSubRole1(1), requestSubRole2(2), requestSubRole3(3), requestSubRole4(4), requestSubRole5(5), requestSubRole6(6), requestSubRole7(7), requestSubRole8(8), requestSubRole9(9), requestSubRole10(10), requestSubRole11(11), requestSubRole12(12), requestSubRole13(13), requestSubRole14(14), requestSubRoleReserved(15) }
*/
struct EXTERN RequestSubRole {
   enum Root {
      requestSubRoleUnKnown = 0,
      requestSubRole1 = 1,
      requestSubRole2 = 2,
      requestSubRole3 = 3,
      requestSubRole4 = 4,
      requestSubRole5 = 5,
      requestSubRole6 = 6,
      requestSubRole7 = 7,
      requestSubRole8 = 8,
      requestSubRole9 = 9,
      requestSubRole10 = 10,
      requestSubRole11 = 11,
      requestSubRole12 = 12,
      requestSubRole13 = 13,
      requestSubRole14 = 14,
      requestSubRoleReserved = 15
   } ;
} ;

typedef OSUINT32 ASN1T_RequestSubRole;

EXTERN int asn1PE_RequestSubRole (OSCTXT* pctxt, ASN1T_RequestSubRole value);

EXTERN int asn1PD_RequestSubRole (OSCTXT* pctxt, ASN1T_RequestSubRole* pvalue);

EXTERN int XmlEnc_RequestSubRole (OSCTXT* pctxt, ASN1T_RequestSubRole value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestSubRole (OSCTXT* pctxt, ASN1T_RequestSubRole* pvalue)
   ;

EXTERN int asn1JsonEnc_RequestSubRole (OSCTXT *pctxt, ASN1T_RequestSubRole *pvalue);

EXTERN int asn1JsonDec_RequestSubRole (OSCTXT *pctxt, ASN1T_RequestSubRole *pvalue);

EXTERN int asn1PrtToStrm_RequestSubRole (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestSubRole* pvalue);

EXTERN ASN1T_RequestSubRole* new_ASN1T_RequestSubRole (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_RequestSubRole_ENUMTAB[];
#define ASN1T_RequestSubRole_ENUMTABSIZE 16

EXTERN const OSUTF8CHAR* ASN1T_RequestSubRole_ToString (OSINT32 value);

EXTERN int ASN1T_RequestSubRole_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_RequestSubRole* pvalue);

EXTERN int ASN1T_RequestSubRole_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_RequestSubRole* pvalue);

/**************************************************************/
/*                                                            */
/*  ResponseType                                              */
/*                                                            */
/**************************************************************/
/*
ResponseType ::= ENUMERATED { notInUseOrNotEquipped(0), emergency(1), nonEmergency(2), pursuit(3), stationary(4), slowMoving(5), stopAndGoMovement(6), ... }
*/
struct EXTERN ResponseType {
   enum Root {
      notInUseOrNotEquipped = 0,
      emergency = 1,
      nonEmergency = 2,
      pursuit = 3,
      stationary = 4,
      slowMoving = 5,
      stopAndGoMovement = 6
   } ;
} ;

typedef OSUINT32 ASN1T_ResponseType;

EXTERN int asn1PE_ResponseType (OSCTXT* pctxt, ASN1T_ResponseType value);

EXTERN int asn1PD_ResponseType (OSCTXT* pctxt, ASN1T_ResponseType* pvalue);

EXTERN int XmlEnc_ResponseType (OSCTXT* pctxt, ASN1T_ResponseType value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ResponseType (OSCTXT* pctxt, ASN1T_ResponseType* pvalue);

EXTERN int asn1JsonEnc_ResponseType (OSCTXT *pctxt, ASN1T_ResponseType *pvalue);

EXTERN int asn1JsonDec_ResponseType (OSCTXT *pctxt, ASN1T_ResponseType *pvalue);

EXTERN int asn1PrtToStrm_ResponseType (OSCTXT *pctxt, 
   const char* name, const ASN1T_ResponseType* pvalue);

EXTERN ASN1T_ResponseType* new_ASN1T_ResponseType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_ResponseType_ENUMTAB[];
#define ASN1T_ResponseType_ENUMTABSIZE 7

EXTERN const OSUTF8CHAR* ASN1T_ResponseType_ToString (OSINT32 value);

EXTERN int ASN1T_ResponseType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_ResponseType* pvalue);

EXTERN int ASN1T_ResponseType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_ResponseType* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionAppliesTo                                      */
/*                                                            */
/**************************************************************/
/*
RestrictionAppliesTo ::= ENUMERATED { none(0), equippedTransit(1), equippedTaxis(2), equippedOther(3), emissionCompliant(4), equippedBicycle(5), weightCompliant(6), heightCompliant(7), pedestrians(8), slowMovingPersons(9), wheelchairUsers(10), visualDisabilities(11), audioDisabilities(12), otherUnknownDisabilities(13), ... }
*/
struct EXTERN RestrictionAppliesTo {
   enum Root {
      none = 0,
      equippedTransit = 1,
      equippedTaxis = 2,
      equippedOther = 3,
      emissionCompliant = 4,
      equippedBicycle = 5,
      weightCompliant = 6,
      heightCompliant = 7,
      pedestrians = 8,
      slowMovingPersons = 9,
      wheelchairUsers = 10,
      visualDisabilities = 11,
      audioDisabilities = 12,
      otherUnknownDisabilities = 13
   } ;
} ;

typedef OSUINT32 ASN1T_RestrictionAppliesTo;

EXTERN int asn1PE_RestrictionAppliesTo (OSCTXT* pctxt, ASN1T_RestrictionAppliesTo value);

EXTERN int asn1PD_RestrictionAppliesTo (OSCTXT* pctxt, ASN1T_RestrictionAppliesTo* pvalue);

EXTERN int XmlEnc_RestrictionAppliesTo (OSCTXT* pctxt, 
   ASN1T_RestrictionAppliesTo value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionAppliesTo (OSCTXT* pctxt, 
   ASN1T_RestrictionAppliesTo* pvalue);

EXTERN int asn1JsonEnc_RestrictionAppliesTo (OSCTXT *pctxt, ASN1T_RestrictionAppliesTo *pvalue);

EXTERN int asn1JsonDec_RestrictionAppliesTo (OSCTXT *pctxt, ASN1T_RestrictionAppliesTo *pvalue);

EXTERN int asn1PrtToStrm_RestrictionAppliesTo (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionAppliesTo* pvalue);

EXTERN ASN1T_RestrictionAppliesTo* 
   new_ASN1T_RestrictionAppliesTo (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_RestrictionAppliesTo_ENUMTAB[];
#define ASN1T_RestrictionAppliesTo_ENUMTABSIZE 14

EXTERN const OSUTF8CHAR* ASN1T_RestrictionAppliesTo_ToString (OSINT32 value);

EXTERN int ASN1T_RestrictionAppliesTo_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_RestrictionAppliesTo* pvalue);

EXTERN int ASN1T_RestrictionAppliesTo_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_RestrictionAppliesTo* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionClassID                                        */
/*                                                            */
/**************************************************************/
/*
RestrictionClassID ::= INTEGER (0..255)
    An index value to identify data about classes of users
    the value used varies with each intersection's
    needs and is defined in the map to the assigned 
    classes of supported users.

*/
typedef OSUINT8 ASN1T_RestrictionClassID;

EXTERN int asn1PE_RestrictionClassID (OSCTXT* pctxt, ASN1T_RestrictionClassID value);

EXTERN int asn1PD_RestrictionClassID (OSCTXT* pctxt, ASN1T_RestrictionClassID* pvalue);

EXTERN int XmlEnc_RestrictionClassID (OSCTXT* pctxt, 
   ASN1T_RestrictionClassID value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionClassID (OSCTXT* pctxt, 
   ASN1T_RestrictionClassID* pvalue);

EXTERN int asn1JsonEnc_RestrictionClassID (OSCTXT *pctxt, ASN1T_RestrictionClassID *pvalue);

EXTERN int asn1JsonDec_RestrictionClassID (OSCTXT *pctxt, ASN1T_RestrictionClassID *pvalue);

EXTERN int asn1PrtToStrm_RestrictionClassID (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionClassID* pvalue);

EXTERN ASN1T_RestrictionClassID* 
   new_ASN1T_RestrictionClassID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  RoadRegulatorID                                           */
/*                                                            */
/**************************************************************/
/*
RoadRegulatorID ::= INTEGER (0..65535)
    The value zero shall be used for testing only

*/
typedef OSUINT16 ASN1T_RoadRegulatorID;

EXTERN int asn1PE_RoadRegulatorID (OSCTXT* pctxt, ASN1T_RoadRegulatorID value);

EXTERN int asn1PD_RoadRegulatorID (OSCTXT* pctxt, ASN1T_RoadRegulatorID* pvalue);

EXTERN int XmlEnc_RoadRegulatorID (OSCTXT* pctxt, ASN1T_RoadRegulatorID value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadRegulatorID (OSCTXT* pctxt, ASN1T_RoadRegulatorID* pvalue
   );

EXTERN int asn1JsonEnc_RoadRegulatorID (OSCTXT *pctxt, ASN1T_RoadRegulatorID *pvalue);

EXTERN int asn1JsonDec_RoadRegulatorID (OSCTXT *pctxt, ASN1T_RoadRegulatorID *pvalue);

EXTERN int asn1PrtToStrm_RoadRegulatorID (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadRegulatorID* pvalue);

EXTERN ASN1T_RoadRegulatorID* new_ASN1T_RoadRegulatorID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  RoadSegmentID                                             */
/*                                                            */
/**************************************************************/
/*
RoadSegmentID ::= INTEGER (0..65535)
    The values zero to 255 shall be used for testing only
    Note that the value assigned to an RoadSegment will be
    unique within a given regional ID only during its use

*/
typedef OSUINT16 ASN1T_RoadSegmentID;

EXTERN int asn1PE_RoadSegmentID (OSCTXT* pctxt, ASN1T_RoadSegmentID value);

EXTERN int asn1PD_RoadSegmentID (OSCTXT* pctxt, ASN1T_RoadSegmentID* pvalue);

EXTERN int XmlEnc_RoadSegmentID (OSCTXT* pctxt, ASN1T_RoadSegmentID value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSegmentID (OSCTXT* pctxt, ASN1T_RoadSegmentID* pvalue);

EXTERN int asn1JsonEnc_RoadSegmentID (OSCTXT *pctxt, ASN1T_RoadSegmentID *pvalue);

EXTERN int asn1JsonDec_RoadSegmentID (OSCTXT *pctxt, ASN1T_RoadSegmentID *pvalue);

EXTERN int asn1PrtToStrm_RoadSegmentID (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSegmentID* pvalue);

EXTERN ASN1T_RoadSegmentID* new_ASN1T_RoadSegmentID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  RoadwayCrownAngle                                         */
/*                                                            */
/**************************************************************/
/*
RoadwayCrownAngle ::= INTEGER (-128..127)
     In LSB units of 0.3 degrees of angle
     over a range of -38.1 to + 38.1 degrees
     The value -128 shall be used for unknown
     The value zero shall be used for angles 
     which are between -0.15 and +0.15

*/
typedef OSINT8 ASN1T_RoadwayCrownAngle;

EXTERN int asn1PE_RoadwayCrownAngle (OSCTXT* pctxt, ASN1T_RoadwayCrownAngle value);

EXTERN int asn1PD_RoadwayCrownAngle (OSCTXT* pctxt, ASN1T_RoadwayCrownAngle* pvalue);

EXTERN int XmlEnc_RoadwayCrownAngle (OSCTXT* pctxt, 
   ASN1T_RoadwayCrownAngle value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadwayCrownAngle (OSCTXT* pctxt, 
   ASN1T_RoadwayCrownAngle* pvalue);

EXTERN int asn1JsonEnc_RoadwayCrownAngle (OSCTXT *pctxt, ASN1T_RoadwayCrownAngle *pvalue);

EXTERN int asn1JsonDec_RoadwayCrownAngle (OSCTXT *pctxt, ASN1T_RoadwayCrownAngle *pvalue);

EXTERN int asn1PrtToStrm_RoadwayCrownAngle (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadwayCrownAngle* pvalue);

EXTERN ASN1T_RoadwayCrownAngle* new_ASN1T_RoadwayCrownAngle (ASN1CType& ccobj)
   ;

/**************************************************************/
/*                                                            */
/*  RTCM_Revision                                             */
/*                                                            */
/**************************************************************/
/*
RTCM-Revision ::= ENUMERATED { unknown(0), rtcmRev2(1), rtcmRev3(2), reserved(3), ... }
*/
struct EXTERN RTCM_Revision {
   enum Root {
      unknown = 0,
      rtcmRev2 = 1,
      rtcmRev3 = 2,
      reserved = 3
   } ;
} ;

typedef OSUINT32 ASN1T_RTCM_Revision;

EXTERN int asn1PE_RTCM_Revision (OSCTXT* pctxt, ASN1T_RTCM_Revision value);

EXTERN int asn1PD_RTCM_Revision (OSCTXT* pctxt, ASN1T_RTCM_Revision* pvalue);

EXTERN int XmlEnc_RTCM_Revision (OSCTXT* pctxt, ASN1T_RTCM_Revision value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RTCM_Revision (OSCTXT* pctxt, ASN1T_RTCM_Revision* pvalue);

EXTERN int asn1JsonEnc_RTCM_Revision (OSCTXT *pctxt, ASN1T_RTCM_Revision *pvalue);

EXTERN int asn1JsonDec_RTCM_Revision (OSCTXT *pctxt, ASN1T_RTCM_Revision *pvalue);

EXTERN int asn1PrtToStrm_RTCM_Revision (OSCTXT *pctxt, 
   const char* name, const ASN1T_RTCM_Revision* pvalue);

EXTERN ASN1T_RTCM_Revision* new_ASN1T_RTCM_Revision (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_RTCM_Revision_ENUMTAB[];
#define ASN1T_RTCM_Revision_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_RTCM_Revision_ToString (OSINT32 value);

EXTERN int ASN1T_RTCM_Revision_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_RTCM_Revision* pvalue);

EXTERN int ASN1T_RTCM_Revision_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_RTCM_Revision* pvalue);

/**************************************************************/
/*                                                            */
/*  RTCMmessage                                               */
/*                                                            */
/**************************************************************/
/*
RTCMmessage ::= OCTET STRING (SIZE (1..1023))
*/
struct EXTERN ASN1T_RTCMmessage {
   OSUINT16 numocts;
   OSOCTET data[1023];
   // ctors
   ASN1T_RTCMmessage () : numocts(0) {}
   ASN1T_RTCMmessage (OSUINT16 _numocts, const OSOCTET* _data) :
      numocts (_numocts) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, numocts);
   }
   ASN1T_RTCMmessage (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT16)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
   }
   // assignment operators
   ASN1T_RTCMmessage& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT16)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
      return *this;
   }
} ;

EXTERN int asn1PE_RTCMmessage (OSCTXT* pctxt, ASN1T_RTCMmessage* pvalue);

EXTERN int asn1PD_RTCMmessage (OSCTXT* pctxt, ASN1T_RTCMmessage* pvalue);

EXTERN int XmlEnc_RTCMmessage (OSCTXT* pctxt, ASN1T_RTCMmessage* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RTCMmessage (OSCTXT* pctxt, ASN1T_RTCMmessage* pvalue);

EXTERN int asn1JsonEnc_RTCMmessage (OSCTXT *pctxt, ASN1T_RTCMmessage *pvalue);

EXTERN int asn1JsonDec_RTCMmessage (OSCTXT *pctxt, ASN1T_RTCMmessage *pvalue);

EXTERN int asn1PrtToStrm_RTCMmessage (OSCTXT *pctxt, 
   const char* name, const ASN1T_RTCMmessage* pvalue);

EXTERN ASN1T_RTCMmessage* new_ASN1T_RTCMmessage (ASN1CType& ccobj);

EXTERN int asn1Init_RTCMmessage (ASN1T_RTCMmessage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  Scale_B12                                                 */
/*                                                            */
/**************************************************************/
/*
Scale-B12 ::= INTEGER (-2048..2047)
                                      in steps of 0.05 percent

*/
typedef OSINT16 ASN1T_Scale_B12;

EXTERN int asn1PE_Scale_B12 (OSCTXT* pctxt, ASN1T_Scale_B12 value);

EXTERN int asn1PD_Scale_B12 (OSCTXT* pctxt, ASN1T_Scale_B12* pvalue);

EXTERN int XmlEnc_Scale_B12 (OSCTXT* pctxt, ASN1T_Scale_B12 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Scale_B12 (OSCTXT* pctxt, ASN1T_Scale_B12* pvalue);

EXTERN int asn1JsonEnc_Scale_B12 (OSCTXT *pctxt, ASN1T_Scale_B12 *pvalue);

EXTERN int asn1JsonDec_Scale_B12 (OSCTXT *pctxt, ASN1T_Scale_B12 *pvalue);

EXTERN int asn1PrtToStrm_Scale_B12 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Scale_B12* pvalue);

EXTERN ASN1T_Scale_B12* new_ASN1T_Scale_B12 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SecondOfTime                                              */
/*                                                            */
/**************************************************************/
/*
SecondOfTime ::= INTEGER (0..61)
                                   units of seconds
     The value 60 shall be used for leap seconds
     or to indicate a full minute.
     The value 61 indicates that the value is unavailable

*/
typedef OSUINT8 ASN1T_SecondOfTime;

EXTERN int asn1PE_SecondOfTime (OSCTXT* pctxt, ASN1T_SecondOfTime value);

EXTERN int asn1PD_SecondOfTime (OSCTXT* pctxt, ASN1T_SecondOfTime* pvalue);

EXTERN int XmlEnc_SecondOfTime (OSCTXT* pctxt, ASN1T_SecondOfTime value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SecondOfTime (OSCTXT* pctxt, ASN1T_SecondOfTime* pvalue);

EXTERN int asn1JsonEnc_SecondOfTime (OSCTXT *pctxt, ASN1T_SecondOfTime *pvalue);

EXTERN int asn1JsonDec_SecondOfTime (OSCTXT *pctxt, ASN1T_SecondOfTime *pvalue);

EXTERN int asn1PrtToStrm_SecondOfTime (OSCTXT *pctxt, 
   const char* name, const ASN1T_SecondOfTime* pvalue);

EXTERN ASN1T_SecondOfTime* new_ASN1T_SecondOfTime (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SegmentAttributeLL                                        */
/*                                                            */
/**************************************************************/
/*
SegmentAttributeLL ::= ENUMERATED { reserved(0), doNotBlock(1), whiteLine(2), mergingLaneLeft(3), mergingLaneRight(4), curbOnLeft(5), curbOnRight(6), loadingzoneOnLeft(7), loadingzoneOnRight(8), turnOutPointOnLeft(9), turnOutPointOnRight(10), adjacentParkingOnLeft(11), adjacentParkingOnRight(12), adjacentBikeLaneOnLeft(13), adjacentBikeLaneOnRight(14), sharedBikeLane(15), bikeBoxInFront(16), transitStopOnLeft(17), transitStopOnRight(18), transitStopInLane(19), sharedWithTrackedVehicle(20), safeIsland(21), lowCurbsPresent(22), rumbleStripPresent(23), audibleSignalingPresent(24), adaptiveTimingPresent(25), rfSignalRequestPresent(26), partialCurbIntrusion(27), taperToLeft(28), taperToRight(29), taperToCenterLine(30), parallelParking(31), headInParking(32), freeParking(33), timeRestrictionsOnParking(34), costToPark(35), midBlockCurbPresent(36), unEvenPavementPresent(37), ... }
*/
struct EXTERN SegmentAttributeLL {
   enum Root {
      reserved = 0,
      doNotBlock = 1,
      whiteLine = 2,
      mergingLaneLeft = 3,
      mergingLaneRight = 4,
      curbOnLeft = 5,
      curbOnRight = 6,
      loadingzoneOnLeft = 7,
      loadingzoneOnRight = 8,
      turnOutPointOnLeft = 9,
      turnOutPointOnRight = 10,
      adjacentParkingOnLeft = 11,
      adjacentParkingOnRight = 12,
      adjacentBikeLaneOnLeft = 13,
      adjacentBikeLaneOnRight = 14,
      sharedBikeLane = 15,
      bikeBoxInFront = 16,
      transitStopOnLeft = 17,
      transitStopOnRight = 18,
      transitStopInLane = 19,
      sharedWithTrackedVehicle = 20,
      safeIsland = 21,
      lowCurbsPresent = 22,
      rumbleStripPresent = 23,
      audibleSignalingPresent = 24,
      adaptiveTimingPresent = 25,
      rfSignalRequestPresent = 26,
      partialCurbIntrusion = 27,
      taperToLeft = 28,
      taperToRight = 29,
      taperToCenterLine = 30,
      parallelParking = 31,
      headInParking = 32,
      freeParking = 33,
      timeRestrictionsOnParking = 34,
      costToPark = 35,
      midBlockCurbPresent = 36,
      unEvenPavementPresent = 37
   } ;
} ;

typedef OSUINT32 ASN1T_SegmentAttributeLL;

EXTERN int asn1PE_SegmentAttributeLL (OSCTXT* pctxt, ASN1T_SegmentAttributeLL value);

EXTERN int asn1PD_SegmentAttributeLL (OSCTXT* pctxt, ASN1T_SegmentAttributeLL* pvalue);

EXTERN int XmlEnc_SegmentAttributeLL (OSCTXT* pctxt, 
   ASN1T_SegmentAttributeLL value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SegmentAttributeLL (OSCTXT* pctxt, 
   ASN1T_SegmentAttributeLL* pvalue);

EXTERN int asn1JsonEnc_SegmentAttributeLL (OSCTXT *pctxt, ASN1T_SegmentAttributeLL *pvalue);

EXTERN int asn1JsonDec_SegmentAttributeLL (OSCTXT *pctxt, ASN1T_SegmentAttributeLL *pvalue);

EXTERN int asn1PrtToStrm_SegmentAttributeLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_SegmentAttributeLL* pvalue);

EXTERN ASN1T_SegmentAttributeLL* 
   new_ASN1T_SegmentAttributeLL (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_SegmentAttributeLL_ENUMTAB[];
#define ASN1T_SegmentAttributeLL_ENUMTABSIZE 38

EXTERN const OSUTF8CHAR* ASN1T_SegmentAttributeLL_ToString (OSINT32 value);

EXTERN int ASN1T_SegmentAttributeLL_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_SegmentAttributeLL* pvalue);

EXTERN int ASN1T_SegmentAttributeLL_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_SegmentAttributeLL* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  SegmentAttributeXY                                        */
/*                                                            */
/**************************************************************/
/*
SegmentAttributeXY ::= ENUMERATED { reserved(0), doNotBlock(1), whiteLine(2), mergingLaneLeft(3), mergingLaneRight(4), curbOnLeft(5), curbOnRight(6), loadingzoneOnLeft(7), loadingzoneOnRight(8), turnOutPointOnLeft(9), turnOutPointOnRight(10), adjacentParkingOnLeft(11), adjacentParkingOnRight(12), adjacentBikeLaneOnLeft(13), adjacentBikeLaneOnRight(14), sharedBikeLane(15), bikeBoxInFront(16), transitStopOnLeft(17), transitStopOnRight(18), transitStopInLane(19), sharedWithTrackedVehicle(20), safeIsland(21), lowCurbsPresent(22), rumbleStripPresent(23), audibleSignalingPresent(24), adaptiveTimingPresent(25), rfSignalRequestPresent(26), partialCurbIntrusion(27), taperToLeft(28), taperToRight(29), taperToCenterLine(30), parallelParking(31), headInParking(32), freeParking(33), timeRestrictionsOnParking(34), costToPark(35), midBlockCurbPresent(36), unEvenPavementPresent(37), ... }
*/
struct EXTERN SegmentAttributeXY {
   enum Root {
      reserved = 0,
      doNotBlock = 1,
      whiteLine = 2,
      mergingLaneLeft = 3,
      mergingLaneRight = 4,
      curbOnLeft = 5,
      curbOnRight = 6,
      loadingzoneOnLeft = 7,
      loadingzoneOnRight = 8,
      turnOutPointOnLeft = 9,
      turnOutPointOnRight = 10,
      adjacentParkingOnLeft = 11,
      adjacentParkingOnRight = 12,
      adjacentBikeLaneOnLeft = 13,
      adjacentBikeLaneOnRight = 14,
      sharedBikeLane = 15,
      bikeBoxInFront = 16,
      transitStopOnLeft = 17,
      transitStopOnRight = 18,
      transitStopInLane = 19,
      sharedWithTrackedVehicle = 20,
      safeIsland = 21,
      lowCurbsPresent = 22,
      rumbleStripPresent = 23,
      audibleSignalingPresent = 24,
      adaptiveTimingPresent = 25,
      rfSignalRequestPresent = 26,
      partialCurbIntrusion = 27,
      taperToLeft = 28,
      taperToRight = 29,
      taperToCenterLine = 30,
      parallelParking = 31,
      headInParking = 32,
      freeParking = 33,
      timeRestrictionsOnParking = 34,
      costToPark = 35,
      midBlockCurbPresent = 36,
      unEvenPavementPresent = 37
   } ;
} ;

typedef OSUINT32 ASN1T_SegmentAttributeXY;

EXTERN int asn1PE_SegmentAttributeXY (OSCTXT* pctxt, ASN1T_SegmentAttributeXY value);

EXTERN int asn1PD_SegmentAttributeXY (OSCTXT* pctxt, ASN1T_SegmentAttributeXY* pvalue);

EXTERN int XmlEnc_SegmentAttributeXY (OSCTXT* pctxt, 
   ASN1T_SegmentAttributeXY value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SegmentAttributeXY (OSCTXT* pctxt, 
   ASN1T_SegmentAttributeXY* pvalue);

EXTERN int asn1JsonEnc_SegmentAttributeXY (OSCTXT *pctxt, ASN1T_SegmentAttributeXY *pvalue);

EXTERN int asn1JsonDec_SegmentAttributeXY (OSCTXT *pctxt, ASN1T_SegmentAttributeXY *pvalue);

EXTERN int asn1PrtToStrm_SegmentAttributeXY (OSCTXT *pctxt, 
   const char* name, const ASN1T_SegmentAttributeXY* pvalue);

EXTERN ASN1T_SegmentAttributeXY* 
   new_ASN1T_SegmentAttributeXY (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_SegmentAttributeXY_ENUMTAB[];
#define ASN1T_SegmentAttributeXY_ENUMTABSIZE 38

EXTERN const OSUTF8CHAR* ASN1T_SegmentAttributeXY_ToString (OSINT32 value);

EXTERN int ASN1T_SegmentAttributeXY_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_SegmentAttributeXY* pvalue);

EXTERN int ASN1T_SegmentAttributeXY_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_SegmentAttributeXY* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  SemiMajorAxisAccuracy                                     */
/*                                                            */
/**************************************************************/
/*
SemiMajorAxisAccuracy ::= INTEGER (0..255)
    semi-major axis accuracy at one standard dev 
    range 0-12.7 meter, LSB = .05m
    254 = any value equal or greater than 12.70 meter
    255 = unavailable semi-major axis value

*/
typedef OSUINT8 ASN1T_SemiMajorAxisAccuracy;

EXTERN int asn1PE_SemiMajorAxisAccuracy (OSCTXT* pctxt, ASN1T_SemiMajorAxisAccuracy value);

EXTERN int asn1PD_SemiMajorAxisAccuracy (OSCTXT* pctxt, ASN1T_SemiMajorAxisAccuracy* pvalue);

EXTERN int XmlEnc_SemiMajorAxisAccuracy (OSCTXT* pctxt, 
   ASN1T_SemiMajorAxisAccuracy value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SemiMajorAxisAccuracy (OSCTXT* pctxt, 
   ASN1T_SemiMajorAxisAccuracy* pvalue);

EXTERN int asn1JsonEnc_SemiMajorAxisAccuracy (OSCTXT *pctxt, ASN1T_SemiMajorAxisAccuracy *pvalue);

EXTERN int asn1JsonDec_SemiMajorAxisAccuracy (OSCTXT *pctxt, ASN1T_SemiMajorAxisAccuracy *pvalue);

EXTERN int asn1PrtToStrm_SemiMajorAxisAccuracy (OSCTXT *pctxt, 
   const char* name, const ASN1T_SemiMajorAxisAccuracy* pvalue);

EXTERN ASN1T_SemiMajorAxisAccuracy* 
   new_ASN1T_SemiMajorAxisAccuracy (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SemiMajorAxisOrientation                                  */
/*                                                            */
/**************************************************************/
/*
SemiMajorAxisOrientation ::= INTEGER (0..65535)
    orientation of semi-major axis 
    relative to true north (0~359.9945078786 degrees)
    LSB units of 360/65535 deg  = 0.0054932479
    a value of 0 shall be 0 degrees
    a value of 1 shall be 0.0054932479 degrees 
    a value of 65534 shall be 359.9945078786 deg
    a value of 65535 shall be used for orientation unavailable

*/
typedef OSUINT16 ASN1T_SemiMajorAxisOrientation;

EXTERN int asn1PE_SemiMajorAxisOrientation (OSCTXT* pctxt, ASN1T_SemiMajorAxisOrientation value);

EXTERN int asn1PD_SemiMajorAxisOrientation (OSCTXT* pctxt, ASN1T_SemiMajorAxisOrientation* pvalue);

EXTERN int XmlEnc_SemiMajorAxisOrientation (OSCTXT* pctxt, 
   ASN1T_SemiMajorAxisOrientation value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SemiMajorAxisOrientation (OSCTXT* pctxt, 
   ASN1T_SemiMajorAxisOrientation* pvalue);

EXTERN int asn1JsonEnc_SemiMajorAxisOrientation (OSCTXT *pctxt, ASN1T_SemiMajorAxisOrientation *pvalue);

EXTERN int asn1JsonDec_SemiMajorAxisOrientation (OSCTXT *pctxt, ASN1T_SemiMajorAxisOrientation *pvalue);

EXTERN int asn1PrtToStrm_SemiMajorAxisOrientation (OSCTXT *pctxt, 
   const char* name, const ASN1T_SemiMajorAxisOrientation* pvalue);

EXTERN ASN1T_SemiMajorAxisOrientation* 
   new_ASN1T_SemiMajorAxisOrientation (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SemiMinorAxisAccuracy                                     */
/*                                                            */
/**************************************************************/
/*
SemiMinorAxisAccuracy ::= INTEGER (0..255)
    semi-minor axis accuracy at one standard dev 
    range 0-12.7 meter, LSB = .05m
    254 = any value equal or greater than 12.70 meter
    255 = unavailable semi-minor axis value

*/
typedef OSUINT8 ASN1T_SemiMinorAxisAccuracy;

EXTERN int asn1PE_SemiMinorAxisAccuracy (OSCTXT* pctxt, ASN1T_SemiMinorAxisAccuracy value);

EXTERN int asn1PD_SemiMinorAxisAccuracy (OSCTXT* pctxt, ASN1T_SemiMinorAxisAccuracy* pvalue);

EXTERN int XmlEnc_SemiMinorAxisAccuracy (OSCTXT* pctxt, 
   ASN1T_SemiMinorAxisAccuracy value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SemiMinorAxisAccuracy (OSCTXT* pctxt, 
   ASN1T_SemiMinorAxisAccuracy* pvalue);

EXTERN int asn1JsonEnc_SemiMinorAxisAccuracy (OSCTXT *pctxt, ASN1T_SemiMinorAxisAccuracy *pvalue);

EXTERN int asn1JsonDec_SemiMinorAxisAccuracy (OSCTXT *pctxt, ASN1T_SemiMinorAxisAccuracy *pvalue);

EXTERN int asn1PrtToStrm_SemiMinorAxisAccuracy (OSCTXT *pctxt, 
   const char* name, const ASN1T_SemiMinorAxisAccuracy* pvalue);

EXTERN ASN1T_SemiMinorAxisAccuracy* 
   new_ASN1T_SemiMinorAxisAccuracy (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SignalGroupID                                             */
/*                                                            */
/**************************************************************/
/*
SignalGroupID ::= INTEGER (0..255)
     The value 0 shall be used when the ID is
     not available or not known
     the value 255 is reserved to indicate a 
     permanent green movement state
     therefore a simple 8 phase signal controller 
     device might use 1..9 as its groupIDs

*/
typedef OSUINT8 ASN1T_SignalGroupID;

EXTERN int asn1PE_SignalGroupID (OSCTXT* pctxt, ASN1T_SignalGroupID value);

EXTERN int asn1PD_SignalGroupID (OSCTXT* pctxt, ASN1T_SignalGroupID* pvalue);

EXTERN int XmlEnc_SignalGroupID (OSCTXT* pctxt, ASN1T_SignalGroupID value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalGroupID (OSCTXT* pctxt, ASN1T_SignalGroupID* pvalue);

EXTERN int asn1JsonEnc_SignalGroupID (OSCTXT *pctxt, ASN1T_SignalGroupID *pvalue);

EXTERN int asn1JsonDec_SignalGroupID (OSCTXT *pctxt, ASN1T_SignalGroupID *pvalue);

EXTERN int asn1PrtToStrm_SignalGroupID (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalGroupID* pvalue);

EXTERN ASN1T_SignalGroupID* new_ASN1T_SignalGroupID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SignalReqScheme                                           */
/*                                                            */
/**************************************************************/
/*
SignalReqScheme ::= OCTET STRING (SIZE (1))
     Encoded as follows: 
    upper nibble:  Preempt #:  
     Bit 7 (MSB) 1 =  Preempt and 0 =  Priority 
     Remaining 3 bits: 
     Range of 0..7. The values of 1..6 represent 
     the respective controller preempt or Priority 
     to be activated. The value of 7 represents a 
     request for a cabinet flash prempt, 
     while the value of 0 is reserved.  
    lower nibble:  Strategy #:  
     Range is 0..15 and is used to specify a desired 
     strategy (if available).  
     Currently no strategies are defined and this 
     should be zero.

*/
struct EXTERN ASN1T_SignalReqScheme {
   OSOCTET data[1];
   // ctors
   ASN1T_SignalReqScheme () {}
   ASN1T_SignalReqScheme (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, 1);
   }
   ASN1T_SignalReqScheme (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
   }
   // assignment operators
   ASN1T_SignalReqScheme& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
      return *this;
   }
} ;

class EXTERN ASN1C_SignalReqScheme :
public ASN1CType
{
protected:
   ASN1T_SignalReqScheme& msgData;
public:
   /**
    * Control class: ASN1C_SignalReqScheme
    * Data class:    ASN1T_SignalReqScheme
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalReqScheme (ASN1T_SignalReqScheme& data);

   /**
    * Control class: ASN1C_SignalReqScheme<br/>
    * Data class: ASN1T_SignalReqScheme<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalReqScheme (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalReqScheme& data);

   virtual ~ASN1C_SignalReqScheme () {}

   /**
    * Data class: ASN1T_SignalReqScheme<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_SignalReqScheme.
    */
   inline ASN1T_SignalReqScheme& getData () { return msgData; }

   /**
    * Data class: ASN1T_SignalReqScheme<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_SignalReqScheme.
    */
   inline const ASN1T_SignalReqScheme& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             SignalReqScheme will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "SignalReqScheme");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_SignalReqScheme& operator= (const ASN1C_SignalReqScheme&) {return *this;}
} ;

EXTERN int asn1PE_SignalReqScheme (OSCTXT* pctxt, ASN1T_SignalReqScheme* pvalue);

EXTERN int asn1PD_SignalReqScheme (OSCTXT* pctxt, ASN1T_SignalReqScheme* pvalue);

EXTERN int XmlEnc_SignalReqScheme (OSCTXT* pctxt, 
   ASN1T_SignalReqScheme* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalReqScheme (OSCTXT* pctxt, ASN1T_SignalReqScheme* pvalue
   );

EXTERN int asn1JsonEnc_SignalReqScheme (OSCTXT *pctxt, ASN1T_SignalReqScheme *pvalue);

EXTERN int asn1JsonDec_SignalReqScheme (OSCTXT *pctxt, ASN1T_SignalReqScheme *pvalue);

EXTERN int asn1PrtToStrm_SignalReqScheme (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalReqScheme* pvalue);

EXTERN ASN1T_SignalReqScheme* new_ASN1T_SignalReqScheme (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SignPrority                                               */
/*                                                            */
/**************************************************************/
/*
SignPrority ::= INTEGER (0..7)
    0 as least, 7 as most

*/
typedef OSUINT8 ASN1T_SignPrority;

EXTERN int asn1PE_SignPrority (OSCTXT* pctxt, ASN1T_SignPrority value);

EXTERN int asn1PD_SignPrority (OSCTXT* pctxt, ASN1T_SignPrority* pvalue);

EXTERN int XmlEnc_SignPrority (OSCTXT* pctxt, ASN1T_SignPrority value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignPrority (OSCTXT* pctxt, ASN1T_SignPrority* pvalue);

EXTERN int asn1JsonEnc_SignPrority (OSCTXT *pctxt, ASN1T_SignPrority *pvalue);

EXTERN int asn1JsonDec_SignPrority (OSCTXT *pctxt, ASN1T_SignPrority *pvalue);

EXTERN int asn1PrtToStrm_SignPrority (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignPrority* pvalue);

EXTERN ASN1T_SignPrority* new_ASN1T_SignPrority (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SirenInUse                                                */
/*                                                            */
/**************************************************************/
/*
SirenInUse ::= ENUMERATED { unavailable(0), notInUse(1), inUse(2), reserved(3) }
*/
struct EXTERN SirenInUse {
   enum Root {
      unavailable = 0,
      notInUse = 1,
      inUse = 2,
      reserved = 3
   } ;
} ;

typedef OSUINT32 ASN1T_SirenInUse;

EXTERN int asn1PE_SirenInUse (OSCTXT* pctxt, ASN1T_SirenInUse value);

EXTERN int asn1PD_SirenInUse (OSCTXT* pctxt, ASN1T_SirenInUse* pvalue);

EXTERN int XmlEnc_SirenInUse (OSCTXT* pctxt, ASN1T_SirenInUse value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SirenInUse (OSCTXT* pctxt, ASN1T_SirenInUse* pvalue);

EXTERN int asn1JsonEnc_SirenInUse (OSCTXT *pctxt, ASN1T_SirenInUse *pvalue);

EXTERN int asn1JsonDec_SirenInUse (OSCTXT *pctxt, ASN1T_SirenInUse *pvalue);

EXTERN int asn1PrtToStrm_SirenInUse (OSCTXT *pctxt, 
   const char* name, const ASN1T_SirenInUse* pvalue);

EXTERN ASN1T_SirenInUse* new_ASN1T_SirenInUse (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_SirenInUse_ENUMTAB[];
#define ASN1T_SirenInUse_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_SirenInUse_ToString (OSINT32 value);

EXTERN int ASN1T_SirenInUse_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_SirenInUse* pvalue);

EXTERN int ASN1T_SirenInUse_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_SirenInUse* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedAdvice                                               */
/*                                                            */
/**************************************************************/
/*
SpeedAdvice ::= INTEGER (0..500)
     LSB units are 0.1 m/s^2
     the value 499 shall be used for values at or greater than 49.9 m/s
     the value 500 shall be used to indicate that speed is unavailable

*/
typedef OSUINT16 ASN1T_SpeedAdvice;

EXTERN int asn1PE_SpeedAdvice (OSCTXT* pctxt, ASN1T_SpeedAdvice value);

EXTERN int asn1PD_SpeedAdvice (OSCTXT* pctxt, ASN1T_SpeedAdvice* pvalue);

EXTERN int XmlEnc_SpeedAdvice (OSCTXT* pctxt, ASN1T_SpeedAdvice value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedAdvice (OSCTXT* pctxt, ASN1T_SpeedAdvice* pvalue);

EXTERN int asn1JsonEnc_SpeedAdvice (OSCTXT *pctxt, ASN1T_SpeedAdvice *pvalue);

EXTERN int asn1JsonDec_SpeedAdvice (OSCTXT *pctxt, ASN1T_SpeedAdvice *pvalue);

EXTERN int asn1PrtToStrm_SpeedAdvice (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedAdvice* pvalue);

EXTERN ASN1T_SpeedAdvice* new_ASN1T_SpeedAdvice (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SpeedConfidence                                           */
/*                                                            */
/**************************************************************/
/*
SpeedConfidence ::= ENUMERATED { unavailable(0), prec100ms(1), prec10ms(2), prec5ms(3), prec1ms(4), prec0-1ms(5), prec0-05ms(6), prec0-01ms(7) }
*/
struct EXTERN SpeedConfidence {
   enum Root {
      unavailable = 0,
      prec100ms = 1,
      prec10ms = 2,
      prec5ms = 3,
      prec1ms = 4,
      prec0_1ms = 5,
      prec0_05ms = 6,
      prec0_01ms = 7
   } ;
} ;

typedef OSUINT32 ASN1T_SpeedConfidence;

EXTERN int asn1PE_SpeedConfidence (OSCTXT* pctxt, ASN1T_SpeedConfidence value);

EXTERN int asn1PD_SpeedConfidence (OSCTXT* pctxt, ASN1T_SpeedConfidence* pvalue);

EXTERN int XmlEnc_SpeedConfidence (OSCTXT* pctxt, ASN1T_SpeedConfidence value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedConfidence (OSCTXT* pctxt, ASN1T_SpeedConfidence* pvalue
   );

EXTERN int asn1JsonEnc_SpeedConfidence (OSCTXT *pctxt, ASN1T_SpeedConfidence *pvalue);

EXTERN int asn1JsonDec_SpeedConfidence (OSCTXT *pctxt, ASN1T_SpeedConfidence *pvalue);

EXTERN int asn1PrtToStrm_SpeedConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedConfidence* pvalue);

EXTERN ASN1T_SpeedConfidence* new_ASN1T_SpeedConfidence (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_SpeedConfidence_ENUMTAB[];
#define ASN1T_SpeedConfidence_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_SpeedConfidence_ToString (OSINT32 value);

EXTERN int ASN1T_SpeedConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_SpeedConfidence* pvalue);

EXTERN int ASN1T_SpeedConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_SpeedConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimitType                                            */
/*                                                            */
/**************************************************************/
/*
SpeedLimitType ::= ENUMERATED { unknown(0), maxSpeedInSchoolZone(1), maxSpeedInSchoolZoneWhenChildrenArePresent(2), maxSpeedInConstructionZone(3), vehicleMinSpeed(4), vehicleMaxSpeed(5), vehicleNightMaxSpeed(6), truckMinSpeed(7), truckMaxSpeed(8), truckNightMaxSpeed(9), vehiclesWithTrailersMinSpeed(10), vehiclesWithTrailersMaxSpeed(11), vehiclesWithTrailersNightMaxSpeed(12), ... }
*/
struct EXTERN SpeedLimitType {
   enum Root {
      unknown = 0,
      maxSpeedInSchoolZone = 1,
      maxSpeedInSchoolZoneWhenChildrenArePresent = 2,
      maxSpeedInConstructionZone = 3,
      vehicleMinSpeed = 4,
      vehicleMaxSpeed = 5,
      vehicleNightMaxSpeed = 6,
      truckMinSpeed = 7,
      truckMaxSpeed = 8,
      truckNightMaxSpeed = 9,
      vehiclesWithTrailersMinSpeed = 10,
      vehiclesWithTrailersMaxSpeed = 11,
      vehiclesWithTrailersNightMaxSpeed = 12
   } ;
} ;

typedef OSUINT32 ASN1T_SpeedLimitType;

EXTERN int asn1PE_SpeedLimitType (OSCTXT* pctxt, ASN1T_SpeedLimitType value);

EXTERN int asn1PD_SpeedLimitType (OSCTXT* pctxt, ASN1T_SpeedLimitType* pvalue);

EXTERN int XmlEnc_SpeedLimitType (OSCTXT* pctxt, ASN1T_SpeedLimitType value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedLimitType (OSCTXT* pctxt, ASN1T_SpeedLimitType* pvalue)
   ;

EXTERN int asn1JsonEnc_SpeedLimitType (OSCTXT *pctxt, ASN1T_SpeedLimitType *pvalue);

EXTERN int asn1JsonDec_SpeedLimitType (OSCTXT *pctxt, ASN1T_SpeedLimitType *pvalue);

EXTERN int asn1PrtToStrm_SpeedLimitType (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedLimitType* pvalue);

EXTERN ASN1T_SpeedLimitType* new_ASN1T_SpeedLimitType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_SpeedLimitType_ENUMTAB[];
#define ASN1T_SpeedLimitType_ENUMTABSIZE 13

EXTERN const OSUTF8CHAR* ASN1T_SpeedLimitType_ToString (OSINT32 value);

EXTERN int ASN1T_SpeedLimitType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_SpeedLimitType* pvalue);

EXTERN int ASN1T_SpeedLimitType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_SpeedLimitType* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedProfileMeasurement                                   */
/*                                                            */
/**************************************************************/
/*
SpeedProfileMeasurement ::= GrossSpeed
*/
typedef ASN1T_GrossSpeed ASN1T_SpeedProfileMeasurement;

EXTERN int asn1PE_SpeedProfileMeasurement (OSCTXT* pctxt, ASN1T_SpeedProfileMeasurement value);

EXTERN int asn1PD_SpeedProfileMeasurement (OSCTXT* pctxt, ASN1T_SpeedProfileMeasurement* pvalue);

EXTERN int XmlEnc_SpeedProfileMeasurement (OSCTXT* pctxt, 
   ASN1T_SpeedProfileMeasurement value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedProfileMeasurement (OSCTXT* pctxt, 
   ASN1T_SpeedProfileMeasurement* pvalue);

EXTERN int asn1JsonEnc_SpeedProfileMeasurement (OSCTXT *pctxt, ASN1T_SpeedProfileMeasurement *pvalue);

EXTERN int asn1JsonDec_SpeedProfileMeasurement (OSCTXT *pctxt, ASN1T_SpeedProfileMeasurement *pvalue);

EXTERN int asn1PrtToStrm_SpeedProfileMeasurement (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedProfileMeasurement* pvalue);

EXTERN ASN1T_SpeedProfileMeasurement* 
   new_ASN1T_SpeedProfileMeasurement (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Speed                                                     */
/*                                                            */
/**************************************************************/
/*
Speed ::= INTEGER (0..8191)
                             Units of 0.02 m/s
           The value 8191 indicates that 
           speed is unavailable

*/
typedef OSUINT16 ASN1T_Speed;

EXTERN int asn1PE_Speed (OSCTXT* pctxt, ASN1T_Speed value);

EXTERN int asn1PD_Speed (OSCTXT* pctxt, ASN1T_Speed* pvalue);

EXTERN int XmlEnc_Speed (OSCTXT* pctxt, ASN1T_Speed value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Speed (OSCTXT* pctxt, ASN1T_Speed* pvalue);

EXTERN int asn1JsonEnc_Speed (OSCTXT *pctxt, ASN1T_Speed *pvalue);

EXTERN int asn1JsonDec_Speed (OSCTXT *pctxt, ASN1T_Speed *pvalue);

EXTERN int asn1PrtToStrm_Speed (OSCTXT *pctxt, 
   const char* name, const ASN1T_Speed* pvalue);

EXTERN ASN1T_Speed* new_ASN1T_Speed (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SSPindex                                                  */
/*                                                            */
/**************************************************************/
/*
SSPindex ::= INTEGER (0..31)
*/
typedef OSUINT8 ASN1T_SSPindex;

EXTERN int asn1PE_SSPindex (OSCTXT* pctxt, ASN1T_SSPindex value);

EXTERN int asn1PD_SSPindex (OSCTXT* pctxt, ASN1T_SSPindex* pvalue);

EXTERN int XmlEnc_SSPindex (OSCTXT* pctxt, ASN1T_SSPindex value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SSPindex (OSCTXT* pctxt, ASN1T_SSPindex* pvalue);

EXTERN int asn1JsonEnc_SSPindex (OSCTXT *pctxt, ASN1T_SSPindex *pvalue);

EXTERN int asn1JsonDec_SSPindex (OSCTXT *pctxt, ASN1T_SSPindex *pvalue);

EXTERN int asn1PrtToStrm_SSPindex (OSCTXT *pctxt, 
   const char* name, const ASN1T_SSPindex* pvalue);

EXTERN ASN1T_SSPindex* new_ASN1T_SSPindex (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  StabilityControlStatus                                    */
/*                                                            */
/**************************************************************/
/*
StabilityControlStatus ::= ENUMERATED { unavailable(0), off(1), on(2), engaged(3) }
*/
struct EXTERN StabilityControlStatus {
   enum Root {
      unavailable = 0,
      off = 1,
      on = 2,
      engaged = 3
   } ;
} ;

typedef OSUINT32 ASN1T_StabilityControlStatus;

EXTERN int asn1PE_StabilityControlStatus (OSCTXT* pctxt, ASN1T_StabilityControlStatus value);

EXTERN int asn1PD_StabilityControlStatus (OSCTXT* pctxt, ASN1T_StabilityControlStatus* pvalue);

EXTERN int XmlEnc_StabilityControlStatus (OSCTXT* pctxt, 
   ASN1T_StabilityControlStatus value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_StabilityControlStatus (OSCTXT* pctxt, 
   ASN1T_StabilityControlStatus* pvalue);

EXTERN int asn1JsonEnc_StabilityControlStatus (OSCTXT *pctxt, ASN1T_StabilityControlStatus *pvalue);

EXTERN int asn1JsonDec_StabilityControlStatus (OSCTXT *pctxt, ASN1T_StabilityControlStatus *pvalue);

EXTERN int asn1PrtToStrm_StabilityControlStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_StabilityControlStatus* pvalue);

EXTERN ASN1T_StabilityControlStatus* 
   new_ASN1T_StabilityControlStatus (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_StabilityControlStatus_ENUMTAB[];
#define ASN1T_StabilityControlStatus_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_StabilityControlStatus_ToString (OSINT32 value);

EXTERN int ASN1T_StabilityControlStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_StabilityControlStatus* pvalue);

EXTERN int ASN1T_StabilityControlStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_StabilityControlStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  StationID                                                 */
/*                                                            */
/**************************************************************/
/*
StationID ::= INTEGER (0..4294967295)
*/
typedef OSUINT32 ASN1T_StationID;

EXTERN int asn1PE_StationID (OSCTXT* pctxt, ASN1T_StationID value);

EXTERN int asn1PD_StationID (OSCTXT* pctxt, ASN1T_StationID* pvalue);

EXTERN int XmlEnc_StationID (OSCTXT* pctxt, ASN1T_StationID value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_StationID (OSCTXT* pctxt, ASN1T_StationID* pvalue);

EXTERN int asn1JsonEnc_StationID (OSCTXT *pctxt, ASN1T_StationID *pvalue);

EXTERN int asn1JsonDec_StationID (OSCTXT *pctxt, ASN1T_StationID *pvalue);

EXTERN int asn1PrtToStrm_StationID (OSCTXT *pctxt, 
   const char* name, const ASN1T_StationID* pvalue);

EXTERN ASN1T_StationID* new_ASN1T_StationID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SteeringWheelAngleConfidence                              */
/*                                                            */
/**************************************************************/
/*
SteeringWheelAngleConfidence ::= ENUMERATED { unavailable(0), prec2deg(1), prec1deg(2), prec0-02deg(3) }
*/
struct EXTERN SteeringWheelAngleConfidence {
   enum Root {
      unavailable = 0,
      prec2deg = 1,
      prec1deg = 2,
      prec0_02deg = 3
   } ;
} ;

typedef OSUINT32 ASN1T_SteeringWheelAngleConfidence;

EXTERN int asn1PE_SteeringWheelAngleConfidence (OSCTXT* pctxt, ASN1T_SteeringWheelAngleConfidence value);

EXTERN int asn1PD_SteeringWheelAngleConfidence (OSCTXT* pctxt, ASN1T_SteeringWheelAngleConfidence* pvalue);

EXTERN int XmlEnc_SteeringWheelAngleConfidence (OSCTXT* pctxt, 
   ASN1T_SteeringWheelAngleConfidence value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SteeringWheelAngleConfidence (OSCTXT* pctxt, 
   ASN1T_SteeringWheelAngleConfidence* pvalue);

EXTERN int asn1JsonEnc_SteeringWheelAngleConfidence (OSCTXT *pctxt, ASN1T_SteeringWheelAngleConfidence *pvalue);

EXTERN int asn1JsonDec_SteeringWheelAngleConfidence (OSCTXT *pctxt, ASN1T_SteeringWheelAngleConfidence *pvalue);

EXTERN int asn1PrtToStrm_SteeringWheelAngleConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_SteeringWheelAngleConfidence* pvalue);

EXTERN ASN1T_SteeringWheelAngleConfidence* 
   new_ASN1T_SteeringWheelAngleConfidence (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_SteeringWheelAngleConfidence_ENUMTAB[];
#define ASN1T_SteeringWheelAngleConfidence_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_SteeringWheelAngleConfidence_ToString (OSINT32 value);

EXTERN int ASN1T_SteeringWheelAngleConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_SteeringWheelAngleConfidence* pvalue);

EXTERN int ASN1T_SteeringWheelAngleConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_SteeringWheelAngleConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  SteeringWheelAngleRateOfChange                            */
/*                                                            */
/**************************************************************/
/*
SteeringWheelAngleRateOfChange ::= INTEGER (-127..127)
    LSB is 3 degrees per second

*/
typedef OSINT8 ASN1T_SteeringWheelAngleRateOfChange;

EXTERN int asn1PE_SteeringWheelAngleRateOfChange (OSCTXT* pctxt, ASN1T_SteeringWheelAngleRateOfChange value);

EXTERN int asn1PD_SteeringWheelAngleRateOfChange (OSCTXT* pctxt, ASN1T_SteeringWheelAngleRateOfChange* pvalue);

EXTERN int XmlEnc_SteeringWheelAngleRateOfChange (OSCTXT* pctxt, 
   ASN1T_SteeringWheelAngleRateOfChange value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SteeringWheelAngleRateOfChange (OSCTXT* pctxt, 
   ASN1T_SteeringWheelAngleRateOfChange* pvalue);

EXTERN int asn1JsonEnc_SteeringWheelAngleRateOfChange (OSCTXT *pctxt, ASN1T_SteeringWheelAngleRateOfChange *pvalue);

EXTERN int asn1JsonDec_SteeringWheelAngleRateOfChange (OSCTXT *pctxt, ASN1T_SteeringWheelAngleRateOfChange *pvalue);

EXTERN int asn1PrtToStrm_SteeringWheelAngleRateOfChange (OSCTXT *pctxt, 
   const char* name, const ASN1T_SteeringWheelAngleRateOfChange* pvalue);

EXTERN ASN1T_SteeringWheelAngleRateOfChange* 
   new_ASN1T_SteeringWheelAngleRateOfChange (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SteeringWheelAngle                                        */
/*                                                            */
/**************************************************************/
/*
SteeringWheelAngle ::= INTEGER (-126..127)
     LSB units of 1.5 degrees, a range of -189 to +189 degrees
     +001 = +1.5 deg
     -126 = -189 deg and beyond  
     +126 = +189 deg and beyond
     +127 to be used for unavailable

*/
typedef OSINT8 ASN1T_SteeringWheelAngle;

EXTERN int asn1PE_SteeringWheelAngle (OSCTXT* pctxt, ASN1T_SteeringWheelAngle value);

EXTERN int asn1PD_SteeringWheelAngle (OSCTXT* pctxt, ASN1T_SteeringWheelAngle* pvalue);

EXTERN int XmlEnc_SteeringWheelAngle (OSCTXT* pctxt, 
   ASN1T_SteeringWheelAngle value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SteeringWheelAngle (OSCTXT* pctxt, 
   ASN1T_SteeringWheelAngle* pvalue);

EXTERN int asn1JsonEnc_SteeringWheelAngle (OSCTXT *pctxt, ASN1T_SteeringWheelAngle *pvalue);

EXTERN int asn1JsonDec_SteeringWheelAngle (OSCTXT *pctxt, ASN1T_SteeringWheelAngle *pvalue);

EXTERN int asn1PrtToStrm_SteeringWheelAngle (OSCTXT *pctxt, 
   const char* name, const ASN1T_SteeringWheelAngle* pvalue);

EXTERN ASN1T_SteeringWheelAngle* 
   new_ASN1T_SteeringWheelAngle (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SunSensor                                                 */
/*                                                            */
/**************************************************************/
/*
SunSensor ::= INTEGER (0..1000)
    units of watts / m2

*/
typedef OSUINT16 ASN1T_SunSensor;

EXTERN int asn1PE_SunSensor (OSCTXT* pctxt, ASN1T_SunSensor value);

EXTERN int asn1PD_SunSensor (OSCTXT* pctxt, ASN1T_SunSensor* pvalue);

EXTERN int XmlEnc_SunSensor (OSCTXT* pctxt, ASN1T_SunSensor value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SunSensor (OSCTXT* pctxt, ASN1T_SunSensor* pvalue);

EXTERN int asn1JsonEnc_SunSensor (OSCTXT *pctxt, ASN1T_SunSensor *pvalue);

EXTERN int asn1JsonDec_SunSensor (OSCTXT *pctxt, ASN1T_SunSensor *pvalue);

EXTERN int asn1PrtToStrm_SunSensor (OSCTXT *pctxt, 
   const char* name, const ASN1T_SunSensor* pvalue);

EXTERN ASN1T_SunSensor* new_ASN1T_SunSensor (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TemporaryID                                               */
/*                                                            */
/**************************************************************/
/*
TemporaryID ::= OCTET STRING (SIZE (4))
*/
struct EXTERN ASN1T_TemporaryID {
   OSOCTET data[4];
   // ctors
   ASN1T_TemporaryID () {}
   ASN1T_TemporaryID (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, 4);
   }
   ASN1T_TemporaryID (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
   }
   // assignment operators
   ASN1T_TemporaryID& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
      return *this;
   }
} ;

EXTERN int asn1PE_TemporaryID (OSCTXT* pctxt, ASN1T_TemporaryID* pvalue);

EXTERN int asn1PD_TemporaryID (OSCTXT* pctxt, ASN1T_TemporaryID* pvalue);

EXTERN int XmlEnc_TemporaryID (OSCTXT* pctxt, ASN1T_TemporaryID* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TemporaryID (OSCTXT* pctxt, ASN1T_TemporaryID* pvalue);

EXTERN int asn1JsonEnc_TemporaryID (OSCTXT *pctxt, ASN1T_TemporaryID *pvalue);

EXTERN int asn1JsonDec_TemporaryID (OSCTXT *pctxt, ASN1T_TemporaryID *pvalue);

EXTERN int asn1PrtToStrm_TemporaryID (OSCTXT *pctxt, 
   const char* name, const ASN1T_TemporaryID* pvalue);

EXTERN ASN1T_TemporaryID* new_ASN1T_TemporaryID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TermDistance                                              */
/*                                                            */
/**************************************************************/
/*
TermDistance ::= INTEGER (1..30000)
                                       units in meters

*/
typedef OSUINT16 ASN1T_TermDistance;

EXTERN int asn1PE_TermDistance (OSCTXT* pctxt, ASN1T_TermDistance value);

EXTERN int asn1PD_TermDistance (OSCTXT* pctxt, ASN1T_TermDistance* pvalue);

EXTERN int XmlEnc_TermDistance (OSCTXT* pctxt, ASN1T_TermDistance value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TermDistance (OSCTXT* pctxt, ASN1T_TermDistance* pvalue);

EXTERN int asn1JsonEnc_TermDistance (OSCTXT *pctxt, ASN1T_TermDistance *pvalue);

EXTERN int asn1JsonDec_TermDistance (OSCTXT *pctxt, ASN1T_TermDistance *pvalue);

EXTERN int asn1PrtToStrm_TermDistance (OSCTXT *pctxt, 
   const char* name, const ASN1T_TermDistance* pvalue);

EXTERN ASN1T_TermDistance* new_ASN1T_TermDistance (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TermTime                                                  */
/*                                                            */
/**************************************************************/
/*
TermTime ::= INTEGER (1..1800)
                                units of sec

*/
typedef OSUINT16 ASN1T_TermTime;

EXTERN int asn1PE_TermTime (OSCTXT* pctxt, ASN1T_TermTime value);

EXTERN int asn1PD_TermTime (OSCTXT* pctxt, ASN1T_TermTime* pvalue);

EXTERN int XmlEnc_TermTime (OSCTXT* pctxt, ASN1T_TermTime value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TermTime (OSCTXT* pctxt, ASN1T_TermTime* pvalue);

EXTERN int asn1JsonEnc_TermTime (OSCTXT *pctxt, ASN1T_TermTime *pvalue);

EXTERN int asn1JsonDec_TermTime (OSCTXT *pctxt, ASN1T_TermTime *pvalue);

EXTERN int asn1PrtToStrm_TermTime (OSCTXT *pctxt, 
   const char* name, const ASN1T_TermTime* pvalue);

EXTERN ASN1T_TermTime* new_ASN1T_TermTime (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ThrottleConfidence                                        */
/*                                                            */
/**************************************************************/
/*
ThrottleConfidence ::= ENUMERATED { unavailable(0), prec10percent(1), prec1percent(2), prec0-5percent(3) }
*/
struct EXTERN ThrottleConfidence {
   enum Root {
      unavailable = 0,
      prec10percent = 1,
      prec1percent = 2,
      prec0_5percent = 3
   } ;
} ;

typedef OSUINT32 ASN1T_ThrottleConfidence;

EXTERN int asn1PE_ThrottleConfidence (OSCTXT* pctxt, ASN1T_ThrottleConfidence value);

EXTERN int asn1PD_ThrottleConfidence (OSCTXT* pctxt, ASN1T_ThrottleConfidence* pvalue);

EXTERN int XmlEnc_ThrottleConfidence (OSCTXT* pctxt, 
   ASN1T_ThrottleConfidence value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ThrottleConfidence (OSCTXT* pctxt, 
   ASN1T_ThrottleConfidence* pvalue);

EXTERN int asn1JsonEnc_ThrottleConfidence (OSCTXT *pctxt, ASN1T_ThrottleConfidence *pvalue);

EXTERN int asn1JsonDec_ThrottleConfidence (OSCTXT *pctxt, ASN1T_ThrottleConfidence *pvalue);

EXTERN int asn1PrtToStrm_ThrottleConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_ThrottleConfidence* pvalue);

EXTERN ASN1T_ThrottleConfidence* 
   new_ASN1T_ThrottleConfidence (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_ThrottleConfidence_ENUMTAB[];
#define ASN1T_ThrottleConfidence_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_ThrottleConfidence_ToString (OSINT32 value);

EXTERN int ASN1T_ThrottleConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_ThrottleConfidence* pvalue);

EXTERN int ASN1T_ThrottleConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_ThrottleConfidence* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  ThrottlePosition                                          */
/*                                                            */
/**************************************************************/
/*
ThrottlePosition ::= INTEGER (0..200)
                                       LSB units are 0.5 percent

*/
typedef OSUINT8 ASN1T_ThrottlePosition;

EXTERN int asn1PE_ThrottlePosition (OSCTXT* pctxt, ASN1T_ThrottlePosition value);

EXTERN int asn1PD_ThrottlePosition (OSCTXT* pctxt, ASN1T_ThrottlePosition* pvalue);

EXTERN int XmlEnc_ThrottlePosition (OSCTXT* pctxt, 
   ASN1T_ThrottlePosition value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ThrottlePosition (OSCTXT* pctxt, 
   ASN1T_ThrottlePosition* pvalue);

EXTERN int asn1JsonEnc_ThrottlePosition (OSCTXT *pctxt, ASN1T_ThrottlePosition *pvalue);

EXTERN int asn1JsonDec_ThrottlePosition (OSCTXT *pctxt, ASN1T_ThrottlePosition *pvalue);

EXTERN int asn1PrtToStrm_ThrottlePosition (OSCTXT *pctxt, 
   const char* name, const ASN1T_ThrottlePosition* pvalue);

EXTERN ASN1T_ThrottlePosition* new_ASN1T_ThrottlePosition (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TimeConfidence                                            */
/*                                                            */
/**************************************************************/
/*
TimeConfidence ::= ENUMERATED { unavailable(0), time-100-000(1), time-050-000(2), time-020-000(3), time-010-000(4), time-002-000(5), time-001-000(6), time-000-500(7), time-000-200(8), time-000-100(9), time-000-050(10), time-000-020(11), time-000-010(12), time-000-005(13), time-000-002(14), time-000-001(15), time-000-000-5(16), time-000-000-2(17), time-000-000-1(18), time-000-000-05(19), time-000-000-02(20), time-000-000-01(21), time-000-000-005(22), time-000-000-002(23), time-000-000-001(24), time-000-000-000-5(25), time-000-000-000-2(26), time-000-000-000-1(27), time-000-000-000-05(28), time-000-000-000-02(29), time-000-000-000-01(30), time-000-000-000-005(31), time-000-000-000-002(32), time-000-000-000-001(33), time-000-000-000-000-5(34), time-000-000-000-000-2(35), time-000-000-000-000-1(36), time-000-000-000-000-05(37), time-000-000-000-000-02(38), time-000-000-000-000-01(39) }
*/
struct EXTERN TimeConfidence {
   enum Root {
      unavailable = 0,
      time_100_000 = 1,
      time_050_000 = 2,
      time_020_000 = 3,
      time_010_000 = 4,
      time_002_000 = 5,
      time_001_000 = 6,
      time_000_500 = 7,
      time_000_200 = 8,
      time_000_100 = 9,
      time_000_050 = 10,
      time_000_020 = 11,
      time_000_010 = 12,
      time_000_005 = 13,
      time_000_002 = 14,
      time_000_001 = 15,
      time_000_000_5 = 16,
      time_000_000_2 = 17,
      time_000_000_1 = 18,
      time_000_000_05 = 19,
      time_000_000_02 = 20,
      time_000_000_01 = 21,
      time_000_000_005 = 22,
      time_000_000_002 = 23,
      time_000_000_001 = 24,
      time_000_000_000_5 = 25,
      time_000_000_000_2 = 26,
      time_000_000_000_1 = 27,
      time_000_000_000_05 = 28,
      time_000_000_000_02 = 29,
      time_000_000_000_01 = 30,
      time_000_000_000_005 = 31,
      time_000_000_000_002 = 32,
      time_000_000_000_001 = 33,
      time_000_000_000_000_5 = 34,
      time_000_000_000_000_2 = 35,
      time_000_000_000_000_1 = 36,
      time_000_000_000_000_05 = 37,
      time_000_000_000_000_02 = 38,
      time_000_000_000_000_01 = 39
   } ;
} ;

typedef OSUINT32 ASN1T_TimeConfidence;

EXTERN int asn1PE_TimeConfidence (OSCTXT* pctxt, ASN1T_TimeConfidence value);

EXTERN int asn1PD_TimeConfidence (OSCTXT* pctxt, ASN1T_TimeConfidence* pvalue);

EXTERN int XmlEnc_TimeConfidence (OSCTXT* pctxt, ASN1T_TimeConfidence value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TimeConfidence (OSCTXT* pctxt, ASN1T_TimeConfidence* pvalue)
   ;

EXTERN int asn1JsonEnc_TimeConfidence (OSCTXT *pctxt, ASN1T_TimeConfidence *pvalue);

EXTERN int asn1JsonDec_TimeConfidence (OSCTXT *pctxt, ASN1T_TimeConfidence *pvalue);

EXTERN int asn1PrtToStrm_TimeConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_TimeConfidence* pvalue);

EXTERN ASN1T_TimeConfidence* new_ASN1T_TimeConfidence (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_TimeConfidence_ENUMTAB[];
#define ASN1T_TimeConfidence_ENUMTABSIZE 40

EXTERN const OSUTF8CHAR* ASN1T_TimeConfidence_ToString (OSINT32 value);

EXTERN int ASN1T_TimeConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_TimeConfidence* pvalue);

EXTERN int ASN1T_TimeConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_TimeConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeIntervalConfidence                                    */
/*                                                            */
/**************************************************************/
/*
TimeIntervalConfidence ::= INTEGER (0..15)
    Value   Probability
      0         21%%
      1         36%%
      2         47%%
      3         56%%
      4         62%%
      5         68%%
      6         73%%
      7         77%%
      8         81%%
      9         85%%
      10        88%%
      11        91%%
      12        94%%
      13        96%%
      14        98%%
      15        100%%

*/
typedef OSUINT8 ASN1T_TimeIntervalConfidence;

EXTERN int asn1PE_TimeIntervalConfidence (OSCTXT* pctxt, ASN1T_TimeIntervalConfidence value);

EXTERN int asn1PD_TimeIntervalConfidence (OSCTXT* pctxt, ASN1T_TimeIntervalConfidence* pvalue);

EXTERN int XmlEnc_TimeIntervalConfidence (OSCTXT* pctxt, 
   ASN1T_TimeIntervalConfidence value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TimeIntervalConfidence (OSCTXT* pctxt, 
   ASN1T_TimeIntervalConfidence* pvalue);

EXTERN int asn1JsonEnc_TimeIntervalConfidence (OSCTXT *pctxt, ASN1T_TimeIntervalConfidence *pvalue);

EXTERN int asn1JsonDec_TimeIntervalConfidence (OSCTXT *pctxt, ASN1T_TimeIntervalConfidence *pvalue);

EXTERN int asn1PrtToStrm_TimeIntervalConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_TimeIntervalConfidence* pvalue);

EXTERN ASN1T_TimeIntervalConfidence* 
   new_ASN1T_TimeIntervalConfidence (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TimeMark                                                  */
/*                                                            */
/**************************************************************/
/*
TimeMark ::= INTEGER (0..36001)
    Tenths of a second in the current or next hour
    In units of 1/10th second from UTC time
    A range of 0~36000 covers one hour
    The values 35991..35999 are used when a leap second occurs
    The value 36000 is used to indicate time >3600 seconds
    36001 is to be used when value undefined or unknown
    Note that this is NOT expressed in GPS time
    or in local time

*/
typedef OSUINT16 ASN1T_TimeMark;

EXTERN int asn1PE_TimeMark (OSCTXT* pctxt, ASN1T_TimeMark value);

EXTERN int asn1PD_TimeMark (OSCTXT* pctxt, ASN1T_TimeMark* pvalue);

EXTERN int XmlEnc_TimeMark (OSCTXT* pctxt, ASN1T_TimeMark value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TimeMark (OSCTXT* pctxt, ASN1T_TimeMark* pvalue);

EXTERN int asn1JsonEnc_TimeMark (OSCTXT *pctxt, ASN1T_TimeMark *pvalue);

EXTERN int asn1JsonDec_TimeMark (OSCTXT *pctxt, ASN1T_TimeMark *pvalue);

EXTERN int asn1PrtToStrm_TimeMark (OSCTXT *pctxt, 
   const char* name, const ASN1T_TimeMark* pvalue);

EXTERN ASN1T_TimeMark* new_ASN1T_TimeMark (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TimeOffset                                                */
/*                                                            */
/**************************************************************/
/*
TimeOffset ::= INTEGER (1..65535)
    LSB units of of 10 mSec, 
    with a range of 0.01 seconds to 10 minutes and 55.34 seconds
    a value of 65534 to be used for 655.34 seconds or greater
    a value of 65535 to be unavailable

*/
typedef OSUINT16 ASN1T_TimeOffset;

EXTERN int asn1PE_TimeOffset (OSCTXT* pctxt, ASN1T_TimeOffset value);

EXTERN int asn1PD_TimeOffset (OSCTXT* pctxt, ASN1T_TimeOffset* pvalue);

EXTERN int XmlEnc_TimeOffset (OSCTXT* pctxt, ASN1T_TimeOffset value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TimeOffset (OSCTXT* pctxt, ASN1T_TimeOffset* pvalue);

EXTERN int asn1JsonEnc_TimeOffset (OSCTXT *pctxt, ASN1T_TimeOffset *pvalue);

EXTERN int asn1JsonDec_TimeOffset (OSCTXT *pctxt, ASN1T_TimeOffset *pvalue);

EXTERN int asn1PrtToStrm_TimeOffset (OSCTXT *pctxt, 
   const char* name, const ASN1T_TimeOffset* pvalue);

EXTERN ASN1T_TimeOffset* new_ASN1T_TimeOffset (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TractionControlStatus                                     */
/*                                                            */
/**************************************************************/
/*
TractionControlStatus ::= ENUMERATED { unavailable(0), off(1), on(2), engaged(3) }
*/
struct EXTERN TractionControlStatus {
   enum Root {
      unavailable = 0,
      off = 1,
      on = 2,
      engaged = 3
   } ;
} ;

typedef OSUINT32 ASN1T_TractionControlStatus;

EXTERN int asn1PE_TractionControlStatus (OSCTXT* pctxt, ASN1T_TractionControlStatus value);

EXTERN int asn1PD_TractionControlStatus (OSCTXT* pctxt, ASN1T_TractionControlStatus* pvalue);

EXTERN int XmlEnc_TractionControlStatus (OSCTXT* pctxt, 
   ASN1T_TractionControlStatus value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TractionControlStatus (OSCTXT* pctxt, 
   ASN1T_TractionControlStatus* pvalue);

EXTERN int asn1JsonEnc_TractionControlStatus (OSCTXT *pctxt, ASN1T_TractionControlStatus *pvalue);

EXTERN int asn1JsonDec_TractionControlStatus (OSCTXT *pctxt, ASN1T_TractionControlStatus *pvalue);

EXTERN int asn1PrtToStrm_TractionControlStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_TractionControlStatus* pvalue);

EXTERN ASN1T_TractionControlStatus* 
   new_ASN1T_TractionControlStatus (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_TractionControlStatus_ENUMTAB[];
#define ASN1T_TractionControlStatus_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_TractionControlStatus_ToString (OSINT32 value);

EXTERN int ASN1T_TractionControlStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_TractionControlStatus* pvalue);

EXTERN int ASN1T_TractionControlStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_TractionControlStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerMass                                               */
/*                                                            */
/**************************************************************/
/*
TrailerMass ::= INTEGER (0..255)
    object mass with LSB steps of 500 kg (~1100 lbs)
    the value zero shall be uaed for an unknown mass value
    the value 255 shall be used any mass larger than 127,500kg
    a useful range of 0~127.5 metric tons. 

*/
typedef OSUINT8 ASN1T_TrailerMass;

EXTERN int asn1PE_TrailerMass (OSCTXT* pctxt, ASN1T_TrailerMass value);

EXTERN int asn1PD_TrailerMass (OSCTXT* pctxt, ASN1T_TrailerMass* pvalue);

EXTERN int XmlEnc_TrailerMass (OSCTXT* pctxt, ASN1T_TrailerMass value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerMass (OSCTXT* pctxt, ASN1T_TrailerMass* pvalue);

EXTERN int asn1JsonEnc_TrailerMass (OSCTXT *pctxt, ASN1T_TrailerMass *pvalue);

EXTERN int asn1JsonDec_TrailerMass (OSCTXT *pctxt, ASN1T_TrailerMass *pvalue);

EXTERN int asn1PrtToStrm_TrailerMass (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerMass* pvalue);

EXTERN ASN1T_TrailerMass* new_ASN1T_TrailerMass (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TransitStatus                                             */
/*                                                            */
/**************************************************************/
/*
TransitStatus ::= BIT STRING  { none(0), anADAuse(1), aBikeLoad(2), doorOpen(3), occM(4), occL(5) } (SIZE (6))
*/
struct EXTERN ASN1T_TransitStatus {
   OSOCTET data[1];
   // ctors
   ASN1T_TransitStatus ()  {}
   ASN1T_TransitStatus (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 1, _data, 1);
   }
} ;

class EXTERN ASN1C_TransitStatus :
public ASN1CBitStr
{
protected:
   ASN1T_TransitStatus& msgData;
public:
   // named bits
   enum { none = 0, anADAuse = 1, aBikeLoad = 2, doorOpen = 3, occM = 4, occL = 5 };

   /**
    * Control class: ASN1C_TransitStatus
    * Data class:    ASN1T_TransitStatus
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TransitStatus (ASN1T_TransitStatus& data);

   /**
    * Control class: ASN1C_TransitStatus<br/>
    * Data class: ASN1T_TransitStatus<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TransitStatus (OSRTMessageBufferIF& msgBuf, ASN1T_TransitStatus& data);

   virtual ~ASN1C_TransitStatus () {}

   /**
    * Data class: ASN1T_TransitStatus<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_TransitStatus.
    */
   inline ASN1T_TransitStatus& getData () { return msgData; }

   /**
    * Data class: ASN1T_TransitStatus<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_TransitStatus.
    */
   inline const ASN1T_TransitStatus& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             TransitStatus will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "TransitStatus");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_TransitStatus& operator= (const ASN1C_TransitStatus&) {return *this;}
} ;

EXTERN int asn1PE_TransitStatus (OSCTXT* pctxt, ASN1T_TransitStatus* pvalue);

EXTERN int asn1PD_TransitStatus (OSCTXT* pctxt, ASN1T_TransitStatus* pvalue);

EXTERN int XmlEnc_TransitStatus (OSCTXT* pctxt, ASN1T_TransitStatus* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TransitStatus (OSCTXT* pctxt, ASN1T_TransitStatus* pvalue);

EXTERN int asn1JsonEnc_TransitStatus (OSCTXT *pctxt, ASN1T_TransitStatus *pvalue);

EXTERN int asn1JsonDec_TransitStatus (OSCTXT *pctxt, ASN1T_TransitStatus *pvalue);

EXTERN int asn1PrtToStrm_TransitStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_TransitStatus* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_TransitStatus_NAMEDBITTAB[7];

EXTERN ASN1T_TransitStatus* new_ASN1T_TransitStatus (ASN1CType& ccobj);

EXTERN int asn1Init_TransitStatus (ASN1T_TransitStatus* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  TransitVehicleOccupancy                                   */
/*                                                            */
/**************************************************************/
/*
TransitVehicleOccupancy ::= ENUMERATED { occupancyUnknown(0), occupancyEmpty(1), occupancyVeryLow(2), occupancyLow(3), occupancyMed(4), occupancyHigh(5), occupancyNearlyFull(6), occupancyFull(7) }
*/
struct EXTERN TransitVehicleOccupancy {
   enum Root {
      occupancyUnknown = 0,
      occupancyEmpty = 1,
      occupancyVeryLow = 2,
      occupancyLow = 3,
      occupancyMed = 4,
      occupancyHigh = 5,
      occupancyNearlyFull = 6,
      occupancyFull = 7
   } ;
} ;

typedef OSUINT32 ASN1T_TransitVehicleOccupancy;

EXTERN int asn1PE_TransitVehicleOccupancy (OSCTXT* pctxt, ASN1T_TransitVehicleOccupancy value);

EXTERN int asn1PD_TransitVehicleOccupancy (OSCTXT* pctxt, ASN1T_TransitVehicleOccupancy* pvalue);

EXTERN int XmlEnc_TransitVehicleOccupancy (OSCTXT* pctxt, 
   ASN1T_TransitVehicleOccupancy value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TransitVehicleOccupancy (OSCTXT* pctxt, 
   ASN1T_TransitVehicleOccupancy* pvalue);

EXTERN int asn1JsonEnc_TransitVehicleOccupancy (OSCTXT *pctxt, ASN1T_TransitVehicleOccupancy *pvalue);

EXTERN int asn1JsonDec_TransitVehicleOccupancy (OSCTXT *pctxt, ASN1T_TransitVehicleOccupancy *pvalue);

EXTERN int asn1PrtToStrm_TransitVehicleOccupancy (OSCTXT *pctxt, 
   const char* name, const ASN1T_TransitVehicleOccupancy* pvalue);

EXTERN ASN1T_TransitVehicleOccupancy* 
   new_ASN1T_TransitVehicleOccupancy (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_TransitVehicleOccupancy_ENUMTAB[];
#define ASN1T_TransitVehicleOccupancy_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_TransitVehicleOccupancy_ToString (OSINT32 value);

EXTERN int ASN1T_TransitVehicleOccupancy_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_TransitVehicleOccupancy* pvalue);

EXTERN int ASN1T_TransitVehicleOccupancy_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_TransitVehicleOccupancy* pvalue);

/**************************************************************/
/*                                                            */
/*  TransitVehicleStatus                                      */
/*                                                            */
/**************************************************************/
/*
TransitVehicleStatus ::= BIT STRING  { loading(0), anADAuse(1), aBikeLoad(2), doorOpen(3), charging(4), atStopLine(5) } (SIZE (8))
*/
struct EXTERN ASN1T_TransitVehicleStatus {
   OSOCTET data[1];
   // ctors
   ASN1T_TransitVehicleStatus ()  {}
   ASN1T_TransitVehicleStatus (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 1, _data, 1);
   }
} ;

class EXTERN ASN1C_TransitVehicleStatus :
public ASN1CBitStr
{
protected:
   ASN1T_TransitVehicleStatus& msgData;
public:
   // named bits
   enum { loading = 0, anADAuse = 1, aBikeLoad = 2, doorOpen = 3, charging = 4, atStopLine = 5 };

   /**
    * Control class: ASN1C_TransitVehicleStatus
    * Data class:    ASN1T_TransitVehicleStatus
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TransitVehicleStatus (ASN1T_TransitVehicleStatus& data);

   /**
    * Control class: ASN1C_TransitVehicleStatus<br/>
    * Data class: ASN1T_TransitVehicleStatus<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TransitVehicleStatus (OSRTMessageBufferIF& msgBuf
      , ASN1T_TransitVehicleStatus& data);

   virtual ~ASN1C_TransitVehicleStatus () {}

private:
   ASN1C_TransitVehicleStatus& operator= (const ASN1C_TransitVehicleStatus&) {return *this;}
} ;

EXTERN int asn1PE_TransitVehicleStatus (OSCTXT* pctxt, ASN1T_TransitVehicleStatus* pvalue);

EXTERN int asn1PD_TransitVehicleStatus (OSCTXT* pctxt, ASN1T_TransitVehicleStatus* pvalue);

EXTERN int XmlEnc_TransitVehicleStatus (OSCTXT* pctxt, 
   ASN1T_TransitVehicleStatus* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TransitVehicleStatus (OSCTXT* pctxt, 
   ASN1T_TransitVehicleStatus* pvalue);

EXTERN int asn1JsonEnc_TransitVehicleStatus (OSCTXT *pctxt, ASN1T_TransitVehicleStatus *pvalue);

EXTERN int asn1JsonDec_TransitVehicleStatus (OSCTXT *pctxt, ASN1T_TransitVehicleStatus *pvalue);

EXTERN int asn1PrtToStrm_TransitVehicleStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_TransitVehicleStatus* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_TransitVehicleStatus_NAMEDBITTAB[7];

EXTERN ASN1T_TransitVehicleStatus* 
   new_ASN1T_TransitVehicleStatus (ASN1CType& ccobj);

EXTERN int asn1Init_TransitVehicleStatus (ASN1T_TransitVehicleStatus* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  TransmissionState                                         */
/*                                                            */
/**************************************************************/
/*
TransmissionState ::= ENUMERATED { neutral(0), park(1), forwardGears(2), reverseGears(3), reserved1(4), reserved2(5), reserved3(6), unavailable(7) }
*/
struct EXTERN TransmissionState {
   enum Root {
      neutral = 0,
      park = 1,
      forwardGears = 2,
      reverseGears = 3,
      reserved1 = 4,
      reserved2 = 5,
      reserved3 = 6,
      unavailable = 7
   } ;
} ;

typedef OSUINT32 ASN1T_TransmissionState;

EXTERN int asn1PE_TransmissionState (OSCTXT* pctxt, ASN1T_TransmissionState value);

EXTERN int asn1PD_TransmissionState (OSCTXT* pctxt, ASN1T_TransmissionState* pvalue);

EXTERN int XmlEnc_TransmissionState (OSCTXT* pctxt, 
   ASN1T_TransmissionState value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TransmissionState (OSCTXT* pctxt, 
   ASN1T_TransmissionState* pvalue);

EXTERN int asn1JsonEnc_TransmissionState (OSCTXT *pctxt, ASN1T_TransmissionState *pvalue);

EXTERN int asn1JsonDec_TransmissionState (OSCTXT *pctxt, ASN1T_TransmissionState *pvalue);

EXTERN int asn1PrtToStrm_TransmissionState (OSCTXT *pctxt, 
   const char* name, const ASN1T_TransmissionState* pvalue);

EXTERN ASN1T_TransmissionState* new_ASN1T_TransmissionState (ASN1CType& ccobj)
   ;

EXTERN extern const OSEnumItem ASN1T_TransmissionState_ENUMTAB[];
#define ASN1T_TransmissionState_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_TransmissionState_ToString (OSINT32 value);

EXTERN int ASN1T_TransmissionState_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_TransmissionState* pvalue);

EXTERN int ASN1T_TransmissionState_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_TransmissionState* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInfoType                                          */
/*                                                            */
/**************************************************************/
/*
TravelerInfoType ::= ENUMERATED { unknown(0), advisory(1), roadSignage(2), commercialSignage(3), ... }
*/
struct EXTERN TravelerInfoType {
   enum Root {
      unknown = 0,
      advisory = 1,
      roadSignage = 2,
      commercialSignage = 3
   } ;
} ;

typedef OSUINT32 ASN1T_TravelerInfoType;

EXTERN int asn1PE_TravelerInfoType (OSCTXT* pctxt, ASN1T_TravelerInfoType value);

EXTERN int asn1PD_TravelerInfoType (OSCTXT* pctxt, ASN1T_TravelerInfoType* pvalue);

EXTERN int XmlEnc_TravelerInfoType (OSCTXT* pctxt, 
   ASN1T_TravelerInfoType value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerInfoType (OSCTXT* pctxt, 
   ASN1T_TravelerInfoType* pvalue);

EXTERN int asn1JsonEnc_TravelerInfoType (OSCTXT *pctxt, ASN1T_TravelerInfoType *pvalue);

EXTERN int asn1JsonDec_TravelerInfoType (OSCTXT *pctxt, ASN1T_TravelerInfoType *pvalue);

EXTERN int asn1PrtToStrm_TravelerInfoType (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerInfoType* pvalue);

EXTERN ASN1T_TravelerInfoType* new_ASN1T_TravelerInfoType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_TravelerInfoType_ENUMTAB[];
#define ASN1T_TravelerInfoType_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_TravelerInfoType_ToString (OSINT32 value);

EXTERN int ASN1T_TravelerInfoType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_TravelerInfoType* pvalue);

EXTERN int ASN1T_TravelerInfoType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_TravelerInfoType* pvalue);

/**************************************************************/
/*                                                            */
/*  UniqueMSGID                                               */
/*                                                            */
/**************************************************************/
/*
UniqueMSGID ::= OCTET STRING (SIZE (9))
*/
struct EXTERN ASN1T_UniqueMSGID {
   OSOCTET data[9];
   // ctors
   ASN1T_UniqueMSGID () {}
   ASN1T_UniqueMSGID (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, 9);
   }
   ASN1T_UniqueMSGID (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
   }
   // assignment operators
   ASN1T_UniqueMSGID& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
      return *this;
   }
} ;

EXTERN int asn1PE_UniqueMSGID (OSCTXT* pctxt, ASN1T_UniqueMSGID* pvalue);

EXTERN int asn1PD_UniqueMSGID (OSCTXT* pctxt, ASN1T_UniqueMSGID* pvalue);

EXTERN int XmlEnc_UniqueMSGID (OSCTXT* pctxt, ASN1T_UniqueMSGID* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_UniqueMSGID (OSCTXT* pctxt, ASN1T_UniqueMSGID* pvalue);

EXTERN int asn1JsonEnc_UniqueMSGID (OSCTXT *pctxt, ASN1T_UniqueMSGID *pvalue);

EXTERN int asn1JsonDec_UniqueMSGID (OSCTXT *pctxt, ASN1T_UniqueMSGID *pvalue);

EXTERN int asn1PrtToStrm_UniqueMSGID (OSCTXT *pctxt, 
   const char* name, const ASN1T_UniqueMSGID* pvalue);

EXTERN ASN1T_UniqueMSGID* new_ASN1T_UniqueMSGID (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  URL_Base                                                  */
/*                                                            */
/**************************************************************/
/*
URL-Base ::= IA5String (SIZE (1..45))
*/
typedef const char* ASN1T_URL_Base;

EXTERN int asn1PE_URL_Base (OSCTXT* pctxt, ASN1T_URL_Base value);

EXTERN int asn1PD_URL_Base (OSCTXT* pctxt, ASN1T_URL_Base* pvalue);

EXTERN int XmlEnc_URL_Base (OSCTXT* pctxt, ASN1T_URL_Base value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_URL_Base (OSCTXT* pctxt, ASN1T_URL_Base* pvalue);

EXTERN int asn1JsonEnc_URL_Base (OSCTXT *pctxt, ASN1T_URL_Base value);

EXTERN int asn1JsonDec_URL_Base (OSCTXT *pctxt, ASN1T_URL_Base *pvalue);

EXTERN int asn1PrtToStrm_URL_Base (OSCTXT *pctxt, 
   const char* name, const ASN1T_URL_Base pvalue);

EXTERN void asn1Free_URL_Base (OSCTXT *pctxt, ASN1T_URL_Base pvalue);

/**************************************************************/
/*                                                            */
/*  URL_Link                                                  */
/*                                                            */
/**************************************************************/
/*
URL-Link ::= IA5String (SIZE (1..255))
*/
typedef const char* ASN1T_URL_Link;

class EXTERN ASN1C_URL_Link :
public ASN1CType
{
protected:
   ASN1T_URL_Link& msgData;
public:
   /**
    * Control class: ASN1C_URL_Link
    * Data class:    ASN1T_URL_Link
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_URL_Link (ASN1T_URL_Link& data);

   /**
    * Control class: ASN1C_URL_Link<br/>
    * Data class: ASN1T_URL_Link<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_URL_Link (OSRTMessageBufferIF& msgBuf, ASN1T_URL_Link& data);

   virtual ~ASN1C_URL_Link () {}

   /**
    * Data class: ASN1T_URL_Link<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_URL_Link.
    */
   inline ASN1T_URL_Link& getData () { return msgData; }

   /**
    * Data class: ASN1T_URL_Link<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_URL_Link.
    */
   inline const ASN1T_URL_Link& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             URL_Link will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "URL_Link");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_URL_Link& operator= (const ASN1C_URL_Link&) {return *this;}
} ;

EXTERN int asn1PE_URL_Link (OSCTXT* pctxt, ASN1T_URL_Link value);

EXTERN int asn1PD_URL_Link (OSCTXT* pctxt, ASN1T_URL_Link* pvalue);

EXTERN int XmlEnc_URL_Link (OSCTXT* pctxt, ASN1T_URL_Link value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_URL_Link (OSCTXT* pctxt, ASN1T_URL_Link* pvalue);

EXTERN int asn1JsonEnc_URL_Link (OSCTXT *pctxt, ASN1T_URL_Link value);

EXTERN int asn1JsonDec_URL_Link (OSCTXT *pctxt, ASN1T_URL_Link *pvalue);

EXTERN int asn1PrtToStrm_URL_Link (OSCTXT *pctxt, 
   const char* name, const ASN1T_URL_Link pvalue);

EXTERN void asn1Free_URL_Link (OSCTXT *pctxt, ASN1T_URL_Link pvalue);

/**************************************************************/
/*                                                            */
/*  URL_Short                                                 */
/*                                                            */
/**************************************************************/
/*
URL-Short ::= IA5String (SIZE (1..15))
*/
typedef const char* ASN1T_URL_Short;

EXTERN int asn1PE_URL_Short (OSCTXT* pctxt, ASN1T_URL_Short value);

EXTERN int asn1PD_URL_Short (OSCTXT* pctxt, ASN1T_URL_Short* pvalue);

EXTERN int XmlEnc_URL_Short (OSCTXT* pctxt, ASN1T_URL_Short value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_URL_Short (OSCTXT* pctxt, ASN1T_URL_Short* pvalue);

EXTERN int asn1JsonEnc_URL_Short (OSCTXT *pctxt, ASN1T_URL_Short value);

EXTERN int asn1JsonDec_URL_Short (OSCTXT *pctxt, ASN1T_URL_Short *pvalue);

EXTERN int asn1PrtToStrm_URL_Short (OSCTXT *pctxt, 
   const char* name, const ASN1T_URL_Short pvalue);

EXTERN void asn1Free_URL_Short (OSCTXT *pctxt, ASN1T_URL_Short pvalue);

/**************************************************************/
/*                                                            */
/*  UserSizeAndBehaviour                                      */
/*                                                            */
/**************************************************************/
/*
UserSizeAndBehaviour ::= BIT STRING  { unavailable(0), smallStature(1), largeStature(2), erraticMoving(3), slowMoving(4) } (SIZE (5, ...))
*/
struct EXTERN ASN1T_UserSizeAndBehaviour {
   OSUINT8 numbits;
   OSOCTET data[1];
   OSOCTET* extdata;
   // ctors
   ASN1T_UserSizeAndBehaviour () : numbits(0), extdata(0) {}
} ;

class EXTERN ASN1C_UserSizeAndBehaviour :
public ASN1CBitStr
{
protected:
   ASN1T_UserSizeAndBehaviour& msgData;
public:
   // named bits
   enum { unavailable = 0, smallStature = 1, largeStature = 2, erraticMoving = 3, slowMoving = 4 };

   /**
    * Control class: ASN1C_UserSizeAndBehaviour
    * Data class:    ASN1T_UserSizeAndBehaviour
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_UserSizeAndBehaviour (ASN1T_UserSizeAndBehaviour& data);

   /**
    * Control class: ASN1C_UserSizeAndBehaviour<br/>
    * Data class: ASN1T_UserSizeAndBehaviour<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_UserSizeAndBehaviour (OSRTMessageBufferIF& msgBuf
      , ASN1T_UserSizeAndBehaviour& data);

   virtual ~ASN1C_UserSizeAndBehaviour () {}

private:
   ASN1C_UserSizeAndBehaviour& operator= (const ASN1C_UserSizeAndBehaviour&) {return *this;}
} ;

EXTERN int asn1PE_UserSizeAndBehaviour (OSCTXT* pctxt, ASN1T_UserSizeAndBehaviour* pvalue);

EXTERN int asn1PD_UserSizeAndBehaviour (OSCTXT* pctxt, ASN1T_UserSizeAndBehaviour* pvalue);

EXTERN int XmlEnc_UserSizeAndBehaviour (OSCTXT* pctxt, 
   ASN1T_UserSizeAndBehaviour* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_UserSizeAndBehaviour (OSCTXT* pctxt, 
   ASN1T_UserSizeAndBehaviour* pvalue);

EXTERN int asn1JsonEnc_UserSizeAndBehaviour (OSCTXT *pctxt, ASN1T_UserSizeAndBehaviour *pvalue);

EXTERN int asn1JsonDec_UserSizeAndBehaviour (OSCTXT *pctxt, ASN1T_UserSizeAndBehaviour *pvalue);

EXTERN int asn1PrtToStrm_UserSizeAndBehaviour (OSCTXT *pctxt, 
   const char* name, const ASN1T_UserSizeAndBehaviour* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_UserSizeAndBehaviour_NAMEDBITTAB[6];

EXTERN ASN1T_UserSizeAndBehaviour* 
   new_ASN1T_UserSizeAndBehaviour (ASN1CType& ccobj);

EXTERN int asn1Init_UserSizeAndBehaviour (ASN1T_UserSizeAndBehaviour* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  VehicleEventFlags                                         */
/*                                                            */
/**************************************************************/
/*
VehicleEventFlags ::= BIT STRING  { eventHazardLights(0), eventStopLineViolation(1), eventABSactivated(2), eventTractionControlLoss(3), eventStabilityControlactivated(4), eventHazardousMaterials(5), eventReserved1(6), eventHardBraking(7), eventLightsChanged(8), eventWipersChanged(9), eventFlatTire(10), eventDisabledVehicle(11), eventAirBagDeployment(12) } (SIZE (13, ...))
*/
struct EXTERN ASN1T_VehicleEventFlags {
   OSUINT8 numbits;
   OSOCTET data[2];
   OSOCTET* extdata;
   // ctors
   ASN1T_VehicleEventFlags () : numbits(0), extdata(0) {}
} ;

class EXTERN ASN1C_VehicleEventFlags :
public ASN1CBitStr
{
protected:
   ASN1T_VehicleEventFlags& msgData;
public:
   // named bits
   enum { eventHazardLights = 0, eventStopLineViolation = 1, eventABSactivated = 2, eventTractionControlLoss = 3, eventStabilityControlactivated = 4, eventHazardousMaterials = 5, eventReserved1 = 6, eventHardBraking = 7, eventLightsChanged = 8, eventWipersChanged = 9, eventFlatTire = 10, eventDisabledVehicle = 11, eventAirBagDeployment = 12 };

   /**
    * Control class: ASN1C_VehicleEventFlags
    * Data class:    ASN1T_VehicleEventFlags
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VehicleEventFlags (ASN1T_VehicleEventFlags& data);

   /**
    * Control class: ASN1C_VehicleEventFlags<br/>
    * Data class: ASN1T_VehicleEventFlags<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VehicleEventFlags (OSRTMessageBufferIF& msgBuf
      , ASN1T_VehicleEventFlags& data);

   virtual ~ASN1C_VehicleEventFlags () {}

private:
   ASN1C_VehicleEventFlags& operator= (const ASN1C_VehicleEventFlags&) {return *this;}
} ;

EXTERN int asn1PE_VehicleEventFlags (OSCTXT* pctxt, ASN1T_VehicleEventFlags* pvalue);

EXTERN int asn1PD_VehicleEventFlags (OSCTXT* pctxt, ASN1T_VehicleEventFlags* pvalue);

EXTERN int XmlEnc_VehicleEventFlags (OSCTXT* pctxt, 
   ASN1T_VehicleEventFlags* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleEventFlags (OSCTXT* pctxt, 
   ASN1T_VehicleEventFlags* pvalue);

EXTERN int asn1JsonEnc_VehicleEventFlags (OSCTXT *pctxt, ASN1T_VehicleEventFlags *pvalue);

EXTERN int asn1JsonDec_VehicleEventFlags (OSCTXT *pctxt, ASN1T_VehicleEventFlags *pvalue);

EXTERN int asn1PrtToStrm_VehicleEventFlags (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleEventFlags* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_VehicleEventFlags_NAMEDBITTAB[14];

EXTERN ASN1T_VehicleEventFlags* new_ASN1T_VehicleEventFlags (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_VehicleEventFlags (ASN1T_VehicleEventFlags* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  VehicleHeight                                             */
/*                                                            */
/**************************************************************/
/*
VehicleHeight ::= INTEGER (0..127)
     the height of the vehicle
     LSB units of 5 cm, range to 6.35 meters

*/
typedef OSUINT8 ASN1T_VehicleHeight;

EXTERN int asn1PE_VehicleHeight (OSCTXT* pctxt, ASN1T_VehicleHeight value);

EXTERN int asn1PD_VehicleHeight (OSCTXT* pctxt, ASN1T_VehicleHeight* pvalue);

EXTERN int XmlEnc_VehicleHeight (OSCTXT* pctxt, ASN1T_VehicleHeight value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleHeight (OSCTXT* pctxt, ASN1T_VehicleHeight* pvalue);

EXTERN int asn1JsonEnc_VehicleHeight (OSCTXT *pctxt, ASN1T_VehicleHeight *pvalue);

EXTERN int asn1JsonDec_VehicleHeight (OSCTXT *pctxt, ASN1T_VehicleHeight *pvalue);

EXTERN int asn1PrtToStrm_VehicleHeight (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleHeight* pvalue);

EXTERN ASN1T_VehicleHeight* new_ASN1T_VehicleHeight (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleLength                                             */
/*                                                            */
/**************************************************************/
/*
VehicleLength ::= INTEGER (0..4095)
                                      LSB units of 1 cm with a range of >40 meters

*/
typedef OSUINT16 ASN1T_VehicleLength;

EXTERN int asn1PE_VehicleLength (OSCTXT* pctxt, ASN1T_VehicleLength value);

EXTERN int asn1PD_VehicleLength (OSCTXT* pctxt, ASN1T_VehicleLength* pvalue);

EXTERN int XmlEnc_VehicleLength (OSCTXT* pctxt, ASN1T_VehicleLength value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleLength (OSCTXT* pctxt, ASN1T_VehicleLength* pvalue);

EXTERN int asn1JsonEnc_VehicleLength (OSCTXT *pctxt, ASN1T_VehicleLength *pvalue);

EXTERN int asn1JsonDec_VehicleLength (OSCTXT *pctxt, ASN1T_VehicleLength *pvalue);

EXTERN int asn1PrtToStrm_VehicleLength (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleLength* pvalue);

EXTERN ASN1T_VehicleLength* new_ASN1T_VehicleLength (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleMass                                               */
/*                                                            */
/**************************************************************/
/*
VehicleMass ::= INTEGER (0..255)
     Values 000 to 080 in steps of 50kg
     Values 081 to 200 in steps of 500kg
     Values 201 to 253 in steps of 2000kg
     The Value 254 shall be used for weights above 170000 kg
     The Value 255 shall be used when the value is unknown or unavailable
     Encoded such that the values:
      81 represents   4500 kg
     181 represents  54500 kg
     253 represents 170000 kg

*/
typedef OSUINT8 ASN1T_VehicleMass;

EXTERN int asn1PE_VehicleMass (OSCTXT* pctxt, ASN1T_VehicleMass value);

EXTERN int asn1PD_VehicleMass (OSCTXT* pctxt, ASN1T_VehicleMass* pvalue);

EXTERN int XmlEnc_VehicleMass (OSCTXT* pctxt, ASN1T_VehicleMass value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleMass (OSCTXT* pctxt, ASN1T_VehicleMass* pvalue);

EXTERN int asn1JsonEnc_VehicleMass (OSCTXT *pctxt, ASN1T_VehicleMass *pvalue);

EXTERN int asn1JsonDec_VehicleMass (OSCTXT *pctxt, ASN1T_VehicleMass *pvalue);

EXTERN int asn1PrtToStrm_VehicleMass (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleMass* pvalue);

EXTERN ASN1T_VehicleMass* new_ASN1T_VehicleMass (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleStatusDeviceTypeTag                                */
/*                                                            */
/**************************************************************/
/*
VehicleStatusDeviceTypeTag ::= ENUMERATED { unknown(0), lights(1), wipers(2), brakes(3), stab(4), trac(5), abs(6), sunS(7), rainS(8), airTemp(9), steering(10), vertAccelThres(11), vertAccel(12), hozAccelLong(13), hozAccelLat(14), hozAccelCon(15), accel4way(16), confidenceSet(17), obDist(18), obDirect(19), yaw(20), yawRateCon(21), dateTime(22), fullPos(23), position2D(24), position3D(25), vehicle(26), speedHeadC(27), speedC(28), ... }
*/
struct EXTERN VehicleStatusDeviceTypeTag {
   enum Root {
      unknown = 0,
      lights = 1,
      wipers = 2,
      brakes = 3,
      stab = 4,
      trac = 5,
      abs_ = 6,
      sunS = 7,
      rainS = 8,
      airTemp = 9,
      steering = 10,
      vertAccelThres = 11,
      vertAccel = 12,
      hozAccelLong = 13,
      hozAccelLat = 14,
      hozAccelCon = 15,
      accel4way = 16,
      confidenceSet = 17,
      obDist = 18,
      obDirect = 19,
      yaw = 20,
      yawRateCon = 21,
      dateTime = 22,
      fullPos = 23,
      position2D = 24,
      position3D = 25,
      vehicle = 26,
      speedHeadC = 27,
      speedC = 28
   } ;
} ;

typedef OSUINT32 ASN1T_VehicleStatusDeviceTypeTag;

EXTERN int asn1PE_VehicleStatusDeviceTypeTag (OSCTXT* pctxt, ASN1T_VehicleStatusDeviceTypeTag value);

EXTERN int asn1PD_VehicleStatusDeviceTypeTag (OSCTXT* pctxt, ASN1T_VehicleStatusDeviceTypeTag* pvalue);

EXTERN int XmlEnc_VehicleStatusDeviceTypeTag (OSCTXT* pctxt, 
   ASN1T_VehicleStatusDeviceTypeTag value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatusDeviceTypeTag (OSCTXT* pctxt, 
   ASN1T_VehicleStatusDeviceTypeTag* pvalue);

EXTERN int asn1JsonEnc_VehicleStatusDeviceTypeTag (OSCTXT *pctxt, ASN1T_VehicleStatusDeviceTypeTag *pvalue);

EXTERN int asn1JsonDec_VehicleStatusDeviceTypeTag (OSCTXT *pctxt, ASN1T_VehicleStatusDeviceTypeTag *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatusDeviceTypeTag (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatusDeviceTypeTag* pvalue);

EXTERN ASN1T_VehicleStatusDeviceTypeTag* 
   new_ASN1T_VehicleStatusDeviceTypeTag (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_VehicleStatusDeviceTypeTag_ENUMTAB[];
#define ASN1T_VehicleStatusDeviceTypeTag_ENUMTABSIZE 29

EXTERN const OSUTF8CHAR* ASN1T_VehicleStatusDeviceTypeTag_ToString (OSINT32 value);

EXTERN int ASN1T_VehicleStatusDeviceTypeTag_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_VehicleStatusDeviceTypeTag* pvalue);

EXTERN int ASN1T_VehicleStatusDeviceTypeTag_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_VehicleStatusDeviceTypeTag* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleType                                               */
/*                                                            */
/**************************************************************/
/*
VehicleType ::= ENUMERATED { none(0), unknown(1), special(2), moto(3), car(4), carOther(5), bus(6), axleCnt2(7), axleCnt3(8), axleCnt4(9), axleCnt4Trailer(10), axleCnt5Trailer(11), axleCnt6Trailer(12), axleCnt5MultiTrailer(13), axleCnt6MultiTrailer(14), axleCnt7MultiTrailer(15), ... }
*/
struct EXTERN VehicleType {
   enum Root {
      none = 0,
      unknown = 1,
      special = 2,
      moto = 3,
      car = 4,
      carOther = 5,
      bus = 6,
      axleCnt2 = 7,
      axleCnt3 = 8,
      axleCnt4 = 9,
      axleCnt4Trailer = 10,
      axleCnt5Trailer = 11,
      axleCnt6Trailer = 12,
      axleCnt5MultiTrailer = 13,
      axleCnt6MultiTrailer = 14,
      axleCnt7MultiTrailer = 15
   } ;
} ;

typedef OSUINT32 ASN1T_VehicleType;

EXTERN int asn1PE_VehicleType (OSCTXT* pctxt, ASN1T_VehicleType value);

EXTERN int asn1PD_VehicleType (OSCTXT* pctxt, ASN1T_VehicleType* pvalue);

EXTERN int XmlEnc_VehicleType (OSCTXT* pctxt, ASN1T_VehicleType value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleType (OSCTXT* pctxt, ASN1T_VehicleType* pvalue);

EXTERN int asn1JsonEnc_VehicleType (OSCTXT *pctxt, ASN1T_VehicleType *pvalue);

EXTERN int asn1JsonDec_VehicleType (OSCTXT *pctxt, ASN1T_VehicleType *pvalue);

EXTERN int asn1PrtToStrm_VehicleType (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleType* pvalue);

EXTERN ASN1T_VehicleType* new_ASN1T_VehicleType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_VehicleType_ENUMTAB[];
#define ASN1T_VehicleType_ENUMTABSIZE 16

EXTERN const OSUTF8CHAR* ASN1T_VehicleType_ToString (OSINT32 value);

EXTERN int ASN1T_VehicleType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_VehicleType* pvalue);

EXTERN int ASN1T_VehicleType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_VehicleType* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleWidth                                              */
/*                                                            */
/**************************************************************/
/*
VehicleWidth ::= INTEGER (0..1023)
                                    LSB units are 1 cm with a range of >10 meters

*/
typedef OSUINT16 ASN1T_VehicleWidth;

EXTERN int asn1PE_VehicleWidth (OSCTXT* pctxt, ASN1T_VehicleWidth value);

EXTERN int asn1PD_VehicleWidth (OSCTXT* pctxt, ASN1T_VehicleWidth* pvalue);

EXTERN int XmlEnc_VehicleWidth (OSCTXT* pctxt, ASN1T_VehicleWidth value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleWidth (OSCTXT* pctxt, ASN1T_VehicleWidth* pvalue);

EXTERN int asn1JsonEnc_VehicleWidth (OSCTXT *pctxt, ASN1T_VehicleWidth *pvalue);

EXTERN int asn1JsonDec_VehicleWidth (OSCTXT *pctxt, ASN1T_VehicleWidth *pvalue);

EXTERN int asn1PrtToStrm_VehicleWidth (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleWidth* pvalue);

EXTERN ASN1T_VehicleWidth* new_ASN1T_VehicleWidth (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Velocity                                                  */
/*                                                            */
/**************************************************************/
/*
Velocity ::= INTEGER (0..8191)
                                Units of 0.02 m/s
     The value 8191 indicates that 
     velocity is unavailable

*/
typedef OSUINT16 ASN1T_Velocity;

EXTERN int asn1PE_Velocity (OSCTXT* pctxt, ASN1T_Velocity value);

EXTERN int asn1PD_Velocity (OSCTXT* pctxt, ASN1T_Velocity* pvalue);

EXTERN int XmlEnc_Velocity (OSCTXT* pctxt, ASN1T_Velocity value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Velocity (OSCTXT* pctxt, ASN1T_Velocity* pvalue);

EXTERN int asn1JsonEnc_Velocity (OSCTXT *pctxt, ASN1T_Velocity *pvalue);

EXTERN int asn1JsonDec_Velocity (OSCTXT *pctxt, ASN1T_Velocity *pvalue);

EXTERN int asn1PrtToStrm_Velocity (OSCTXT *pctxt, 
   const char* name, const ASN1T_Velocity* pvalue);

EXTERN ASN1T_Velocity* new_ASN1T_Velocity (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VerticalAccelerationThreshold                             */
/*                                                            */
/**************************************************************/
/*
VerticalAccelerationThreshold ::= BIT STRING  { notEquipped(0), leftFront(1), leftRear(2), rightFront(3), rightRear(4) } (SIZE (5))
*/
struct EXTERN ASN1T_VerticalAccelerationThreshold {
   OSOCTET data[1];
   // ctors
   ASN1T_VerticalAccelerationThreshold ()  {}
   ASN1T_VerticalAccelerationThreshold (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 1, _data, 1);
   }
} ;

class EXTERN ASN1C_VerticalAccelerationThreshold :
public ASN1CBitStr
{
protected:
   ASN1T_VerticalAccelerationThreshold& msgData;
public:
   // named bits
   enum { notEquipped = 0, leftFront = 1, leftRear = 2, rightFront = 3, rightRear = 4 };

   /**
    * Control class: ASN1C_VerticalAccelerationThreshold
    * Data class:    ASN1T_VerticalAccelerationThreshold
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VerticalAccelerationThreshold
       (ASN1T_VerticalAccelerationThreshold& data);

   /**
    * Control class: ASN1C_VerticalAccelerationThreshold<br/>
    * Data class: ASN1T_VerticalAccelerationThreshold<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VerticalAccelerationThreshold (OSRTMessageBufferIF& msgBuf
      , ASN1T_VerticalAccelerationThreshold& data);

   virtual ~ASN1C_VerticalAccelerationThreshold () {}

private:
   ASN1C_VerticalAccelerationThreshold& operator= (const ASN1C_VerticalAccelerationThreshold&) {return *this;}
} ;

EXTERN int asn1PE_VerticalAccelerationThreshold (OSCTXT* pctxt, ASN1T_VerticalAccelerationThreshold* pvalue);

EXTERN int asn1PD_VerticalAccelerationThreshold (OSCTXT* pctxt, ASN1T_VerticalAccelerationThreshold* pvalue);

EXTERN int XmlEnc_VerticalAccelerationThreshold (OSCTXT* pctxt, 
   ASN1T_VerticalAccelerationThreshold* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VerticalAccelerationThreshold (OSCTXT* pctxt, 
   ASN1T_VerticalAccelerationThreshold* pvalue);

EXTERN int asn1JsonEnc_VerticalAccelerationThreshold (OSCTXT *pctxt, ASN1T_VerticalAccelerationThreshold *pvalue);

EXTERN int asn1JsonDec_VerticalAccelerationThreshold (OSCTXT *pctxt, ASN1T_VerticalAccelerationThreshold *pvalue);

EXTERN int asn1PrtToStrm_VerticalAccelerationThreshold (OSCTXT *pctxt, 
   const char* name, const ASN1T_VerticalAccelerationThreshold* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_VerticalAccelerationThreshold_NAMEDBITTAB[6];

EXTERN ASN1T_VerticalAccelerationThreshold* 
   new_ASN1T_VerticalAccelerationThreshold (ASN1CType& ccobj);

EXTERN int asn1Init_VerticalAccelerationThreshold (
   ASN1T_VerticalAccelerationThreshold* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  VerticalAcceleration                                      */
/*                                                            */
/**************************************************************/
/*
VerticalAcceleration ::= INTEGER (-127..127)
    LSB units of 0.02 G steps over -2.52 to +2.54 G
    The value +127 shall be used for ranges >= 2.54 G
    The value -126 shall be used for ranges <= 2.52 G
    The value -127 shall be used for unavailable

*/
typedef OSINT8 ASN1T_VerticalAcceleration;

EXTERN int asn1PE_VerticalAcceleration (OSCTXT* pctxt, ASN1T_VerticalAcceleration value);

EXTERN int asn1PD_VerticalAcceleration (OSCTXT* pctxt, ASN1T_VerticalAcceleration* pvalue);

EXTERN int XmlEnc_VerticalAcceleration (OSCTXT* pctxt, 
   ASN1T_VerticalAcceleration value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VerticalAcceleration (OSCTXT* pctxt, 
   ASN1T_VerticalAcceleration* pvalue);

EXTERN int asn1JsonEnc_VerticalAcceleration (OSCTXT *pctxt, ASN1T_VerticalAcceleration *pvalue);

EXTERN int asn1JsonDec_VerticalAcceleration (OSCTXT *pctxt, ASN1T_VerticalAcceleration *pvalue);

EXTERN int asn1PrtToStrm_VerticalAcceleration (OSCTXT *pctxt, 
   const char* name, const ASN1T_VerticalAcceleration* pvalue);

EXTERN ASN1T_VerticalAcceleration* 
   new_ASN1T_VerticalAcceleration (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VertOffset_B07                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B07 ::= INTEGER (-64..63)
    LSB units of of 10 cm
    with a range of +- 6.3 meters vertical 
    value  63 to be used for  63 or greater
    value -63 to be used for -63 or greater
    value -64 to be unavailable

*/
typedef OSINT8 ASN1T_VertOffset_B07;

EXTERN int asn1PE_VertOffset_B07 (OSCTXT* pctxt, ASN1T_VertOffset_B07 value);

EXTERN int asn1PD_VertOffset_B07 (OSCTXT* pctxt, ASN1T_VertOffset_B07* pvalue);

EXTERN int XmlEnc_VertOffset_B07 (OSCTXT* pctxt, ASN1T_VertOffset_B07 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VertOffset_B07 (OSCTXT* pctxt, ASN1T_VertOffset_B07* pvalue)
   ;

EXTERN int asn1JsonEnc_VertOffset_B07 (OSCTXT *pctxt, ASN1T_VertOffset_B07 *pvalue);

EXTERN int asn1JsonDec_VertOffset_B07 (OSCTXT *pctxt, ASN1T_VertOffset_B07 *pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B07 (OSCTXT *pctxt, 
   const char* name, const ASN1T_VertOffset_B07* pvalue);

EXTERN ASN1T_VertOffset_B07* new_ASN1T_VertOffset_B07 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VertOffset_B08                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B08 ::= INTEGER (-128..127)
    LSB units of of 10 cm
    with a range of +- 12.7 meters vertical
    value  127 to be used for  127 or greater
    value -127 to be used for -127 or greater
    value -128 to be unavailable

*/
typedef OSINT8 ASN1T_VertOffset_B08;

EXTERN int asn1PE_VertOffset_B08 (OSCTXT* pctxt, ASN1T_VertOffset_B08 value);

EXTERN int asn1PD_VertOffset_B08 (OSCTXT* pctxt, ASN1T_VertOffset_B08* pvalue);

EXTERN int XmlEnc_VertOffset_B08 (OSCTXT* pctxt, ASN1T_VertOffset_B08 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VertOffset_B08 (OSCTXT* pctxt, ASN1T_VertOffset_B08* pvalue)
   ;

EXTERN int asn1JsonEnc_VertOffset_B08 (OSCTXT *pctxt, ASN1T_VertOffset_B08 *pvalue);

EXTERN int asn1JsonDec_VertOffset_B08 (OSCTXT *pctxt, ASN1T_VertOffset_B08 *pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B08 (OSCTXT *pctxt, 
   const char* name, const ASN1T_VertOffset_B08* pvalue);

EXTERN ASN1T_VertOffset_B08* new_ASN1T_VertOffset_B08 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VertOffset_B09                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B09 ::= INTEGER (-256..255)
    LSB units of of 10 cm
    with a range of +- 25.5 meters vertical
    value  255 to be used for  255 or greater
    value -255 to be used for -255 or greater
    value -256 to be unavailable

*/
typedef OSINT16 ASN1T_VertOffset_B09;

EXTERN int asn1PE_VertOffset_B09 (OSCTXT* pctxt, ASN1T_VertOffset_B09 value);

EXTERN int asn1PD_VertOffset_B09 (OSCTXT* pctxt, ASN1T_VertOffset_B09* pvalue);

EXTERN int XmlEnc_VertOffset_B09 (OSCTXT* pctxt, ASN1T_VertOffset_B09 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VertOffset_B09 (OSCTXT* pctxt, ASN1T_VertOffset_B09* pvalue)
   ;

EXTERN int asn1JsonEnc_VertOffset_B09 (OSCTXT *pctxt, ASN1T_VertOffset_B09 *pvalue);

EXTERN int asn1JsonDec_VertOffset_B09 (OSCTXT *pctxt, ASN1T_VertOffset_B09 *pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B09 (OSCTXT *pctxt, 
   const char* name, const ASN1T_VertOffset_B09* pvalue);

EXTERN ASN1T_VertOffset_B09* new_ASN1T_VertOffset_B09 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VertOffset_B10                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B10 ::= INTEGER (-512..511)
    LSB units of of 10 cm
    with a range of +- 51.1 meters vertical
    value  511 to be used for  511 or greater
    value -511 to be used for -511 or greater
    value -512 to be unavailable

*/
typedef OSINT16 ASN1T_VertOffset_B10;

EXTERN int asn1PE_VertOffset_B10 (OSCTXT* pctxt, ASN1T_VertOffset_B10 value);

EXTERN int asn1PD_VertOffset_B10 (OSCTXT* pctxt, ASN1T_VertOffset_B10* pvalue);

EXTERN int XmlEnc_VertOffset_B10 (OSCTXT* pctxt, ASN1T_VertOffset_B10 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VertOffset_B10 (OSCTXT* pctxt, ASN1T_VertOffset_B10* pvalue)
   ;

EXTERN int asn1JsonEnc_VertOffset_B10 (OSCTXT *pctxt, ASN1T_VertOffset_B10 *pvalue);

EXTERN int asn1JsonDec_VertOffset_B10 (OSCTXT *pctxt, ASN1T_VertOffset_B10 *pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B10 (OSCTXT *pctxt, 
   const char* name, const ASN1T_VertOffset_B10* pvalue);

EXTERN ASN1T_VertOffset_B10* new_ASN1T_VertOffset_B10 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VertOffset_B11                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B11 ::= INTEGER (-1024..1023)
    LSB units of of 10 cm
    with a range of +- 102.3 meters vertical
    value  1023 to be used for  1023 or greater
    value -1023 to be used for -1023 or greater
    value -1024 to be unavailable

*/
typedef OSINT16 ASN1T_VertOffset_B11;

EXTERN int asn1PE_VertOffset_B11 (OSCTXT* pctxt, ASN1T_VertOffset_B11 value);

EXTERN int asn1PD_VertOffset_B11 (OSCTXT* pctxt, ASN1T_VertOffset_B11* pvalue);

EXTERN int XmlEnc_VertOffset_B11 (OSCTXT* pctxt, ASN1T_VertOffset_B11 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VertOffset_B11 (OSCTXT* pctxt, ASN1T_VertOffset_B11* pvalue)
   ;

EXTERN int asn1JsonEnc_VertOffset_B11 (OSCTXT *pctxt, ASN1T_VertOffset_B11 *pvalue);

EXTERN int asn1JsonDec_VertOffset_B11 (OSCTXT *pctxt, ASN1T_VertOffset_B11 *pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B11 (OSCTXT *pctxt, 
   const char* name, const ASN1T_VertOffset_B11* pvalue);

EXTERN ASN1T_VertOffset_B11* new_ASN1T_VertOffset_B11 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VertOffset_B12                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B12 ::= INTEGER (-2048..2047)
    LSB units of of 10 cm
    with a range of +- 204.7 meters vertical
    value  2047 to be used for  2047 or greater
    value -2047 to be used for -2047 or greater
    value -2048 to be unavailable

*/
typedef OSINT16 ASN1T_VertOffset_B12;

EXTERN int asn1PE_VertOffset_B12 (OSCTXT* pctxt, ASN1T_VertOffset_B12 value);

EXTERN int asn1PD_VertOffset_B12 (OSCTXT* pctxt, ASN1T_VertOffset_B12* pvalue);

EXTERN int XmlEnc_VertOffset_B12 (OSCTXT* pctxt, ASN1T_VertOffset_B12 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VertOffset_B12 (OSCTXT* pctxt, ASN1T_VertOffset_B12* pvalue)
   ;

EXTERN int asn1JsonEnc_VertOffset_B12 (OSCTXT *pctxt, ASN1T_VertOffset_B12 *pvalue);

EXTERN int asn1JsonDec_VertOffset_B12 (OSCTXT *pctxt, ASN1T_VertOffset_B12 *pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B12 (OSCTXT *pctxt, 
   const char* name, const ASN1T_VertOffset_B12* pvalue);

EXTERN ASN1T_VertOffset_B12* new_ASN1T_VertOffset_B12 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VINstring                                                 */
/*                                                            */
/**************************************************************/
/*
VINstring ::= OCTET STRING (SIZE (1..17))
    A legal VIN or a shorter value 
    to provide an ident of the vehicle
    If a VIN is sent, then IA5 encoding 
    shall be used

*/
struct EXTERN ASN1T_VINstring {
   OSUINT8 numocts;
   OSOCTET data[17];
   // ctors
   ASN1T_VINstring () : numocts(0) {}
   ASN1T_VINstring (OSUINT8 _numocts, const OSOCTET* _data) :
      numocts (_numocts) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, numocts);
   }
   ASN1T_VINstring (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT8)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
   }
   // assignment operators
   ASN1T_VINstring& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT8)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
      return *this;
   }
} ;

EXTERN int asn1PE_VINstring (OSCTXT* pctxt, ASN1T_VINstring* pvalue);

EXTERN int asn1PD_VINstring (OSCTXT* pctxt, ASN1T_VINstring* pvalue);

EXTERN int XmlEnc_VINstring (OSCTXT* pctxt, ASN1T_VINstring* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VINstring (OSCTXT* pctxt, ASN1T_VINstring* pvalue);

EXTERN int asn1JsonEnc_VINstring (OSCTXT *pctxt, ASN1T_VINstring *pvalue);

EXTERN int asn1JsonDec_VINstring (OSCTXT *pctxt, ASN1T_VINstring *pvalue);

EXTERN int asn1PrtToStrm_VINstring (OSCTXT *pctxt, 
   const char* name, const ASN1T_VINstring* pvalue);

EXTERN ASN1T_VINstring* new_ASN1T_VINstring (ASN1CType& ccobj);

EXTERN int asn1Init_VINstring (ASN1T_VINstring* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  WaitOnStopline                                            */
/*                                                            */
/**************************************************************/
/*
WaitOnStopline ::= BOOLEAN
                            
          True or False
          If "true", the vehicles on this specific connecting 
          maneuver have to stop on the stop-line
          and not to enter the collision area

*/
typedef OSBOOL ASN1T_WaitOnStopline;

EXTERN int asn1PE_WaitOnStopline (OSCTXT* pctxt, ASN1T_WaitOnStopline value);

EXTERN int asn1PD_WaitOnStopline (OSCTXT* pctxt, ASN1T_WaitOnStopline* pvalue);

EXTERN int XmlEnc_WaitOnStopline (OSCTXT* pctxt, ASN1T_WaitOnStopline value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WaitOnStopline (OSCTXT* pctxt, ASN1T_WaitOnStopline* pvalue)
   ;

EXTERN int asn1JsonEnc_WaitOnStopline (OSCTXT *pctxt, ASN1T_WaitOnStopline *pvalue);

EXTERN int asn1JsonDec_WaitOnStopline (OSCTXT *pctxt, ASN1T_WaitOnStopline *pvalue);

EXTERN int asn1PrtToStrm_WaitOnStopline (OSCTXT *pctxt, 
   const char* name, const ASN1T_WaitOnStopline* pvalue);

EXTERN ASN1T_WaitOnStopline* new_ASN1T_WaitOnStopline (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  WiperRate                                                 */
/*                                                            */
/**************************************************************/
/*
WiperRate ::= INTEGER (0..127)
                                units of sweeps per minute

*/
typedef OSUINT8 ASN1T_WiperRate;

EXTERN int asn1PE_WiperRate (OSCTXT* pctxt, ASN1T_WiperRate value);

EXTERN int asn1PD_WiperRate (OSCTXT* pctxt, ASN1T_WiperRate* pvalue);

EXTERN int XmlEnc_WiperRate (OSCTXT* pctxt, ASN1T_WiperRate value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WiperRate (OSCTXT* pctxt, ASN1T_WiperRate* pvalue);

EXTERN int asn1JsonEnc_WiperRate (OSCTXT *pctxt, ASN1T_WiperRate *pvalue);

EXTERN int asn1JsonDec_WiperRate (OSCTXT *pctxt, ASN1T_WiperRate *pvalue);

EXTERN int asn1PrtToStrm_WiperRate (OSCTXT *pctxt, 
   const char* name, const ASN1T_WiperRate* pvalue);

EXTERN ASN1T_WiperRate* new_ASN1T_WiperRate (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  WiperStatus                                               */
/*                                                            */
/**************************************************************/
/*
WiperStatus ::= ENUMERATED { unavailable(0), off(1), intermittent(2), low(3), high(4), washerInUse(5), automaticPresent(6), ... }
*/
struct EXTERN WiperStatus {
   enum Root {
      unavailable = 0,
      off = 1,
      intermittent = 2,
      low = 3,
      high = 4,
      washerInUse = 5,
      automaticPresent = 6
   } ;
} ;

typedef OSUINT32 ASN1T_WiperStatus;

EXTERN int asn1PE_WiperStatus (OSCTXT* pctxt, ASN1T_WiperStatus value);

EXTERN int asn1PD_WiperStatus (OSCTXT* pctxt, ASN1T_WiperStatus* pvalue);

EXTERN int XmlEnc_WiperStatus (OSCTXT* pctxt, ASN1T_WiperStatus value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WiperStatus (OSCTXT* pctxt, ASN1T_WiperStatus* pvalue);

EXTERN int asn1JsonEnc_WiperStatus (OSCTXT *pctxt, ASN1T_WiperStatus *pvalue);

EXTERN int asn1JsonDec_WiperStatus (OSCTXT *pctxt, ASN1T_WiperStatus *pvalue);

EXTERN int asn1PrtToStrm_WiperStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_WiperStatus* pvalue);

EXTERN ASN1T_WiperStatus* new_ASN1T_WiperStatus (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_WiperStatus_ENUMTAB[];
#define ASN1T_WiperStatus_ENUMTABSIZE 7

EXTERN const OSUTF8CHAR* ASN1T_WiperStatus_ToString (OSINT32 value);

EXTERN int ASN1T_WiperStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_WiperStatus* pvalue);

EXTERN int ASN1T_WiperStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_WiperStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  YawRateConfidence                                         */
/*                                                            */
/**************************************************************/
/*
YawRateConfidence ::= ENUMERATED { unavailable(0), degSec-100-00(1), degSec-010-00(2), degSec-005-00(3), degSec-001-00(4), degSec-000-10(5), degSec-000-05(6), degSec-000-01(7) }
    Encoded as a 3 bit value

*/
struct EXTERN YawRateConfidence {
   enum Root {
      unavailable = 0,
      degSec_100_00 = 1,
      degSec_010_00 = 2,
      degSec_005_00 = 3,
      degSec_001_00 = 4,
      degSec_000_10 = 5,
      degSec_000_05 = 6,
      degSec_000_01 = 7
   } ;
} ;

typedef OSUINT32 ASN1T_YawRateConfidence;

EXTERN int asn1PE_YawRateConfidence (OSCTXT* pctxt, ASN1T_YawRateConfidence value);

EXTERN int asn1PD_YawRateConfidence (OSCTXT* pctxt, ASN1T_YawRateConfidence* pvalue);

EXTERN int XmlEnc_YawRateConfidence (OSCTXT* pctxt, 
   ASN1T_YawRateConfidence value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_YawRateConfidence (OSCTXT* pctxt, 
   ASN1T_YawRateConfidence* pvalue);

EXTERN int asn1JsonEnc_YawRateConfidence (OSCTXT *pctxt, ASN1T_YawRateConfidence *pvalue);

EXTERN int asn1JsonDec_YawRateConfidence (OSCTXT *pctxt, ASN1T_YawRateConfidence *pvalue);

EXTERN int asn1PrtToStrm_YawRateConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_YawRateConfidence* pvalue);

EXTERN ASN1T_YawRateConfidence* new_ASN1T_YawRateConfidence (ASN1CType& ccobj)
   ;

EXTERN extern const OSEnumItem ASN1T_YawRateConfidence_ENUMTAB[];
#define ASN1T_YawRateConfidence_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_YawRateConfidence_ToString (OSINT32 value);

EXTERN int ASN1T_YawRateConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_YawRateConfidence* pvalue);

EXTERN int ASN1T_YawRateConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_YawRateConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  YawRate                                                   */
/*                                                            */
/**************************************************************/
/*
YawRate ::= INTEGER (-32767..32767)
    LSB units of 0.01 degrees per second (signed)

*/
typedef OSINT16 ASN1T_YawRate;

EXTERN int asn1PE_YawRate (OSCTXT* pctxt, ASN1T_YawRate value);

EXTERN int asn1PD_YawRate (OSCTXT* pctxt, ASN1T_YawRate* pvalue);

EXTERN int XmlEnc_YawRate (OSCTXT* pctxt, ASN1T_YawRate value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_YawRate (OSCTXT* pctxt, ASN1T_YawRate* pvalue);

EXTERN int asn1JsonEnc_YawRate (OSCTXT *pctxt, ASN1T_YawRate *pvalue);

EXTERN int asn1JsonDec_YawRate (OSCTXT *pctxt, ASN1T_YawRate *pvalue);

EXTERN int asn1PrtToStrm_YawRate (OSCTXT *pctxt, 
   const char* name, const ASN1T_YawRate* pvalue);

EXTERN ASN1T_YawRate* new_ASN1T_YawRate (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ZoneLength                                                */
/*                                                            */
/**************************************************************/
/*
ZoneLength ::= INTEGER (0..10000)
     Unit = 1 meter, 0 = unknown, 
     The value 10000 to be used for Distances >=10000 m
     (e.g. from known point to another point along a 
     known path, often against traffic flow direction 
     when used for measuring queues)

*/
typedef OSUINT16 ASN1T_ZoneLength;

EXTERN int asn1PE_ZoneLength (OSCTXT* pctxt, ASN1T_ZoneLength value);

EXTERN int asn1PD_ZoneLength (OSCTXT* pctxt, ASN1T_ZoneLength* pvalue);

EXTERN int XmlEnc_ZoneLength (OSCTXT* pctxt, ASN1T_ZoneLength value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ZoneLength (OSCTXT* pctxt, ASN1T_ZoneLength* pvalue);

EXTERN int asn1JsonEnc_ZoneLength (OSCTXT *pctxt, ASN1T_ZoneLength *pvalue);

EXTERN int asn1JsonDec_ZoneLength (OSCTXT *pctxt, ASN1T_ZoneLength *pvalue);

EXTERN int asn1PrtToStrm_ZoneLength (OSCTXT *pctxt, 
   const char* name, const ASN1T_ZoneLength* pvalue);

EXTERN ASN1T_ZoneLength* new_ASN1T_ZoneLength (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Zoom                                                      */
/*                                                            */
/**************************************************************/
/*
Zoom ::= INTEGER (0..15)
    A zoom scale applied in units of 2^N
    A value of 0 is a 1:1 zoom (no zoom)
    A value of 1 is a 2:1 zoom
    A value of 2 is a 4:1 zoom, etc.
    The zoom value is applied to one or more offsets
    increase the span or range while reducing its precision
    The absence of a zoom, any offset element in a data 
    frame implies a 1:1 zoom

*/
typedef OSUINT8 ASN1T_Zoom;

EXTERN int asn1PE_Zoom (OSCTXT* pctxt, ASN1T_Zoom value);

EXTERN int asn1PD_Zoom (OSCTXT* pctxt, ASN1T_Zoom* pvalue);

EXTERN int XmlEnc_Zoom (OSCTXT* pctxt, ASN1T_Zoom value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Zoom (OSCTXT* pctxt, ASN1T_Zoom* pvalue);

EXTERN int asn1JsonEnc_Zoom (OSCTXT *pctxt, ASN1T_Zoom *pvalue);

EXTERN int asn1JsonDec_Zoom (OSCTXT *pctxt, ASN1T_Zoom *pvalue);

EXTERN int asn1PrtToStrm_Zoom (OSCTXT *pctxt, 
   const char* name, const ASN1T_Zoom* pvalue);

EXTERN ASN1T_Zoom* new_ASN1T_Zoom (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PositionalAccuracy                                        */
/*                                                            */
/**************************************************************/
/*
PositionalAccuracy ::= SEQUENCE {
   -- NMEA-183 values expressed in strict ASN form
   semiMajor [0] SemiMajorAxisAccuracy,
   semiMinor [1] SemiMinorAxisAccuracy,
   orientation [2] SemiMajorAxisOrientation
}
*/
struct EXTERN ASN1T_PositionalAccuracy {
   ASN1T_SemiMajorAxisAccuracy semiMajor;
   ASN1T_SemiMinorAxisAccuracy semiMinor;
   ASN1T_SemiMajorAxisOrientation orientation;
} ;

EXTERN int asn1PE_PositionalAccuracy (OSCTXT* pctxt, ASN1T_PositionalAccuracy* pvalue);

EXTERN int asn1PD_PositionalAccuracy (OSCTXT* pctxt, ASN1T_PositionalAccuracy* pvalue);

EXTERN int XmlEnc_PositionalAccuracy (OSCTXT* pctxt, 
   ASN1T_PositionalAccuracy* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PositionalAccuracy (OSCTXT* pctxt, 
   ASN1T_PositionalAccuracy* pvalue);

EXTERN int asn1JsonEnc_PositionalAccuracy (OSCTXT *pctxt, ASN1T_PositionalAccuracy *pvalue);

EXTERN int asn1JsonDec_PositionalAccuracy (OSCTXT *pctxt, ASN1T_PositionalAccuracy *pvalue);

EXTERN int asn1PrtToStrm_PositionalAccuracy (OSCTXT *pctxt, 
   const char* name, const ASN1T_PositionalAccuracy* pvalue);

EXTERN ASN1T_PositionalAccuracy* 
   new_ASN1T_PositionalAccuracy (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  AccelerationSet4Way                                       */
/*                                                            */
/**************************************************************/
/*
 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 
 Start of entries from table Data_Frames...
 This table typically contains data frame entries.
 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 
AccelerationSet4Way ::= SEQUENCE {
   long [0] Acceleration, -- Along the Vehicle Longitudinal axis
   lat [1] Acceleration, -- Along the Vehicle Lateral axis
   vert [2] VerticalAcceleration, -- Along the Vehicle Vertical axis
   yaw [3] YawRate
}
*/
struct EXTERN ASN1T_AccelerationSet4Way {
   ASN1T_Acceleration long_;
   ASN1T_Acceleration lat;
   ASN1T_VerticalAcceleration vert;
   ASN1T_YawRate yaw;
} ;

EXTERN int asn1PE_AccelerationSet4Way (OSCTXT* pctxt, ASN1T_AccelerationSet4Way* pvalue);

EXTERN int asn1PD_AccelerationSet4Way (OSCTXT* pctxt, ASN1T_AccelerationSet4Way* pvalue);

EXTERN int XmlEnc_AccelerationSet4Way (OSCTXT* pctxt, 
   ASN1T_AccelerationSet4Way* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AccelerationSet4Way (OSCTXT* pctxt, 
   ASN1T_AccelerationSet4Way* pvalue);

EXTERN int asn1JsonEnc_AccelerationSet4Way (OSCTXT *pctxt, ASN1T_AccelerationSet4Way *pvalue);

EXTERN int asn1JsonDec_AccelerationSet4Way (OSCTXT *pctxt, ASN1T_AccelerationSet4Way *pvalue);

EXTERN int asn1PrtToStrm_AccelerationSet4Way (OSCTXT *pctxt, 
   const char* name, const ASN1T_AccelerationSet4Way* pvalue);

EXTERN ASN1T_AccelerationSet4Way* 
   new_ASN1T_AccelerationSet4Way (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  BrakeSystemStatus                                         */
/*                                                            */
/**************************************************************/
/*
BrakeSystemStatus ::= SEQUENCE {
   wheelBrakes [0] BrakeAppliedStatus,
   traction [1] TractionControlStatus,
   abs [2] AntiLockBrakeStatus,
   scs [3] StabilityControlStatus,
   brakeBoost [4] BrakeBoostApplied,
   auxBrakes [5] AuxiliaryBrakeStatus
}
*/
struct EXTERN ASN1T_BrakeSystemStatus {
   ASN1T_BrakeAppliedStatus wheelBrakes;
   ASN1T_TractionControlStatus traction;
   ASN1T_AntiLockBrakeStatus abs_;
   ASN1T_StabilityControlStatus scs;
   ASN1T_BrakeBoostApplied brakeBoost;
   ASN1T_AuxiliaryBrakeStatus auxBrakes;
} ;

EXTERN int asn1PE_BrakeSystemStatus (OSCTXT* pctxt, ASN1T_BrakeSystemStatus* pvalue);

EXTERN int asn1PD_BrakeSystemStatus (OSCTXT* pctxt, ASN1T_BrakeSystemStatus* pvalue);

EXTERN int XmlEnc_BrakeSystemStatus (OSCTXT* pctxt, 
   ASN1T_BrakeSystemStatus* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BrakeSystemStatus (OSCTXT* pctxt, 
   ASN1T_BrakeSystemStatus* pvalue);

EXTERN int asn1JsonEnc_BrakeSystemStatus (OSCTXT *pctxt, ASN1T_BrakeSystemStatus *pvalue);

EXTERN int asn1JsonDec_BrakeSystemStatus (OSCTXT *pctxt, ASN1T_BrakeSystemStatus *pvalue);

EXTERN int asn1PrtToStrm_BrakeSystemStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_BrakeSystemStatus* pvalue);

EXTERN ASN1T_BrakeSystemStatus* new_ASN1T_BrakeSystemStatus (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_BrakeSystemStatus (ASN1T_BrakeSystemStatus* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  VehicleSize                                               */
/*                                                            */
/**************************************************************/
/*
VehicleSize ::= SEQUENCE {
   width [0] VehicleWidth,
   length [1] VehicleLength
}
*/
struct EXTERN ASN1T_VehicleSize {
   ASN1T_VehicleWidth width;
   ASN1T_VehicleLength length;
} ;

EXTERN int asn1PE_VehicleSize (OSCTXT* pctxt, ASN1T_VehicleSize* pvalue);

EXTERN int asn1PD_VehicleSize (OSCTXT* pctxt, ASN1T_VehicleSize* pvalue);

EXTERN int XmlEnc_VehicleSize (OSCTXT* pctxt, ASN1T_VehicleSize* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleSize (OSCTXT* pctxt, ASN1T_VehicleSize* pvalue);

EXTERN int asn1JsonEnc_VehicleSize (OSCTXT *pctxt, ASN1T_VehicleSize *pvalue);

EXTERN int asn1JsonDec_VehicleSize (OSCTXT *pctxt, ASN1T_VehicleSize *pvalue);

EXTERN int asn1PrtToStrm_VehicleSize (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleSize* pvalue);

EXTERN ASN1T_VehicleSize* new_ASN1T_VehicleSize (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  BSMcoreData                                               */
/*                                                            */
/**************************************************************/
/*
BSMcoreData ::= SEQUENCE {
   msgCnt [0] MsgCount,
   id [1] TemporaryID,
   secMark [2] DSecond,
   lat [3] Latitude,
   long [4] Longitude,
   elev [5] Elevation,
   accuracy [6] PositionalAccuracy,
   transmission [7] TransmissionState,
   speed [8] Speed,
   heading [9] Heading,
   angle [10] SteeringWheelAngle,
   accelSet [11] AccelerationSet4Way,
   brakes [12] BrakeSystemStatus,
   size [13] VehicleSize
}
*/
struct EXTERN ASN1T_BSMcoreData {
   ASN1T_MsgCount msgCnt;
   ASN1T_TemporaryID id;
   ASN1T_DSecond secMark;
   ASN1T_Latitude lat;
   ASN1T_Longitude long_;
   ASN1T_Elevation elev;
   ASN1T_PositionalAccuracy accuracy;
   ASN1T_TransmissionState transmission;
   ASN1T_Speed speed;
   ASN1T_Heading heading;
   ASN1T_SteeringWheelAngle angle;
   ASN1T_AccelerationSet4Way accelSet;
   ASN1T_BrakeSystemStatus brakes;
   ASN1T_VehicleSize size;
} ;

EXTERN int asn1PE_BSMcoreData (OSCTXT* pctxt, ASN1T_BSMcoreData* pvalue);

EXTERN int asn1PD_BSMcoreData (OSCTXT* pctxt, ASN1T_BSMcoreData* pvalue);

EXTERN int XmlEnc_BSMcoreData (OSCTXT* pctxt, ASN1T_BSMcoreData* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BSMcoreData (OSCTXT* pctxt, ASN1T_BSMcoreData* pvalue);

EXTERN int asn1JsonEnc_BSMcoreData (OSCTXT *pctxt, ASN1T_BSMcoreData *pvalue);

EXTERN int asn1JsonDec_BSMcoreData (OSCTXT *pctxt, ASN1T_BSMcoreData *pvalue);

EXTERN int asn1PrtToStrm_BSMcoreData (OSCTXT *pctxt, 
   const char* name, const ASN1T_BSMcoreData* pvalue);

EXTERN ASN1T_BSMcoreData* new_ASN1T_BSMcoreData (ASN1CType& ccobj);

EXTERN int asn1Init_BSMcoreData (ASN1T_BSMcoreData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  DDateTime                                                 */
/*                                                            */
/**************************************************************/
/*
DDateTime ::= SEQUENCE {
   year [0] DYear OPTIONAL,
   month [1] DMonth OPTIONAL,
   day [2] DDay OPTIONAL,
   hour [3] DHour OPTIONAL,
   minute [4] DMinute OPTIONAL,
   second [5] DSecond OPTIONAL,
   offset [6] DOffset OPTIONAL -- time zone
}
*/
struct EXTERN ASN1T_DDateTime {
   struct {
      unsigned yearPresent : 1;
      unsigned monthPresent : 1;
      unsigned dayPresent : 1;
      unsigned hourPresent : 1;
      unsigned minutePresent : 1;
      unsigned secondPresent : 1;
      unsigned offsetPresent : 1;
   } m;
   ASN1T_DYear year;
   ASN1T_DMonth month;
   ASN1T_DDay day;
   ASN1T_DHour hour;
   ASN1T_DMinute minute;
   ASN1T_DSecond second;
   ASN1T_DOffset offset;
   ASN1T_DDateTime ();
} ;

EXTERN int asn1PE_DDateTime (OSCTXT* pctxt, ASN1T_DDateTime* pvalue);

EXTERN int asn1PD_DDateTime (OSCTXT* pctxt, ASN1T_DDateTime* pvalue);

EXTERN int XmlEnc_DDateTime (OSCTXT* pctxt, ASN1T_DDateTime* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DDateTime (OSCTXT* pctxt, ASN1T_DDateTime* pvalue);

EXTERN int asn1JsonEnc_DDateTime (OSCTXT *pctxt, ASN1T_DDateTime *pvalue);

EXTERN int asn1JsonDec_DDateTime (OSCTXT *pctxt, ASN1T_DDateTime *pvalue);

EXTERN int asn1PrtToStrm_DDateTime (OSCTXT *pctxt, 
   const char* name, const ASN1T_DDateTime* pvalue);

EXTERN ASN1T_DDateTime* new_ASN1T_DDateTime (ASN1CType& ccobj);

EXTERN int asn1Init_DDateTime (ASN1T_DDateTime* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  TransmissionAndSpeed                                      */
/*                                                            */
/**************************************************************/
/*
TransmissionAndSpeed ::= SEQUENCE {
   transmisson [0] TransmissionState,
   speed [1] Velocity
}
*/
struct EXTERN ASN1T_TransmissionAndSpeed {
   ASN1T_TransmissionState transmisson;
   ASN1T_Velocity speed;
} ;

EXTERN int asn1PE_TransmissionAndSpeed (OSCTXT* pctxt, ASN1T_TransmissionAndSpeed* pvalue);

EXTERN int asn1PD_TransmissionAndSpeed (OSCTXT* pctxt, ASN1T_TransmissionAndSpeed* pvalue);

EXTERN int XmlEnc_TransmissionAndSpeed (OSCTXT* pctxt, 
   ASN1T_TransmissionAndSpeed* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TransmissionAndSpeed (OSCTXT* pctxt, 
   ASN1T_TransmissionAndSpeed* pvalue);

EXTERN int asn1JsonEnc_TransmissionAndSpeed (OSCTXT *pctxt, ASN1T_TransmissionAndSpeed *pvalue);

EXTERN int asn1JsonDec_TransmissionAndSpeed (OSCTXT *pctxt, ASN1T_TransmissionAndSpeed *pvalue);

EXTERN int asn1PrtToStrm_TransmissionAndSpeed (OSCTXT *pctxt, 
   const char* name, const ASN1T_TransmissionAndSpeed* pvalue);

EXTERN ASN1T_TransmissionAndSpeed* 
   new_ASN1T_TransmissionAndSpeed (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PositionConfidenceSet                                     */
/*                                                            */
/**************************************************************/
/*
PositionConfidenceSet ::= SEQUENCE {
   pos [0] PositionConfidence, -- for both horizontal directions
   elevation [1] ElevationConfidence
}
*/
struct EXTERN ASN1T_PositionConfidenceSet {
   ASN1T_PositionConfidence pos;
   ASN1T_ElevationConfidence elevation;
} ;

EXTERN int asn1PE_PositionConfidenceSet (OSCTXT* pctxt, ASN1T_PositionConfidenceSet* pvalue);

EXTERN int asn1PD_PositionConfidenceSet (OSCTXT* pctxt, ASN1T_PositionConfidenceSet* pvalue);

EXTERN int XmlEnc_PositionConfidenceSet (OSCTXT* pctxt, 
   ASN1T_PositionConfidenceSet* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PositionConfidenceSet (OSCTXT* pctxt, 
   ASN1T_PositionConfidenceSet* pvalue);

EXTERN int asn1JsonEnc_PositionConfidenceSet (OSCTXT *pctxt, ASN1T_PositionConfidenceSet *pvalue);

EXTERN int asn1JsonDec_PositionConfidenceSet (OSCTXT *pctxt, ASN1T_PositionConfidenceSet *pvalue);

EXTERN int asn1PrtToStrm_PositionConfidenceSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_PositionConfidenceSet* pvalue);

EXTERN ASN1T_PositionConfidenceSet* 
   new_ASN1T_PositionConfidenceSet (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SpeedandHeadingandThrottleConfidence                      */
/*                                                            */
/**************************************************************/
/*
SpeedandHeadingandThrottleConfidence ::= SEQUENCE {
   heading [0] HeadingConfidence,
   speed [1] SpeedConfidence,
   throttle [2] ThrottleConfidence
}
*/
struct EXTERN ASN1T_SpeedandHeadingandThrottleConfidence {
   ASN1T_HeadingConfidence heading;
   ASN1T_SpeedConfidence speed;
   ASN1T_ThrottleConfidence throttle;
} ;

EXTERN int asn1PE_SpeedandHeadingandThrottleConfidence (OSCTXT* pctxt, ASN1T_SpeedandHeadingandThrottleConfidence* pvalue);

EXTERN int asn1PD_SpeedandHeadingandThrottleConfidence (OSCTXT* pctxt, ASN1T_SpeedandHeadingandThrottleConfidence* pvalue);

EXTERN int XmlEnc_SpeedandHeadingandThrottleConfidence (OSCTXT* pctxt, 
   ASN1T_SpeedandHeadingandThrottleConfidence* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedandHeadingandThrottleConfidence (OSCTXT* pctxt, 
   ASN1T_SpeedandHeadingandThrottleConfidence* pvalue);

EXTERN int asn1JsonEnc_SpeedandHeadingandThrottleConfidence (OSCTXT *pctxt, ASN1T_SpeedandHeadingandThrottleConfidence *pvalue);

EXTERN int asn1JsonDec_SpeedandHeadingandThrottleConfidence (OSCTXT *pctxt, ASN1T_SpeedandHeadingandThrottleConfidence *pvalue);

EXTERN int asn1PrtToStrm_SpeedandHeadingandThrottleConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedandHeadingandThrottleConfidence* pvalue);

EXTERN ASN1T_SpeedandHeadingandThrottleConfidence* 
   new_ASN1T_SpeedandHeadingandThrottleConfidence (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  FullPositionVector                                        */
/*                                                            */
/**************************************************************/
/*
FullPositionVector ::= SEQUENCE {
   utcTime [0] DDateTime OPTIONAL, -- time with mSec precision
   long [1] Longitude, -- 1/10th microdegree
   lat [2] Latitude, -- 1/10th microdegree
   elevation [3] Elevation OPTIONAL, -- units of 0.1 m
   heading [4] Heading OPTIONAL,
   speed [5] TransmissionAndSpeed OPTIONAL,
   posAccuracy [6] PositionalAccuracy OPTIONAL,
   timeConfidence [7] TimeConfidence OPTIONAL,
   posConfidence [8] PositionConfidenceSet OPTIONAL,
   speedConfidence [9] SpeedandHeadingandThrottleConfidence OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_FullPositionVector {
   struct {
      unsigned utcTimePresent : 1;
      unsigned elevationPresent : 1;
      unsigned headingPresent : 1;
      unsigned speedPresent : 1;
      unsigned posAccuracyPresent : 1;
      unsigned timeConfidencePresent : 1;
      unsigned posConfidencePresent : 1;
      unsigned speedConfidencePresent : 1;
   } m;
   ASN1T_DDateTime utcTime;
   ASN1T_Longitude long_;
   ASN1T_Latitude lat;
   ASN1T_Elevation elevation;
   ASN1T_Heading heading;
   ASN1T_TransmissionAndSpeed speed;
   ASN1T_PositionalAccuracy posAccuracy;
   ASN1T_TimeConfidence timeConfidence;
   ASN1T_PositionConfidenceSet posConfidence;
   ASN1T_SpeedandHeadingandThrottleConfidence speedConfidence;
   ASN1TSeqExt extElem1;
   ASN1T_FullPositionVector ();
} ;

EXTERN int asn1PE_FullPositionVector (OSCTXT* pctxt, ASN1T_FullPositionVector* pvalue);

EXTERN int asn1PD_FullPositionVector (OSCTXT* pctxt, ASN1T_FullPositionVector* pvalue);

EXTERN int XmlEnc_FullPositionVector (OSCTXT* pctxt, 
   ASN1T_FullPositionVector* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_FullPositionVector (OSCTXT* pctxt, 
   ASN1T_FullPositionVector* pvalue);

EXTERN int asn1JsonEnc_FullPositionVector (OSCTXT *pctxt, ASN1T_FullPositionVector *pvalue);

EXTERN int asn1JsonDec_FullPositionVector (OSCTXT *pctxt, ASN1T_FullPositionVector *pvalue);

EXTERN int asn1PrtToStrm_FullPositionVector (OSCTXT *pctxt, 
   const char* name, const ASN1T_FullPositionVector* pvalue);

EXTERN ASN1T_FullPositionVector* 
   new_ASN1T_FullPositionVector (ASN1CType& ccobj);

EXTERN int asn1Init_FullPositionVector (ASN1T_FullPositionVector* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_FullPositionVector (OSCTXT *pctxt, 
   ASN1T_FullPositionVector* pvalue);

/**************************************************************/
/*                                                            */
/*  PathHistoryPoint                                          */
/*                                                            */
/**************************************************************/
/*
PathHistoryPoint ::= SEQUENCE {
   latOffset [0] OffsetLL-B18,
   lonOffset [1] OffsetLL-B18,
   elevationOffset [2] VertOffset-B12,
   timeOffset [3] TimeOffset,
                   -- Offset backwards in time 
   speed [4] Speed OPTIONAL,
                   -- Speed over the reported period
   posAccuracy [5] PositionalAccuracy OPTIONAL,
                   -- The accuracy of this value
   heading [6] CoarseHeading OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_PathHistoryPoint {
   struct {
      unsigned speedPresent : 1;
      unsigned posAccuracyPresent : 1;
      unsigned headingPresent : 1;
   } m;
   ASN1T_OffsetLL_B18 latOffset;
   ASN1T_OffsetLL_B18 lonOffset;
   ASN1T_VertOffset_B12 elevationOffset;
   ASN1T_TimeOffset timeOffset;
   ASN1T_Speed speed;
   ASN1T_PositionalAccuracy posAccuracy;
   ASN1T_CoarseHeading heading;
   ASN1TSeqExt extElem1;
   ASN1T_PathHistoryPoint ();
} ;

EXTERN int asn1PE_PathHistoryPoint (OSCTXT* pctxt, ASN1T_PathHistoryPoint* pvalue);

EXTERN int asn1PD_PathHistoryPoint (OSCTXT* pctxt, ASN1T_PathHistoryPoint* pvalue);

EXTERN int XmlEnc_PathHistoryPoint (OSCTXT* pctxt, 
   ASN1T_PathHistoryPoint* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PathHistoryPoint (OSCTXT* pctxt, 
   ASN1T_PathHistoryPoint* pvalue);

EXTERN int asn1JsonEnc_PathHistoryPoint (OSCTXT *pctxt, ASN1T_PathHistoryPoint *pvalue);

EXTERN int asn1JsonDec_PathHistoryPoint (OSCTXT *pctxt, ASN1T_PathHistoryPoint *pvalue);

EXTERN int asn1PrtToStrm_PathHistoryPoint (OSCTXT *pctxt, 
   const char* name, const ASN1T_PathHistoryPoint* pvalue);

EXTERN ASN1T_PathHistoryPoint* new_ASN1T_PathHistoryPoint (ASN1CType& ccobj);

EXTERN int asn1Init_PathHistoryPoint (ASN1T_PathHistoryPoint* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PathHistoryPoint (OSCTXT *pctxt, ASN1T_PathHistoryPoint* pvalue);

/**************************************************************/
/*                                                            */
/*  PathHistoryPointList                                      */
/*                                                            */
/**************************************************************/
/*
PathHistoryPointList ::= SEQUENCE (SIZE (1..23)) OF PathHistoryPoint
*/
/* List of ASN1T_PathHistoryPoint */
typedef ASN1TSeqOfList ASN1T_PathHistoryPointList;

class EXTERN ASN1C_PathHistoryPointList :
public ASN1CSeqOfList
{
protected:
   ASN1T_PathHistoryPointList& msgData;
public:
   /**
    * Control class: ASN1C_PathHistoryPointList
    * Data class:    ASN1T_PathHistoryPointList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PathHistoryPointList (ASN1T_PathHistoryPointList& data);

   /**
    * Control class: ASN1C_PathHistoryPointList<br/>
    * Data class: ASN1T_PathHistoryPointList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PathHistoryPointList (OSRTMessageBufferIF& msgBuf
      , ASN1T_PathHistoryPointList& data);

   /**
    * Control class: ASN1C_PathHistoryPointList<br/>
    * Data class: ASN1T_PathHistoryPointList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_PathHistoryPointList (ASN1CType& ccobj
      , ASN1T_PathHistoryPointList& data);

   virtual ~ASN1C_PathHistoryPointList () {}

   /**
    * Data class: ASN1T_PathHistoryPoint<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_PathHistoryPoint* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_PathHistoryPoint.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_PathHistoryPoint* NewElement ();

   /**
    * Data class: ASN1T_PathHistoryPoint.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_PathHistoryPoint* AppendNewElement ();

private:
   ASN1C_PathHistoryPointList& operator= (const ASN1C_PathHistoryPointList&) {return *this;}
} ;

EXTERN int asn1PE_PathHistoryPointList (OSCTXT* pctxt, ASN1T_PathHistoryPointList* pvalue);

EXTERN int asn1PD_PathHistoryPointList (OSCTXT* pctxt, ASN1T_PathHistoryPointList* pvalue);

EXTERN int XmlEnc_PathHistoryPointList (OSCTXT* pctxt, 
   ASN1T_PathHistoryPointList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PathHistoryPointList (OSCTXT* pctxt, 
   ASN1T_PathHistoryPointList* pvalue);

EXTERN int asn1JsonEnc_PathHistoryPointList (OSCTXT *pctxt, ASN1T_PathHistoryPointList *pvalue);

EXTERN int asn1JsonDec_PathHistoryPointList (OSCTXT *pctxt, ASN1T_PathHistoryPointList *pvalue);

EXTERN int asn1PrtToStrm_PathHistoryPointList (OSCTXT *pctxt, 
   const char* name, const ASN1T_PathHistoryPointList* pvalue);

EXTERN int asn1Init_PathHistoryPointList (ASN1T_PathHistoryPointList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PathHistoryPointList (OSCTXT *pctxt, 
   ASN1T_PathHistoryPointList* pvalue);

/**************************************************************/
/*                                                            */
/*  PathHistory                                               */
/*                                                            */
/**************************************************************/
/*
PathHistory ::= SEQUENCE {
   initialPosition [0] FullPositionVector OPTIONAL,
   currGNSSstatus [1] GNSSstatus OPTIONAL,
   crumbData [2] PathHistoryPointList,
   ...
}
*/
struct EXTERN ASN1T_PathHistory {
   struct {
      unsigned initialPositionPresent : 1;
      unsigned currGNSSstatusPresent : 1;
   } m;
   ASN1T_FullPositionVector initialPosition;
   ASN1T_GNSSstatus currGNSSstatus;
   ASN1T_PathHistoryPointList crumbData;
   ASN1TSeqExt extElem1;
   ASN1T_PathHistory ();
} ;

EXTERN int asn1PE_PathHistory (OSCTXT* pctxt, ASN1T_PathHistory* pvalue);

EXTERN int asn1PD_PathHistory (OSCTXT* pctxt, ASN1T_PathHistory* pvalue);

EXTERN int XmlEnc_PathHistory (OSCTXT* pctxt, ASN1T_PathHistory* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PathHistory (OSCTXT* pctxt, ASN1T_PathHistory* pvalue);

EXTERN int asn1JsonEnc_PathHistory (OSCTXT *pctxt, ASN1T_PathHistory *pvalue);

EXTERN int asn1JsonDec_PathHistory (OSCTXT *pctxt, ASN1T_PathHistory *pvalue);

EXTERN int asn1PrtToStrm_PathHistory (OSCTXT *pctxt, 
   const char* name, const ASN1T_PathHistory* pvalue);

EXTERN ASN1T_PathHistory* new_ASN1T_PathHistory (ASN1CType& ccobj);

EXTERN int asn1Init_PathHistory (ASN1T_PathHistory* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PathHistory (OSCTXT *pctxt, ASN1T_PathHistory* pvalue);

/**************************************************************/
/*                                                            */
/*  PathPrediction                                            */
/*                                                            */
/**************************************************************/
/*
PathPrediction ::= SEQUENCE {
   radiusOfCurve [0] RadiusOfCurvature,
                 -- LSB units of 10cm
                 -- straight path to use value of 32767
   confidence [1] Confidence,
   ...
}
*/
struct EXTERN ASN1T_PathPrediction {
   ASN1T_RadiusOfCurvature radiusOfCurve;
   ASN1T_Confidence confidence;
   ASN1TSeqExt extElem1;
} ;

EXTERN int asn1PE_PathPrediction (OSCTXT* pctxt, ASN1T_PathPrediction* pvalue);

EXTERN int asn1PD_PathPrediction (OSCTXT* pctxt, ASN1T_PathPrediction* pvalue);

EXTERN int XmlEnc_PathPrediction (OSCTXT* pctxt, ASN1T_PathPrediction* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PathPrediction (OSCTXT* pctxt, ASN1T_PathPrediction* pvalue)
   ;

EXTERN int asn1JsonEnc_PathPrediction (OSCTXT *pctxt, ASN1T_PathPrediction *pvalue);

EXTERN int asn1JsonDec_PathPrediction (OSCTXT *pctxt, ASN1T_PathPrediction *pvalue);

EXTERN int asn1PrtToStrm_PathPrediction (OSCTXT *pctxt, 
   const char* name, const ASN1T_PathPrediction* pvalue);

EXTERN ASN1T_PathPrediction* new_ASN1T_PathPrediction (ASN1CType& ccobj);

EXTERN int asn1Init_PathPrediction (ASN1T_PathPrediction* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PathPrediction (OSCTXT *pctxt, ASN1T_PathPrediction* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleSafetyExtensions                                   */
/*                                                            */
/**************************************************************/
/*
VehicleSafetyExtensions ::= SEQUENCE {
   events [0] VehicleEventFlags OPTIONAL,
   pathHistory [1] PathHistory OPTIONAL,
   pathPrediction [2] PathPrediction OPTIONAL,
   lights [3] ExteriorLights OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_VehicleSafetyExtensions {
   struct {
      unsigned eventsPresent : 1;
      unsigned pathHistoryPresent : 1;
      unsigned pathPredictionPresent : 1;
      unsigned lightsPresent : 1;
   } m;
   ASN1T_VehicleEventFlags events;
   ASN1T_PathHistory pathHistory;
   ASN1T_PathPrediction pathPrediction;
   ASN1T_ExteriorLights lights;
   ASN1TSeqExt extElem1;
   ASN1T_VehicleSafetyExtensions ();
} ;

EXTERN int asn1PE_VehicleSafetyExtensions (OSCTXT* pctxt, ASN1T_VehicleSafetyExtensions* pvalue);

EXTERN int asn1PD_VehicleSafetyExtensions (OSCTXT* pctxt, ASN1T_VehicleSafetyExtensions* pvalue);

EXTERN int XmlEnc_VehicleSafetyExtensions (OSCTXT* pctxt, 
   ASN1T_VehicleSafetyExtensions* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleSafetyExtensions (OSCTXT* pctxt, 
   ASN1T_VehicleSafetyExtensions* pvalue);

EXTERN int asn1JsonEnc_VehicleSafetyExtensions (OSCTXT *pctxt, ASN1T_VehicleSafetyExtensions *pvalue);

EXTERN int asn1JsonDec_VehicleSafetyExtensions (OSCTXT *pctxt, ASN1T_VehicleSafetyExtensions *pvalue);

EXTERN int asn1PrtToStrm_VehicleSafetyExtensions (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleSafetyExtensions* pvalue);

EXTERN ASN1T_VehicleSafetyExtensions* 
   new_ASN1T_VehicleSafetyExtensions (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleSafetyExtensions (ASN1T_VehicleSafetyExtensions* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleSafetyExtensions (OSCTXT *pctxt, 
   ASN1T_VehicleSafetyExtensions* pvalue);

/**************************************************************/
/*                                                            */
/*  PrivilegedEvents                                          */
/*                                                            */
/**************************************************************/
/*
PrivilegedEvents ::= SEQUENCE {
   -- CERT SSP Privilege Details
   sspRights [0] SSPindex,
   -- The active event list
   event [1] PrivilegedEventFlags,
   ...
}
*/
struct EXTERN ASN1T_PrivilegedEvents {
   ASN1T_SSPindex sspRights;
   ASN1T_PrivilegedEventFlags event;
   ASN1TSeqExt extElem1;
} ;

EXTERN int asn1PE_PrivilegedEvents (OSCTXT* pctxt, ASN1T_PrivilegedEvents* pvalue);

EXTERN int asn1PD_PrivilegedEvents (OSCTXT* pctxt, ASN1T_PrivilegedEvents* pvalue);

EXTERN int XmlEnc_PrivilegedEvents (OSCTXT* pctxt, 
   ASN1T_PrivilegedEvents* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PrivilegedEvents (OSCTXT* pctxt, 
   ASN1T_PrivilegedEvents* pvalue);

EXTERN int asn1JsonEnc_PrivilegedEvents (OSCTXT *pctxt, ASN1T_PrivilegedEvents *pvalue);

EXTERN int asn1JsonDec_PrivilegedEvents (OSCTXT *pctxt, ASN1T_PrivilegedEvents *pvalue);

EXTERN int asn1PrtToStrm_PrivilegedEvents (OSCTXT *pctxt, 
   const char* name, const ASN1T_PrivilegedEvents* pvalue);

EXTERN ASN1T_PrivilegedEvents* new_ASN1T_PrivilegedEvents (ASN1CType& ccobj);

EXTERN int asn1Init_PrivilegedEvents (ASN1T_PrivilegedEvents* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PrivilegedEvents (OSCTXT *pctxt, ASN1T_PrivilegedEvents* pvalue);

/**************************************************************/
/*                                                            */
/*  EmergencyDetails                                          */
/*                                                            */
/**************************************************************/
/*
EmergencyDetails ::= SEQUENCE {
   -- CERT SSP Privilege Details
   sspRights [0] SSPindex, -- index set by CERT
   sirenUse [1] SirenInUse,
   lightsUse [2] LightbarInUse,
   multi [3] MultiVehicleResponse,
   events [4] PrivilegedEvents OPTIONAL,
   responseType [5] ResponseType OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_EmergencyDetails {
   struct {
      unsigned eventsPresent : 1;
      unsigned responseTypePresent : 1;
   } m;
   ASN1T_SSPindex sspRights;
   ASN1T_SirenInUse sirenUse;
   ASN1T_LightbarInUse lightsUse;
   ASN1T_MultiVehicleResponse multi;
   ASN1T_PrivilegedEvents events;
   ASN1T_ResponseType responseType;
   ASN1TSeqExt extElem1;
   ASN1T_EmergencyDetails ();
} ;

EXTERN int asn1PE_EmergencyDetails (OSCTXT* pctxt, ASN1T_EmergencyDetails* pvalue);

EXTERN int asn1PD_EmergencyDetails (OSCTXT* pctxt, ASN1T_EmergencyDetails* pvalue);

EXTERN int XmlEnc_EmergencyDetails (OSCTXT* pctxt, 
   ASN1T_EmergencyDetails* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EmergencyDetails (OSCTXT* pctxt, 
   ASN1T_EmergencyDetails* pvalue);

EXTERN int asn1JsonEnc_EmergencyDetails (OSCTXT *pctxt, ASN1T_EmergencyDetails *pvalue);

EXTERN int asn1JsonDec_EmergencyDetails (OSCTXT *pctxt, ASN1T_EmergencyDetails *pvalue);

EXTERN int asn1PrtToStrm_EmergencyDetails (OSCTXT *pctxt, 
   const char* name, const ASN1T_EmergencyDetails* pvalue);

EXTERN ASN1T_EmergencyDetails* new_ASN1T_EmergencyDetails (ASN1CType& ccobj);

EXTERN int asn1Init_EmergencyDetails (ASN1T_EmergencyDetails* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_EmergencyDetails (OSCTXT *pctxt, ASN1T_EmergencyDetails* pvalue);

/**************************************************************/
/*                                                            */
/*  EventDescription_description                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'EventDescription'
*/
typedef struct EXTERN ASN1T_EventDescription_description {
   OSUINT8 n;
   ASN1T_ITIScodes elem[8];
   ASN1T_EventDescription_description () : n(0) {}
} ASN1T_EventDescription_description;

class EXTERN ASN1C_EventDescription_description :
public ASN1CType
{
protected:
   ASN1T_EventDescription_description& msgData;
public:
   /**
    * Control class: ASN1C_EventDescription_description
    * Data class:    ASN1T_EventDescription_description
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_EventDescription_description
       (ASN1T_EventDescription_description& data);

   /**
    * Control class: ASN1C_EventDescription_description<br/>
    * Data class: ASN1T_EventDescription_description<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_EventDescription_description (OSRTMessageBufferIF& msgBuf
      , ASN1T_EventDescription_description& data);

   /**
    * Control class: ASN1C_EventDescription_description<br/>
    * Data class: ASN1T_EventDescription_description<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_EventDescription_description (ASN1CType& ccobj
      , ASN1T_EventDescription_description& data);

   virtual ~ASN1C_EventDescription_description () {}

private:
   ASN1C_EventDescription_description& operator= (const ASN1C_EventDescription_description&) {return *this;}
} ;

EXTERN int asn1PE_EventDescription_description (OSCTXT* pctxt, ASN1T_EventDescription_description* pvalue);

EXTERN int asn1PD_EventDescription_description (OSCTXT* pctxt, ASN1T_EventDescription_description* pvalue);

EXTERN int XmlEnc_EventDescription_description (OSCTXT* pctxt, 
   ASN1T_EventDescription_description* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EventDescription_description (OSCTXT* pctxt, 
   ASN1T_EventDescription_description* pvalue);

EXTERN int asn1JsonEnc_EventDescription_description (OSCTXT *pctxt, ASN1T_EventDescription_description *pvalue);

EXTERN int asn1JsonDec_EventDescription_description (OSCTXT *pctxt, ASN1T_EventDescription_description *pvalue);

EXTERN int asn1PrtToStrm_EventDescription_description (OSCTXT *pctxt, 
   const char* name, const ASN1T_EventDescription_description* pvalue);

EXTERN int asn1Init_EventDescription_description (
   ASN1T_EventDescription_description* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  EventDescription_regional_element                         */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'EventDescription'
*/
struct EXTERN ASN1T_EventDescription_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_EventDescription_regional_element (OSCTXT* pctxt, ASN1T_EventDescription_regional_element* pvalue);

EXTERN int asn1PD_EventDescription_regional_element (OSCTXT* pctxt, ASN1T_EventDescription_regional_element* pvalue);

EXTERN int XmlEnc_EventDescription_regional_element (OSCTXT* pctxt, 
   ASN1T_EventDescription_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EventDescription_regional_element (OSCTXT* pctxt, 
   ASN1T_EventDescription_regional_element* pvalue);

EXTERN int asn1JsonEnc_EventDescription_regional_element (OSCTXT *pctxt, ASN1T_EventDescription_regional_element *pvalue);

EXTERN int asn1JsonDec_EventDescription_regional_element (OSCTXT *pctxt, ASN1T_EventDescription_regional_element *pvalue);

EXTERN int asn1PrtToStrm_EventDescription_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_EventDescription_regional_element* pvalue);

EXTERN ASN1T_EventDescription_regional_element* 
   new_ASN1T_EventDescription_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_EventDescription_regional_element (
   ASN1T_EventDescription_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_EventDescription_regional_element (OSCTXT *pctxt, 
   ASN1T_EventDescription_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  EventDescription_regional                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'EventDescription'
*/
/* List of ASN1T_EventDescription_regional_element */
typedef ASN1TSeqOfList ASN1T_EventDescription_regional;

class EXTERN ASN1C_EventDescription_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_EventDescription_regional& msgData;
public:
   /**
    * Control class: ASN1C_EventDescription_regional
    * Data class:    ASN1T_EventDescription_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_EventDescription_regional (ASN1T_EventDescription_regional& data);

   /**
    * Control class: ASN1C_EventDescription_regional<br/>
    * Data class: ASN1T_EventDescription_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_EventDescription_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_EventDescription_regional& data);

   /**
    * Control class: ASN1C_EventDescription_regional<br/>
    * Data class: ASN1T_EventDescription_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_EventDescription_regional (ASN1CType& ccobj
      , ASN1T_EventDescription_regional& data);

   virtual ~ASN1C_EventDescription_regional () {}

   /**
    * Data class: ASN1T_EventDescription_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_EventDescription_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_EventDescription_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_EventDescription_regional_element* NewElement ();

   /**
    * Data class: ASN1T_EventDescription_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_EventDescription_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_EventDescription_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_EventDescription_regional* pmatches);

private:
   ASN1C_EventDescription_regional& operator= (const ASN1C_EventDescription_regional&) {return *this;}
} ;

EXTERN int asn1PE_EventDescription_regional (OSCTXT* pctxt, ASN1T_EventDescription_regional* pvalue);

EXTERN int asn1PD_EventDescription_regional (OSCTXT* pctxt, ASN1T_EventDescription_regional* pvalue);

EXTERN int XmlEnc_EventDescription_regional (OSCTXT* pctxt, 
   ASN1T_EventDescription_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EventDescription_regional (OSCTXT* pctxt, 
   ASN1T_EventDescription_regional* pvalue);

EXTERN int asn1JsonEnc_EventDescription_regional (OSCTXT *pctxt, ASN1T_EventDescription_regional *pvalue);

EXTERN int asn1JsonDec_EventDescription_regional (OSCTXT *pctxt, ASN1T_EventDescription_regional *pvalue);

EXTERN int asn1PrtToStrm_EventDescription_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_EventDescription_regional* pvalue);

EXTERN int asn1Init_EventDescription_regional (
   ASN1T_EventDescription_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_EventDescription_regional (OSCTXT *pctxt, 
   ASN1T_EventDescription_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  EventDescription                                          */
/*                                                            */
/**************************************************************/
/*
EventDescription ::= SEQUENCE {
   typeEvent [0] ITIScodes,
                 -- A category and an item from that category 
                 -- all ITS stds use the same types here
                 -- to explain the type of  the 
                 -- alert / danger / hazard involved
   description [1] SEQUENCE (SIZE (1..8)) OF ITIScodes OPTIONAL,
                 -- Up to eight ITIS code set entries to further
                 -- describe the event, give advice, or any 
                 -- other ITIS codes
   priority [2] Priority OPTIONAL,
                 -- The urgency of this message, a relative
                 -- degree of merit compared with other 
                 -- similar messages for this type (not other
                 -- messages being sent by the device), nor  
                 -- is it a priority of display urgency
   heading [3] HeadingSlice OPTIONAL,
                 -- Applicable headings/direction
   extent [4] Extent OPTIONAL,
                 -- The spatial distance over which this
                 -- message applies and should be presented to the driver
   regional [5] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-EventDescription}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-EventDescription}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_EventDescription {
   struct {
      unsigned descriptionPresent : 1;
      unsigned priorityPresent : 1;
      unsigned headingPresent : 1;
      unsigned extentPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_ITIScodes typeEvent;
   ASN1T_EventDescription_description description;
   ASN1T_Priority priority;
   ASN1T_HeadingSlice heading;
   ASN1T_Extent extent;
   ASN1T_EventDescription_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_EventDescription ();
} ;

EXTERN int asn1PE_EventDescription (OSCTXT* pctxt, ASN1T_EventDescription* pvalue);

EXTERN int asn1PD_EventDescription (OSCTXT* pctxt, ASN1T_EventDescription* pvalue);

EXTERN int XmlEnc_EventDescription (OSCTXT* pctxt, 
   ASN1T_EventDescription* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EventDescription (OSCTXT* pctxt, 
   ASN1T_EventDescription* pvalue);

EXTERN int asn1JsonEnc_EventDescription (OSCTXT *pctxt, ASN1T_EventDescription *pvalue);

EXTERN int asn1JsonDec_EventDescription (OSCTXT *pctxt, ASN1T_EventDescription *pvalue);

EXTERN int asn1PrtToStrm_EventDescription (OSCTXT *pctxt, 
   const char* name, const ASN1T_EventDescription* pvalue);

EXTERN ASN1T_EventDescription* new_ASN1T_EventDescription (ASN1CType& ccobj);

EXTERN int asn1Init_EventDescription (ASN1T_EventDescription* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_EventDescription (OSCTXT *pctxt, ASN1T_EventDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  PivotPointDescription                                     */
/*                                                            */
/**************************************************************/
/*
PivotPointDescription ::= SEQUENCE {
   pivotOffset [0] Offset-B11,
                -- This gives a +- 10m range from the edge of the outline
                -- measured from the edge of the length of this unit
                -- a negative value is offset to inside the units
                -- a positive value is offset beyond the unit
   pivotAngle [1] Angle,
                -- Measured between the center-line of this unit 
                -- and the unit ahead which is pulling it.
                -- This value is required to project the units relative position
   pivots [2] PivotingAllowed,
   ...
}
*/
struct EXTERN ASN1T_PivotPointDescription {
   ASN1T_Offset_B11 pivotOffset;
   ASN1T_Angle pivotAngle;
   ASN1T_PivotingAllowed pivots;
   ASN1TSeqExt extElem1;
} ;

EXTERN int asn1PE_PivotPointDescription (OSCTXT* pctxt, ASN1T_PivotPointDescription* pvalue);

EXTERN int asn1PD_PivotPointDescription (OSCTXT* pctxt, ASN1T_PivotPointDescription* pvalue);

EXTERN int XmlEnc_PivotPointDescription (OSCTXT* pctxt, 
   ASN1T_PivotPointDescription* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PivotPointDescription (OSCTXT* pctxt, 
   ASN1T_PivotPointDescription* pvalue);

EXTERN int asn1JsonEnc_PivotPointDescription (OSCTXT *pctxt, ASN1T_PivotPointDescription *pvalue);

EXTERN int asn1JsonDec_PivotPointDescription (OSCTXT *pctxt, ASN1T_PivotPointDescription *pvalue);

EXTERN int asn1PrtToStrm_PivotPointDescription (OSCTXT *pctxt, 
   const char* name, const ASN1T_PivotPointDescription* pvalue);

EXTERN ASN1T_PivotPointDescription* 
   new_ASN1T_PivotPointDescription (ASN1CType& ccobj);

EXTERN int asn1Init_PivotPointDescription (ASN1T_PivotPointDescription* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PivotPointDescription (OSCTXT *pctxt, 
   ASN1T_PivotPointDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  BumperHeights                                             */
/*                                                            */
/**************************************************************/
/*
BumperHeights ::= SEQUENCE {
   front [0] BumperHeight,
   rear [1] BumperHeight
}
*/
struct EXTERN ASN1T_BumperHeights {
   ASN1T_BumperHeight front;
   ASN1T_BumperHeight rear;
} ;

EXTERN int asn1PE_BumperHeights (OSCTXT* pctxt, ASN1T_BumperHeights* pvalue);

EXTERN int asn1PD_BumperHeights (OSCTXT* pctxt, ASN1T_BumperHeights* pvalue);

EXTERN int XmlEnc_BumperHeights (OSCTXT* pctxt, ASN1T_BumperHeights* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BumperHeights (OSCTXT* pctxt, ASN1T_BumperHeights* pvalue);

EXTERN int asn1JsonEnc_BumperHeights (OSCTXT *pctxt, ASN1T_BumperHeights *pvalue);

EXTERN int asn1JsonDec_BumperHeights (OSCTXT *pctxt, ASN1T_BumperHeights *pvalue);

EXTERN int asn1PrtToStrm_BumperHeights (OSCTXT *pctxt, 
   const char* name, const ASN1T_BumperHeights* pvalue);

EXTERN ASN1T_BumperHeights* new_ASN1T_BumperHeights (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_XY_24b                                               */
/*                                                            */
/**************************************************************/
/*
Node-XY-24b ::= SEQUENCE {
   x [0] Offset-B12,
   y [1] Offset-B12
}
*/
struct EXTERN ASN1T_Node_XY_24b {
   ASN1T_Offset_B12 x;
   ASN1T_Offset_B12 y;
} ;

EXTERN int asn1PE_Node_XY_24b (OSCTXT* pctxt, ASN1T_Node_XY_24b* pvalue);

EXTERN int asn1PD_Node_XY_24b (OSCTXT* pctxt, ASN1T_Node_XY_24b* pvalue);

EXTERN int XmlEnc_Node_XY_24b (OSCTXT* pctxt, ASN1T_Node_XY_24b* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_XY_24b (OSCTXT* pctxt, ASN1T_Node_XY_24b* pvalue);

EXTERN int asn1JsonEnc_Node_XY_24b (OSCTXT *pctxt, ASN1T_Node_XY_24b *pvalue);

EXTERN int asn1JsonDec_Node_XY_24b (OSCTXT *pctxt, ASN1T_Node_XY_24b *pvalue);

EXTERN int asn1PrtToStrm_Node_XY_24b (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_XY_24b* pvalue);

EXTERN ASN1T_Node_XY_24b* new_ASN1T_Node_XY_24b (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TrailerHistoryPoint                                       */
/*                                                            */
/**************************************************************/
/*
TrailerHistoryPoint ::= SEQUENCE {
   pivotAngle [0] Angle,
                    -- angle with respect to the lead unit
   timeOffset [1] TimeOffset,
                    -- offset backwards in time 
   -- Position relative to the hauling Vehicle
   positionOffset [2] Node-XY-24b,
   elevationOffset [3] VertOffset-B07 OPTIONAL,
   heading [4] CoarseHeading OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TrailerHistoryPoint {
   struct {
      unsigned elevationOffsetPresent : 1;
      unsigned headingPresent : 1;
   } m;
   ASN1T_Angle pivotAngle;
   ASN1T_TimeOffset timeOffset;
   ASN1T_Node_XY_24b positionOffset;
   ASN1T_VertOffset_B07 elevationOffset;
   ASN1T_CoarseHeading heading;
   ASN1TSeqExt extElem1;
   ASN1T_TrailerHistoryPoint ();
} ;

EXTERN int asn1PE_TrailerHistoryPoint (OSCTXT* pctxt, ASN1T_TrailerHistoryPoint* pvalue);

EXTERN int asn1PD_TrailerHistoryPoint (OSCTXT* pctxt, ASN1T_TrailerHistoryPoint* pvalue);

EXTERN int XmlEnc_TrailerHistoryPoint (OSCTXT* pctxt, 
   ASN1T_TrailerHistoryPoint* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerHistoryPoint (OSCTXT* pctxt, 
   ASN1T_TrailerHistoryPoint* pvalue);

EXTERN int asn1JsonEnc_TrailerHistoryPoint (OSCTXT *pctxt, ASN1T_TrailerHistoryPoint *pvalue);

EXTERN int asn1JsonDec_TrailerHistoryPoint (OSCTXT *pctxt, ASN1T_TrailerHistoryPoint *pvalue);

EXTERN int asn1PrtToStrm_TrailerHistoryPoint (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerHistoryPoint* pvalue);

EXTERN ASN1T_TrailerHistoryPoint* 
   new_ASN1T_TrailerHistoryPoint (ASN1CType& ccobj);

EXTERN int asn1Init_TrailerHistoryPoint (ASN1T_TrailerHistoryPoint* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TrailerHistoryPoint (OSCTXT *pctxt, 
   ASN1T_TrailerHistoryPoint* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerHistoryPointList                                   */
/*                                                            */
/**************************************************************/
/*
TrailerHistoryPointList ::= SEQUENCE (SIZE (1..23)) OF TrailerHistoryPoint
*/
/* List of ASN1T_TrailerHistoryPoint */
typedef ASN1TSeqOfList ASN1T_TrailerHistoryPointList;

class EXTERN ASN1C_TrailerHistoryPointList :
public ASN1CSeqOfList
{
protected:
   ASN1T_TrailerHistoryPointList& msgData;
public:
   /**
    * Control class: ASN1C_TrailerHistoryPointList
    * Data class:    ASN1T_TrailerHistoryPointList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TrailerHistoryPointList (ASN1T_TrailerHistoryPointList& data);

   /**
    * Control class: ASN1C_TrailerHistoryPointList<br/>
    * Data class: ASN1T_TrailerHistoryPointList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TrailerHistoryPointList (OSRTMessageBufferIF& msgBuf
      , ASN1T_TrailerHistoryPointList& data);

   /**
    * Control class: ASN1C_TrailerHistoryPointList<br/>
    * Data class: ASN1T_TrailerHistoryPointList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_TrailerHistoryPointList (ASN1CType& ccobj
      , ASN1T_TrailerHistoryPointList& data);

   virtual ~ASN1C_TrailerHistoryPointList () {}

   /**
    * Data class: ASN1T_TrailerHistoryPoint<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_TrailerHistoryPoint* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_TrailerHistoryPoint.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_TrailerHistoryPoint* NewElement ();

   /**
    * Data class: ASN1T_TrailerHistoryPoint.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_TrailerHistoryPoint* AppendNewElement ();

private:
   ASN1C_TrailerHistoryPointList& operator= (const ASN1C_TrailerHistoryPointList&) {return *this;}
} ;

EXTERN int asn1PE_TrailerHistoryPointList (OSCTXT* pctxt, ASN1T_TrailerHistoryPointList* pvalue);

EXTERN int asn1PD_TrailerHistoryPointList (OSCTXT* pctxt, ASN1T_TrailerHistoryPointList* pvalue);

EXTERN int XmlEnc_TrailerHistoryPointList (OSCTXT* pctxt, 
   ASN1T_TrailerHistoryPointList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerHistoryPointList (OSCTXT* pctxt, 
   ASN1T_TrailerHistoryPointList* pvalue);

EXTERN int asn1JsonEnc_TrailerHistoryPointList (OSCTXT *pctxt, ASN1T_TrailerHistoryPointList *pvalue);

EXTERN int asn1JsonDec_TrailerHistoryPointList (OSCTXT *pctxt, ASN1T_TrailerHistoryPointList *pvalue);

EXTERN int asn1PrtToStrm_TrailerHistoryPointList (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerHistoryPointList* pvalue);

EXTERN int asn1Init_TrailerHistoryPointList (ASN1T_TrailerHistoryPointList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TrailerHistoryPointList (OSCTXT *pctxt, 
   ASN1T_TrailerHistoryPointList* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerUnitDescription                                    */
/*                                                            */
/**************************************************************/
/*
TrailerUnitDescription ::= SEQUENCE {
   isDolly [0] IsDolly, -- if false this is a trailer
   width [1] VehicleWidth,
   length [2] VehicleLength,
   height [3] VehicleHeight OPTIONAL,
   mass [4] TrailerMass OPTIONAL,
   bumperHeights [5] BumperHeights OPTIONAL,
   centerOfGravity [6] VehicleHeight OPTIONAL,
   -- The front pivot point of the unit
   frontPivot [7] PivotPointDescription,
   -- The rear pivot point connecting to the next element, 
   -- if present and used (implies another unit is connected)
   rearPivot [8] PivotPointDescription OPTIONAL,
   -- Rear wheel pivot point center-line offset
   -- measured from the rear of the above length
   rearWheelOffset [9] Offset-B12 OPTIONAL,
                    -- the effective center-line of the wheel set
   -- Current Position relative to the hauling Vehicle
   positionOffset [10] Node-XY-24b,
   elevationOffset [11] VertOffset-B07 OPTIONAL,
   -- Past Position history relative to the hauling Vehicle
   crumbData [12] TrailerHistoryPointList OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TrailerUnitDescription {
   struct {
      unsigned heightPresent : 1;
      unsigned massPresent : 1;
      unsigned bumperHeightsPresent : 1;
      unsigned centerOfGravityPresent : 1;
      unsigned rearPivotPresent : 1;
      unsigned rearWheelOffsetPresent : 1;
      unsigned elevationOffsetPresent : 1;
      unsigned crumbDataPresent : 1;
   } m;
   ASN1T_IsDolly isDolly;
   ASN1T_VehicleWidth width;
   ASN1T_VehicleLength length;
   ASN1T_VehicleHeight height;
   ASN1T_TrailerMass mass;
   ASN1T_BumperHeights bumperHeights;
   ASN1T_VehicleHeight centerOfGravity;
   ASN1T_PivotPointDescription frontPivot;
   ASN1T_PivotPointDescription rearPivot;
   ASN1T_Offset_B12 rearWheelOffset;
   ASN1T_Node_XY_24b positionOffset;
   ASN1T_VertOffset_B07 elevationOffset;
   ASN1T_TrailerHistoryPointList crumbData;
   ASN1TSeqExt extElem1;
   ASN1T_TrailerUnitDescription ();
} ;

EXTERN int asn1PE_TrailerUnitDescription (OSCTXT* pctxt, ASN1T_TrailerUnitDescription* pvalue);

EXTERN int asn1PD_TrailerUnitDescription (OSCTXT* pctxt, ASN1T_TrailerUnitDescription* pvalue);

EXTERN int XmlEnc_TrailerUnitDescription (OSCTXT* pctxt, 
   ASN1T_TrailerUnitDescription* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerUnitDescription (OSCTXT* pctxt, 
   ASN1T_TrailerUnitDescription* pvalue);

EXTERN int asn1JsonEnc_TrailerUnitDescription (OSCTXT *pctxt, ASN1T_TrailerUnitDescription *pvalue);

EXTERN int asn1JsonDec_TrailerUnitDescription (OSCTXT *pctxt, ASN1T_TrailerUnitDescription *pvalue);

EXTERN int asn1PrtToStrm_TrailerUnitDescription (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerUnitDescription* pvalue);

EXTERN ASN1T_TrailerUnitDescription* 
   new_ASN1T_TrailerUnitDescription (ASN1CType& ccobj);

EXTERN int asn1Init_TrailerUnitDescription (ASN1T_TrailerUnitDescription* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TrailerUnitDescription (OSCTXT *pctxt, 
   ASN1T_TrailerUnitDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerUnitDescriptionList                                */
/*                                                            */
/**************************************************************/
/*
TrailerUnitDescriptionList ::= SEQUENCE (SIZE (1..8)) OF TrailerUnitDescription
*/
/* List of ASN1T_TrailerUnitDescription */
typedef ASN1TSeqOfList ASN1T_TrailerUnitDescriptionList;

class EXTERN ASN1C_TrailerUnitDescriptionList :
public ASN1CSeqOfList
{
protected:
   ASN1T_TrailerUnitDescriptionList& msgData;
public:
   /**
    * Control class: ASN1C_TrailerUnitDescriptionList
    * Data class:    ASN1T_TrailerUnitDescriptionList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TrailerUnitDescriptionList (ASN1T_TrailerUnitDescriptionList& data);

   /**
    * Control class: ASN1C_TrailerUnitDescriptionList<br/>
    * Data class: ASN1T_TrailerUnitDescriptionList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TrailerUnitDescriptionList (OSRTMessageBufferIF& msgBuf
      , ASN1T_TrailerUnitDescriptionList& data);

   /**
    * Control class: ASN1C_TrailerUnitDescriptionList<br/>
    * Data class: ASN1T_TrailerUnitDescriptionList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_TrailerUnitDescriptionList (ASN1CType& ccobj
      , ASN1T_TrailerUnitDescriptionList& data);

   virtual ~ASN1C_TrailerUnitDescriptionList () {}

   /**
    * Data class: ASN1T_TrailerUnitDescription<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_TrailerUnitDescription* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_TrailerUnitDescription.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_TrailerUnitDescription* NewElement ();

   /**
    * Data class: ASN1T_TrailerUnitDescription.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_TrailerUnitDescription* AppendNewElement ();

private:
   ASN1C_TrailerUnitDescriptionList& operator= (const ASN1C_TrailerUnitDescriptionList&) {return *this;}
} ;

EXTERN int asn1PE_TrailerUnitDescriptionList (OSCTXT* pctxt, ASN1T_TrailerUnitDescriptionList* pvalue);

EXTERN int asn1PD_TrailerUnitDescriptionList (OSCTXT* pctxt, ASN1T_TrailerUnitDescriptionList* pvalue);

EXTERN int XmlEnc_TrailerUnitDescriptionList (OSCTXT* pctxt, 
   ASN1T_TrailerUnitDescriptionList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerUnitDescriptionList (OSCTXT* pctxt, 
   ASN1T_TrailerUnitDescriptionList* pvalue);

EXTERN int asn1JsonEnc_TrailerUnitDescriptionList (OSCTXT *pctxt, ASN1T_TrailerUnitDescriptionList *pvalue);

EXTERN int asn1JsonDec_TrailerUnitDescriptionList (OSCTXT *pctxt, ASN1T_TrailerUnitDescriptionList *pvalue);

EXTERN int asn1PrtToStrm_TrailerUnitDescriptionList (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerUnitDescriptionList* pvalue);

EXTERN int asn1Init_TrailerUnitDescriptionList (
   ASN1T_TrailerUnitDescriptionList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TrailerUnitDescriptionList (OSCTXT *pctxt, 
   ASN1T_TrailerUnitDescriptionList* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerData                                               */
/*                                                            */
/**************************************************************/
/*
TrailerData ::= SEQUENCE {
   -- CERT SSP Privilege Details
   sspRights [0] SSPindex, -- index to CERT rights
   -- Offset connection point details from the 
   -- hauling vehicle to the first trailer unit
   connection [1] PivotPointDescription,
   -- One of more Trailer or Dolly Descriptions 
   -- (each called a unit)
   units [2] TrailerUnitDescriptionList,
   ...
}
*/
struct EXTERN ASN1T_TrailerData {
   ASN1T_SSPindex sspRights;
   ASN1T_PivotPointDescription connection;
   ASN1T_TrailerUnitDescriptionList units;
   ASN1TSeqExt extElem1;
} ;

EXTERN int asn1PE_TrailerData (OSCTXT* pctxt, ASN1T_TrailerData* pvalue);

EXTERN int asn1PD_TrailerData (OSCTXT* pctxt, ASN1T_TrailerData* pvalue);

EXTERN int XmlEnc_TrailerData (OSCTXT* pctxt, ASN1T_TrailerData* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerData (OSCTXT* pctxt, ASN1T_TrailerData* pvalue);

EXTERN int asn1JsonEnc_TrailerData (OSCTXT *pctxt, ASN1T_TrailerData *pvalue);

EXTERN int asn1JsonDec_TrailerData (OSCTXT *pctxt, ASN1T_TrailerData *pvalue);

EXTERN int asn1PrtToStrm_TrailerData (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerData* pvalue);

EXTERN ASN1T_TrailerData* new_ASN1T_TrailerData (ASN1CType& ccobj);

EXTERN int asn1Init_TrailerData (ASN1T_TrailerData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TrailerData (OSCTXT *pctxt, ASN1T_TrailerData* pvalue);

/**************************************************************/
/*                                                            */
/*  SpecialVehicleExtensions                                  */
/*                                                            */
/**************************************************************/
/*
SpecialVehicleExtensions ::= SEQUENCE {
   -- The content below requires SSP permissions to transmit
   -- The entire EVA message has been reduced to these items
   vehicleAlerts [0] EmergencyDetails OPTIONAL,
   -- Description or Direction from an emergency vehicle
   description [1] EventDescription OPTIONAL, -- short ITIS description
   -- Trailers for both passenger vehicles and heavy trucks
   trailers [2] TrailerData OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SpecialVehicleExtensions {
   struct {
      unsigned vehicleAlertsPresent : 1;
      unsigned descriptionPresent : 1;
      unsigned trailersPresent : 1;
   } m;
   ASN1T_EmergencyDetails vehicleAlerts;
   ASN1T_EventDescription description;
   ASN1T_TrailerData trailers;
   ASN1TSeqExt extElem1;
   ASN1T_SpecialVehicleExtensions ();
} ;

EXTERN int asn1PE_SpecialVehicleExtensions (OSCTXT* pctxt, ASN1T_SpecialVehicleExtensions* pvalue);

EXTERN int asn1PD_SpecialVehicleExtensions (OSCTXT* pctxt, ASN1T_SpecialVehicleExtensions* pvalue);

EXTERN int XmlEnc_SpecialVehicleExtensions (OSCTXT* pctxt, 
   ASN1T_SpecialVehicleExtensions* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpecialVehicleExtensions (OSCTXT* pctxt, 
   ASN1T_SpecialVehicleExtensions* pvalue);

EXTERN int asn1JsonEnc_SpecialVehicleExtensions (OSCTXT *pctxt, ASN1T_SpecialVehicleExtensions *pvalue);

EXTERN int asn1JsonDec_SpecialVehicleExtensions (OSCTXT *pctxt, ASN1T_SpecialVehicleExtensions *pvalue);

EXTERN int asn1PrtToStrm_SpecialVehicleExtensions (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpecialVehicleExtensions* pvalue);

EXTERN ASN1T_SpecialVehicleExtensions* 
   new_ASN1T_SpecialVehicleExtensions (ASN1CType& ccobj);

EXTERN int asn1Init_SpecialVehicleExtensions (ASN1T_SpecialVehicleExtensions* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SpecialVehicleExtensions (OSCTXT *pctxt, 
   ASN1T_SpecialVehicleExtensions* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleClassification_regional_element                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleClassification'
*/
struct EXTERN ASN1T_VehicleClassification_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_VehicleClassification_regional_element (OSCTXT* pctxt, ASN1T_VehicleClassification_regional_element* pvalue);

EXTERN int asn1PD_VehicleClassification_regional_element (OSCTXT* pctxt, ASN1T_VehicleClassification_regional_element* pvalue);

EXTERN int XmlEnc_VehicleClassification_regional_element (OSCTXT* pctxt, 
   ASN1T_VehicleClassification_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleClassification_regional_element (OSCTXT* pctxt, 
   ASN1T_VehicleClassification_regional_element* pvalue);

EXTERN int asn1JsonEnc_VehicleClassification_regional_element (OSCTXT *pctxt, ASN1T_VehicleClassification_regional_element *pvalue);

EXTERN int asn1JsonDec_VehicleClassification_regional_element (OSCTXT *pctxt, ASN1T_VehicleClassification_regional_element *pvalue);

EXTERN int asn1PrtToStrm_VehicleClassification_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleClassification_regional_element* pvalue);

EXTERN ASN1T_VehicleClassification_regional_element* 
   new_ASN1T_VehicleClassification_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleClassification_regional_element (
   ASN1T_VehicleClassification_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleClassification_regional_element (OSCTXT *pctxt, 
   ASN1T_VehicleClassification_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleClassification_regional                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleClassification'
*/
/* List of ASN1T_VehicleClassification_regional_element */
typedef ASN1TSeqOfList ASN1T_VehicleClassification_regional;

class EXTERN ASN1C_VehicleClassification_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_VehicleClassification_regional& msgData;
public:
   /**
    * Control class: ASN1C_VehicleClassification_regional
    * Data class:    ASN1T_VehicleClassification_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VehicleClassification_regional
       (ASN1T_VehicleClassification_regional& data);

   /**
    * Control class: ASN1C_VehicleClassification_regional<br/>
    * Data class: ASN1T_VehicleClassification_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VehicleClassification_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_VehicleClassification_regional& data);

   /**
    * Control class: ASN1C_VehicleClassification_regional<br/>
    * Data class: ASN1T_VehicleClassification_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_VehicleClassification_regional (ASN1CType& ccobj
      , ASN1T_VehicleClassification_regional& data);

   virtual ~ASN1C_VehicleClassification_regional () {}

   /**
    * Data class: ASN1T_VehicleClassification_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_VehicleClassification_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_VehicleClassification_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_VehicleClassification_regional_element* NewElement ();

   /**
    * Data class: ASN1T_VehicleClassification_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_VehicleClassification_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_VehicleClassification_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_VehicleClassification_regional* pmatches);

private:
   ASN1C_VehicleClassification_regional& operator= (const ASN1C_VehicleClassification_regional&) {return *this;}
} ;

EXTERN int asn1PE_VehicleClassification_regional (OSCTXT* pctxt, ASN1T_VehicleClassification_regional* pvalue);

EXTERN int asn1PD_VehicleClassification_regional (OSCTXT* pctxt, ASN1T_VehicleClassification_regional* pvalue);

EXTERN int XmlEnc_VehicleClassification_regional (OSCTXT* pctxt, 
   ASN1T_VehicleClassification_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleClassification_regional (OSCTXT* pctxt, 
   ASN1T_VehicleClassification_regional* pvalue);

EXTERN int asn1JsonEnc_VehicleClassification_regional (OSCTXT *pctxt, ASN1T_VehicleClassification_regional *pvalue);

EXTERN int asn1JsonDec_VehicleClassification_regional (OSCTXT *pctxt, ASN1T_VehicleClassification_regional *pvalue);

EXTERN int asn1PrtToStrm_VehicleClassification_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleClassification_regional* pvalue);

EXTERN int asn1Init_VehicleClassification_regional (
   ASN1T_VehicleClassification_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleClassification_regional (OSCTXT *pctxt, 
   ASN1T_VehicleClassification_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleClassification                                     */
/*                                                            */
/**************************************************************/
/*
VehicleClassification ::= SEQUENCE {
   -- Composed of the following elements:
   -- The 'master' DSRC list used when space is limited
   keyType [0] BasicVehicleClass OPTIONAL,
   -- Types used in the MAP/SPAT/SSR/SRM exchanges 
   role [1] BasicVehicleRole OPTIONAL, -- Basic CERT role at a given time
   iso3883 [2] Iso3833VehicleType OPTIONAL,
   hpmsType [3] VehicleType OPTIONAL, -- HPMS classification types
   -- ITIS types for classes of vehicle and agency
   vehicleType [4] VehicleGroupAffected OPTIONAL,
   responseEquip [5] IncidentResponseEquipment OPTIONAL,
   responderType [6] ResponderGroupAffected OPTIONAL,
   -- Fuel types for vehicles
   fuelType [7] FuelType OPTIONAL,
   regional [8] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-VehicleClassification}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-VehicleClassification}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_VehicleClassification {
   struct {
      unsigned keyTypePresent : 1;
      unsigned rolePresent : 1;
      unsigned iso3883Present : 1;
      unsigned hpmsTypePresent : 1;
      unsigned vehicleTypePresent : 1;
      unsigned responseEquipPresent : 1;
      unsigned responderTypePresent : 1;
      unsigned fuelTypePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_BasicVehicleClass keyType;
   ASN1T_BasicVehicleRole role;
   ASN1T_Iso3833VehicleType iso3883;
   ASN1T_VehicleType hpmsType;
   ASN1T_VehicleGroupAffected vehicleType;
   ASN1T_IncidentResponseEquipment responseEquip;
   ASN1T_ResponderGroupAffected responderType;
   ASN1T_FuelType fuelType;
   ASN1T_VehicleClassification_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_VehicleClassification ();
} ;

EXTERN int asn1PE_VehicleClassification (OSCTXT* pctxt, ASN1T_VehicleClassification* pvalue);

EXTERN int asn1PD_VehicleClassification (OSCTXT* pctxt, ASN1T_VehicleClassification* pvalue);

EXTERN int XmlEnc_VehicleClassification (OSCTXT* pctxt, 
   ASN1T_VehicleClassification* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleClassification (OSCTXT* pctxt, 
   ASN1T_VehicleClassification* pvalue);

EXTERN int asn1JsonEnc_VehicleClassification (OSCTXT *pctxt, ASN1T_VehicleClassification *pvalue);

EXTERN int asn1JsonDec_VehicleClassification (OSCTXT *pctxt, ASN1T_VehicleClassification *pvalue);

EXTERN int asn1PrtToStrm_VehicleClassification (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleClassification* pvalue);

EXTERN ASN1T_VehicleClassification* 
   new_ASN1T_VehicleClassification (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleClassification (ASN1T_VehicleClassification* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleClassification (OSCTXT *pctxt, 
   ASN1T_VehicleClassification* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleData                                               */
/*                                                            */
/**************************************************************/
/*
VehicleData ::= SEQUENCE {
   -- Values for width and length are sent in BSM part I 
   height [0] VehicleHeight OPTIONAL,
   bumpers [1] BumperHeights OPTIONAL,
   mass [2] VehicleMass OPTIONAL,
   trailerWeight [3] TrailerWeight OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_VehicleData {
   struct {
      unsigned heightPresent : 1;
      unsigned bumpersPresent : 1;
      unsigned massPresent : 1;
      unsigned trailerWeightPresent : 1;
   } m;
   ASN1T_VehicleHeight height;
   ASN1T_BumperHeights bumpers;
   ASN1T_VehicleMass mass;
   ASN1T_TrailerWeight trailerWeight;
   ASN1TSeqExt extElem1;
   ASN1T_VehicleData ();
} ;

EXTERN int asn1PE_VehicleData (OSCTXT* pctxt, ASN1T_VehicleData* pvalue);

EXTERN int asn1PD_VehicleData (OSCTXT* pctxt, ASN1T_VehicleData* pvalue);

EXTERN int XmlEnc_VehicleData (OSCTXT* pctxt, ASN1T_VehicleData* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleData (OSCTXT* pctxt, ASN1T_VehicleData* pvalue);

EXTERN int asn1JsonEnc_VehicleData (OSCTXT *pctxt, ASN1T_VehicleData *pvalue);

EXTERN int asn1JsonDec_VehicleData (OSCTXT *pctxt, ASN1T_VehicleData *pvalue);

EXTERN int asn1PrtToStrm_VehicleData (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleData* pvalue);

EXTERN ASN1T_VehicleData* new_ASN1T_VehicleData (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleData (ASN1T_VehicleData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleData (OSCTXT *pctxt, ASN1T_VehicleData* pvalue);

/**************************************************************/
/*                                                            */
/*  WeatherReport                                             */
/*                                                            */
/**************************************************************/
/*
WeatherReport ::= SEQUENCE {
   isRaining [0] EssPrecipYesNo,
   rainRate [1] EssPrecipRate OPTIONAL,
   precipSituation [2] EssPrecipSituation OPTIONAL,
   solarRadiation [3] EssSolarRadiation OPTIONAL,
   friction [4] EssMobileFriction OPTIONAL,
   roadFriction [5] CoefficientOfFriction OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_WeatherReport {
   struct {
      unsigned rainRatePresent : 1;
      unsigned precipSituationPresent : 1;
      unsigned solarRadiationPresent : 1;
      unsigned frictionPresent : 1;
      unsigned roadFrictionPresent : 1;
   } m;
   ASN1T_EssPrecipYesNo isRaining;
   ASN1T_EssPrecipRate rainRate;
   ASN1T_EssPrecipSituation precipSituation;
   ASN1T_EssSolarRadiation solarRadiation;
   ASN1T_EssMobileFriction friction;
   ASN1T_CoefficientOfFriction roadFriction;
   ASN1TSeqExt extElem1;
   ASN1T_WeatherReport ();
} ;

EXTERN int asn1PE_WeatherReport (OSCTXT* pctxt, ASN1T_WeatherReport* pvalue);

EXTERN int asn1PD_WeatherReport (OSCTXT* pctxt, ASN1T_WeatherReport* pvalue);

EXTERN int XmlEnc_WeatherReport (OSCTXT* pctxt, ASN1T_WeatherReport* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WeatherReport (OSCTXT* pctxt, ASN1T_WeatherReport* pvalue);

EXTERN int asn1JsonEnc_WeatherReport (OSCTXT *pctxt, ASN1T_WeatherReport *pvalue);

EXTERN int asn1JsonDec_WeatherReport (OSCTXT *pctxt, ASN1T_WeatherReport *pvalue);

EXTERN int asn1PrtToStrm_WeatherReport (OSCTXT *pctxt, 
   const char* name, const ASN1T_WeatherReport* pvalue);

EXTERN ASN1T_WeatherReport* new_ASN1T_WeatherReport (ASN1CType& ccobj);

EXTERN int asn1Init_WeatherReport (ASN1T_WeatherReport* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_WeatherReport (OSCTXT *pctxt, ASN1T_WeatherReport* pvalue);

/**************************************************************/
/*                                                            */
/*  WiperSet                                                  */
/*                                                            */
/**************************************************************/
/*
WiperSet ::= SEQUENCE {
   statusFront [0] WiperStatus,
   rateFront [1] WiperRate,
   statusRear [2] WiperStatus OPTIONAL,
   rateRear [3] WiperRate OPTIONAL
}
*/
struct EXTERN ASN1T_WiperSet {
   struct {
      unsigned statusRearPresent : 1;
      unsigned rateRearPresent : 1;
   } m;
   ASN1T_WiperStatus statusFront;
   ASN1T_WiperRate rateFront;
   ASN1T_WiperStatus statusRear;
   ASN1T_WiperRate rateRear;
   ASN1T_WiperSet ();
} ;

EXTERN int asn1PE_WiperSet (OSCTXT* pctxt, ASN1T_WiperSet* pvalue);

EXTERN int asn1PD_WiperSet (OSCTXT* pctxt, ASN1T_WiperSet* pvalue);

EXTERN int XmlEnc_WiperSet (OSCTXT* pctxt, ASN1T_WiperSet* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WiperSet (OSCTXT* pctxt, ASN1T_WiperSet* pvalue);

EXTERN int asn1JsonEnc_WiperSet (OSCTXT *pctxt, ASN1T_WiperSet *pvalue);

EXTERN int asn1JsonDec_WiperSet (OSCTXT *pctxt, ASN1T_WiperSet *pvalue);

EXTERN int asn1PrtToStrm_WiperSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_WiperSet* pvalue);

EXTERN ASN1T_WiperSet* new_ASN1T_WiperSet (ASN1CType& ccobj);

EXTERN int asn1Init_WiperSet (ASN1T_WiperSet* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  WeatherProbe                                              */
/*                                                            */
/**************************************************************/
/*
WeatherProbe ::= SEQUENCE {
   airTemp [0] AmbientAirTemperature OPTIONAL,
   airPressure [1] AmbientAirPressure OPTIONAL,
   rainRates [2] WiperSet OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_WeatherProbe {
   struct {
      unsigned airTempPresent : 1;
      unsigned airPressurePresent : 1;
      unsigned rainRatesPresent : 1;
   } m;
   ASN1T_AmbientAirTemperature airTemp;
   ASN1T_AmbientAirPressure airPressure;
   ASN1T_WiperSet rainRates;
   ASN1TSeqExt extElem1;
   ASN1T_WeatherProbe ();
} ;

EXTERN int asn1PE_WeatherProbe (OSCTXT* pctxt, ASN1T_WeatherProbe* pvalue);

EXTERN int asn1PD_WeatherProbe (OSCTXT* pctxt, ASN1T_WeatherProbe* pvalue);

EXTERN int XmlEnc_WeatherProbe (OSCTXT* pctxt, ASN1T_WeatherProbe* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WeatherProbe (OSCTXT* pctxt, ASN1T_WeatherProbe* pvalue);

EXTERN int asn1JsonEnc_WeatherProbe (OSCTXT *pctxt, ASN1T_WeatherProbe *pvalue);

EXTERN int asn1JsonDec_WeatherProbe (OSCTXT *pctxt, ASN1T_WeatherProbe *pvalue);

EXTERN int asn1PrtToStrm_WeatherProbe (OSCTXT *pctxt, 
   const char* name, const ASN1T_WeatherProbe* pvalue);

EXTERN ASN1T_WeatherProbe* new_ASN1T_WeatherProbe (ASN1CType& ccobj);

EXTERN int asn1Init_WeatherProbe (ASN1T_WeatherProbe* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_WeatherProbe (OSCTXT *pctxt, ASN1T_WeatherProbe* pvalue);

/**************************************************************/
/*                                                            */
/*  ObstacleDetection                                         */
/*                                                            */
/**************************************************************/
/*
ObstacleDetection ::= SEQUENCE {
   obDist [0] ObstacleDistance, -- Obstacle Distance        
   obDirect [1] ObstacleDirection, -- Obstacle Direction
   description [2] ITIScodes (523..541) OPTIONAL,
                                            -- Uses a limited set of ITIS codes        
   locationDetails [3] GenericLocations OPTIONAL,
   dateTime [4] DDateTime, -- Time detected
   vertEvent [5] VerticalAccelerationThreshold OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_ObstacleDetection {
   struct {
      unsigned descriptionPresent : 1;
      unsigned locationDetailsPresent : 1;
      unsigned vertEventPresent : 1;
   } m;
   ASN1T_ObstacleDistance obDist;
   ASN1T_ObstacleDirection obDirect;
   OSUINT16 description;
   ASN1T_GenericLocations locationDetails;
   ASN1T_DDateTime dateTime;
   ASN1T_VerticalAccelerationThreshold vertEvent;
   ASN1TSeqExt extElem1;
   ASN1T_ObstacleDetection ();
} ;

EXTERN int asn1PE_ObstacleDetection (OSCTXT* pctxt, ASN1T_ObstacleDetection* pvalue);

EXTERN int asn1PD_ObstacleDetection (OSCTXT* pctxt, ASN1T_ObstacleDetection* pvalue);

EXTERN int XmlEnc_ObstacleDetection (OSCTXT* pctxt, 
   ASN1T_ObstacleDetection* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ObstacleDetection (OSCTXT* pctxt, 
   ASN1T_ObstacleDetection* pvalue);

EXTERN int asn1JsonEnc_ObstacleDetection (OSCTXT *pctxt, ASN1T_ObstacleDetection *pvalue);

EXTERN int asn1JsonDec_ObstacleDetection (OSCTXT *pctxt, ASN1T_ObstacleDetection *pvalue);

EXTERN int asn1PrtToStrm_ObstacleDetection (OSCTXT *pctxt, 
   const char* name, const ASN1T_ObstacleDetection* pvalue);

EXTERN ASN1T_ObstacleDetection* new_ASN1T_ObstacleDetection (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_ObstacleDetection (ASN1T_ObstacleDetection* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ObstacleDetection (OSCTXT *pctxt, 
   ASN1T_ObstacleDetection* pvalue);

/**************************************************************/
/*                                                            */
/*  DisabledVehicle                                           */
/*                                                            */
/**************************************************************/
/*
DisabledVehicle ::= SEQUENCE {
   statusDetails [0] ITIScodes (523..541),
                     -- Codes 532 to 541, as taken from J2540:
                     -- Disabled, etc.
                       -- stalled-vehicle (532),
                       -- abandoned-vehicle (533),
                       -- disabled-vehicle (534),
                       -- disabled-truck (535),
                       -- disabled-semi-trailer (536), -^- Alt: disabled
                     -- tractor-trailer
                       -- disabled-bus (537),
                       -- disabled-train (538),
                       -- vehicle-spun-out (539),
                       -- vehicle-on-fire (540),
                       -- vehicle-in-water (541),
   locationDetails [1] GenericLocations OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_DisabledVehicle {
   struct {
      unsigned locationDetailsPresent : 1;
   } m;
   OSUINT16 statusDetails;
   ASN1T_GenericLocations locationDetails;
   ASN1TSeqExt extElem1;
   ASN1T_DisabledVehicle ();
} ;

EXTERN int asn1PE_DisabledVehicle (OSCTXT* pctxt, ASN1T_DisabledVehicle* pvalue);

EXTERN int asn1PD_DisabledVehicle (OSCTXT* pctxt, ASN1T_DisabledVehicle* pvalue);

EXTERN int XmlEnc_DisabledVehicle (OSCTXT* pctxt, 
   ASN1T_DisabledVehicle* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DisabledVehicle (OSCTXT* pctxt, ASN1T_DisabledVehicle* pvalue
   );

EXTERN int asn1JsonEnc_DisabledVehicle (OSCTXT *pctxt, ASN1T_DisabledVehicle *pvalue);

EXTERN int asn1JsonDec_DisabledVehicle (OSCTXT *pctxt, ASN1T_DisabledVehicle *pvalue);

EXTERN int asn1PrtToStrm_DisabledVehicle (OSCTXT *pctxt, 
   const char* name, const ASN1T_DisabledVehicle* pvalue);

EXTERN ASN1T_DisabledVehicle* new_ASN1T_DisabledVehicle (ASN1CType& ccobj);

EXTERN int asn1Init_DisabledVehicle (ASN1T_DisabledVehicle* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_DisabledVehicle (OSCTXT *pctxt, ASN1T_DisabledVehicle* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedProfileMeasurementList                               */
/*                                                            */
/**************************************************************/
/*
SpeedProfileMeasurementList ::= SEQUENCE (SIZE (1..20)) OF SpeedProfileMeasurement
*/
typedef struct EXTERN ASN1T_SpeedProfileMeasurementList {
   OSUINT8 n;
   ASN1T_SpeedProfileMeasurement elem[20];
   ASN1T_SpeedProfileMeasurementList () : n(0) {}
} ASN1T_SpeedProfileMeasurementList;

class EXTERN ASN1C_SpeedProfileMeasurementList :
public ASN1CType
{
protected:
   ASN1T_SpeedProfileMeasurementList& msgData;
public:
   /**
    * Control class: ASN1C_SpeedProfileMeasurementList
    * Data class:    ASN1T_SpeedProfileMeasurementList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SpeedProfileMeasurementList (ASN1T_SpeedProfileMeasurementList& data);

   /**
    * Control class: ASN1C_SpeedProfileMeasurementList<br/>
    * Data class: ASN1T_SpeedProfileMeasurementList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SpeedProfileMeasurementList (OSRTMessageBufferIF& msgBuf
      , ASN1T_SpeedProfileMeasurementList& data);

   /**
    * Control class: ASN1C_SpeedProfileMeasurementList<br/>
    * Data class: ASN1T_SpeedProfileMeasurementList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SpeedProfileMeasurementList (ASN1CType& ccobj
      , ASN1T_SpeedProfileMeasurementList& data);

   virtual ~ASN1C_SpeedProfileMeasurementList () {}

private:
   ASN1C_SpeedProfileMeasurementList& operator= (const ASN1C_SpeedProfileMeasurementList&) {return *this;}
} ;

EXTERN int asn1PE_SpeedProfileMeasurementList (OSCTXT* pctxt, ASN1T_SpeedProfileMeasurementList* pvalue);

EXTERN int asn1PD_SpeedProfileMeasurementList (OSCTXT* pctxt, ASN1T_SpeedProfileMeasurementList* pvalue);

EXTERN int XmlEnc_SpeedProfileMeasurementList (OSCTXT* pctxt, 
   ASN1T_SpeedProfileMeasurementList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedProfileMeasurementList (OSCTXT* pctxt, 
   ASN1T_SpeedProfileMeasurementList* pvalue);

EXTERN int asn1JsonEnc_SpeedProfileMeasurementList (OSCTXT *pctxt, ASN1T_SpeedProfileMeasurementList *pvalue);

EXTERN int asn1JsonDec_SpeedProfileMeasurementList (OSCTXT *pctxt, ASN1T_SpeedProfileMeasurementList *pvalue);

EXTERN int asn1PrtToStrm_SpeedProfileMeasurementList (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedProfileMeasurementList* pvalue);

EXTERN int asn1Init_SpeedProfileMeasurementList (
   ASN1T_SpeedProfileMeasurementList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  SpeedProfile                                              */
/*                                                            */
/**************************************************************/
/*
SpeedProfile ::= SEQUENCE {
   -- Composed of set of measured average speeds
   speedReports [0] SpeedProfileMeasurementList,
   ...
}
*/
struct EXTERN ASN1T_SpeedProfile {
   ASN1T_SpeedProfileMeasurementList speedReports;
   ASN1TSeqExt extElem1;
   ASN1T_SpeedProfile ();
} ;

EXTERN int asn1PE_SpeedProfile (OSCTXT* pctxt, ASN1T_SpeedProfile* pvalue);

EXTERN int asn1PD_SpeedProfile (OSCTXT* pctxt, ASN1T_SpeedProfile* pvalue);

EXTERN int XmlEnc_SpeedProfile (OSCTXT* pctxt, ASN1T_SpeedProfile* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedProfile (OSCTXT* pctxt, ASN1T_SpeedProfile* pvalue);

EXTERN int asn1JsonEnc_SpeedProfile (OSCTXT *pctxt, ASN1T_SpeedProfile *pvalue);

EXTERN int asn1JsonDec_SpeedProfile (OSCTXT *pctxt, ASN1T_SpeedProfile *pvalue);

EXTERN int asn1PrtToStrm_SpeedProfile (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedProfile* pvalue);

EXTERN ASN1T_SpeedProfile* new_ASN1T_SpeedProfile (ASN1CType& ccobj);

EXTERN int asn1Init_SpeedProfile (ASN1T_SpeedProfile* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SpeedProfile (OSCTXT *pctxt, ASN1T_SpeedProfile* pvalue);

/**************************************************************/
/*                                                            */
/*  AntennaOffsetSet                                          */
/*                                                            */
/**************************************************************/
/*
AntennaOffsetSet ::= SEQUENCE {
   antOffsetX [0] Offset-B12, -- a range of +- 20.47 meters
   antOffsetY [1] Offset-B09, -- a range of +- 2.55 meters
   antOffsetZ [2] Offset-B10 -- a range of +- 5.11 meters
}
*/
struct EXTERN ASN1T_AntennaOffsetSet {
   ASN1T_Offset_B12 antOffsetX;
   ASN1T_Offset_B09 antOffsetY;
   ASN1T_Offset_B10 antOffsetZ;
} ;

EXTERN int asn1PE_AntennaOffsetSet (OSCTXT* pctxt, ASN1T_AntennaOffsetSet* pvalue);

EXTERN int asn1PD_AntennaOffsetSet (OSCTXT* pctxt, ASN1T_AntennaOffsetSet* pvalue);

EXTERN int XmlEnc_AntennaOffsetSet (OSCTXT* pctxt, 
   ASN1T_AntennaOffsetSet* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AntennaOffsetSet (OSCTXT* pctxt, 
   ASN1T_AntennaOffsetSet* pvalue);

EXTERN int asn1JsonEnc_AntennaOffsetSet (OSCTXT *pctxt, ASN1T_AntennaOffsetSet *pvalue);

EXTERN int asn1JsonDec_AntennaOffsetSet (OSCTXT *pctxt, ASN1T_AntennaOffsetSet *pvalue);

EXTERN int asn1PrtToStrm_AntennaOffsetSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_AntennaOffsetSet* pvalue);

EXTERN ASN1T_AntennaOffsetSet* new_ASN1T_AntennaOffsetSet (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  RTCMheader                                                */
/*                                                            */
/**************************************************************/
/*
RTCMheader ::= SEQUENCE {
   status [0] GNSSstatus,
   offsetSet [1] AntennaOffsetSet
}
*/
struct EXTERN ASN1T_RTCMheader {
   ASN1T_GNSSstatus status;
   ASN1T_AntennaOffsetSet offsetSet;
} ;

EXTERN int asn1PE_RTCMheader (OSCTXT* pctxt, ASN1T_RTCMheader* pvalue);

EXTERN int asn1PD_RTCMheader (OSCTXT* pctxt, ASN1T_RTCMheader* pvalue);

EXTERN int XmlEnc_RTCMheader (OSCTXT* pctxt, ASN1T_RTCMheader* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RTCMheader (OSCTXT* pctxt, ASN1T_RTCMheader* pvalue);

EXTERN int asn1JsonEnc_RTCMheader (OSCTXT *pctxt, ASN1T_RTCMheader *pvalue);

EXTERN int asn1JsonDec_RTCMheader (OSCTXT *pctxt, ASN1T_RTCMheader *pvalue);

EXTERN int asn1PrtToStrm_RTCMheader (OSCTXT *pctxt, 
   const char* name, const ASN1T_RTCMheader* pvalue);

EXTERN ASN1T_RTCMheader* new_ASN1T_RTCMheader (ASN1CType& ccobj);

EXTERN int asn1Init_RTCMheader (ASN1T_RTCMheader* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  RTCMmessageList                                           */
/*                                                            */
/**************************************************************/
/*
RTCMmessageList ::= SEQUENCE (SIZE (1..5)) OF RTCMmessage
*/
typedef struct EXTERN ASN1T_RTCMmessageList {
   OSUINT8 n;
   ASN1T_RTCMmessage elem[5];
   ASN1T_RTCMmessageList () : n(0) {}
} ASN1T_RTCMmessageList;

class EXTERN ASN1C_RTCMmessageList :
public ASN1CType
{
protected:
   ASN1T_RTCMmessageList& msgData;
public:
   /**
    * Control class: ASN1C_RTCMmessageList
    * Data class:    ASN1T_RTCMmessageList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RTCMmessageList (ASN1T_RTCMmessageList& data);

   /**
    * Control class: ASN1C_RTCMmessageList<br/>
    * Data class: ASN1T_RTCMmessageList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RTCMmessageList (OSRTMessageBufferIF& msgBuf
      , ASN1T_RTCMmessageList& data);

   /**
    * Control class: ASN1C_RTCMmessageList<br/>
    * Data class: ASN1T_RTCMmessageList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RTCMmessageList (ASN1CType& ccobj, ASN1T_RTCMmessageList& data);

   virtual ~ASN1C_RTCMmessageList () {}

private:
   ASN1C_RTCMmessageList& operator= (const ASN1C_RTCMmessageList&) {return *this;}
} ;

EXTERN int asn1PE_RTCMmessageList (OSCTXT* pctxt, ASN1T_RTCMmessageList* pvalue);

EXTERN int asn1PD_RTCMmessageList (OSCTXT* pctxt, ASN1T_RTCMmessageList* pvalue);

EXTERN int XmlEnc_RTCMmessageList (OSCTXT* pctxt, 
   ASN1T_RTCMmessageList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RTCMmessageList (OSCTXT* pctxt, ASN1T_RTCMmessageList* pvalue
   );

EXTERN int asn1JsonEnc_RTCMmessageList (OSCTXT *pctxt, ASN1T_RTCMmessageList *pvalue);

EXTERN int asn1JsonDec_RTCMmessageList (OSCTXT *pctxt, ASN1T_RTCMmessageList *pvalue);

EXTERN int asn1PrtToStrm_RTCMmessageList (OSCTXT *pctxt, 
   const char* name, const ASN1T_RTCMmessageList* pvalue);

EXTERN int asn1Init_RTCMmessageList (ASN1T_RTCMmessageList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  RTCMPackage                                               */
/*                                                            */
/**************************************************************/
/*
RTCMPackage ::= SEQUENCE {
   -- precise antenna position and noise data for a rover
   rtcmHeader [0] RTCMheader OPTIONAL,
   -- one or more RTCM messages
   msgs [1] RTCMmessageList,
   ...
}
*/
struct EXTERN ASN1T_RTCMPackage {
   struct {
      unsigned rtcmHeaderPresent : 1;
   } m;
   ASN1T_RTCMheader rtcmHeader;
   ASN1T_RTCMmessageList msgs;
   ASN1TSeqExt extElem1;
   ASN1T_RTCMPackage ();
} ;

EXTERN int asn1PE_RTCMPackage (OSCTXT* pctxt, ASN1T_RTCMPackage* pvalue);

EXTERN int asn1PD_RTCMPackage (OSCTXT* pctxt, ASN1T_RTCMPackage* pvalue);

EXTERN int XmlEnc_RTCMPackage (OSCTXT* pctxt, ASN1T_RTCMPackage* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RTCMPackage (OSCTXT* pctxt, ASN1T_RTCMPackage* pvalue);

EXTERN int asn1JsonEnc_RTCMPackage (OSCTXT *pctxt, ASN1T_RTCMPackage *pvalue);

EXTERN int asn1JsonDec_RTCMPackage (OSCTXT *pctxt, ASN1T_RTCMPackage *pvalue);

EXTERN int asn1PrtToStrm_RTCMPackage (OSCTXT *pctxt, 
   const char* name, const ASN1T_RTCMPackage* pvalue);

EXTERN ASN1T_RTCMPackage* new_ASN1T_RTCMPackage (ASN1CType& ccobj);

EXTERN int asn1Init_RTCMPackage (ASN1T_RTCMPackage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RTCMPackage (OSCTXT *pctxt, ASN1T_RTCMPackage* pvalue);

/**************************************************************/
/*                                                            */
/*  SupplementalVehicleExtensions_regional_element            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SupplementalVehicleExtensions'
*/
struct EXTERN ASN1T_SupplementalVehicleExtensions_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SupplementalVehicleExtensions_regional_element (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions_regional_element* pvalue);

EXTERN int asn1PD_SupplementalVehicleExtensions_regional_element (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions_regional_element* pvalue);

EXTERN int XmlEnc_SupplementalVehicleExtensions_regional_element 
   (OSCTXT* pctxt, 
   ASN1T_SupplementalVehicleExtensions_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SupplementalVehicleExtensions_regional_element 
   (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions_regional_element* pvalue
   );

EXTERN int asn1JsonEnc_SupplementalVehicleExtensions_regional_element (OSCTXT *pctxt, ASN1T_SupplementalVehicleExtensions_regional_element *pvalue);

EXTERN int asn1JsonDec_SupplementalVehicleExtensions_regional_element (OSCTXT *pctxt, ASN1T_SupplementalVehicleExtensions_regional_element *pvalue);

EXTERN int asn1PrtToStrm_SupplementalVehicleExtensions_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SupplementalVehicleExtensions_regional_element* pvalue);

EXTERN ASN1T_SupplementalVehicleExtensions_regional_element* 
   new_ASN1T_SupplementalVehicleExtensions_regional_element (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_SupplementalVehicleExtensions_regional_element (
   ASN1T_SupplementalVehicleExtensions_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SupplementalVehicleExtensions_regional_element (OSCTXT *pctxt, 
   ASN1T_SupplementalVehicleExtensions_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SupplementalVehicleExtensions_regional                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SupplementalVehicleExtensions'
*/
/* List of ASN1T_SupplementalVehicleExtensions_regional_element */
typedef ASN1TSeqOfList ASN1T_SupplementalVehicleExtensions_regional;

class EXTERN ASN1C_SupplementalVehicleExtensions_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_SupplementalVehicleExtensions_regional& msgData;
public:
   /**
    * Control class: ASN1C_SupplementalVehicleExtensions_regional
    * Data class:    ASN1T_SupplementalVehicleExtensions_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SupplementalVehicleExtensions_regional
       (ASN1T_SupplementalVehicleExtensions_regional& data);

   /**
    * Control class: ASN1C_SupplementalVehicleExtensions_regional<br/>
    * Data class: ASN1T_SupplementalVehicleExtensions_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SupplementalVehicleExtensions_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_SupplementalVehicleExtensions_regional& data);

   /**
    * Control class: ASN1C_SupplementalVehicleExtensions_regional<br/>
    * Data class: ASN1T_SupplementalVehicleExtensions_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SupplementalVehicleExtensions_regional (ASN1CType& ccobj
      , ASN1T_SupplementalVehicleExtensions_regional& data);

   virtual ~ASN1C_SupplementalVehicleExtensions_regional () {}

   /**
    * Data class: ASN1T_SupplementalVehicleExtensions_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SupplementalVehicleExtensions_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SupplementalVehicleExtensions_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SupplementalVehicleExtensions_regional_element* NewElement ();

   /**
    * Data class: ASN1T_SupplementalVehicleExtensions_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SupplementalVehicleExtensions_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_SupplementalVehicleExtensions_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_SupplementalVehicleExtensions_regional* pmatches);

private:
   ASN1C_SupplementalVehicleExtensions_regional& operator= (const ASN1C_SupplementalVehicleExtensions_regional&) {return *this;}
} ;

EXTERN int asn1PE_SupplementalVehicleExtensions_regional (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions_regional* pvalue);

EXTERN int asn1PD_SupplementalVehicleExtensions_regional (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions_regional* pvalue);

EXTERN int XmlEnc_SupplementalVehicleExtensions_regional (OSCTXT* pctxt, 
   ASN1T_SupplementalVehicleExtensions_regional* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SupplementalVehicleExtensions_regional (OSCTXT* pctxt, 
   ASN1T_SupplementalVehicleExtensions_regional* pvalue);

EXTERN int asn1JsonEnc_SupplementalVehicleExtensions_regional (OSCTXT *pctxt, ASN1T_SupplementalVehicleExtensions_regional *pvalue);

EXTERN int asn1JsonDec_SupplementalVehicleExtensions_regional (OSCTXT *pctxt, ASN1T_SupplementalVehicleExtensions_regional *pvalue);

EXTERN int asn1PrtToStrm_SupplementalVehicleExtensions_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_SupplementalVehicleExtensions_regional* pvalue);

EXTERN int asn1Init_SupplementalVehicleExtensions_regional (
   ASN1T_SupplementalVehicleExtensions_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SupplementalVehicleExtensions_regional (OSCTXT *pctxt, 
   ASN1T_SupplementalVehicleExtensions_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SupplementalVehicleExtensions                             */
/*                                                            */
/**************************************************************/
/*
SupplementalVehicleExtensions ::= SEQUENCE {
   -- Note that VehicleEventFlags, ExteriorLights, 
   -- PathHistory, and PathPrediction are in VehicleSafetyExtensions 
   -- Vehicle Type Classification Data
   classification [0] BasicVehicleClass OPTIONAL,
                    -- May be required to be present for non passenger vehicles
   classDetails [1] VehicleClassification OPTIONAL,
   vehicleData [2] VehicleData OPTIONAL,
   -- Various V2V Probe Data
   weatherReport [3] WeatherReport OPTIONAL,
   weatherProbe [4] WeatherProbe OPTIONAL,
   -- Detected Obstacle data
   obstacle [5] ObstacleDetection OPTIONAL,
   -- Disabled Vehicle Report
   status [6] DisabledVehicle OPTIONAL,
   -- Oncoming lane speed reporting
   speedProfile [7] SpeedProfile OPTIONAL,
   -- Raw GNSS measurements
   theRTCM [8] RTCMPackage OPTIONAL,
   regional [9] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-SupplementalVehicleExtensions}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-SupplementalVehicleExtensions}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SupplementalVehicleExtensions {
   struct {
      unsigned classificationPresent : 1;
      unsigned classDetailsPresent : 1;
      unsigned vehicleDataPresent : 1;
      unsigned weatherReportPresent : 1;
      unsigned weatherProbePresent : 1;
      unsigned obstaclePresent : 1;
      unsigned statusPresent : 1;
      unsigned speedProfilePresent : 1;
      unsigned theRTCMPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_BasicVehicleClass classification;
   ASN1T_VehicleClassification classDetails;
   ASN1T_VehicleData vehicleData;
   ASN1T_WeatherReport weatherReport;
   ASN1T_WeatherProbe weatherProbe;
   ASN1T_ObstacleDetection obstacle;
   ASN1T_DisabledVehicle status;
   ASN1T_SpeedProfile speedProfile;
   ASN1T_RTCMPackage theRTCM;
   ASN1T_SupplementalVehicleExtensions_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_SupplementalVehicleExtensions ();
} ;

EXTERN int asn1PE_SupplementalVehicleExtensions (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions* pvalue);

EXTERN int asn1PD_SupplementalVehicleExtensions (OSCTXT* pctxt, ASN1T_SupplementalVehicleExtensions* pvalue);

EXTERN int XmlEnc_SupplementalVehicleExtensions (OSCTXT* pctxt, 
   ASN1T_SupplementalVehicleExtensions* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SupplementalVehicleExtensions (OSCTXT* pctxt, 
   ASN1T_SupplementalVehicleExtensions* pvalue);

EXTERN int asn1JsonEnc_SupplementalVehicleExtensions (OSCTXT *pctxt, ASN1T_SupplementalVehicleExtensions *pvalue);

EXTERN int asn1JsonDec_SupplementalVehicleExtensions (OSCTXT *pctxt, ASN1T_SupplementalVehicleExtensions *pvalue);

EXTERN int asn1PrtToStrm_SupplementalVehicleExtensions (OSCTXT *pctxt, 
   const char* name, const ASN1T_SupplementalVehicleExtensions* pvalue);

EXTERN ASN1T_SupplementalVehicleExtensions* 
   new_ASN1T_SupplementalVehicleExtensions (ASN1CType& ccobj);

EXTERN int asn1Init_SupplementalVehicleExtensions (
   ASN1T_SupplementalVehicleExtensions* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SupplementalVehicleExtensions (OSCTXT *pctxt, 
   ASN1T_SupplementalVehicleExtensions* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage_partII_element                         */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'BasicSafetyMessage'
*/
struct EXTERN ASN1T_BasicSafetyMessage_partII_element {
   ASN1T_PartII_Id partII_Id;
   struct  {
      /**
       * information object selector
       */
      BSMpartIIExtension::TVALUE t;

      /**
       * BSMpartIIExtension information objects
       */
      union {
         /**
          * id: vehicleSafetyExt
          */
         ASN1T_VehicleSafetyExtensions *_BSMpartIIExtension_vehicleSafetyExt;
         /**
          * id: specialVehicleExt
          */
         ASN1T_SpecialVehicleExtensions *_BSMpartIIExtension_specialVehicleExt;
         /**
          * id: supplementalVehicleExt
          */
         ASN1T_SupplementalVehicleExtensions *_BSMpartIIExtension_supplementalVehicleExt;

         ASN1TOpenType* extElem1;
      } u;
   } partII_Value;
   ASN1T_BasicSafetyMessage_partII_element ();
} ;

EXTERN int asn1PE_BasicSafetyMessage_partII_element (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII_element* pvalue);

EXTERN int asn1PD_BasicSafetyMessage_partII_element (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII_element* pvalue);

EXTERN int XmlEnc_BasicSafetyMessage_partII_element (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_partII_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BasicSafetyMessage_partII_element (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_partII_element* pvalue);

EXTERN int asn1JsonEnc_BasicSafetyMessage_partII_element (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_partII_element *pvalue);

EXTERN int asn1JsonDec_BasicSafetyMessage_partII_element (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_partII_element *pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage_partII_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_BasicSafetyMessage_partII_element* pvalue);

EXTERN void asn1SetTC_BasicSafetyMessage_partII_element_BSMpartIIExtension_vehicleSafetyExt
   (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII_element* pElem, 
   ASN1T_VehicleSafetyExtensions *pvalue);

EXTERN void asn1SetTC_BasicSafetyMessage_partII_element_BSMpartIIExtension_specialVehicleExt
   (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII_element* pElem, 
   ASN1T_SpecialVehicleExtensions *pvalue);

EXTERN void asn1SetTC_BasicSafetyMessage_partII_element_BSMpartIIExtension_supplementalVehicleExt
   (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII_element* pElem, 
   ASN1T_SupplementalVehicleExtensions *pvalue);

EXTERN ASN1T_BasicSafetyMessage_partII_element* 
   new_ASN1T_BasicSafetyMessage_partII_element (ASN1CType& ccobj);

EXTERN int asn1Init_BasicSafetyMessage_partII_element (
   ASN1T_BasicSafetyMessage_partII_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_BasicSafetyMessage_partII_element (OSCTXT *pctxt, 
   ASN1T_BasicSafetyMessage_partII_element* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage_partII                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'BasicSafetyMessage'
*/
/* List of ASN1T_BasicSafetyMessage_partII_element */
typedef ASN1TSeqOfList ASN1T_BasicSafetyMessage_partII;

class EXTERN ASN1C_BasicSafetyMessage_partII :
public ASN1CSeqOfList
{
protected:
   ASN1T_BasicSafetyMessage_partII& msgData;
public:
   /**
    * Control class: ASN1C_BasicSafetyMessage_partII
    * Data class:    ASN1T_BasicSafetyMessage_partII
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_BasicSafetyMessage_partII (ASN1T_BasicSafetyMessage_partII& data);

   /**
    * Control class: ASN1C_BasicSafetyMessage_partII<br/>
    * Data class: ASN1T_BasicSafetyMessage_partII<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_BasicSafetyMessage_partII (OSRTMessageBufferIF& msgBuf
      , ASN1T_BasicSafetyMessage_partII& data);

   /**
    * Control class: ASN1C_BasicSafetyMessage_partII<br/>
    * Data class: ASN1T_BasicSafetyMessage_partII<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_BasicSafetyMessage_partII (ASN1CType& ccobj
      , ASN1T_BasicSafetyMessage_partII& data);

   virtual ~ASN1C_BasicSafetyMessage_partII () {}

   /**
    * Data class: ASN1T_BasicSafetyMessage_partII_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_BasicSafetyMessage_partII_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_BasicSafetyMessage_partII_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_BasicSafetyMessage_partII_element* NewElement ();

   /**
    * Data class: ASN1T_BasicSafetyMessage_partII_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_BasicSafetyMessage_partII_element* AppendNewElement ();

   /* Append IE with value type ASN1T_VehicleSafetyExtensions to list */
   int Append_vehicleSafetyExt (ASN1T_VehicleSafetyExtensions *pvalue);

   /* Append IE with value type ASN1T_SpecialVehicleExtensions to list */
   int Append_specialVehicleExt (ASN1T_SpecialVehicleExtensions *pvalue);

   /* Append IE with value type ASN1T_SupplementalVehicleExtensions to list */
   int Append_supplementalVehicleExt (ASN1T_SupplementalVehicleExtensions 
      *pvalue);

   /* Get IE using partII_Id key value */
   ASN1T_BasicSafetyMessage_partII_element* GetIE (ASN1T_PartII_Id partII_Id);

   /* Get all matching IEs using partII_Id key value */
   int GetAllIEs (ASN1T_PartII_Id partII_Id, 
      ASN1T_BasicSafetyMessage_partII* pmatches);

private:
   ASN1C_BasicSafetyMessage_partII& operator= (const ASN1C_BasicSafetyMessage_partII&) {return *this;}
} ;

EXTERN int asn1PE_BasicSafetyMessage_partII (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII* pvalue);

EXTERN int asn1PD_BasicSafetyMessage_partII (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_partII* pvalue);

EXTERN int XmlEnc_BasicSafetyMessage_partII (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_partII* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BasicSafetyMessage_partII (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_partII* pvalue);

EXTERN int asn1JsonEnc_BasicSafetyMessage_partII (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_partII *pvalue);

EXTERN int asn1JsonDec_BasicSafetyMessage_partII (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_partII *pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage_partII (OSCTXT *pctxt, 
   const char* name, const ASN1T_BasicSafetyMessage_partII* pvalue);

EXTERN int asn1Init_BasicSafetyMessage_partII (
   ASN1T_BasicSafetyMessage_partII* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_BasicSafetyMessage_partII (OSCTXT *pctxt, 
   ASN1T_BasicSafetyMessage_partII* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage_regional_element                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'BasicSafetyMessage'
*/
struct EXTERN ASN1T_BasicSafetyMessage_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_BasicSafetyMessage_regional_element (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_regional_element* pvalue);

EXTERN int asn1PD_BasicSafetyMessage_regional_element (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_regional_element* pvalue);

EXTERN int XmlEnc_BasicSafetyMessage_regional_element (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BasicSafetyMessage_regional_element (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_regional_element* pvalue);

EXTERN int asn1JsonEnc_BasicSafetyMessage_regional_element (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_regional_element *pvalue);

EXTERN int asn1JsonDec_BasicSafetyMessage_regional_element (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_regional_element *pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_BasicSafetyMessage_regional_element* pvalue);

EXTERN ASN1T_BasicSafetyMessage_regional_element* 
   new_ASN1T_BasicSafetyMessage_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_BasicSafetyMessage_regional_element (
   ASN1T_BasicSafetyMessage_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_BasicSafetyMessage_regional_element (OSCTXT *pctxt, 
   ASN1T_BasicSafetyMessage_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage_regional                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'BasicSafetyMessage'
*/
/* List of ASN1T_BasicSafetyMessage_regional_element */
typedef ASN1TSeqOfList ASN1T_BasicSafetyMessage_regional;

class EXTERN ASN1C_BasicSafetyMessage_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_BasicSafetyMessage_regional& msgData;
public:
   /**
    * Control class: ASN1C_BasicSafetyMessage_regional
    * Data class:    ASN1T_BasicSafetyMessage_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_BasicSafetyMessage_regional (ASN1T_BasicSafetyMessage_regional& data);

   /**
    * Control class: ASN1C_BasicSafetyMessage_regional<br/>
    * Data class: ASN1T_BasicSafetyMessage_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_BasicSafetyMessage_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_BasicSafetyMessage_regional& data);

   /**
    * Control class: ASN1C_BasicSafetyMessage_regional<br/>
    * Data class: ASN1T_BasicSafetyMessage_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_BasicSafetyMessage_regional (ASN1CType& ccobj
      , ASN1T_BasicSafetyMessage_regional& data);

   virtual ~ASN1C_BasicSafetyMessage_regional () {}

   /**
    * Data class: ASN1T_BasicSafetyMessage_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_BasicSafetyMessage_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_BasicSafetyMessage_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_BasicSafetyMessage_regional_element* NewElement ();

   /**
    * Data class: ASN1T_BasicSafetyMessage_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_BasicSafetyMessage_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_BasicSafetyMessage_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_BasicSafetyMessage_regional* pmatches);

private:
   ASN1C_BasicSafetyMessage_regional& operator= (const ASN1C_BasicSafetyMessage_regional&) {return *this;}
} ;

EXTERN int asn1PE_BasicSafetyMessage_regional (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_regional* pvalue);

EXTERN int asn1PD_BasicSafetyMessage_regional (OSCTXT* pctxt, ASN1T_BasicSafetyMessage_regional* pvalue);

EXTERN int XmlEnc_BasicSafetyMessage_regional (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BasicSafetyMessage_regional (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage_regional* pvalue);

EXTERN int asn1JsonEnc_BasicSafetyMessage_regional (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_regional *pvalue);

EXTERN int asn1JsonDec_BasicSafetyMessage_regional (OSCTXT *pctxt, ASN1T_BasicSafetyMessage_regional *pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_BasicSafetyMessage_regional* pvalue);

EXTERN int asn1Init_BasicSafetyMessage_regional (
   ASN1T_BasicSafetyMessage_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_BasicSafetyMessage_regional (OSCTXT *pctxt, 
   ASN1T_BasicSafetyMessage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage                                        */
/*                                                            */
/**************************************************************/
/*
BasicSafetyMessage ::= SEQUENCE {
   -- Part I, Sent at all times with each message
   coreData [0] BSMcoreData,
   -- Part II Content
   partII [1] SEQUENCE (SIZE (1..8)) OF SEQUENCE {
      partII-Id [0] PARTII-EXT-ID-AND-TYPE.&id ({BSMpartIIExtension}),
      partII-Value [1] EXPLICIT PARTII-EXT-ID-AND-TYPE.&Type ({BSMpartIIExtension}{@partII-Id})
   } OPTIONAL,
   regional [2] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-BasicSafetyMessage}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-BasicSafetyMessage}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_BasicSafetyMessage {
   struct {
      unsigned partIIPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_BSMcoreData coreData;
   ASN1T_BasicSafetyMessage_partII partII;
   ASN1T_BasicSafetyMessage_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_BasicSafetyMessage ();
} ;

EXTERN int asn1PE_BasicSafetyMessage (OSCTXT* pctxt, ASN1T_BasicSafetyMessage* pvalue);

EXTERN int asn1PD_BasicSafetyMessage (OSCTXT* pctxt, ASN1T_BasicSafetyMessage* pvalue);

EXTERN int XmlEnc_BasicSafetyMessage (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BasicSafetyMessage (OSCTXT* pctxt, 
   ASN1T_BasicSafetyMessage* pvalue);

EXTERN int asn1JsonEnc_BasicSafetyMessage (OSCTXT *pctxt, ASN1T_BasicSafetyMessage *pvalue);

EXTERN int asn1JsonDec_BasicSafetyMessage (OSCTXT *pctxt, ASN1T_BasicSafetyMessage *pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage (OSCTXT *pctxt, 
   const char* name, const ASN1T_BasicSafetyMessage* pvalue);

EXTERN ASN1T_BasicSafetyMessage* 
   new_ASN1T_BasicSafetyMessage (ASN1CType& ccobj);

EXTERN int asn1Init_BasicSafetyMessage (ASN1T_BasicSafetyMessage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_BasicSafetyMessage (OSCTXT *pctxt, 
   ASN1T_BasicSafetyMessage* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionReferenceID                                   */
/*                                                            */
/**************************************************************/
/*
IntersectionReferenceID ::= SEQUENCE {
   region [0] RoadRegulatorID OPTIONAL,
           -- a globally unique regional assignment value
           -- typical assigned to a regional DOT authority
           -- the value zero shall be used for testing needs
   id [1] IntersectionID
           -- a unique mapping to the intersection
           -- in question within the above region of use
}
*/
struct EXTERN ASN1T_IntersectionReferenceID {
   struct {
      unsigned regionPresent : 1;
   } m;
   ASN1T_RoadRegulatorID region;
   ASN1T_IntersectionID id;
   ASN1T_IntersectionReferenceID ();
} ;

EXTERN int asn1PE_IntersectionReferenceID (OSCTXT* pctxt, ASN1T_IntersectionReferenceID* pvalue);

EXTERN int asn1PD_IntersectionReferenceID (OSCTXT* pctxt, ASN1T_IntersectionReferenceID* pvalue);

EXTERN int XmlEnc_IntersectionReferenceID (OSCTXT* pctxt, 
   ASN1T_IntersectionReferenceID* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionReferenceID (OSCTXT* pctxt, 
   ASN1T_IntersectionReferenceID* pvalue);

EXTERN int asn1JsonEnc_IntersectionReferenceID (OSCTXT *pctxt, ASN1T_IntersectionReferenceID *pvalue);

EXTERN int asn1JsonDec_IntersectionReferenceID (OSCTXT *pctxt, ASN1T_IntersectionReferenceID *pvalue);

EXTERN int asn1PrtToStrm_IntersectionReferenceID (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionReferenceID* pvalue);

EXTERN ASN1T_IntersectionReferenceID* 
   new_ASN1T_IntersectionReferenceID (ASN1CType& ccobj);

EXTERN int asn1Init_IntersectionReferenceID (ASN1T_IntersectionReferenceID* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  Position3D_regional_element                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'Position3D'
*/
struct EXTERN ASN1T_Position3D_regional_element {
   ASN1T_RegionId regionId;
   struct  {
      /**
       * information object selector
       */
      Reg_Position3D::TVALUE t;

      /**
       * Reg-Position3D information objects
       */
      union {
         /**
          * id: addGrpB
          */
         struct ASN1T_Position3D_addGrpB *_Reg_Position3D_addGrpB;
         /**
          * id: addGrpC
          */
         struct ASN1T_Position3D_addGrpC *_Reg_Position3D_addGrpC;

         ASN1TOpenType* extElem1;
      } u;
   } regExtValue;
   ASN1T_Position3D_regional_element ();
} ;

EXTERN int asn1PE_Position3D_regional_element (OSCTXT* pctxt, ASN1T_Position3D_regional_element* pvalue);

EXTERN int asn1PD_Position3D_regional_element (OSCTXT* pctxt, ASN1T_Position3D_regional_element* pvalue);

EXTERN int XmlEnc_Position3D_regional_element (OSCTXT* pctxt, 
   ASN1T_Position3D_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Position3D_regional_element (OSCTXT* pctxt, 
   ASN1T_Position3D_regional_element* pvalue);

EXTERN int asn1JsonEnc_Position3D_regional_element (OSCTXT *pctxt, ASN1T_Position3D_regional_element *pvalue);

EXTERN int asn1JsonDec_Position3D_regional_element (OSCTXT *pctxt, ASN1T_Position3D_regional_element *pvalue);

EXTERN int asn1PrtToStrm_Position3D_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_Position3D_regional_element* pvalue);

struct ASN1T_Position3D_addGrpB ;
EXTERN void asn1SetTC_Position3D_regional_element_Reg_Position3D_addGrpB
   (OSCTXT* pctxt, ASN1T_Position3D_regional_element* pElem, struct 
   ASN1T_Position3D_addGrpB *pvalue);

struct ASN1T_Position3D_addGrpC ;
EXTERN void asn1SetTC_Position3D_regional_element_Reg_Position3D_addGrpC
   (OSCTXT* pctxt, ASN1T_Position3D_regional_element* pElem, struct 
   ASN1T_Position3D_addGrpC *pvalue);

EXTERN ASN1T_Position3D_regional_element* 
   new_ASN1T_Position3D_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_Position3D_regional_element (
   ASN1T_Position3D_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_Position3D_regional_element (OSCTXT *pctxt, 
   ASN1T_Position3D_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  Position3D_regional                                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'Position3D'
*/
/* List of ASN1T_Position3D_regional_element */
typedef ASN1TSeqOfList ASN1T_Position3D_regional;

class EXTERN ASN1C_Position3D_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_Position3D_regional& msgData;
public:
   /**
    * Control class: ASN1C_Position3D_regional
    * Data class:    ASN1T_Position3D_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_Position3D_regional (ASN1T_Position3D_regional& data);

   /**
    * Control class: ASN1C_Position3D_regional<br/>
    * Data class: ASN1T_Position3D_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_Position3D_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_Position3D_regional& data);

   /**
    * Control class: ASN1C_Position3D_regional<br/>
    * Data class: ASN1T_Position3D_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_Position3D_regional (ASN1CType& ccobj, ASN1T_Position3D_regional& data
      );

   virtual ~ASN1C_Position3D_regional () {}

   /**
    * Data class: ASN1T_Position3D_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_Position3D_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_Position3D_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_Position3D_regional_element* NewElement ();

   /**
    * Data class: ASN1T_Position3D_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_Position3D_regional_element* AppendNewElement ();

   /* Append IE with value type ASN1T_Position3D_addGrpB to list */
   int Append_addGrpB (struct ASN1T_Position3D_addGrpB *pvalue);

   /* Append IE with value type ASN1T_Position3D_addGrpC to list */
   int Append_addGrpC (struct ASN1T_Position3D_addGrpC *pvalue);

   /* Get IE using regionId key value */
   ASN1T_Position3D_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_Position3D_regional* pmatches);

private:
   ASN1C_Position3D_regional& operator= (const ASN1C_Position3D_regional&) {return *this;}
} ;

EXTERN int asn1PE_Position3D_regional (OSCTXT* pctxt, ASN1T_Position3D_regional* pvalue);

EXTERN int asn1PD_Position3D_regional (OSCTXT* pctxt, ASN1T_Position3D_regional* pvalue);

EXTERN int XmlEnc_Position3D_regional (OSCTXT* pctxt, 
   ASN1T_Position3D_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Position3D_regional (OSCTXT* pctxt, 
   ASN1T_Position3D_regional* pvalue);

EXTERN int asn1JsonEnc_Position3D_regional (OSCTXT *pctxt, ASN1T_Position3D_regional *pvalue);

EXTERN int asn1JsonDec_Position3D_regional (OSCTXT *pctxt, ASN1T_Position3D_regional *pvalue);

EXTERN int asn1PrtToStrm_Position3D_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_Position3D_regional* pvalue);

EXTERN int asn1Init_Position3D_regional (ASN1T_Position3D_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_Position3D_regional (OSCTXT *pctxt, 
   ASN1T_Position3D_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  Position3D                                                */
/*                                                            */
/**************************************************************/
/*
Position3D ::= SEQUENCE {
   lat [0] Latitude, -- in 1/10th micro degrees
   long [1] Longitude, -- in 1/10th micro degrees
   elevation [2] Elevation OPTIONAL, -- in 10 cm units
   regional [3] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-Position3D}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-Position3D}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_Position3D {
   struct {
      unsigned elevationPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Latitude lat;
   ASN1T_Longitude long_;
   ASN1T_Elevation elevation;
   ASN1T_Position3D_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_Position3D ();
} ;

EXTERN int asn1PE_Position3D (OSCTXT* pctxt, ASN1T_Position3D* pvalue);

EXTERN int asn1PD_Position3D (OSCTXT* pctxt, ASN1T_Position3D* pvalue);

EXTERN int XmlEnc_Position3D (OSCTXT* pctxt, ASN1T_Position3D* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Position3D (OSCTXT* pctxt, ASN1T_Position3D* pvalue);

EXTERN int asn1JsonEnc_Position3D (OSCTXT *pctxt, ASN1T_Position3D *pvalue);

EXTERN int asn1JsonDec_Position3D (OSCTXT *pctxt, ASN1T_Position3D *pvalue);

EXTERN int asn1PrtToStrm_Position3D (OSCTXT *pctxt, 
   const char* name, const ASN1T_Position3D* pvalue);

EXTERN ASN1T_Position3D* new_ASN1T_Position3D (ASN1CType& ccobj);

EXTERN int asn1Init_Position3D (ASN1T_Position3D* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_Position3D (OSCTXT *pctxt, ASN1T_Position3D* pvalue);

/**************************************************************/
/*                                                            */
/*  RegulatorySpeedLimit                                      */
/*                                                            */
/**************************************************************/
/*
RegulatorySpeedLimit ::= SEQUENCE {
   type [0] SpeedLimitType,
               -- The type of regulatory speed which follows
   speed [1] Velocity
               -- The speed in units of 0.02 m/s
               -- See Section 11 for converting and translating 
               -- speed expressed in mph into units of m/s
}
*/
struct EXTERN ASN1T_RegulatorySpeedLimit {
   ASN1T_SpeedLimitType type;
   ASN1T_Velocity speed;
} ;

EXTERN int asn1PE_RegulatorySpeedLimit (OSCTXT* pctxt, ASN1T_RegulatorySpeedLimit* pvalue);

EXTERN int asn1PD_RegulatorySpeedLimit (OSCTXT* pctxt, ASN1T_RegulatorySpeedLimit* pvalue);

EXTERN int XmlEnc_RegulatorySpeedLimit (OSCTXT* pctxt, 
   ASN1T_RegulatorySpeedLimit* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RegulatorySpeedLimit (OSCTXT* pctxt, 
   ASN1T_RegulatorySpeedLimit* pvalue);

EXTERN int asn1JsonEnc_RegulatorySpeedLimit (OSCTXT *pctxt, ASN1T_RegulatorySpeedLimit *pvalue);

EXTERN int asn1JsonDec_RegulatorySpeedLimit (OSCTXT *pctxt, ASN1T_RegulatorySpeedLimit *pvalue);

EXTERN int asn1PrtToStrm_RegulatorySpeedLimit (OSCTXT *pctxt, 
   const char* name, const ASN1T_RegulatorySpeedLimit* pvalue);

EXTERN ASN1T_RegulatorySpeedLimit* 
   new_ASN1T_RegulatorySpeedLimit (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SpeedLimitList                                            */
/*                                                            */
/**************************************************************/
/*
SpeedLimitList ::= SEQUENCE (SIZE (1..9)) OF RegulatorySpeedLimit
*/
/* List of ASN1T_RegulatorySpeedLimit */
typedef ASN1TSeqOfList ASN1T_SpeedLimitList;

class EXTERN ASN1C_SpeedLimitList :
public ASN1CSeqOfList
{
protected:
   ASN1T_SpeedLimitList& msgData;
public:
   /**
    * Control class: ASN1C_SpeedLimitList
    * Data class:    ASN1T_SpeedLimitList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SpeedLimitList (ASN1T_SpeedLimitList& data);

   /**
    * Control class: ASN1C_SpeedLimitList<br/>
    * Data class: ASN1T_SpeedLimitList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SpeedLimitList (OSRTMessageBufferIF& msgBuf
      , ASN1T_SpeedLimitList& data);

   /**
    * Control class: ASN1C_SpeedLimitList<br/>
    * Data class: ASN1T_SpeedLimitList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SpeedLimitList (ASN1CType& ccobj, ASN1T_SpeedLimitList& data);

   virtual ~ASN1C_SpeedLimitList () {}

   /**
    * Data class: ASN1T_RegulatorySpeedLimit<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RegulatorySpeedLimit* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RegulatorySpeedLimit.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RegulatorySpeedLimit* NewElement ();

   /**
    * Data class: ASN1T_RegulatorySpeedLimit.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RegulatorySpeedLimit* AppendNewElement ();

private:
   ASN1C_SpeedLimitList& operator= (const ASN1C_SpeedLimitList&) {return *this;}
} ;

EXTERN int asn1PE_SpeedLimitList (OSCTXT* pctxt, ASN1T_SpeedLimitList* pvalue);

EXTERN int asn1PD_SpeedLimitList (OSCTXT* pctxt, ASN1T_SpeedLimitList* pvalue);

EXTERN int XmlEnc_SpeedLimitList (OSCTXT* pctxt, ASN1T_SpeedLimitList* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedLimitList (OSCTXT* pctxt, ASN1T_SpeedLimitList* pvalue)
   ;

EXTERN int asn1JsonEnc_SpeedLimitList (OSCTXT *pctxt, ASN1T_SpeedLimitList *pvalue);

EXTERN int asn1JsonDec_SpeedLimitList (OSCTXT *pctxt, ASN1T_SpeedLimitList *pvalue);

EXTERN int asn1PrtToStrm_SpeedLimitList (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedLimitList* pvalue);

EXTERN int asn1Init_SpeedLimitList (ASN1T_SpeedLimitList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SpeedLimitList (OSCTXT *pctxt, ASN1T_SpeedLimitList* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneTypeAttributes                                        */
/*                                                            */
/**************************************************************/
/*
LaneTypeAttributes ::= CHOICE {
   vehicle [0] LaneAttributes-Vehicle, -- motor vehicle lanes
   crosswalk [1] LaneAttributes-Crosswalk, -- pedestrian crosswalks
   bikeLane [2] LaneAttributes-Bike, -- bike lanes
   sidewalk [3] LaneAttributes-Sidewalk, -- pedestrian sidewalk paths
   median [4] LaneAttributes-Barrier, -- medians & channelization
   striping [5] LaneAttributes-Striping, -- roadway markings
   trackedVehicle [6] LaneAttributes-TrackedVehicle, -- trains and trolleys
   parking [7] LaneAttributes-Parking,
   ...
}
*/
/* Choice tag constants */

#define T_LaneTypeAttributes_vehicle    1
#define T_LaneTypeAttributes_crosswalk  2
#define T_LaneTypeAttributes_bikeLane   3
#define T_LaneTypeAttributes_sidewalk   4
#define T_LaneTypeAttributes_median     5
#define T_LaneTypeAttributes_striping   6
#define T_LaneTypeAttributes_trackedVehicle 7
#define T_LaneTypeAttributes_parking    8
#define T_LaneTypeAttributes_extElem1   9

struct EXTERN ASN1T_LaneTypeAttributes {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_LaneAttributes_Vehicle *vehicle;
      /* t = 2 */
      ASN1T_LaneAttributes_Crosswalk *crosswalk;
      /* t = 3 */
      ASN1T_LaneAttributes_Bike *bikeLane;
      /* t = 4 */
      ASN1T_LaneAttributes_Sidewalk *sidewalk;
      /* t = 5 */
      ASN1T_LaneAttributes_Barrier *median;
      /* t = 6 */
      ASN1T_LaneAttributes_Striping *striping;
      /* t = 7 */
      ASN1T_LaneAttributes_TrackedVehicle *trackedVehicle;
      /* t = 8 */
      ASN1T_LaneAttributes_Parking *parking;
      /* t = 9 */
      ASN1TOpenType *extElem1;
   } u;
   ASN1T_LaneTypeAttributes () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_LaneTypeAttributes (OSCTXT* pctxt, ASN1T_LaneTypeAttributes* pvalue);

EXTERN int asn1PD_LaneTypeAttributes (OSCTXT* pctxt, ASN1T_LaneTypeAttributes* pvalue);

EXTERN int XmlEnc_LaneTypeAttributes (OSCTXT* pctxt, 
   ASN1T_LaneTypeAttributes* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneTypeAttributes (OSCTXT* pctxt, 
   ASN1T_LaneTypeAttributes* pvalue);

EXTERN int asn1JsonEnc_LaneTypeAttributes (OSCTXT *pctxt, ASN1T_LaneTypeAttributes *pvalue);

EXTERN int asn1JsonDec_LaneTypeAttributes (OSCTXT *pctxt, ASN1T_LaneTypeAttributes *pvalue);

EXTERN int asn1PrtToStrm_LaneTypeAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneTypeAttributes* pvalue);

EXTERN ASN1T_LaneTypeAttributes* 
   new_ASN1T_LaneTypeAttributes (ASN1CType& ccobj);

EXTERN int asn1Init_LaneTypeAttributes (ASN1T_LaneTypeAttributes* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LaneTypeAttributes (OSCTXT *pctxt, 
   ASN1T_LaneTypeAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_regional                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'LaneAttributes'
*/
struct EXTERN ASN1T_LaneAttributes_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_LaneAttributes_regional (OSCTXT* pctxt, ASN1T_LaneAttributes_regional* pvalue);

EXTERN int asn1PD_LaneAttributes_regional (OSCTXT* pctxt, ASN1T_LaneAttributes_regional* pvalue);

EXTERN int XmlEnc_LaneAttributes_regional (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes_regional (OSCTXT* pctxt, 
   ASN1T_LaneAttributes_regional* pvalue);

EXTERN int asn1JsonEnc_LaneAttributes_regional (OSCTXT *pctxt, ASN1T_LaneAttributes_regional *pvalue);

EXTERN int asn1JsonDec_LaneAttributes_regional (OSCTXT *pctxt, ASN1T_LaneAttributes_regional *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes_regional* pvalue);

EXTERN ASN1T_LaneAttributes_regional* 
   new_ASN1T_LaneAttributes_regional (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes_regional (ASN1T_LaneAttributes_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LaneAttributes_regional (OSCTXT *pctxt, 
   ASN1T_LaneAttributes_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes                                            */
/*                                                            */
/**************************************************************/
/*
LaneAttributes ::= SEQUENCE {
   directionalUse [0] LaneDirection, -- directions of lane use
   sharedWith [1] LaneSharing, -- co-users of the lane path
   laneType [2] EXPLICIT LaneTypeAttributes, -- specific lane type data
   regional [3] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-LaneAttributes}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-LaneAttributes}{@regionId})
   } OPTIONAL
}
*/
struct EXTERN ASN1T_LaneAttributes {
   struct {
      unsigned regionalPresent : 1;
   } m;
   ASN1T_LaneDirection directionalUse;
   ASN1T_LaneSharing sharedWith;
   ASN1T_LaneTypeAttributes laneType;
   ASN1T_LaneAttributes_regional regional;
   ASN1T_LaneAttributes ();
} ;

EXTERN int asn1PE_LaneAttributes (OSCTXT* pctxt, ASN1T_LaneAttributes* pvalue);

EXTERN int asn1PD_LaneAttributes (OSCTXT* pctxt, ASN1T_LaneAttributes* pvalue);

EXTERN int XmlEnc_LaneAttributes (OSCTXT* pctxt, ASN1T_LaneAttributes* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneAttributes (OSCTXT* pctxt, ASN1T_LaneAttributes* pvalue)
   ;

EXTERN int asn1JsonEnc_LaneAttributes (OSCTXT *pctxt, ASN1T_LaneAttributes *pvalue);

EXTERN int asn1JsonDec_LaneAttributes (OSCTXT *pctxt, ASN1T_LaneAttributes *pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneAttributes* pvalue);

EXTERN ASN1T_LaneAttributes* new_ASN1T_LaneAttributes (ASN1CType& ccobj);

EXTERN int asn1Init_LaneAttributes (ASN1T_LaneAttributes* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LaneAttributes (OSCTXT *pctxt, ASN1T_LaneAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_XY_20b                                               */
/*                                                            */
/**************************************************************/
/*
Node-XY-20b ::= SEQUENCE {
   x [0] Offset-B10,
   y [1] Offset-B10
}
*/
struct EXTERN ASN1T_Node_XY_20b {
   ASN1T_Offset_B10 x;
   ASN1T_Offset_B10 y;
} ;

EXTERN int asn1PE_Node_XY_20b (OSCTXT* pctxt, ASN1T_Node_XY_20b* pvalue);

EXTERN int asn1PD_Node_XY_20b (OSCTXT* pctxt, ASN1T_Node_XY_20b* pvalue);

EXTERN int XmlEnc_Node_XY_20b (OSCTXT* pctxt, ASN1T_Node_XY_20b* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_XY_20b (OSCTXT* pctxt, ASN1T_Node_XY_20b* pvalue);

EXTERN int asn1JsonEnc_Node_XY_20b (OSCTXT *pctxt, ASN1T_Node_XY_20b *pvalue);

EXTERN int asn1JsonDec_Node_XY_20b (OSCTXT *pctxt, ASN1T_Node_XY_20b *pvalue);

EXTERN int asn1PrtToStrm_Node_XY_20b (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_XY_20b* pvalue);

EXTERN ASN1T_Node_XY_20b* new_ASN1T_Node_XY_20b (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_XY_22b                                               */
/*                                                            */
/**************************************************************/
/*
Node-XY-22b ::= SEQUENCE {
   x [0] Offset-B11,
   y [1] Offset-B11
}
*/
struct EXTERN ASN1T_Node_XY_22b {
   ASN1T_Offset_B11 x;
   ASN1T_Offset_B11 y;
} ;

EXTERN int asn1PE_Node_XY_22b (OSCTXT* pctxt, ASN1T_Node_XY_22b* pvalue);

EXTERN int asn1PD_Node_XY_22b (OSCTXT* pctxt, ASN1T_Node_XY_22b* pvalue);

EXTERN int XmlEnc_Node_XY_22b (OSCTXT* pctxt, ASN1T_Node_XY_22b* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_XY_22b (OSCTXT* pctxt, ASN1T_Node_XY_22b* pvalue);

EXTERN int asn1JsonEnc_Node_XY_22b (OSCTXT *pctxt, ASN1T_Node_XY_22b *pvalue);

EXTERN int asn1JsonDec_Node_XY_22b (OSCTXT *pctxt, ASN1T_Node_XY_22b *pvalue);

EXTERN int asn1PrtToStrm_Node_XY_22b (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_XY_22b* pvalue);

EXTERN ASN1T_Node_XY_22b* new_ASN1T_Node_XY_22b (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_XY_26b                                               */
/*                                                            */
/**************************************************************/
/*
Node-XY-26b ::= SEQUENCE {
   x [0] Offset-B13,
   y [1] Offset-B13
}
*/
struct EXTERN ASN1T_Node_XY_26b {
   ASN1T_Offset_B13 x;
   ASN1T_Offset_B13 y;
} ;

EXTERN int asn1PE_Node_XY_26b (OSCTXT* pctxt, ASN1T_Node_XY_26b* pvalue);

EXTERN int asn1PD_Node_XY_26b (OSCTXT* pctxt, ASN1T_Node_XY_26b* pvalue);

EXTERN int XmlEnc_Node_XY_26b (OSCTXT* pctxt, ASN1T_Node_XY_26b* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_XY_26b (OSCTXT* pctxt, ASN1T_Node_XY_26b* pvalue);

EXTERN int asn1JsonEnc_Node_XY_26b (OSCTXT *pctxt, ASN1T_Node_XY_26b *pvalue);

EXTERN int asn1JsonDec_Node_XY_26b (OSCTXT *pctxt, ASN1T_Node_XY_26b *pvalue);

EXTERN int asn1PrtToStrm_Node_XY_26b (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_XY_26b* pvalue);

EXTERN ASN1T_Node_XY_26b* new_ASN1T_Node_XY_26b (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_XY_28b                                               */
/*                                                            */
/**************************************************************/
/*
Node-XY-28b ::= SEQUENCE {
   x [0] Offset-B14,
   y [1] Offset-B14
}
*/
struct EXTERN ASN1T_Node_XY_28b {
   ASN1T_Offset_B14 x;
   ASN1T_Offset_B14 y;
} ;

EXTERN int asn1PE_Node_XY_28b (OSCTXT* pctxt, ASN1T_Node_XY_28b* pvalue);

EXTERN int asn1PD_Node_XY_28b (OSCTXT* pctxt, ASN1T_Node_XY_28b* pvalue);

EXTERN int XmlEnc_Node_XY_28b (OSCTXT* pctxt, ASN1T_Node_XY_28b* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_XY_28b (OSCTXT* pctxt, ASN1T_Node_XY_28b* pvalue);

EXTERN int asn1JsonEnc_Node_XY_28b (OSCTXT *pctxt, ASN1T_Node_XY_28b *pvalue);

EXTERN int asn1JsonDec_Node_XY_28b (OSCTXT *pctxt, ASN1T_Node_XY_28b *pvalue);

EXTERN int asn1PrtToStrm_Node_XY_28b (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_XY_28b* pvalue);

EXTERN ASN1T_Node_XY_28b* new_ASN1T_Node_XY_28b (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_XY_32b                                               */
/*                                                            */
/**************************************************************/
/*
Node-XY-32b ::= SEQUENCE {
   x [0] Offset-B16,
   y [1] Offset-B16
}
*/
struct EXTERN ASN1T_Node_XY_32b {
   ASN1T_Offset_B16 x;
   ASN1T_Offset_B16 y;
} ;

EXTERN int asn1PE_Node_XY_32b (OSCTXT* pctxt, ASN1T_Node_XY_32b* pvalue);

EXTERN int asn1PD_Node_XY_32b (OSCTXT* pctxt, ASN1T_Node_XY_32b* pvalue);

EXTERN int XmlEnc_Node_XY_32b (OSCTXT* pctxt, ASN1T_Node_XY_32b* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_XY_32b (OSCTXT* pctxt, ASN1T_Node_XY_32b* pvalue);

EXTERN int asn1JsonEnc_Node_XY_32b (OSCTXT *pctxt, ASN1T_Node_XY_32b *pvalue);

EXTERN int asn1JsonDec_Node_XY_32b (OSCTXT *pctxt, ASN1T_Node_XY_32b *pvalue);

EXTERN int asn1PrtToStrm_Node_XY_32b (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_XY_32b* pvalue);

EXTERN ASN1T_Node_XY_32b* new_ASN1T_Node_XY_32b (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_LLmD_64b                                             */
/*                                                            */
/**************************************************************/
/*
Node-LLmD-64b ::= SEQUENCE {
   lon [0] Longitude,
   lat [1] Latitude
}
*/
struct EXTERN ASN1T_Node_LLmD_64b {
   ASN1T_Longitude lon;
   ASN1T_Latitude lat;
} ;

EXTERN int asn1PE_Node_LLmD_64b (OSCTXT* pctxt, ASN1T_Node_LLmD_64b* pvalue);

EXTERN int asn1PD_Node_LLmD_64b (OSCTXT* pctxt, ASN1T_Node_LLmD_64b* pvalue);

EXTERN int XmlEnc_Node_LLmD_64b (OSCTXT* pctxt, ASN1T_Node_LLmD_64b* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LLmD_64b (OSCTXT* pctxt, ASN1T_Node_LLmD_64b* pvalue);

EXTERN int asn1JsonEnc_Node_LLmD_64b (OSCTXT *pctxt, ASN1T_Node_LLmD_64b *pvalue);

EXTERN int asn1JsonDec_Node_LLmD_64b (OSCTXT *pctxt, ASN1T_Node_LLmD_64b *pvalue);

EXTERN int asn1PrtToStrm_Node_LLmD_64b (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LLmD_64b* pvalue);

EXTERN ASN1T_Node_LLmD_64b* new_ASN1T_Node_LLmD_64b (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  NodeOffsetPointXY_regional                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NodeOffsetPointXY'
*/
struct EXTERN ASN1T_NodeOffsetPointXY_regional {
   ASN1T_RegionId regionId;
   struct  {
      /**
       * information object selector
       */
      Reg_NodeOffsetPointXY::TVALUE t;

      /**
       * Reg-NodeOffsetPointXY information objects
       */
      union {
         /**
          * id: addGrpB
          */
         struct ASN1T_NodeOffsetPointXY_addGrpB *_Reg_NodeOffsetPointXY_addGrpB;

         ASN1TOpenType* extElem1;
      } u;
   } regExtValue;
   ASN1T_NodeOffsetPointXY_regional ();
} ;

EXTERN int asn1PE_NodeOffsetPointXY_regional (OSCTXT* pctxt, ASN1T_NodeOffsetPointXY_regional* pvalue);

EXTERN int asn1PD_NodeOffsetPointXY_regional (OSCTXT* pctxt, ASN1T_NodeOffsetPointXY_regional* pvalue);

EXTERN int XmlEnc_NodeOffsetPointXY_regional (OSCTXT* pctxt, 
   ASN1T_NodeOffsetPointXY_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeOffsetPointXY_regional (OSCTXT* pctxt, 
   ASN1T_NodeOffsetPointXY_regional* pvalue);

EXTERN int asn1JsonEnc_NodeOffsetPointXY_regional (OSCTXT *pctxt, ASN1T_NodeOffsetPointXY_regional *pvalue);

EXTERN int asn1JsonDec_NodeOffsetPointXY_regional (OSCTXT *pctxt, ASN1T_NodeOffsetPointXY_regional *pvalue);

EXTERN int asn1PrtToStrm_NodeOffsetPointXY_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeOffsetPointXY_regional* pvalue);

EXTERN ASN1T_NodeOffsetPointXY_regional* 
   new_ASN1T_NodeOffsetPointXY_regional (ASN1CType& ccobj);

EXTERN int asn1Init_NodeOffsetPointXY_regional (
   ASN1T_NodeOffsetPointXY_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeOffsetPointXY_regional (OSCTXT *pctxt, 
   ASN1T_NodeOffsetPointXY_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeOffsetPointXY                                         */
/*                                                            */
/**************************************************************/
/*
NodeOffsetPointXY ::= CHOICE {
   -- Nodes with X,Y content
   node-XY1 [0] Node-XY-20b, -- node is within   5.11m of last node
   node-XY2 [1] Node-XY-22b, -- node is within  10.23m of last node
   node-XY3 [2] Node-XY-24b, -- node is within  20.47m of last node
   node-XY4 [3] Node-XY-26b, -- node is within  40.96m of last node
   node-XY5 [4] Node-XY-28b, -- node is within  81.91m of last node
   node-XY6 [5] Node-XY-32b, -- node is within 327.67m of last node
   node-LatLon [6] Node-LLmD-64b, -- node is a full 32b Lat/Lon range
   regional [7] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-NodeOffsetPointXY}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-NodeOffsetPointXY}{@regionId})
   }
}
*/
/* Choice tag constants */

#define T_NodeOffsetPointXY_node_XY1    1
#define T_NodeOffsetPointXY_node_XY2    2
#define T_NodeOffsetPointXY_node_XY3    3
#define T_NodeOffsetPointXY_node_XY4    4
#define T_NodeOffsetPointXY_node_XY5    5
#define T_NodeOffsetPointXY_node_XY6    6
#define T_NodeOffsetPointXY_node_LatLon 7
#define T_NodeOffsetPointXY_regional    8

struct EXTERN ASN1T_NodeOffsetPointXY {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_Node_XY_20b *node_XY1;
      /* t = 2 */
      ASN1T_Node_XY_22b *node_XY2;
      /* t = 3 */
      ASN1T_Node_XY_24b *node_XY3;
      /* t = 4 */
      ASN1T_Node_XY_26b *node_XY4;
      /* t = 5 */
      ASN1T_Node_XY_28b *node_XY5;
      /* t = 6 */
      ASN1T_Node_XY_32b *node_XY6;
      /* t = 7 */
      ASN1T_Node_LLmD_64b *node_LatLon;
      /* t = 8 */
      ASN1T_NodeOffsetPointXY_regional *regional;
   } u;
   ASN1T_NodeOffsetPointXY () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_NodeOffsetPointXY (OSCTXT* pctxt, ASN1T_NodeOffsetPointXY* pvalue);

EXTERN int asn1PD_NodeOffsetPointXY (OSCTXT* pctxt, ASN1T_NodeOffsetPointXY* pvalue);

EXTERN int XmlEnc_NodeOffsetPointXY (OSCTXT* pctxt, 
   ASN1T_NodeOffsetPointXY* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeOffsetPointXY (OSCTXT* pctxt, 
   ASN1T_NodeOffsetPointXY* pvalue);

EXTERN int asn1JsonEnc_NodeOffsetPointXY (OSCTXT *pctxt, ASN1T_NodeOffsetPointXY *pvalue);

EXTERN int asn1JsonDec_NodeOffsetPointXY (OSCTXT *pctxt, ASN1T_NodeOffsetPointXY *pvalue);

EXTERN int asn1PrtToStrm_NodeOffsetPointXY (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeOffsetPointXY* pvalue);

EXTERN ASN1T_NodeOffsetPointXY* new_ASN1T_NodeOffsetPointXY (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_NodeOffsetPointXY (ASN1T_NodeOffsetPointXY* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeOffsetPointXY (OSCTXT *pctxt, 
   ASN1T_NodeOffsetPointXY* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeXYList                                       */
/*                                                            */
/**************************************************************/
/*
NodeAttributeXYList ::= SEQUENCE (SIZE (1..8)) OF NodeAttributeXY
*/
typedef struct EXTERN ASN1T_NodeAttributeXYList {
   OSUINT8 n;
   ASN1T_NodeAttributeXY elem[8];
   ASN1T_NodeAttributeXYList () : n(0) {}
} ASN1T_NodeAttributeXYList;

class EXTERN ASN1C_NodeAttributeXYList :
public ASN1CType
{
protected:
   ASN1T_NodeAttributeXYList& msgData;
public:
   /**
    * Control class: ASN1C_NodeAttributeXYList
    * Data class:    ASN1T_NodeAttributeXYList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_NodeAttributeXYList (ASN1T_NodeAttributeXYList& data);

   /**
    * Control class: ASN1C_NodeAttributeXYList<br/>
    * Data class: ASN1T_NodeAttributeXYList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_NodeAttributeXYList (OSRTMessageBufferIF& msgBuf
      , ASN1T_NodeAttributeXYList& data);

   /**
    * Control class: ASN1C_NodeAttributeXYList<br/>
    * Data class: ASN1T_NodeAttributeXYList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_NodeAttributeXYList (ASN1CType& ccobj, ASN1T_NodeAttributeXYList& data
      );

   virtual ~ASN1C_NodeAttributeXYList () {}

private:
   ASN1C_NodeAttributeXYList& operator= (const ASN1C_NodeAttributeXYList&) {return *this;}
} ;

EXTERN int asn1PE_NodeAttributeXYList (OSCTXT* pctxt, ASN1T_NodeAttributeXYList* pvalue);

EXTERN int asn1PD_NodeAttributeXYList (OSCTXT* pctxt, ASN1T_NodeAttributeXYList* pvalue);

EXTERN int XmlEnc_NodeAttributeXYList (OSCTXT* pctxt, 
   ASN1T_NodeAttributeXYList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeXYList (OSCTXT* pctxt, 
   ASN1T_NodeAttributeXYList* pvalue);

EXTERN int asn1JsonEnc_NodeAttributeXYList (OSCTXT *pctxt, ASN1T_NodeAttributeXYList *pvalue);

EXTERN int asn1JsonDec_NodeAttributeXYList (OSCTXT *pctxt, ASN1T_NodeAttributeXYList *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeXYList (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeXYList* pvalue);

EXTERN int asn1Init_NodeAttributeXYList (ASN1T_NodeAttributeXYList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  SegmentAttributeXYList                                    */
/*                                                            */
/**************************************************************/
/*
SegmentAttributeXYList ::= SEQUENCE (SIZE (1..8)) OF SegmentAttributeXY
*/
typedef struct EXTERN ASN1T_SegmentAttributeXYList {
   OSUINT8 n;
   ASN1T_SegmentAttributeXY elem[8];
   ASN1T_SegmentAttributeXYList () : n(0) {}
} ASN1T_SegmentAttributeXYList;

class EXTERN ASN1C_SegmentAttributeXYList :
public ASN1CType
{
protected:
   ASN1T_SegmentAttributeXYList& msgData;
public:
   /**
    * Control class: ASN1C_SegmentAttributeXYList
    * Data class:    ASN1T_SegmentAttributeXYList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SegmentAttributeXYList (ASN1T_SegmentAttributeXYList& data);

   /**
    * Control class: ASN1C_SegmentAttributeXYList<br/>
    * Data class: ASN1T_SegmentAttributeXYList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SegmentAttributeXYList (OSRTMessageBufferIF& msgBuf
      , ASN1T_SegmentAttributeXYList& data);

   /**
    * Control class: ASN1C_SegmentAttributeXYList<br/>
    * Data class: ASN1T_SegmentAttributeXYList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SegmentAttributeXYList (ASN1CType& ccobj
      , ASN1T_SegmentAttributeXYList& data);

   virtual ~ASN1C_SegmentAttributeXYList () {}

private:
   ASN1C_SegmentAttributeXYList& operator= (const ASN1C_SegmentAttributeXYList&) {return *this;}
} ;

EXTERN int asn1PE_SegmentAttributeXYList (OSCTXT* pctxt, ASN1T_SegmentAttributeXYList* pvalue);

EXTERN int asn1PD_SegmentAttributeXYList (OSCTXT* pctxt, ASN1T_SegmentAttributeXYList* pvalue);

EXTERN int XmlEnc_SegmentAttributeXYList (OSCTXT* pctxt, 
   ASN1T_SegmentAttributeXYList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SegmentAttributeXYList (OSCTXT* pctxt, 
   ASN1T_SegmentAttributeXYList* pvalue);

EXTERN int asn1JsonEnc_SegmentAttributeXYList (OSCTXT *pctxt, ASN1T_SegmentAttributeXYList *pvalue);

EXTERN int asn1JsonDec_SegmentAttributeXYList (OSCTXT *pctxt, ASN1T_SegmentAttributeXYList *pvalue);

EXTERN int asn1PrtToStrm_SegmentAttributeXYList (OSCTXT *pctxt, 
   const char* name, const ASN1T_SegmentAttributeXYList* pvalue);

EXTERN int asn1Init_SegmentAttributeXYList (ASN1T_SegmentAttributeXYList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  LaneDataAttribute_regional_element                        */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'LaneDataAttribute'
*/
struct EXTERN ASN1T_LaneDataAttribute_regional_element {
   ASN1T_RegionId regionId;
   struct  {
      /**
       * information object selector
       */
      Reg_LaneDataAttribute::TVALUE t;

      /**
       * Reg-LaneDataAttribute information objects
       */
      union {
         /**
          * id: addGrpB
          */
         struct ASN1T_LaneDataAttribute_addGrpB *_Reg_LaneDataAttribute_addGrpB;

         ASN1TOpenType* extElem1;
      } u;
   } regExtValue;
   ASN1T_LaneDataAttribute_regional_element ();
} ;

EXTERN int asn1PE_LaneDataAttribute_regional_element (OSCTXT* pctxt, ASN1T_LaneDataAttribute_regional_element* pvalue);

EXTERN int asn1PD_LaneDataAttribute_regional_element (OSCTXT* pctxt, ASN1T_LaneDataAttribute_regional_element* pvalue);

EXTERN int XmlEnc_LaneDataAttribute_regional_element (OSCTXT* pctxt, 
   ASN1T_LaneDataAttribute_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneDataAttribute_regional_element (OSCTXT* pctxt, 
   ASN1T_LaneDataAttribute_regional_element* pvalue);

EXTERN int asn1JsonEnc_LaneDataAttribute_regional_element (OSCTXT *pctxt, ASN1T_LaneDataAttribute_regional_element *pvalue);

EXTERN int asn1JsonDec_LaneDataAttribute_regional_element (OSCTXT *pctxt, ASN1T_LaneDataAttribute_regional_element *pvalue);

EXTERN int asn1PrtToStrm_LaneDataAttribute_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneDataAttribute_regional_element* pvalue);

EXTERN ASN1T_LaneDataAttribute_regional_element* 
   new_ASN1T_LaneDataAttribute_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_LaneDataAttribute_regional_element (
   ASN1T_LaneDataAttribute_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LaneDataAttribute_regional_element (OSCTXT *pctxt, 
   ASN1T_LaneDataAttribute_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneDataAttribute_regional                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'LaneDataAttribute'
*/
/* List of ASN1T_LaneDataAttribute_regional_element */
typedef ASN1TSeqOfList ASN1T_LaneDataAttribute_regional;

class EXTERN ASN1C_LaneDataAttribute_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_LaneDataAttribute_regional& msgData;
public:
   /**
    * Control class: ASN1C_LaneDataAttribute_regional
    * Data class:    ASN1T_LaneDataAttribute_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneDataAttribute_regional (ASN1T_LaneDataAttribute_regional& data);

   /**
    * Control class: ASN1C_LaneDataAttribute_regional<br/>
    * Data class: ASN1T_LaneDataAttribute_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneDataAttribute_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneDataAttribute_regional& data);

   /**
    * Control class: ASN1C_LaneDataAttribute_regional<br/>
    * Data class: ASN1T_LaneDataAttribute_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_LaneDataAttribute_regional (ASN1CType& ccobj
      , ASN1T_LaneDataAttribute_regional& data);

   virtual ~ASN1C_LaneDataAttribute_regional () {}

   /**
    * Data class: ASN1T_LaneDataAttribute_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_LaneDataAttribute_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_LaneDataAttribute_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_LaneDataAttribute_regional_element* NewElement ();

   /**
    * Data class: ASN1T_LaneDataAttribute_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_LaneDataAttribute_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_LaneDataAttribute_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_LaneDataAttribute_regional* pmatches);

private:
   ASN1C_LaneDataAttribute_regional& operator= (const ASN1C_LaneDataAttribute_regional&) {return *this;}
} ;

EXTERN int asn1PE_LaneDataAttribute_regional (OSCTXT* pctxt, ASN1T_LaneDataAttribute_regional* pvalue);

EXTERN int asn1PD_LaneDataAttribute_regional (OSCTXT* pctxt, ASN1T_LaneDataAttribute_regional* pvalue);

EXTERN int XmlEnc_LaneDataAttribute_regional (OSCTXT* pctxt, 
   ASN1T_LaneDataAttribute_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneDataAttribute_regional (OSCTXT* pctxt, 
   ASN1T_LaneDataAttribute_regional* pvalue);

EXTERN int asn1JsonEnc_LaneDataAttribute_regional (OSCTXT *pctxt, ASN1T_LaneDataAttribute_regional *pvalue);

EXTERN int asn1JsonDec_LaneDataAttribute_regional (OSCTXT *pctxt, ASN1T_LaneDataAttribute_regional *pvalue);

EXTERN int asn1PrtToStrm_LaneDataAttribute_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneDataAttribute_regional* pvalue);

EXTERN int asn1Init_LaneDataAttribute_regional (
   ASN1T_LaneDataAttribute_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LaneDataAttribute_regional (OSCTXT *pctxt, 
   ASN1T_LaneDataAttribute_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneDataAttribute                                         */
/*                                                            */
/**************************************************************/
/*
LaneDataAttribute ::= CHOICE {
     -- Segment attribute types and the data needed for each
   pathEndPointAngle [0] DeltaAngle,
                              -- adjusts final point/width slant
                              -- of the lane to align with the stop line
   laneCrownPointCenter [1] RoadwayCrownAngle,
                              -- sets the canter of the road bed      
                              -- from centerline point
   laneCrownPointLeft [2] RoadwayCrownAngle,
                              -- sets the canter of the road bed
                              -- from left edge
   laneCrownPointRight [3] RoadwayCrownAngle,
                              -- sets the canter of the road bed
                              -- from right edge
   laneAngle [4] MergeDivergeNodeAngle,
                              -- the angle or direction of another lane
                              -- this is required to support Japan style
                              -- when a merge point angle is required
   speedLimits [5] SpeedLimitList,
                              -- Reference regulatory speed limits
                              -- used by all segments
     -- Add others as needed, in regional space
   regional [6] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-LaneDataAttribute}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-LaneDataAttribute}{@regionId})
   },
   ...
}
*/
/* Choice tag constants */

#define T_LaneDataAttribute_pathEndPointAngle 1
#define T_LaneDataAttribute_laneCrownPointCenter 2
#define T_LaneDataAttribute_laneCrownPointLeft 3
#define T_LaneDataAttribute_laneCrownPointRight 4
#define T_LaneDataAttribute_laneAngle   5
#define T_LaneDataAttribute_speedLimits 6
#define T_LaneDataAttribute_regional    7
#define T_LaneDataAttribute_extElem1    8

struct EXTERN ASN1T_LaneDataAttribute {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_DeltaAngle pathEndPointAngle;
      /* t = 2 */
      ASN1T_RoadwayCrownAngle laneCrownPointCenter;
      /* t = 3 */
      ASN1T_RoadwayCrownAngle laneCrownPointLeft;
      /* t = 4 */
      ASN1T_RoadwayCrownAngle laneCrownPointRight;
      /* t = 5 */
      ASN1T_MergeDivergeNodeAngle laneAngle;
      /* t = 6 */
      ASN1T_SpeedLimitList *speedLimits;
      /* t = 7 */
      ASN1T_LaneDataAttribute_regional *regional;
      /* t = 8 */
      ASN1TOpenType *extElem1;
   } u;
   ASN1T_LaneDataAttribute () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_LaneDataAttribute (OSCTXT* pctxt, ASN1T_LaneDataAttribute* pvalue);

EXTERN int asn1PD_LaneDataAttribute (OSCTXT* pctxt, ASN1T_LaneDataAttribute* pvalue);

EXTERN int XmlEnc_LaneDataAttribute (OSCTXT* pctxt, 
   ASN1T_LaneDataAttribute* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneDataAttribute (OSCTXT* pctxt, 
   ASN1T_LaneDataAttribute* pvalue);

EXTERN int asn1JsonEnc_LaneDataAttribute (OSCTXT *pctxt, ASN1T_LaneDataAttribute *pvalue);

EXTERN int asn1JsonDec_LaneDataAttribute (OSCTXT *pctxt, ASN1T_LaneDataAttribute *pvalue);

EXTERN int asn1PrtToStrm_LaneDataAttribute (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneDataAttribute* pvalue);

EXTERN ASN1T_LaneDataAttribute* new_ASN1T_LaneDataAttribute (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_LaneDataAttribute (ASN1T_LaneDataAttribute* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LaneDataAttribute (OSCTXT *pctxt, 
   ASN1T_LaneDataAttribute* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneDataAttributeList                                     */
/*                                                            */
/**************************************************************/
/*
LaneDataAttributeList ::= SEQUENCE (SIZE (1..8)) OF LaneDataAttribute
*/
/* List of ASN1T_LaneDataAttribute */
typedef ASN1TSeqOfList ASN1T_LaneDataAttributeList;

class EXTERN ASN1C_LaneDataAttributeList :
public ASN1CSeqOfList
{
protected:
   ASN1T_LaneDataAttributeList& msgData;
public:
   /**
    * Control class: ASN1C_LaneDataAttributeList
    * Data class:    ASN1T_LaneDataAttributeList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneDataAttributeList (ASN1T_LaneDataAttributeList& data);

   /**
    * Control class: ASN1C_LaneDataAttributeList<br/>
    * Data class: ASN1T_LaneDataAttributeList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneDataAttributeList (OSRTMessageBufferIF& msgBuf
      , ASN1T_LaneDataAttributeList& data);

   /**
    * Control class: ASN1C_LaneDataAttributeList<br/>
    * Data class: ASN1T_LaneDataAttributeList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_LaneDataAttributeList (ASN1CType& ccobj
      , ASN1T_LaneDataAttributeList& data);

   virtual ~ASN1C_LaneDataAttributeList () {}

   /**
    * Data class: ASN1T_LaneDataAttribute<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_LaneDataAttribute* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_LaneDataAttribute.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_LaneDataAttribute* NewElement ();

   /**
    * Data class: ASN1T_LaneDataAttribute.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_LaneDataAttribute* AppendNewElement ();

private:
   ASN1C_LaneDataAttributeList& operator= (const ASN1C_LaneDataAttributeList&) {return *this;}
} ;

EXTERN int asn1PE_LaneDataAttributeList (OSCTXT* pctxt, ASN1T_LaneDataAttributeList* pvalue);

EXTERN int asn1PD_LaneDataAttributeList (OSCTXT* pctxt, ASN1T_LaneDataAttributeList* pvalue);

EXTERN int XmlEnc_LaneDataAttributeList (OSCTXT* pctxt, 
   ASN1T_LaneDataAttributeList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneDataAttributeList (OSCTXT* pctxt, 
   ASN1T_LaneDataAttributeList* pvalue);

EXTERN int asn1JsonEnc_LaneDataAttributeList (OSCTXT *pctxt, ASN1T_LaneDataAttributeList *pvalue);

EXTERN int asn1JsonDec_LaneDataAttributeList (OSCTXT *pctxt, ASN1T_LaneDataAttributeList *pvalue);

EXTERN int asn1PrtToStrm_LaneDataAttributeList (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneDataAttributeList* pvalue);

EXTERN int asn1Init_LaneDataAttributeList (ASN1T_LaneDataAttributeList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LaneDataAttributeList (OSCTXT *pctxt, 
   ASN1T_LaneDataAttributeList* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetXY_regional_element                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NodeAttributeSetXY'
*/
struct EXTERN ASN1T_NodeAttributeSetXY_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_NodeAttributeSetXY_regional_element (OSCTXT* pctxt, ASN1T_NodeAttributeSetXY_regional_element* pvalue);

EXTERN int asn1PD_NodeAttributeSetXY_regional_element (OSCTXT* pctxt, ASN1T_NodeAttributeSetXY_regional_element* pvalue);

EXTERN int XmlEnc_NodeAttributeSetXY_regional_element (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetXY_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeSetXY_regional_element (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetXY_regional_element* pvalue);

EXTERN int asn1JsonEnc_NodeAttributeSetXY_regional_element (OSCTXT *pctxt, ASN1T_NodeAttributeSetXY_regional_element *pvalue);

EXTERN int asn1JsonDec_NodeAttributeSetXY_regional_element (OSCTXT *pctxt, ASN1T_NodeAttributeSetXY_regional_element *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetXY_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeSetXY_regional_element* pvalue);

EXTERN ASN1T_NodeAttributeSetXY_regional_element* 
   new_ASN1T_NodeAttributeSetXY_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_NodeAttributeSetXY_regional_element (
   ASN1T_NodeAttributeSetXY_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeAttributeSetXY_regional_element (OSCTXT *pctxt, 
   ASN1T_NodeAttributeSetXY_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetXY_regional                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NodeAttributeSetXY'
*/
/* List of ASN1T_NodeAttributeSetXY_regional_element */
typedef ASN1TSeqOfList ASN1T_NodeAttributeSetXY_regional;

class EXTERN ASN1C_NodeAttributeSetXY_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_NodeAttributeSetXY_regional& msgData;
public:
   /**
    * Control class: ASN1C_NodeAttributeSetXY_regional
    * Data class:    ASN1T_NodeAttributeSetXY_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_NodeAttributeSetXY_regional (ASN1T_NodeAttributeSetXY_regional& data);

   /**
    * Control class: ASN1C_NodeAttributeSetXY_regional<br/>
    * Data class: ASN1T_NodeAttributeSetXY_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_NodeAttributeSetXY_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_NodeAttributeSetXY_regional& data);

   /**
    * Control class: ASN1C_NodeAttributeSetXY_regional<br/>
    * Data class: ASN1T_NodeAttributeSetXY_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_NodeAttributeSetXY_regional (ASN1CType& ccobj
      , ASN1T_NodeAttributeSetXY_regional& data);

   virtual ~ASN1C_NodeAttributeSetXY_regional () {}

   /**
    * Data class: ASN1T_NodeAttributeSetXY_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_NodeAttributeSetXY_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_NodeAttributeSetXY_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_NodeAttributeSetXY_regional_element* NewElement ();

   /**
    * Data class: ASN1T_NodeAttributeSetXY_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_NodeAttributeSetXY_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_NodeAttributeSetXY_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_NodeAttributeSetXY_regional* pmatches);

private:
   ASN1C_NodeAttributeSetXY_regional& operator= (const ASN1C_NodeAttributeSetXY_regional&) {return *this;}
} ;

EXTERN int asn1PE_NodeAttributeSetXY_regional (OSCTXT* pctxt, ASN1T_NodeAttributeSetXY_regional* pvalue);

EXTERN int asn1PD_NodeAttributeSetXY_regional (OSCTXT* pctxt, ASN1T_NodeAttributeSetXY_regional* pvalue);

EXTERN int XmlEnc_NodeAttributeSetXY_regional (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetXY_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeSetXY_regional (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetXY_regional* pvalue);

EXTERN int asn1JsonEnc_NodeAttributeSetXY_regional (OSCTXT *pctxt, ASN1T_NodeAttributeSetXY_regional *pvalue);

EXTERN int asn1JsonDec_NodeAttributeSetXY_regional (OSCTXT *pctxt, ASN1T_NodeAttributeSetXY_regional *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetXY_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeSetXY_regional* pvalue);

EXTERN int asn1Init_NodeAttributeSetXY_regional (
   ASN1T_NodeAttributeSetXY_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeAttributeSetXY_regional (OSCTXT *pctxt, 
   ASN1T_NodeAttributeSetXY_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetXY                                        */
/*                                                            */
/**************************************************************/
/*
NodeAttributeSetXY ::= SEQUENCE {
   localNode [0] NodeAttributeXYList OPTIONAL,
                -- Attribute states which pertain to this node point
   disabled [1] SegmentAttributeXYList OPTIONAL,
                -- Attribute states which are disabled at this node point
   enabled [2] SegmentAttributeXYList OPTIONAL,
                -- Attribute states which are enabled at this node point
                -- and which remain enabled until disabled or the lane ends
   data [3] LaneDataAttributeList OPTIONAL,
                -- Attributes which require an additional data values
                -- some of these are local to the node point, while others
                -- persist with the provided values until changed
                -- and this is indicated in each entry
   dWidth [4] Offset-B10 OPTIONAL,
                -- A value added to the current lane width
                -- at this node and from this node onwards, in 1cm steps
                -- lane width between nodes are a linear taper between pts
                -- the value of zero shall not be sent here
   dElevation [5] Offset-B10 OPTIONAL,
                -- A value added to the current Elevation 
                -- at this node from this node onwards, in 10cm steps
                -- elevations between nodes are a linear taper between pts
                -- the value of zero shall not be sent here
   regional [6] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-NodeAttributeSetXY}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-NodeAttributeSetXY}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_NodeAttributeSetXY {
   struct {
      unsigned localNodePresent : 1;
      unsigned disabledPresent : 1;
      unsigned enabledPresent : 1;
      unsigned dataPresent : 1;
      unsigned dWidthPresent : 1;
      unsigned dElevationPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_NodeAttributeXYList localNode;
   ASN1T_SegmentAttributeXYList disabled;
   ASN1T_SegmentAttributeXYList enabled;
   ASN1T_LaneDataAttributeList data;
   ASN1T_Offset_B10 dWidth;
   ASN1T_Offset_B10 dElevation;
   ASN1T_NodeAttributeSetXY_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_NodeAttributeSetXY ();
} ;

EXTERN int asn1PE_NodeAttributeSetXY (OSCTXT* pctxt, ASN1T_NodeAttributeSetXY* pvalue);

EXTERN int asn1PD_NodeAttributeSetXY (OSCTXT* pctxt, ASN1T_NodeAttributeSetXY* pvalue);

EXTERN int XmlEnc_NodeAttributeSetXY (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetXY* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeSetXY (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetXY* pvalue);

EXTERN int asn1JsonEnc_NodeAttributeSetXY (OSCTXT *pctxt, ASN1T_NodeAttributeSetXY *pvalue);

EXTERN int asn1JsonDec_NodeAttributeSetXY (OSCTXT *pctxt, ASN1T_NodeAttributeSetXY *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetXY (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeSetXY* pvalue);

EXTERN ASN1T_NodeAttributeSetXY* 
   new_ASN1T_NodeAttributeSetXY (ASN1CType& ccobj);

EXTERN int asn1Init_NodeAttributeSetXY (ASN1T_NodeAttributeSetXY* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeAttributeSetXY (OSCTXT *pctxt, 
   ASN1T_NodeAttributeSetXY* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeXY                                                    */
/*                                                            */
/**************************************************************/
/*
NodeXY ::= SEQUENCE {
   delta [0] EXPLICIT NodeOffsetPointXY,
               -- A choice of which X,Y offset value to use  
               -- this includes various delta values as well a regional choices
   attributes [1] NodeAttributeSetXY OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_NodeXY {
   struct {
      unsigned attributesPresent : 1;
   } m;
   ASN1T_NodeOffsetPointXY delta;
   ASN1T_NodeAttributeSetXY attributes;
   ASN1TSeqExt extElem1;
   ASN1T_NodeXY ();
} ;

EXTERN int asn1PE_NodeXY (OSCTXT* pctxt, ASN1T_NodeXY* pvalue);

EXTERN int asn1PD_NodeXY (OSCTXT* pctxt, ASN1T_NodeXY* pvalue);

EXTERN int XmlEnc_NodeXY (OSCTXT* pctxt, ASN1T_NodeXY* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeXY (OSCTXT* pctxt, ASN1T_NodeXY* pvalue);

EXTERN int asn1JsonEnc_NodeXY (OSCTXT *pctxt, ASN1T_NodeXY *pvalue);

EXTERN int asn1JsonDec_NodeXY (OSCTXT *pctxt, ASN1T_NodeXY *pvalue);

EXTERN int asn1PrtToStrm_NodeXY (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeXY* pvalue);

EXTERN ASN1T_NodeXY* new_ASN1T_NodeXY (ASN1CType& ccobj);

EXTERN int asn1Init_NodeXY (ASN1T_NodeXY* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeXY (OSCTXT *pctxt, ASN1T_NodeXY* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeSetXY                                                 */
/*                                                            */
/**************************************************************/
/*
NodeSetXY ::= SEQUENCE (SIZE (2..63)) OF NodeXY
*/
/* List of ASN1T_NodeXY */
typedef ASN1TSeqOfList ASN1T_NodeSetXY;

class EXTERN ASN1C_NodeSetXY :
public ASN1CSeqOfList
{
protected:
   ASN1T_NodeSetXY& msgData;
public:
   /**
    * Control class: ASN1C_NodeSetXY
    * Data class:    ASN1T_NodeSetXY
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_NodeSetXY (ASN1T_NodeSetXY& data);

   /**
    * Control class: ASN1C_NodeSetXY<br/>
    * Data class: ASN1T_NodeSetXY<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_NodeSetXY (OSRTMessageBufferIF& msgBuf, ASN1T_NodeSetXY& data);

   /**
    * Control class: ASN1C_NodeSetXY<br/>
    * Data class: ASN1T_NodeSetXY<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_NodeSetXY (ASN1CType& ccobj, ASN1T_NodeSetXY& data);

   virtual ~ASN1C_NodeSetXY () {}

   /**
    * Data class: ASN1T_NodeXY<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_NodeXY* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_NodeXY.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_NodeXY* NewElement ();

   /**
    * Data class: ASN1T_NodeXY.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_NodeXY* AppendNewElement ();

private:
   ASN1C_NodeSetXY& operator= (const ASN1C_NodeSetXY&) {return *this;}
} ;

EXTERN int asn1PE_NodeSetXY (OSCTXT* pctxt, ASN1T_NodeSetXY* pvalue);

EXTERN int asn1PD_NodeSetXY (OSCTXT* pctxt, ASN1T_NodeSetXY* pvalue);

EXTERN int XmlEnc_NodeSetXY (OSCTXT* pctxt, ASN1T_NodeSetXY* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeSetXY (OSCTXT* pctxt, ASN1T_NodeSetXY* pvalue);

EXTERN int asn1JsonEnc_NodeSetXY (OSCTXT *pctxt, ASN1T_NodeSetXY *pvalue);

EXTERN int asn1JsonDec_NodeSetXY (OSCTXT *pctxt, ASN1T_NodeSetXY *pvalue);

EXTERN int asn1PrtToStrm_NodeSetXY (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeSetXY* pvalue);

EXTERN int asn1Init_NodeSetXY (ASN1T_NodeSetXY* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeSetXY (OSCTXT *pctxt, ASN1T_NodeSetXY* pvalue);

/**************************************************************/
/*                                                            */
/*  ComputedLane_offsetXaxis                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ComputedLane'
*/
/* Choice tag constants */

#define T_ComputedLane_offsetXaxis_small_ 1
#define T_ComputedLane_offsetXaxis_large_ 2

struct EXTERN ASN1T_ComputedLane_offsetXaxis {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_DrivenLineOffsetSm small_;
      /* t = 2 */
      ASN1T_DrivenLineOffsetLg large_;
   } u;
   ASN1T_ComputedLane_offsetXaxis () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_ComputedLane_offsetXaxis (OSCTXT* pctxt, ASN1T_ComputedLane_offsetXaxis* pvalue);

EXTERN int asn1PD_ComputedLane_offsetXaxis (OSCTXT* pctxt, ASN1T_ComputedLane_offsetXaxis* pvalue);

EXTERN int XmlEnc_ComputedLane_offsetXaxis (OSCTXT* pctxt, 
   ASN1T_ComputedLane_offsetXaxis* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ComputedLane_offsetXaxis (OSCTXT* pctxt, 
   ASN1T_ComputedLane_offsetXaxis* pvalue);

EXTERN int asn1JsonEnc_ComputedLane_offsetXaxis (OSCTXT *pctxt, ASN1T_ComputedLane_offsetXaxis *pvalue);

EXTERN int asn1JsonDec_ComputedLane_offsetXaxis (OSCTXT *pctxt, ASN1T_ComputedLane_offsetXaxis *pvalue);

EXTERN int asn1PrtToStrm_ComputedLane_offsetXaxis (OSCTXT *pctxt, 
   const char* name, const ASN1T_ComputedLane_offsetXaxis* pvalue);

EXTERN ASN1T_ComputedLane_offsetXaxis* 
   new_ASN1T_ComputedLane_offsetXaxis (ASN1CType& ccobj);

EXTERN int asn1Init_ComputedLane_offsetXaxis (ASN1T_ComputedLane_offsetXaxis* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  ComputedLane_offsetYaxis                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ComputedLane'
*/
/* Choice tag constants */

#define T_ComputedLane_offsetYaxis_small_ 1
#define T_ComputedLane_offsetYaxis_large_ 2

struct EXTERN ASN1T_ComputedLane_offsetYaxis {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_DrivenLineOffsetSm small_;
      /* t = 2 */
      ASN1T_DrivenLineOffsetLg large_;
   } u;
   ASN1T_ComputedLane_offsetYaxis () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_ComputedLane_offsetYaxis (OSCTXT* pctxt, ASN1T_ComputedLane_offsetYaxis* pvalue);

EXTERN int asn1PD_ComputedLane_offsetYaxis (OSCTXT* pctxt, ASN1T_ComputedLane_offsetYaxis* pvalue);

EXTERN int XmlEnc_ComputedLane_offsetYaxis (OSCTXT* pctxt, 
   ASN1T_ComputedLane_offsetYaxis* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ComputedLane_offsetYaxis (OSCTXT* pctxt, 
   ASN1T_ComputedLane_offsetYaxis* pvalue);

EXTERN int asn1JsonEnc_ComputedLane_offsetYaxis (OSCTXT *pctxt, ASN1T_ComputedLane_offsetYaxis *pvalue);

EXTERN int asn1JsonDec_ComputedLane_offsetYaxis (OSCTXT *pctxt, ASN1T_ComputedLane_offsetYaxis *pvalue);

EXTERN int asn1PrtToStrm_ComputedLane_offsetYaxis (OSCTXT *pctxt, 
   const char* name, const ASN1T_ComputedLane_offsetYaxis* pvalue);

EXTERN ASN1T_ComputedLane_offsetYaxis* 
   new_ASN1T_ComputedLane_offsetYaxis (ASN1CType& ccobj);

EXTERN int asn1Init_ComputedLane_offsetYaxis (ASN1T_ComputedLane_offsetYaxis* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  ComputedLane_regional_element                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ComputedLane'
*/
struct EXTERN ASN1T_ComputedLane_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_ComputedLane_regional_element (OSCTXT* pctxt, ASN1T_ComputedLane_regional_element* pvalue);

EXTERN int asn1PD_ComputedLane_regional_element (OSCTXT* pctxt, ASN1T_ComputedLane_regional_element* pvalue);

EXTERN int XmlEnc_ComputedLane_regional_element (OSCTXT* pctxt, 
   ASN1T_ComputedLane_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ComputedLane_regional_element (OSCTXT* pctxt, 
   ASN1T_ComputedLane_regional_element* pvalue);

EXTERN int asn1JsonEnc_ComputedLane_regional_element (OSCTXT *pctxt, ASN1T_ComputedLane_regional_element *pvalue);

EXTERN int asn1JsonDec_ComputedLane_regional_element (OSCTXT *pctxt, ASN1T_ComputedLane_regional_element *pvalue);

EXTERN int asn1PrtToStrm_ComputedLane_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_ComputedLane_regional_element* pvalue);

EXTERN ASN1T_ComputedLane_regional_element* 
   new_ASN1T_ComputedLane_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_ComputedLane_regional_element (
   ASN1T_ComputedLane_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ComputedLane_regional_element (OSCTXT *pctxt, 
   ASN1T_ComputedLane_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  ComputedLane_regional                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ComputedLane'
*/
/* List of ASN1T_ComputedLane_regional_element */
typedef ASN1TSeqOfList ASN1T_ComputedLane_regional;

class EXTERN ASN1C_ComputedLane_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_ComputedLane_regional& msgData;
public:
   /**
    * Control class: ASN1C_ComputedLane_regional
    * Data class:    ASN1T_ComputedLane_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ComputedLane_regional (ASN1T_ComputedLane_regional& data);

   /**
    * Control class: ASN1C_ComputedLane_regional<br/>
    * Data class: ASN1T_ComputedLane_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ComputedLane_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_ComputedLane_regional& data);

   /**
    * Control class: ASN1C_ComputedLane_regional<br/>
    * Data class: ASN1T_ComputedLane_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_ComputedLane_regional (ASN1CType& ccobj
      , ASN1T_ComputedLane_regional& data);

   virtual ~ASN1C_ComputedLane_regional () {}

   /**
    * Data class: ASN1T_ComputedLane_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_ComputedLane_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_ComputedLane_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_ComputedLane_regional_element* NewElement ();

   /**
    * Data class: ASN1T_ComputedLane_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_ComputedLane_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_ComputedLane_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_ComputedLane_regional* pmatches);

private:
   ASN1C_ComputedLane_regional& operator= (const ASN1C_ComputedLane_regional&) {return *this;}
} ;

EXTERN int asn1PE_ComputedLane_regional (OSCTXT* pctxt, ASN1T_ComputedLane_regional* pvalue);

EXTERN int asn1PD_ComputedLane_regional (OSCTXT* pctxt, ASN1T_ComputedLane_regional* pvalue);

EXTERN int XmlEnc_ComputedLane_regional (OSCTXT* pctxt, 
   ASN1T_ComputedLane_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ComputedLane_regional (OSCTXT* pctxt, 
   ASN1T_ComputedLane_regional* pvalue);

EXTERN int asn1JsonEnc_ComputedLane_regional (OSCTXT *pctxt, ASN1T_ComputedLane_regional *pvalue);

EXTERN int asn1JsonDec_ComputedLane_regional (OSCTXT *pctxt, ASN1T_ComputedLane_regional *pvalue);

EXTERN int asn1PrtToStrm_ComputedLane_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_ComputedLane_regional* pvalue);

EXTERN int asn1Init_ComputedLane_regional (ASN1T_ComputedLane_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ComputedLane_regional (OSCTXT *pctxt, 
   ASN1T_ComputedLane_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  ComputedLane                                              */
/*                                                            */
/**************************************************************/
/*
ComputedLane ::= SEQUENCE {
   -- Data needed to created a computed lane
   referenceLaneId [0] LaneID,
                         -- the lane ID upon which this 
                         -- computed lane will be based 
   -- Lane Offset in X and Y direction
   offsetXaxis [1] EXPLICIT CHOICE {
      small [0] DrivenLineOffsetSm,
      large [1] DrivenLineOffsetLg
   },
   offsetYaxis [2] EXPLICIT CHOICE {
      small [0] DrivenLineOffsetSm,
      large [1] DrivenLineOffsetLg
   },
                         -- A path X offset value for translations of the 
                         -- path's points when creating translated lanes. 
                         -- The values found in the reference lane are 
                         -- all offset based on the X and Y values from 
                         -- the coordinates of the reference lane's 
                         -- initial path point.   
   -- Lane Rotation
   rotateXY [3] Angle OPTIONAL,
                         -- A path rotation value for the entire lane
                         -- Observe that this rotates the existing orientation 
                         -- of the referenced lane, it does not replace it.
                         -- Rotation occurs about the initial path point.
   -- Lane Path Scale (zooming)
   scaleXaxis [4] Scale-B12 OPTIONAL,
   scaleYaxis [5] Scale-B12 OPTIONAL,
                         -- value for translations or zooming of the path's 
                         -- points. The values found in the reference lane 
                         -- are all expanded or contracted based on the X 
                         -- and Y and width values from the coordinates of 
                         -- the reference lane's initial path point.  
                         -- The Z axis remains untouched.  
   regional [6] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-ComputedLane}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-ComputedLane}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_ComputedLane {
   struct {
      unsigned rotateXYPresent : 1;
      unsigned scaleXaxisPresent : 1;
      unsigned scaleYaxisPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_LaneID referenceLaneId;
   ASN1T_ComputedLane_offsetXaxis offsetXaxis;
   ASN1T_ComputedLane_offsetYaxis offsetYaxis;
   ASN1T_Angle rotateXY;
   ASN1T_Scale_B12 scaleXaxis;
   ASN1T_Scale_B12 scaleYaxis;
   ASN1T_ComputedLane_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_ComputedLane ();
} ;

EXTERN int asn1PE_ComputedLane (OSCTXT* pctxt, ASN1T_ComputedLane* pvalue);

EXTERN int asn1PD_ComputedLane (OSCTXT* pctxt, ASN1T_ComputedLane* pvalue);

EXTERN int XmlEnc_ComputedLane (OSCTXT* pctxt, ASN1T_ComputedLane* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ComputedLane (OSCTXT* pctxt, ASN1T_ComputedLane* pvalue);

EXTERN int asn1JsonEnc_ComputedLane (OSCTXT *pctxt, ASN1T_ComputedLane *pvalue);

EXTERN int asn1JsonDec_ComputedLane (OSCTXT *pctxt, ASN1T_ComputedLane *pvalue);

EXTERN int asn1PrtToStrm_ComputedLane (OSCTXT *pctxt, 
   const char* name, const ASN1T_ComputedLane* pvalue);

EXTERN ASN1T_ComputedLane* new_ASN1T_ComputedLane (ASN1CType& ccobj);

EXTERN int asn1Init_ComputedLane (ASN1T_ComputedLane* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ComputedLane (OSCTXT *pctxt, ASN1T_ComputedLane* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeListXY                                                */
/*                                                            */
/**************************************************************/
/*
NodeListXY ::= CHOICE {
   nodes [0] NodeSetXY,
             -- a lane made up of two or more
             -- XY node points and any attributes 
             -- defined in those nodes
   computed [1] ComputedLane,
   ...
}
*/
/* Choice tag constants */

#define T_NodeListXY_nodes              1
#define T_NodeListXY_computed           2
#define T_NodeListXY_extElem1           3

struct EXTERN ASN1T_NodeListXY {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_NodeSetXY *nodes;
      /* t = 2 */
      ASN1T_ComputedLane *computed;
      /* t = 3 */
      ASN1TOpenType *extElem1;
   } u;
   ASN1T_NodeListXY () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_NodeListXY (OSCTXT* pctxt, ASN1T_NodeListXY* pvalue);

EXTERN int asn1PD_NodeListXY (OSCTXT* pctxt, ASN1T_NodeListXY* pvalue);

EXTERN int XmlEnc_NodeListXY (OSCTXT* pctxt, ASN1T_NodeListXY* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeListXY (OSCTXT* pctxt, ASN1T_NodeListXY* pvalue);

EXTERN int asn1JsonEnc_NodeListXY (OSCTXT *pctxt, ASN1T_NodeListXY *pvalue);

EXTERN int asn1JsonDec_NodeListXY (OSCTXT *pctxt, ASN1T_NodeListXY *pvalue);

EXTERN int asn1PrtToStrm_NodeListXY (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeListXY* pvalue);

EXTERN ASN1T_NodeListXY* new_ASN1T_NodeListXY (ASN1CType& ccobj);

EXTERN int asn1Init_NodeListXY (ASN1T_NodeListXY* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeListXY (OSCTXT *pctxt, ASN1T_NodeListXY* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectingLane                                            */
/*                                                            */
/**************************************************************/
/*
ConnectingLane ::= SEQUENCE {
   lane [0] LaneID, -- Index of the connecting lane
   maneuver [1] AllowedManeuvers OPTIONAL
                       -- The Maneuver between 
                       -- the enclosing lane and this lane
                       -- at the stop line to connect them
}
*/
struct EXTERN ASN1T_ConnectingLane {
   struct {
      unsigned maneuverPresent : 1;
   } m;
   ASN1T_LaneID lane;
   ASN1T_AllowedManeuvers maneuver;
   ASN1T_ConnectingLane ();
} ;

EXTERN int asn1PE_ConnectingLane (OSCTXT* pctxt, ASN1T_ConnectingLane* pvalue);

EXTERN int asn1PD_ConnectingLane (OSCTXT* pctxt, ASN1T_ConnectingLane* pvalue);

EXTERN int XmlEnc_ConnectingLane (OSCTXT* pctxt, ASN1T_ConnectingLane* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ConnectingLane (OSCTXT* pctxt, ASN1T_ConnectingLane* pvalue)
   ;

EXTERN int asn1JsonEnc_ConnectingLane (OSCTXT *pctxt, ASN1T_ConnectingLane *pvalue);

EXTERN int asn1JsonDec_ConnectingLane (OSCTXT *pctxt, ASN1T_ConnectingLane *pvalue);

EXTERN int asn1PrtToStrm_ConnectingLane (OSCTXT *pctxt, 
   const char* name, const ASN1T_ConnectingLane* pvalue);

EXTERN ASN1T_ConnectingLane* new_ASN1T_ConnectingLane (ASN1CType& ccobj);

EXTERN int asn1Init_ConnectingLane (ASN1T_ConnectingLane* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  Connection                                                */
/*                                                            */
/**************************************************************/
/*
Connection ::= SEQUENCE {
   -- The subject lane connecting to this lane is:
   connectingLane [0] ConnectingLane,
                      -- The index of the connecting lane and also
                      -- the maneuver from the current lane to it
   remoteIntersection [1] IntersectionReferenceID OPTIONAL,
                      -- This entry is only used when the 
                      -- indicated connecting lane belongs 
                      -- to another intersection layout. This 
                      -- provides a means to create meshes of lanes
   -- SPAT mapping details at the stop line are:
   signalGroup [2] SignalGroupID OPTIONAL,
                      -- The matching signal group send by 
                      -- the SPAT message for this lane/maneuver.
                      -- Shall be present unless the connectingLane 
                      -- has no signal group (is un-signalized)
   userClass [3] RestrictionClassID OPTIONAL,
                      -- The Restriction Class of users this applies to
                      -- The use of some lane/maneuver and SignalGroupID 
                      -- pairings are restricted to selected users.
                      -- When absent, the SignalGroupID applies to all
   -- Movement assist details are given by:
   connectionID [4] LaneConnectionID OPTIONAL
                      -- An optional connection index used to 
                      -- relate this lane connection to any dynamic 
                      -- clearance data in the SPAT. Note that
                      -- the index may be shared with other 
                      -- connections if the clearance data is common
}
*/
struct EXTERN ASN1T_Connection {
   struct {
      unsigned remoteIntersectionPresent : 1;
      unsigned signalGroupPresent : 1;
      unsigned userClassPresent : 1;
      unsigned connectionIDPresent : 1;
   } m;
   ASN1T_ConnectingLane connectingLane;
   ASN1T_IntersectionReferenceID remoteIntersection;
   ASN1T_SignalGroupID signalGroup;
   ASN1T_RestrictionClassID userClass;
   ASN1T_LaneConnectionID connectionID;
   ASN1T_Connection ();
} ;

EXTERN int asn1PE_Connection (OSCTXT* pctxt, ASN1T_Connection* pvalue);

EXTERN int asn1PD_Connection (OSCTXT* pctxt, ASN1T_Connection* pvalue);

EXTERN int XmlEnc_Connection (OSCTXT* pctxt, ASN1T_Connection* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Connection (OSCTXT* pctxt, ASN1T_Connection* pvalue);

EXTERN int asn1JsonEnc_Connection (OSCTXT *pctxt, ASN1T_Connection *pvalue);

EXTERN int asn1JsonDec_Connection (OSCTXT *pctxt, ASN1T_Connection *pvalue);

EXTERN int asn1PrtToStrm_Connection (OSCTXT *pctxt, 
   const char* name, const ASN1T_Connection* pvalue);

EXTERN ASN1T_Connection* new_ASN1T_Connection (ASN1CType& ccobj);

EXTERN int asn1Init_Connection (ASN1T_Connection* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  ConnectsToList                                            */
/*                                                            */
/**************************************************************/
/*
ConnectsToList ::= SEQUENCE (SIZE (1..16)) OF Connection
*/
/* List of ASN1T_Connection */
typedef ASN1TSeqOfList ASN1T_ConnectsToList;

class EXTERN ASN1C_ConnectsToList :
public ASN1CSeqOfList
{
protected:
   ASN1T_ConnectsToList& msgData;
public:
   /**
    * Control class: ASN1C_ConnectsToList
    * Data class:    ASN1T_ConnectsToList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ConnectsToList (ASN1T_ConnectsToList& data);

   /**
    * Control class: ASN1C_ConnectsToList<br/>
    * Data class: ASN1T_ConnectsToList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ConnectsToList (OSRTMessageBufferIF& msgBuf
      , ASN1T_ConnectsToList& data);

   /**
    * Control class: ASN1C_ConnectsToList<br/>
    * Data class: ASN1T_ConnectsToList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_ConnectsToList (ASN1CType& ccobj, ASN1T_ConnectsToList& data);

   virtual ~ASN1C_ConnectsToList () {}

   /**
    * Data class: ASN1T_Connection<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_Connection* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_Connection.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_Connection* NewElement ();

   /**
    * Data class: ASN1T_Connection.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_Connection* AppendNewElement ();

private:
   ASN1C_ConnectsToList& operator= (const ASN1C_ConnectsToList&) {return *this;}
} ;

EXTERN int asn1PE_ConnectsToList (OSCTXT* pctxt, ASN1T_ConnectsToList* pvalue);

EXTERN int asn1PD_ConnectsToList (OSCTXT* pctxt, ASN1T_ConnectsToList* pvalue);

EXTERN int XmlEnc_ConnectsToList (OSCTXT* pctxt, ASN1T_ConnectsToList* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ConnectsToList (OSCTXT* pctxt, ASN1T_ConnectsToList* pvalue)
   ;

EXTERN int asn1JsonEnc_ConnectsToList (OSCTXT *pctxt, ASN1T_ConnectsToList *pvalue);

EXTERN int asn1JsonDec_ConnectsToList (OSCTXT *pctxt, ASN1T_ConnectsToList *pvalue);

EXTERN int asn1PrtToStrm_ConnectsToList (OSCTXT *pctxt, 
   const char* name, const ASN1T_ConnectsToList* pvalue);

EXTERN int asn1Init_ConnectsToList (ASN1T_ConnectsToList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ConnectsToList (OSCTXT *pctxt, ASN1T_ConnectsToList* pvalue);

/**************************************************************/
/*                                                            */
/*  OverlayLaneList                                           */
/*                                                            */
/**************************************************************/
/*
OverlayLaneList ::= SEQUENCE (SIZE (1..5)) OF LaneID
    The unique ID numbers for any lane object which have
    spatial paths that overlay (run on top of, and not
    simply cross with) the current lane.
    Such as a train path that overlays a motor vehicle
    lane object for a roadway segment.

*/
typedef struct EXTERN ASN1T_OverlayLaneList {
   OSUINT8 n;
   ASN1T_LaneID elem[5];
   ASN1T_OverlayLaneList () : n(0) {}
} ASN1T_OverlayLaneList;

class EXTERN ASN1C_OverlayLaneList :
public ASN1CType
{
protected:
   ASN1T_OverlayLaneList& msgData;
public:
   /**
    * Control class: ASN1C_OverlayLaneList
    * Data class:    ASN1T_OverlayLaneList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_OverlayLaneList (ASN1T_OverlayLaneList& data);

   /**
    * Control class: ASN1C_OverlayLaneList<br/>
    * Data class: ASN1T_OverlayLaneList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_OverlayLaneList (OSRTMessageBufferIF& msgBuf
      , ASN1T_OverlayLaneList& data);

   /**
    * Control class: ASN1C_OverlayLaneList<br/>
    * Data class: ASN1T_OverlayLaneList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_OverlayLaneList (ASN1CType& ccobj, ASN1T_OverlayLaneList& data);

   virtual ~ASN1C_OverlayLaneList () {}

private:
   ASN1C_OverlayLaneList& operator= (const ASN1C_OverlayLaneList&) {return *this;}
} ;

EXTERN int asn1PE_OverlayLaneList (OSCTXT* pctxt, ASN1T_OverlayLaneList* pvalue);

EXTERN int asn1PD_OverlayLaneList (OSCTXT* pctxt, ASN1T_OverlayLaneList* pvalue);

EXTERN int XmlEnc_OverlayLaneList (OSCTXT* pctxt, 
   ASN1T_OverlayLaneList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OverlayLaneList (OSCTXT* pctxt, ASN1T_OverlayLaneList* pvalue
   );

EXTERN int asn1JsonEnc_OverlayLaneList (OSCTXT *pctxt, ASN1T_OverlayLaneList *pvalue);

EXTERN int asn1JsonDec_OverlayLaneList (OSCTXT *pctxt, ASN1T_OverlayLaneList *pvalue);

EXTERN int asn1PrtToStrm_OverlayLaneList (OSCTXT *pctxt, 
   const char* name, const ASN1T_OverlayLaneList* pvalue);

EXTERN int asn1Init_OverlayLaneList (ASN1T_OverlayLaneList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  GenericLane_regional_element                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericLane'
*/
struct EXTERN ASN1T_GenericLane_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_GenericLane_regional_element (OSCTXT* pctxt, ASN1T_GenericLane_regional_element* pvalue);

EXTERN int asn1PD_GenericLane_regional_element (OSCTXT* pctxt, ASN1T_GenericLane_regional_element* pvalue);

EXTERN int XmlEnc_GenericLane_regional_element (OSCTXT* pctxt, 
   ASN1T_GenericLane_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GenericLane_regional_element (OSCTXT* pctxt, 
   ASN1T_GenericLane_regional_element* pvalue);

EXTERN int asn1JsonEnc_GenericLane_regional_element (OSCTXT *pctxt, ASN1T_GenericLane_regional_element *pvalue);

EXTERN int asn1JsonDec_GenericLane_regional_element (OSCTXT *pctxt, ASN1T_GenericLane_regional_element *pvalue);

EXTERN int asn1PrtToStrm_GenericLane_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_GenericLane_regional_element* pvalue);

EXTERN ASN1T_GenericLane_regional_element* 
   new_ASN1T_GenericLane_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_GenericLane_regional_element (
   ASN1T_GenericLane_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GenericLane_regional_element (OSCTXT *pctxt, 
   ASN1T_GenericLane_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericLane_regional                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericLane'
*/
/* List of ASN1T_GenericLane_regional_element */
typedef ASN1TSeqOfList ASN1T_GenericLane_regional;

class EXTERN ASN1C_GenericLane_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_GenericLane_regional& msgData;
public:
   /**
    * Control class: ASN1C_GenericLane_regional
    * Data class:    ASN1T_GenericLane_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_GenericLane_regional (ASN1T_GenericLane_regional& data);

   /**
    * Control class: ASN1C_GenericLane_regional<br/>
    * Data class: ASN1T_GenericLane_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_GenericLane_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_GenericLane_regional& data);

   /**
    * Control class: ASN1C_GenericLane_regional<br/>
    * Data class: ASN1T_GenericLane_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_GenericLane_regional (ASN1CType& ccobj
      , ASN1T_GenericLane_regional& data);

   virtual ~ASN1C_GenericLane_regional () {}

   /**
    * Data class: ASN1T_GenericLane_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GenericLane_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GenericLane_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GenericLane_regional_element* NewElement ();

   /**
    * Data class: ASN1T_GenericLane_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GenericLane_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_GenericLane_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_GenericLane_regional* pmatches);

private:
   ASN1C_GenericLane_regional& operator= (const ASN1C_GenericLane_regional&) {return *this;}
} ;

EXTERN int asn1PE_GenericLane_regional (OSCTXT* pctxt, ASN1T_GenericLane_regional* pvalue);

EXTERN int asn1PD_GenericLane_regional (OSCTXT* pctxt, ASN1T_GenericLane_regional* pvalue);

EXTERN int XmlEnc_GenericLane_regional (OSCTXT* pctxt, 
   ASN1T_GenericLane_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GenericLane_regional (OSCTXT* pctxt, 
   ASN1T_GenericLane_regional* pvalue);

EXTERN int asn1JsonEnc_GenericLane_regional (OSCTXT *pctxt, ASN1T_GenericLane_regional *pvalue);

EXTERN int asn1JsonDec_GenericLane_regional (OSCTXT *pctxt, ASN1T_GenericLane_regional *pvalue);

EXTERN int asn1PrtToStrm_GenericLane_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_GenericLane_regional* pvalue);

EXTERN int asn1Init_GenericLane_regional (ASN1T_GenericLane_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GenericLane_regional (OSCTXT *pctxt, 
   ASN1T_GenericLane_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericLane                                               */
/*                                                            */
/**************************************************************/
/*
GenericLane ::= SEQUENCE {
   laneID [0] LaneID,
                    -- The unique ID number assigned 
                    -- to this lane object
   name [1] DescriptiveName OPTIONAL,
                    -- often for debug use only 
                    -- but at times used to name ped crossings
   ingressApproach [2] ApproachID OPTIONAL, -- inbound
   egressApproach [3] ApproachID OPTIONAL, -- outbound
                    -- Approach IDs to which this lane belongs
   laneAttributes [4] LaneAttributes,
                    -- All Attribute information about 
                    -- the basic selected lane type
                    -- Directions of use, Geometric co-sharing
                    -- and Type Specific Attributes
                    -- These Attributes are 'lane - global' that is,
                    -- they are true for the entire length of the lane
   maneuvers [5] AllowedManeuvers OPTIONAL,
                    -- the permitted maneuvers for this lane
   nodeList [6] EXPLICIT NodeListXY,
                    -- Lane spatial path information as well as
                    -- various Attribute information along the node path  
                    -- Attributes found here are more general and may
                    -- come and go over the length of the lane.
   connectsTo [7] ConnectsToList OPTIONAL,
                    -- a list of other lanes and their signal group IDs
                    -- each connecting lane and its signal group ID
                    -- is given, therefore this element provides the
                    -- information formerly in "signalGroups" in prior
                    -- editions.
   overlays [8] OverlayLaneList OPTIONAL,
                    -- A list of any lanes which have spatial paths that
                    -- overlay (run on top of, and not simply cross) 
                    -- the path of this lane when used
   regional [9] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-GenericLane}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-GenericLane}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_GenericLane {
   struct {
      unsigned namePresent : 1;
      unsigned ingressApproachPresent : 1;
      unsigned egressApproachPresent : 1;
      unsigned maneuversPresent : 1;
      unsigned connectsToPresent : 1;
      unsigned overlaysPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_LaneID laneID;
   ASN1T_DescriptiveName name;
   ASN1T_ApproachID ingressApproach;
   ASN1T_ApproachID egressApproach;
   ASN1T_LaneAttributes laneAttributes;
   ASN1T_AllowedManeuvers maneuvers;
   ASN1T_NodeListXY nodeList;
   ASN1T_ConnectsToList connectsTo;
   ASN1T_OverlayLaneList overlays;
   ASN1T_GenericLane_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_GenericLane ();
} ;

EXTERN int asn1PE_GenericLane (OSCTXT* pctxt, ASN1T_GenericLane* pvalue);

EXTERN int asn1PD_GenericLane (OSCTXT* pctxt, ASN1T_GenericLane* pvalue);

EXTERN int XmlEnc_GenericLane (OSCTXT* pctxt, ASN1T_GenericLane* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GenericLane (OSCTXT* pctxt, ASN1T_GenericLane* pvalue);

EXTERN int asn1JsonEnc_GenericLane (OSCTXT *pctxt, ASN1T_GenericLane *pvalue);

EXTERN int asn1JsonDec_GenericLane (OSCTXT *pctxt, ASN1T_GenericLane *pvalue);

EXTERN int asn1PrtToStrm_GenericLane (OSCTXT *pctxt, 
   const char* name, const ASN1T_GenericLane* pvalue);

EXTERN ASN1T_GenericLane* new_ASN1T_GenericLane (ASN1CType& ccobj);

EXTERN int asn1Init_GenericLane (ASN1T_GenericLane* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GenericLane (OSCTXT *pctxt, ASN1T_GenericLane* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneList                                                  */
/*                                                            */
/**************************************************************/
/*
LaneList ::= SEQUENCE (SIZE (1..255)) OF GenericLane
*/
/* List of ASN1T_GenericLane */
typedef ASN1TSeqOfList ASN1T_LaneList;

class EXTERN ASN1C_LaneList :
public ASN1CSeqOfList
{
protected:
   ASN1T_LaneList& msgData;
public:
   /**
    * Control class: ASN1C_LaneList
    * Data class:    ASN1T_LaneList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LaneList (ASN1T_LaneList& data);

   /**
    * Control class: ASN1C_LaneList<br/>
    * Data class: ASN1T_LaneList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LaneList (OSRTMessageBufferIF& msgBuf, ASN1T_LaneList& data);

   /**
    * Control class: ASN1C_LaneList<br/>
    * Data class: ASN1T_LaneList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_LaneList (ASN1CType& ccobj, ASN1T_LaneList& data);

   virtual ~ASN1C_LaneList () {}

   /**
    * Data class: ASN1T_GenericLane<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GenericLane* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GenericLane.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GenericLane* NewElement ();

   /**
    * Data class: ASN1T_GenericLane.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GenericLane* AppendNewElement ();

private:
   ASN1C_LaneList& operator= (const ASN1C_LaneList&) {return *this;}
} ;

EXTERN int asn1PE_LaneList (OSCTXT* pctxt, ASN1T_LaneList* pvalue);

EXTERN int asn1PD_LaneList (OSCTXT* pctxt, ASN1T_LaneList* pvalue);

EXTERN int XmlEnc_LaneList (OSCTXT* pctxt, ASN1T_LaneList* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LaneList (OSCTXT* pctxt, ASN1T_LaneList* pvalue);

EXTERN int asn1JsonEnc_LaneList (OSCTXT *pctxt, ASN1T_LaneList *pvalue);

EXTERN int asn1JsonDec_LaneList (OSCTXT *pctxt, ASN1T_LaneList *pvalue);

EXTERN int asn1PrtToStrm_LaneList (OSCTXT *pctxt, 
   const char* name, const ASN1T_LaneList* pvalue);

EXTERN int asn1Init_LaneList (ASN1T_LaneList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LaneList (OSCTXT *pctxt, ASN1T_LaneList* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalControlZone_zone                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalControlZone'
*/
struct EXTERN ASN1T_SignalControlZone_zone {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SignalControlZone_zone (OSCTXT* pctxt, ASN1T_SignalControlZone_zone* pvalue);

EXTERN int asn1PD_SignalControlZone_zone (OSCTXT* pctxt, ASN1T_SignalControlZone_zone* pvalue);

EXTERN int XmlEnc_SignalControlZone_zone (OSCTXT* pctxt, 
   ASN1T_SignalControlZone_zone* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalControlZone_zone (OSCTXT* pctxt, 
   ASN1T_SignalControlZone_zone* pvalue);

EXTERN int asn1JsonEnc_SignalControlZone_zone (OSCTXT *pctxt, ASN1T_SignalControlZone_zone *pvalue);

EXTERN int asn1JsonDec_SignalControlZone_zone (OSCTXT *pctxt, ASN1T_SignalControlZone_zone *pvalue);

EXTERN int asn1PrtToStrm_SignalControlZone_zone (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalControlZone_zone* pvalue);

EXTERN ASN1T_SignalControlZone_zone* 
   new_ASN1T_SignalControlZone_zone (ASN1CType& ccobj);

EXTERN int asn1Init_SignalControlZone_zone (ASN1T_SignalControlZone_zone* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalControlZone_zone (OSCTXT *pctxt, 
   ASN1T_SignalControlZone_zone* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalControlZone                                         */
/*                                                            */
/**************************************************************/
/*
SignalControlZone ::= SEQUENCE {
   zone [0] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-SignalControlZone}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-SignalControlZone}{@regionId})
   },
   ...
}
*/
struct EXTERN ASN1T_SignalControlZone {
   ASN1T_SignalControlZone_zone zone;
   ASN1TSeqExt extElem1;
} ;

EXTERN int asn1PE_SignalControlZone (OSCTXT* pctxt, ASN1T_SignalControlZone* pvalue);

EXTERN int asn1PD_SignalControlZone (OSCTXT* pctxt, ASN1T_SignalControlZone* pvalue);

EXTERN int XmlEnc_SignalControlZone (OSCTXT* pctxt, 
   ASN1T_SignalControlZone* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalControlZone (OSCTXT* pctxt, 
   ASN1T_SignalControlZone* pvalue);

EXTERN int asn1JsonEnc_SignalControlZone (OSCTXT *pctxt, ASN1T_SignalControlZone *pvalue);

EXTERN int asn1JsonDec_SignalControlZone (OSCTXT *pctxt, ASN1T_SignalControlZone *pvalue);

EXTERN int asn1PrtToStrm_SignalControlZone (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalControlZone* pvalue);

EXTERN ASN1T_SignalControlZone* new_ASN1T_SignalControlZone (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_SignalControlZone (ASN1T_SignalControlZone* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalControlZone (OSCTXT *pctxt, 
   ASN1T_SignalControlZone* pvalue);

/**************************************************************/
/*                                                            */
/*  PreemptPriorityList                                       */
/*                                                            */
/**************************************************************/
/*
PreemptPriorityList ::= SEQUENCE (SIZE (1..32)) OF SignalControlZone
*/
/* List of ASN1T_SignalControlZone */
typedef ASN1TSeqOfList ASN1T_PreemptPriorityList;

class EXTERN ASN1C_PreemptPriorityList :
public ASN1CSeqOfList
{
protected:
   ASN1T_PreemptPriorityList& msgData;
public:
   /**
    * Control class: ASN1C_PreemptPriorityList
    * Data class:    ASN1T_PreemptPriorityList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PreemptPriorityList (ASN1T_PreemptPriorityList& data);

   /**
    * Control class: ASN1C_PreemptPriorityList<br/>
    * Data class: ASN1T_PreemptPriorityList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PreemptPriorityList (OSRTMessageBufferIF& msgBuf
      , ASN1T_PreemptPriorityList& data);

   /**
    * Control class: ASN1C_PreemptPriorityList<br/>
    * Data class: ASN1T_PreemptPriorityList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_PreemptPriorityList (ASN1CType& ccobj, ASN1T_PreemptPriorityList& data
      );

   virtual ~ASN1C_PreemptPriorityList () {}

   /**
    * Data class: ASN1T_SignalControlZone<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalControlZone* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalControlZone.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalControlZone* NewElement ();

   /**
    * Data class: ASN1T_SignalControlZone.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalControlZone* AppendNewElement ();

private:
   ASN1C_PreemptPriorityList& operator= (const ASN1C_PreemptPriorityList&) {return *this;}
} ;

EXTERN int asn1PE_PreemptPriorityList (OSCTXT* pctxt, ASN1T_PreemptPriorityList* pvalue);

EXTERN int asn1PD_PreemptPriorityList (OSCTXT* pctxt, ASN1T_PreemptPriorityList* pvalue);

EXTERN int XmlEnc_PreemptPriorityList (OSCTXT* pctxt, 
   ASN1T_PreemptPriorityList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PreemptPriorityList (OSCTXT* pctxt, 
   ASN1T_PreemptPriorityList* pvalue);

EXTERN int asn1JsonEnc_PreemptPriorityList (OSCTXT *pctxt, ASN1T_PreemptPriorityList *pvalue);

EXTERN int asn1JsonDec_PreemptPriorityList (OSCTXT *pctxt, ASN1T_PreemptPriorityList *pvalue);

EXTERN int asn1PrtToStrm_PreemptPriorityList (OSCTXT *pctxt, 
   const char* name, const ASN1T_PreemptPriorityList* pvalue);

EXTERN int asn1Init_PreemptPriorityList (ASN1T_PreemptPriorityList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PreemptPriorityList (OSCTXT *pctxt, 
   ASN1T_PreemptPriorityList* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometry_regional_element                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionGeometry'
*/
struct EXTERN ASN1T_IntersectionGeometry_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_IntersectionGeometry_regional_element (OSCTXT* pctxt, ASN1T_IntersectionGeometry_regional_element* pvalue);

EXTERN int asn1PD_IntersectionGeometry_regional_element (OSCTXT* pctxt, ASN1T_IntersectionGeometry_regional_element* pvalue);

EXTERN int XmlEnc_IntersectionGeometry_regional_element (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometry_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionGeometry_regional_element (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometry_regional_element* pvalue);

EXTERN int asn1JsonEnc_IntersectionGeometry_regional_element (OSCTXT *pctxt, ASN1T_IntersectionGeometry_regional_element *pvalue);

EXTERN int asn1JsonDec_IntersectionGeometry_regional_element (OSCTXT *pctxt, ASN1T_IntersectionGeometry_regional_element *pvalue);

EXTERN int asn1PrtToStrm_IntersectionGeometry_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionGeometry_regional_element* pvalue);

EXTERN ASN1T_IntersectionGeometry_regional_element* 
   new_ASN1T_IntersectionGeometry_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_IntersectionGeometry_regional_element (
   ASN1T_IntersectionGeometry_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionGeometry_regional_element (OSCTXT *pctxt, 
   ASN1T_IntersectionGeometry_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometry_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionGeometry'
*/
/* List of ASN1T_IntersectionGeometry_regional_element */
typedef ASN1TSeqOfList ASN1T_IntersectionGeometry_regional;

class EXTERN ASN1C_IntersectionGeometry_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_IntersectionGeometry_regional& msgData;
public:
   /**
    * Control class: ASN1C_IntersectionGeometry_regional
    * Data class:    ASN1T_IntersectionGeometry_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_IntersectionGeometry_regional
       (ASN1T_IntersectionGeometry_regional& data);

   /**
    * Control class: ASN1C_IntersectionGeometry_regional<br/>
    * Data class: ASN1T_IntersectionGeometry_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_IntersectionGeometry_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_IntersectionGeometry_regional& data);

   /**
    * Control class: ASN1C_IntersectionGeometry_regional<br/>
    * Data class: ASN1T_IntersectionGeometry_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_IntersectionGeometry_regional (ASN1CType& ccobj
      , ASN1T_IntersectionGeometry_regional& data);

   virtual ~ASN1C_IntersectionGeometry_regional () {}

   /**
    * Data class: ASN1T_IntersectionGeometry_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_IntersectionGeometry_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_IntersectionGeometry_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_IntersectionGeometry_regional_element* NewElement ();

   /**
    * Data class: ASN1T_IntersectionGeometry_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_IntersectionGeometry_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_IntersectionGeometry_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_IntersectionGeometry_regional* pmatches);

private:
   ASN1C_IntersectionGeometry_regional& operator= (const ASN1C_IntersectionGeometry_regional&) {return *this;}
} ;

EXTERN int asn1PE_IntersectionGeometry_regional (OSCTXT* pctxt, ASN1T_IntersectionGeometry_regional* pvalue);

EXTERN int asn1PD_IntersectionGeometry_regional (OSCTXT* pctxt, ASN1T_IntersectionGeometry_regional* pvalue);

EXTERN int XmlEnc_IntersectionGeometry_regional (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometry_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionGeometry_regional (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometry_regional* pvalue);

EXTERN int asn1JsonEnc_IntersectionGeometry_regional (OSCTXT *pctxt, ASN1T_IntersectionGeometry_regional *pvalue);

EXTERN int asn1JsonDec_IntersectionGeometry_regional (OSCTXT *pctxt, ASN1T_IntersectionGeometry_regional *pvalue);

EXTERN int asn1PrtToStrm_IntersectionGeometry_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionGeometry_regional* pvalue);

EXTERN int asn1Init_IntersectionGeometry_regional (
   ASN1T_IntersectionGeometry_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionGeometry_regional (OSCTXT *pctxt, 
   ASN1T_IntersectionGeometry_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometry                                      */
/*                                                            */
/**************************************************************/
/*
IntersectionGeometry ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
                            -- For debug use only
   id [1] IntersectionReferenceID,
                            -- A globally unique value set, 
                            -- consisting of a regionID and 
                            -- intersection ID assignment
   revision [2] MsgCount,
   -- Required default values about lane descriptions follow
   refPoint [3] Position3D, -- The reference from which subsequent 
                            -- data points are offset until a new
                            -- point is used. 
   laneWidth [4] LaneWidth OPTIONAL,
                            -- Reference width used by all subsequent 
                            -- lanes unless a new width is given  
   speedLimits [5] SpeedLimitList OPTIONAL,
                            -- Reference regulatory speed limits
                            -- used by all subsequent 
                            -- lanes unless a new speed is given 
                            -- See Section 11 for converting and 
                            -- translating speed expressed in mph 
                            -- into units of m/s
   -- Complete details regarding each lane type in this intersection
   laneSet [6] LaneList, -- Data about one or more lanes
                            -- (all lane data is found here)
   -- Data describing how to use and request preemption and
   -- priority services from this intersection (if supported)
   -- NOTE Additonal data may be added in the next release of the 
   -- standard at this point to handle this concept
   preemptPriorityData [7] PreemptPriorityList OPTIONAL,
                           -- data about one or more regional
                           -- preempt or priority zones 
   regional [8] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-IntersectionGeometry}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-IntersectionGeometry}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_IntersectionGeometry {
   struct {
      unsigned namePresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned speedLimitsPresent : 1;
      unsigned preemptPriorityDataPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_DescriptiveName name;
   ASN1T_IntersectionReferenceID id;
   ASN1T_MsgCount revision;
   ASN1T_Position3D refPoint;
   ASN1T_LaneWidth laneWidth;
   ASN1T_SpeedLimitList speedLimits;
   ASN1T_LaneList laneSet;
   ASN1T_PreemptPriorityList preemptPriorityData;
   ASN1T_IntersectionGeometry_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_IntersectionGeometry ();
} ;

EXTERN int asn1PE_IntersectionGeometry (OSCTXT* pctxt, ASN1T_IntersectionGeometry* pvalue);

EXTERN int asn1PD_IntersectionGeometry (OSCTXT* pctxt, ASN1T_IntersectionGeometry* pvalue);

EXTERN int XmlEnc_IntersectionGeometry (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometry* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionGeometry (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometry* pvalue);

EXTERN int asn1JsonEnc_IntersectionGeometry (OSCTXT *pctxt, ASN1T_IntersectionGeometry *pvalue);

EXTERN int asn1JsonDec_IntersectionGeometry (OSCTXT *pctxt, ASN1T_IntersectionGeometry *pvalue);

EXTERN int asn1PrtToStrm_IntersectionGeometry (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionGeometry* pvalue);

EXTERN ASN1T_IntersectionGeometry* 
   new_ASN1T_IntersectionGeometry (ASN1CType& ccobj);

EXTERN int asn1Init_IntersectionGeometry (ASN1T_IntersectionGeometry* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionGeometry (OSCTXT *pctxt, 
   ASN1T_IntersectionGeometry* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometryList                                  */
/*                                                            */
/**************************************************************/
/*
IntersectionGeometryList ::= SEQUENCE (SIZE (1..32)) OF IntersectionGeometry
*/
/* List of ASN1T_IntersectionGeometry */
typedef ASN1TSeqOfList ASN1T_IntersectionGeometryList;

class EXTERN ASN1C_IntersectionGeometryList :
public ASN1CSeqOfList
{
protected:
   ASN1T_IntersectionGeometryList& msgData;
public:
   /**
    * Control class: ASN1C_IntersectionGeometryList
    * Data class:    ASN1T_IntersectionGeometryList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_IntersectionGeometryList (ASN1T_IntersectionGeometryList& data);

   /**
    * Control class: ASN1C_IntersectionGeometryList<br/>
    * Data class: ASN1T_IntersectionGeometryList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_IntersectionGeometryList (OSRTMessageBufferIF& msgBuf
      , ASN1T_IntersectionGeometryList& data);

   /**
    * Control class: ASN1C_IntersectionGeometryList<br/>
    * Data class: ASN1T_IntersectionGeometryList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_IntersectionGeometryList (ASN1CType& ccobj
      , ASN1T_IntersectionGeometryList& data);

   virtual ~ASN1C_IntersectionGeometryList () {}

   /**
    * Data class: ASN1T_IntersectionGeometry<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_IntersectionGeometry* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_IntersectionGeometry.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_IntersectionGeometry* NewElement ();

   /**
    * Data class: ASN1T_IntersectionGeometry.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_IntersectionGeometry* AppendNewElement ();

private:
   ASN1C_IntersectionGeometryList& operator= (const ASN1C_IntersectionGeometryList&) {return *this;}
} ;

EXTERN int asn1PE_IntersectionGeometryList (OSCTXT* pctxt, ASN1T_IntersectionGeometryList* pvalue);

EXTERN int asn1PD_IntersectionGeometryList (OSCTXT* pctxt, ASN1T_IntersectionGeometryList* pvalue);

EXTERN int XmlEnc_IntersectionGeometryList (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometryList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionGeometryList (OSCTXT* pctxt, 
   ASN1T_IntersectionGeometryList* pvalue);

EXTERN int asn1JsonEnc_IntersectionGeometryList (OSCTXT *pctxt, ASN1T_IntersectionGeometryList *pvalue);

EXTERN int asn1JsonDec_IntersectionGeometryList (OSCTXT *pctxt, ASN1T_IntersectionGeometryList *pvalue);

EXTERN int asn1PrtToStrm_IntersectionGeometryList (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionGeometryList* pvalue);

EXTERN int asn1Init_IntersectionGeometryList (ASN1T_IntersectionGeometryList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionGeometryList (OSCTXT *pctxt, 
   ASN1T_IntersectionGeometryList* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegmentReferenceID                                    */
/*                                                            */
/**************************************************************/
/*
RoadSegmentReferenceID ::= SEQUENCE {
   region [0] RoadRegulatorID OPTIONAL,
           -- a globally unique regional assignment value
           -- typically assigned to a regional DOT authority
           -- the value zero shall be used for testing needs
   id [1] RoadSegmentID
           -- a unique mapping to the road segment
           -- in question within the above region of use
           -- during its period of assignment and use
           -- note that unlike intersectionID values, 
           -- this value can be reused by the region
}
*/
struct EXTERN ASN1T_RoadSegmentReferenceID {
   struct {
      unsigned regionPresent : 1;
   } m;
   ASN1T_RoadRegulatorID region;
   ASN1T_RoadSegmentID id;
   ASN1T_RoadSegmentReferenceID ();
} ;

EXTERN int asn1PE_RoadSegmentReferenceID (OSCTXT* pctxt, ASN1T_RoadSegmentReferenceID* pvalue);

EXTERN int asn1PD_RoadSegmentReferenceID (OSCTXT* pctxt, ASN1T_RoadSegmentReferenceID* pvalue);

EXTERN int XmlEnc_RoadSegmentReferenceID (OSCTXT* pctxt, 
   ASN1T_RoadSegmentReferenceID* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSegmentReferenceID (OSCTXT* pctxt, 
   ASN1T_RoadSegmentReferenceID* pvalue);

EXTERN int asn1JsonEnc_RoadSegmentReferenceID (OSCTXT *pctxt, ASN1T_RoadSegmentReferenceID *pvalue);

EXTERN int asn1JsonDec_RoadSegmentReferenceID (OSCTXT *pctxt, ASN1T_RoadSegmentReferenceID *pvalue);

EXTERN int asn1PrtToStrm_RoadSegmentReferenceID (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSegmentReferenceID* pvalue);

EXTERN ASN1T_RoadSegmentReferenceID* 
   new_ASN1T_RoadSegmentReferenceID (ASN1CType& ccobj);

EXTERN int asn1Init_RoadSegmentReferenceID (ASN1T_RoadSegmentReferenceID* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  RoadLaneSetList                                           */
/*                                                            */
/**************************************************************/
/*
RoadLaneSetList ::= SEQUENCE (SIZE (1..255)) OF GenericLane
*/
/* List of ASN1T_GenericLane */
typedef ASN1TSeqOfList ASN1T_RoadLaneSetList;

class EXTERN ASN1C_RoadLaneSetList :
public ASN1CSeqOfList
{
protected:
   ASN1T_RoadLaneSetList& msgData;
public:
   /**
    * Control class: ASN1C_RoadLaneSetList
    * Data class:    ASN1T_RoadLaneSetList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RoadLaneSetList (ASN1T_RoadLaneSetList& data);

   /**
    * Control class: ASN1C_RoadLaneSetList<br/>
    * Data class: ASN1T_RoadLaneSetList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RoadLaneSetList (OSRTMessageBufferIF& msgBuf
      , ASN1T_RoadLaneSetList& data);

   /**
    * Control class: ASN1C_RoadLaneSetList<br/>
    * Data class: ASN1T_RoadLaneSetList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RoadLaneSetList (ASN1CType& ccobj, ASN1T_RoadLaneSetList& data);

   virtual ~ASN1C_RoadLaneSetList () {}

   /**
    * Data class: ASN1T_GenericLane<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GenericLane* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GenericLane.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GenericLane* NewElement ();

   /**
    * Data class: ASN1T_GenericLane.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GenericLane* AppendNewElement ();

private:
   ASN1C_RoadLaneSetList& operator= (const ASN1C_RoadLaneSetList&) {return *this;}
} ;

EXTERN int asn1PE_RoadLaneSetList (OSCTXT* pctxt, ASN1T_RoadLaneSetList* pvalue);

EXTERN int asn1PD_RoadLaneSetList (OSCTXT* pctxt, ASN1T_RoadLaneSetList* pvalue);

EXTERN int XmlEnc_RoadLaneSetList (OSCTXT* pctxt, 
   ASN1T_RoadLaneSetList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadLaneSetList (OSCTXT* pctxt, ASN1T_RoadLaneSetList* pvalue
   );

EXTERN int asn1JsonEnc_RoadLaneSetList (OSCTXT *pctxt, ASN1T_RoadLaneSetList *pvalue);

EXTERN int asn1JsonDec_RoadLaneSetList (OSCTXT *pctxt, ASN1T_RoadLaneSetList *pvalue);

EXTERN int asn1PrtToStrm_RoadLaneSetList (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadLaneSetList* pvalue);

EXTERN int asn1Init_RoadLaneSetList (ASN1T_RoadLaneSetList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadLaneSetList (OSCTXT *pctxt, ASN1T_RoadLaneSetList* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegment_regional_element                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RoadSegment'
*/
struct EXTERN ASN1T_RoadSegment_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_RoadSegment_regional_element (OSCTXT* pctxt, ASN1T_RoadSegment_regional_element* pvalue);

EXTERN int asn1PD_RoadSegment_regional_element (OSCTXT* pctxt, ASN1T_RoadSegment_regional_element* pvalue);

EXTERN int XmlEnc_RoadSegment_regional_element (OSCTXT* pctxt, 
   ASN1T_RoadSegment_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSegment_regional_element (OSCTXT* pctxt, 
   ASN1T_RoadSegment_regional_element* pvalue);

EXTERN int asn1JsonEnc_RoadSegment_regional_element (OSCTXT *pctxt, ASN1T_RoadSegment_regional_element *pvalue);

EXTERN int asn1JsonDec_RoadSegment_regional_element (OSCTXT *pctxt, ASN1T_RoadSegment_regional_element *pvalue);

EXTERN int asn1PrtToStrm_RoadSegment_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSegment_regional_element* pvalue);

EXTERN ASN1T_RoadSegment_regional_element* 
   new_ASN1T_RoadSegment_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_RoadSegment_regional_element (
   ASN1T_RoadSegment_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSegment_regional_element (OSCTXT *pctxt, 
   ASN1T_RoadSegment_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegment_regional                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RoadSegment'
*/
/* List of ASN1T_RoadSegment_regional_element */
typedef ASN1TSeqOfList ASN1T_RoadSegment_regional;

class EXTERN ASN1C_RoadSegment_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_RoadSegment_regional& msgData;
public:
   /**
    * Control class: ASN1C_RoadSegment_regional
    * Data class:    ASN1T_RoadSegment_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RoadSegment_regional (ASN1T_RoadSegment_regional& data);

   /**
    * Control class: ASN1C_RoadSegment_regional<br/>
    * Data class: ASN1T_RoadSegment_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RoadSegment_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_RoadSegment_regional& data);

   /**
    * Control class: ASN1C_RoadSegment_regional<br/>
    * Data class: ASN1T_RoadSegment_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RoadSegment_regional (ASN1CType& ccobj
      , ASN1T_RoadSegment_regional& data);

   virtual ~ASN1C_RoadSegment_regional () {}

   /**
    * Data class: ASN1T_RoadSegment_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RoadSegment_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RoadSegment_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RoadSegment_regional_element* NewElement ();

   /**
    * Data class: ASN1T_RoadSegment_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RoadSegment_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_RoadSegment_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_RoadSegment_regional* pmatches);

private:
   ASN1C_RoadSegment_regional& operator= (const ASN1C_RoadSegment_regional&) {return *this;}
} ;

EXTERN int asn1PE_RoadSegment_regional (OSCTXT* pctxt, ASN1T_RoadSegment_regional* pvalue);

EXTERN int asn1PD_RoadSegment_regional (OSCTXT* pctxt, ASN1T_RoadSegment_regional* pvalue);

EXTERN int XmlEnc_RoadSegment_regional (OSCTXT* pctxt, 
   ASN1T_RoadSegment_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSegment_regional (OSCTXT* pctxt, 
   ASN1T_RoadSegment_regional* pvalue);

EXTERN int asn1JsonEnc_RoadSegment_regional (OSCTXT *pctxt, ASN1T_RoadSegment_regional *pvalue);

EXTERN int asn1JsonDec_RoadSegment_regional (OSCTXT *pctxt, ASN1T_RoadSegment_regional *pvalue);

EXTERN int asn1PrtToStrm_RoadSegment_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSegment_regional* pvalue);

EXTERN int asn1Init_RoadSegment_regional (ASN1T_RoadSegment_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSegment_regional (OSCTXT *pctxt, 
   ASN1T_RoadSegment_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegment                                               */
/*                                                            */
/**************************************************************/
/*
RoadSegment ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
   id [1] RoadSegmentReferenceID,
                           -- a globally unique value for the segment
   revision [2] MsgCount,
   -- Required default values about the descriptions to follow
   refPoint [3] Position3D, -- the reference from which subsequent
                           -- data points are offset until a new
                           -- point is used.
   laneWidth [4] LaneWidth OPTIONAL,
                            -- Reference width used by all subsequent 
                            -- lanes unless a new width is given  
   speedLimits [5] SpeedLimitList OPTIONAL,
                            -- Reference regulatory speed limits
                            -- used by all subsequent 
                            -- lanes unless a new speed is given   
                            -- See Section 11 for converting and  
                            -- translating speed expressed in mph 
                            -- into units of m/s
   -- Data describing disruptions in the RoadSegment
   -- such as work zones etc will be added here;
   -- in the US the SAE ITIS codes would be used here
   -- The details regarding each lane type in the RoadSegment
   roadLaneSet [6] RoadLaneSetList,
   regional [7] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-RoadSegment}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-RoadSegment}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_RoadSegment {
   struct {
      unsigned namePresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned speedLimitsPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_DescriptiveName name;
   ASN1T_RoadSegmentReferenceID id;
   ASN1T_MsgCount revision;
   ASN1T_Position3D refPoint;
   ASN1T_LaneWidth laneWidth;
   ASN1T_SpeedLimitList speedLimits;
   ASN1T_RoadLaneSetList roadLaneSet;
   ASN1T_RoadSegment_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_RoadSegment ();
} ;

EXTERN int asn1PE_RoadSegment (OSCTXT* pctxt, ASN1T_RoadSegment* pvalue);

EXTERN int asn1PD_RoadSegment (OSCTXT* pctxt, ASN1T_RoadSegment* pvalue);

EXTERN int XmlEnc_RoadSegment (OSCTXT* pctxt, ASN1T_RoadSegment* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSegment (OSCTXT* pctxt, ASN1T_RoadSegment* pvalue);

EXTERN int asn1JsonEnc_RoadSegment (OSCTXT *pctxt, ASN1T_RoadSegment *pvalue);

EXTERN int asn1JsonDec_RoadSegment (OSCTXT *pctxt, ASN1T_RoadSegment *pvalue);

EXTERN int asn1PrtToStrm_RoadSegment (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSegment* pvalue);

EXTERN ASN1T_RoadSegment* new_ASN1T_RoadSegment (ASN1CType& ccobj);

EXTERN int asn1Init_RoadSegment (ASN1T_RoadSegment* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSegment (OSCTXT *pctxt, ASN1T_RoadSegment* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegmentList                                           */
/*                                                            */
/**************************************************************/
/*
RoadSegmentList ::= SEQUENCE (SIZE (1..32)) OF RoadSegment
*/
/* List of ASN1T_RoadSegment */
typedef ASN1TSeqOfList ASN1T_RoadSegmentList;

class EXTERN ASN1C_RoadSegmentList :
public ASN1CSeqOfList
{
protected:
   ASN1T_RoadSegmentList& msgData;
public:
   /**
    * Control class: ASN1C_RoadSegmentList
    * Data class:    ASN1T_RoadSegmentList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RoadSegmentList (ASN1T_RoadSegmentList& data);

   /**
    * Control class: ASN1C_RoadSegmentList<br/>
    * Data class: ASN1T_RoadSegmentList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RoadSegmentList (OSRTMessageBufferIF& msgBuf
      , ASN1T_RoadSegmentList& data);

   /**
    * Control class: ASN1C_RoadSegmentList<br/>
    * Data class: ASN1T_RoadSegmentList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RoadSegmentList (ASN1CType& ccobj, ASN1T_RoadSegmentList& data);

   virtual ~ASN1C_RoadSegmentList () {}

   /**
    * Data class: ASN1T_RoadSegment<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RoadSegment* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RoadSegment.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RoadSegment* NewElement ();

   /**
    * Data class: ASN1T_RoadSegment.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RoadSegment* AppendNewElement ();

private:
   ASN1C_RoadSegmentList& operator= (const ASN1C_RoadSegmentList&) {return *this;}
} ;

EXTERN int asn1PE_RoadSegmentList (OSCTXT* pctxt, ASN1T_RoadSegmentList* pvalue);

EXTERN int asn1PD_RoadSegmentList (OSCTXT* pctxt, ASN1T_RoadSegmentList* pvalue);

EXTERN int XmlEnc_RoadSegmentList (OSCTXT* pctxt, 
   ASN1T_RoadSegmentList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSegmentList (OSCTXT* pctxt, ASN1T_RoadSegmentList* pvalue
   );

EXTERN int asn1JsonEnc_RoadSegmentList (OSCTXT *pctxt, ASN1T_RoadSegmentList *pvalue);

EXTERN int asn1JsonDec_RoadSegmentList (OSCTXT *pctxt, ASN1T_RoadSegmentList *pvalue);

EXTERN int asn1PrtToStrm_RoadSegmentList (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSegmentList* pvalue);

EXTERN int asn1Init_RoadSegmentList (ASN1T_RoadSegmentList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSegmentList (OSCTXT *pctxt, ASN1T_RoadSegmentList* pvalue);

/**************************************************************/
/*                                                            */
/*  DataParameters                                            */
/*                                                            */
/**************************************************************/
/*
DataParameters ::= SEQUENCE {
   processMethod [0] IA5String (SIZE (1..255)) OPTIONAL,
   processAgency [1] IA5String (SIZE (1..255)) OPTIONAL,
   lastCheckedDate [2] IA5String (SIZE (1..255)) OPTIONAL,
   geoidUsed [3] IA5String (SIZE (1..255)) OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_DataParameters {
   struct {
      unsigned processMethodPresent : 1;
      unsigned processAgencyPresent : 1;
      unsigned lastCheckedDatePresent : 1;
      unsigned geoidUsedPresent : 1;
   } m;
   const char* processMethod;
   const char* processAgency;
   const char* lastCheckedDate;
   const char* geoidUsed;
   ASN1TSeqExt extElem1;
   ASN1T_DataParameters ();
} ;

EXTERN int asn1PE_DataParameters (OSCTXT* pctxt, ASN1T_DataParameters* pvalue);

EXTERN int asn1PD_DataParameters (OSCTXT* pctxt, ASN1T_DataParameters* pvalue);

EXTERN int XmlEnc_DataParameters (OSCTXT* pctxt, ASN1T_DataParameters* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DataParameters (OSCTXT* pctxt, ASN1T_DataParameters* pvalue)
   ;

EXTERN int asn1JsonEnc_DataParameters (OSCTXT *pctxt, ASN1T_DataParameters *pvalue);

EXTERN int asn1JsonDec_DataParameters (OSCTXT *pctxt, ASN1T_DataParameters *pvalue);

EXTERN int asn1PrtToStrm_DataParameters (OSCTXT *pctxt, 
   const char* name, const ASN1T_DataParameters* pvalue);

EXTERN ASN1T_DataParameters* new_ASN1T_DataParameters (ASN1CType& ccobj);

EXTERN int asn1Init_DataParameters (ASN1T_DataParameters* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_DataParameters (OSCTXT *pctxt, ASN1T_DataParameters* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserType_regional_element                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RestrictionUserType'
*/
struct EXTERN ASN1T_RestrictionUserType_regional_element {
   ASN1T_RegionId regionId;
   struct  {
      /**
       * information object selector
       */
      Reg_RestrictionUserType::TVALUE t;

      /**
       * Reg-RestrictionUserType information objects
       */
      union {
         /**
          * id: addGrpC
          */
         struct ASN1T_RestrictionUserType_addGrpC *_Reg_RestrictionUserType_addGrpC;

         ASN1TOpenType* extElem1;
      } u;
   } regExtValue;
   ASN1T_RestrictionUserType_regional_element ();
} ;

EXTERN int asn1PE_RestrictionUserType_regional_element (OSCTXT* pctxt, ASN1T_RestrictionUserType_regional_element* pvalue);

EXTERN int asn1PD_RestrictionUserType_regional_element (OSCTXT* pctxt, ASN1T_RestrictionUserType_regional_element* pvalue);

EXTERN int XmlEnc_RestrictionUserType_regional_element (OSCTXT* pctxt, 
   ASN1T_RestrictionUserType_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionUserType_regional_element (OSCTXT* pctxt, 
   ASN1T_RestrictionUserType_regional_element* pvalue);

EXTERN int asn1JsonEnc_RestrictionUserType_regional_element (OSCTXT *pctxt, ASN1T_RestrictionUserType_regional_element *pvalue);

EXTERN int asn1JsonDec_RestrictionUserType_regional_element (OSCTXT *pctxt, ASN1T_RestrictionUserType_regional_element *pvalue);

EXTERN int asn1PrtToStrm_RestrictionUserType_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionUserType_regional_element* pvalue);

EXTERN ASN1T_RestrictionUserType_regional_element* 
   new_ASN1T_RestrictionUserType_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_RestrictionUserType_regional_element (
   ASN1T_RestrictionUserType_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RestrictionUserType_regional_element (OSCTXT *pctxt, 
   ASN1T_RestrictionUserType_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserType_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RestrictionUserType'
*/
/* List of ASN1T_RestrictionUserType_regional_element */
typedef ASN1TSeqOfList ASN1T_RestrictionUserType_regional;

class EXTERN ASN1C_RestrictionUserType_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_RestrictionUserType_regional& msgData;
public:
   /**
    * Control class: ASN1C_RestrictionUserType_regional
    * Data class:    ASN1T_RestrictionUserType_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RestrictionUserType_regional
       (ASN1T_RestrictionUserType_regional& data);

   /**
    * Control class: ASN1C_RestrictionUserType_regional<br/>
    * Data class: ASN1T_RestrictionUserType_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RestrictionUserType_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_RestrictionUserType_regional& data);

   /**
    * Control class: ASN1C_RestrictionUserType_regional<br/>
    * Data class: ASN1T_RestrictionUserType_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RestrictionUserType_regional (ASN1CType& ccobj
      , ASN1T_RestrictionUserType_regional& data);

   virtual ~ASN1C_RestrictionUserType_regional () {}

   /**
    * Data class: ASN1T_RestrictionUserType_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RestrictionUserType_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RestrictionUserType_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RestrictionUserType_regional_element* NewElement ();

   /**
    * Data class: ASN1T_RestrictionUserType_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RestrictionUserType_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_RestrictionUserType_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_RestrictionUserType_regional* pmatches);

private:
   ASN1C_RestrictionUserType_regional& operator= (const ASN1C_RestrictionUserType_regional&) {return *this;}
} ;

EXTERN int asn1PE_RestrictionUserType_regional (OSCTXT* pctxt, ASN1T_RestrictionUserType_regional* pvalue);

EXTERN int asn1PD_RestrictionUserType_regional (OSCTXT* pctxt, ASN1T_RestrictionUserType_regional* pvalue);

EXTERN int XmlEnc_RestrictionUserType_regional (OSCTXT* pctxt, 
   ASN1T_RestrictionUserType_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionUserType_regional (OSCTXT* pctxt, 
   ASN1T_RestrictionUserType_regional* pvalue);

EXTERN int asn1JsonEnc_RestrictionUserType_regional (OSCTXT *pctxt, ASN1T_RestrictionUserType_regional *pvalue);

EXTERN int asn1JsonDec_RestrictionUserType_regional (OSCTXT *pctxt, ASN1T_RestrictionUserType_regional *pvalue);

EXTERN int asn1PrtToStrm_RestrictionUserType_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionUserType_regional* pvalue);

EXTERN int asn1Init_RestrictionUserType_regional (
   ASN1T_RestrictionUserType_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RestrictionUserType_regional (OSCTXT *pctxt, 
   ASN1T_RestrictionUserType_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserType                                       */
/*                                                            */
/**************************************************************/
/*
RestrictionUserType ::= CHOICE {
   basicType [0] RestrictionAppliesTo,
               -- a set of the most commonly used types
   regional [1] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-RestrictionUserType}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-RestrictionUserType}{@regionId})
   },
   ...
}
*/
/* Choice tag constants */

#define T_RestrictionUserType_basicType 1
#define T_RestrictionUserType_regional  2
#define T_RestrictionUserType_extElem1  3

struct EXTERN ASN1T_RestrictionUserType {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_RestrictionAppliesTo basicType;
      /* t = 2 */
      ASN1T_RestrictionUserType_regional *regional;
      /* t = 3 */
      ASN1TOpenType *extElem1;
   } u;
   ASN1T_RestrictionUserType () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_RestrictionUserType (OSCTXT* pctxt, ASN1T_RestrictionUserType* pvalue);

EXTERN int asn1PD_RestrictionUserType (OSCTXT* pctxt, ASN1T_RestrictionUserType* pvalue);

EXTERN int XmlEnc_RestrictionUserType (OSCTXT* pctxt, 
   ASN1T_RestrictionUserType* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionUserType (OSCTXT* pctxt, 
   ASN1T_RestrictionUserType* pvalue);

EXTERN int asn1JsonEnc_RestrictionUserType (OSCTXT *pctxt, ASN1T_RestrictionUserType *pvalue);

EXTERN int asn1JsonDec_RestrictionUserType (OSCTXT *pctxt, ASN1T_RestrictionUserType *pvalue);

EXTERN int asn1PrtToStrm_RestrictionUserType (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionUserType* pvalue);

EXTERN ASN1T_RestrictionUserType* 
   new_ASN1T_RestrictionUserType (ASN1CType& ccobj);

EXTERN int asn1Init_RestrictionUserType (ASN1T_RestrictionUserType* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RestrictionUserType (OSCTXT *pctxt, 
   ASN1T_RestrictionUserType* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserTypeList                                   */
/*                                                            */
/**************************************************************/
/*
RestrictionUserTypeList ::= SEQUENCE (SIZE (1..16)) OF RestrictionUserType
*/
/* List of ASN1T_RestrictionUserType */
typedef ASN1TSeqOfList ASN1T_RestrictionUserTypeList;

class EXTERN ASN1C_RestrictionUserTypeList :
public ASN1CSeqOfList
{
protected:
   ASN1T_RestrictionUserTypeList& msgData;
public:
   /**
    * Control class: ASN1C_RestrictionUserTypeList
    * Data class:    ASN1T_RestrictionUserTypeList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RestrictionUserTypeList (ASN1T_RestrictionUserTypeList& data);

   /**
    * Control class: ASN1C_RestrictionUserTypeList<br/>
    * Data class: ASN1T_RestrictionUserTypeList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RestrictionUserTypeList (OSRTMessageBufferIF& msgBuf
      , ASN1T_RestrictionUserTypeList& data);

   /**
    * Control class: ASN1C_RestrictionUserTypeList<br/>
    * Data class: ASN1T_RestrictionUserTypeList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RestrictionUserTypeList (ASN1CType& ccobj
      , ASN1T_RestrictionUserTypeList& data);

   virtual ~ASN1C_RestrictionUserTypeList () {}

   /**
    * Data class: ASN1T_RestrictionUserType<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RestrictionUserType* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RestrictionUserType.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RestrictionUserType* NewElement ();

   /**
    * Data class: ASN1T_RestrictionUserType.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RestrictionUserType* AppendNewElement ();

private:
   ASN1C_RestrictionUserTypeList& operator= (const ASN1C_RestrictionUserTypeList&) {return *this;}
} ;

EXTERN int asn1PE_RestrictionUserTypeList (OSCTXT* pctxt, ASN1T_RestrictionUserTypeList* pvalue);

EXTERN int asn1PD_RestrictionUserTypeList (OSCTXT* pctxt, ASN1T_RestrictionUserTypeList* pvalue);

EXTERN int XmlEnc_RestrictionUserTypeList (OSCTXT* pctxt, 
   ASN1T_RestrictionUserTypeList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionUserTypeList (OSCTXT* pctxt, 
   ASN1T_RestrictionUserTypeList* pvalue);

EXTERN int asn1JsonEnc_RestrictionUserTypeList (OSCTXT *pctxt, ASN1T_RestrictionUserTypeList *pvalue);

EXTERN int asn1JsonDec_RestrictionUserTypeList (OSCTXT *pctxt, ASN1T_RestrictionUserTypeList *pvalue);

EXTERN int asn1PrtToStrm_RestrictionUserTypeList (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionUserTypeList* pvalue);

EXTERN int asn1Init_RestrictionUserTypeList (ASN1T_RestrictionUserTypeList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RestrictionUserTypeList (OSCTXT *pctxt, 
   ASN1T_RestrictionUserTypeList* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionClassAssignment                                */
/*                                                            */
/**************************************************************/
/*
RestrictionClassAssignment ::= SEQUENCE {
   id [0] RestrictionClassID,
            -- the unique value (within an intersection or local region)
            -- that is assigned to this group of users
   users [1] RestrictionUserTypeList
            -- The list of user types/classes 
            -- to which this restriction ID applies
}
*/
struct EXTERN ASN1T_RestrictionClassAssignment {
   ASN1T_RestrictionClassID id;
   ASN1T_RestrictionUserTypeList users;
} ;

EXTERN int asn1PE_RestrictionClassAssignment (OSCTXT* pctxt, ASN1T_RestrictionClassAssignment* pvalue);

EXTERN int asn1PD_RestrictionClassAssignment (OSCTXT* pctxt, ASN1T_RestrictionClassAssignment* pvalue);

EXTERN int XmlEnc_RestrictionClassAssignment (OSCTXT* pctxt, 
   ASN1T_RestrictionClassAssignment* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionClassAssignment (OSCTXT* pctxt, 
   ASN1T_RestrictionClassAssignment* pvalue);

EXTERN int asn1JsonEnc_RestrictionClassAssignment (OSCTXT *pctxt, ASN1T_RestrictionClassAssignment *pvalue);

EXTERN int asn1JsonDec_RestrictionClassAssignment (OSCTXT *pctxt, ASN1T_RestrictionClassAssignment *pvalue);

EXTERN int asn1PrtToStrm_RestrictionClassAssignment (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionClassAssignment* pvalue);

EXTERN ASN1T_RestrictionClassAssignment* 
   new_ASN1T_RestrictionClassAssignment (ASN1CType& ccobj);

EXTERN int asn1Init_RestrictionClassAssignment (
   ASN1T_RestrictionClassAssignment* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RestrictionClassAssignment (OSCTXT *pctxt, 
   ASN1T_RestrictionClassAssignment* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionClassList                                      */
/*                                                            */
/**************************************************************/
/*
RestrictionClassList ::= SEQUENCE (SIZE (1..254)) OF RestrictionClassAssignment
*/
/* List of ASN1T_RestrictionClassAssignment */
typedef ASN1TSeqOfList ASN1T_RestrictionClassList;

class EXTERN ASN1C_RestrictionClassList :
public ASN1CSeqOfList
{
protected:
   ASN1T_RestrictionClassList& msgData;
public:
   /**
    * Control class: ASN1C_RestrictionClassList
    * Data class:    ASN1T_RestrictionClassList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RestrictionClassList (ASN1T_RestrictionClassList& data);

   /**
    * Control class: ASN1C_RestrictionClassList<br/>
    * Data class: ASN1T_RestrictionClassList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RestrictionClassList (OSRTMessageBufferIF& msgBuf
      , ASN1T_RestrictionClassList& data);

   /**
    * Control class: ASN1C_RestrictionClassList<br/>
    * Data class: ASN1T_RestrictionClassList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RestrictionClassList (ASN1CType& ccobj
      , ASN1T_RestrictionClassList& data);

   virtual ~ASN1C_RestrictionClassList () {}

   /**
    * Data class: ASN1T_RestrictionClassAssignment<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RestrictionClassAssignment* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RestrictionClassAssignment.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RestrictionClassAssignment* NewElement ();

   /**
    * Data class: ASN1T_RestrictionClassAssignment.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RestrictionClassAssignment* AppendNewElement ();

private:
   ASN1C_RestrictionClassList& operator= (const ASN1C_RestrictionClassList&) {return *this;}
} ;

EXTERN int asn1PE_RestrictionClassList (OSCTXT* pctxt, ASN1T_RestrictionClassList* pvalue);

EXTERN int asn1PD_RestrictionClassList (OSCTXT* pctxt, ASN1T_RestrictionClassList* pvalue);

EXTERN int XmlEnc_RestrictionClassList (OSCTXT* pctxt, 
   ASN1T_RestrictionClassList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RestrictionClassList (OSCTXT* pctxt, 
   ASN1T_RestrictionClassList* pvalue);

EXTERN int asn1JsonEnc_RestrictionClassList (OSCTXT *pctxt, ASN1T_RestrictionClassList *pvalue);

EXTERN int asn1JsonDec_RestrictionClassList (OSCTXT *pctxt, ASN1T_RestrictionClassList *pvalue);

EXTERN int asn1PrtToStrm_RestrictionClassList (OSCTXT *pctxt, 
   const char* name, const ASN1T_RestrictionClassList* pvalue);

EXTERN int asn1Init_RestrictionClassList (ASN1T_RestrictionClassList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RestrictionClassList (OSCTXT *pctxt, 
   ASN1T_RestrictionClassList* pvalue);

/**************************************************************/
/*                                                            */
/*  MapData_regional_element                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MapData'
*/
struct EXTERN ASN1T_MapData_regional_element {
   ASN1T_RegionId regionId;
   struct  {
      /**
       * information object selector
       */
      Reg_MapData::TVALUE t;

      /**
       * Reg-MapData information objects
       */
      union {
         /**
          * id: addGrpC
          */
         struct ASN1T_MapData_addGrpC *_Reg_MapData_addGrpC;

         ASN1TOpenType* extElem1;
      } u;
   } regExtValue;
   ASN1T_MapData_regional_element ();
} ;

EXTERN int asn1PE_MapData_regional_element (OSCTXT* pctxt, ASN1T_MapData_regional_element* pvalue);

EXTERN int asn1PD_MapData_regional_element (OSCTXT* pctxt, ASN1T_MapData_regional_element* pvalue);

EXTERN int XmlEnc_MapData_regional_element (OSCTXT* pctxt, 
   ASN1T_MapData_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MapData_regional_element (OSCTXT* pctxt, 
   ASN1T_MapData_regional_element* pvalue);

EXTERN int asn1JsonEnc_MapData_regional_element (OSCTXT *pctxt, ASN1T_MapData_regional_element *pvalue);

EXTERN int asn1JsonDec_MapData_regional_element (OSCTXT *pctxt, ASN1T_MapData_regional_element *pvalue);

EXTERN int asn1PrtToStrm_MapData_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_MapData_regional_element* pvalue);

EXTERN ASN1T_MapData_regional_element* 
   new_ASN1T_MapData_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_MapData_regional_element (ASN1T_MapData_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MapData_regional_element (OSCTXT *pctxt, 
   ASN1T_MapData_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  MapData_regional                                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MapData'
*/
/* List of ASN1T_MapData_regional_element */
typedef ASN1TSeqOfList ASN1T_MapData_regional;

class EXTERN ASN1C_MapData_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_MapData_regional& msgData;
public:
   /**
    * Control class: ASN1C_MapData_regional
    * Data class:    ASN1T_MapData_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_MapData_regional (ASN1T_MapData_regional& data);

   /**
    * Control class: ASN1C_MapData_regional<br/>
    * Data class: ASN1T_MapData_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_MapData_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_MapData_regional& data);

   /**
    * Control class: ASN1C_MapData_regional<br/>
    * Data class: ASN1T_MapData_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_MapData_regional (ASN1CType& ccobj, ASN1T_MapData_regional& data);

   virtual ~ASN1C_MapData_regional () {}

   /**
    * Data class: ASN1T_MapData_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_MapData_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_MapData_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_MapData_regional_element* NewElement ();

   /**
    * Data class: ASN1T_MapData_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_MapData_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_MapData_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, ASN1T_MapData_regional* pmatches);

private:
   ASN1C_MapData_regional& operator= (const ASN1C_MapData_regional&) {return *this;}
} ;

EXTERN int asn1PE_MapData_regional (OSCTXT* pctxt, ASN1T_MapData_regional* pvalue);

EXTERN int asn1PD_MapData_regional (OSCTXT* pctxt, ASN1T_MapData_regional* pvalue);

EXTERN int XmlEnc_MapData_regional (OSCTXT* pctxt, 
   ASN1T_MapData_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MapData_regional (OSCTXT* pctxt, 
   ASN1T_MapData_regional* pvalue);

EXTERN int asn1JsonEnc_MapData_regional (OSCTXT *pctxt, ASN1T_MapData_regional *pvalue);

EXTERN int asn1JsonDec_MapData_regional (OSCTXT *pctxt, ASN1T_MapData_regional *pvalue);

EXTERN int asn1PrtToStrm_MapData_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_MapData_regional* pvalue);

EXTERN int asn1Init_MapData_regional (ASN1T_MapData_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MapData_regional (OSCTXT *pctxt, ASN1T_MapData_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  MapData                                                   */
/*                                                            */
/**************************************************************/
/*
MapData ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   msgIssueRevision [1] MsgCount,
   layerType [2] LayerType OPTIONAL,
   layerID [3] LayerID OPTIONAL,
   intersections [4] IntersectionGeometryList OPTIONAL,
                     -- All Intersection definitions 
   roadSegments [5] RoadSegmentList OPTIONAL,
                     -- All roadway descriptions
   dataParameters [6] DataParameters OPTIONAL,
                     -- Any meta data regarding the map contents
   restrictionList [7] RestrictionClassList OPTIONAL,
                     -- Any restriction ID tables which have  
                     -- established for these map entries 
   regional [8] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-MapData}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-MapData}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_MapData {
   struct {
      unsigned timeStampPresent : 1;
      unsigned layerTypePresent : 1;
      unsigned layerIDPresent : 1;
      unsigned intersectionsPresent : 1;
      unsigned roadSegmentsPresent : 1;
      unsigned dataParametersPresent : 1;
      unsigned restrictionListPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_MsgCount msgIssueRevision;
   ASN1T_LayerType layerType;
   ASN1T_LayerID layerID;
   ASN1T_IntersectionGeometryList intersections;
   ASN1T_RoadSegmentList roadSegments;
   ASN1T_DataParameters dataParameters;
   ASN1T_RestrictionClassList restrictionList;
   ASN1T_MapData_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_MapData ();
} ;

EXTERN int asn1PE_MapData (OSCTXT* pctxt, ASN1T_MapData* pvalue);

EXTERN int asn1PD_MapData (OSCTXT* pctxt, ASN1T_MapData* pvalue);

EXTERN int XmlEnc_MapData (OSCTXT* pctxt, ASN1T_MapData* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MapData (OSCTXT* pctxt, ASN1T_MapData* pvalue);

EXTERN int asn1JsonEnc_MapData (OSCTXT *pctxt, ASN1T_MapData *pvalue);

EXTERN int asn1JsonDec_MapData (OSCTXT *pctxt, ASN1T_MapData *pvalue);

EXTERN int asn1PrtToStrm_MapData (OSCTXT *pctxt, 
   const char* name, const ASN1T_MapData* pvalue);

EXTERN ASN1T_MapData* new_ASN1T_MapData (ASN1CType& ccobj);

EXTERN int asn1Init_MapData (ASN1T_MapData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MapData (OSCTXT *pctxt, ASN1T_MapData* pvalue);

/**************************************************************/
/*                                                            */
/*  EnabledLaneList                                           */
/*                                                            */
/**************************************************************/
/*
EnabledLaneList ::= SEQUENCE (SIZE (1..16)) OF LaneID
    The unique ID numbers for each
    lane object which is 'active' 
    as part of the dynamic map contents.

*/
typedef struct EXTERN ASN1T_EnabledLaneList {
   OSUINT8 n;
   ASN1T_LaneID elem[16];
   ASN1T_EnabledLaneList () : n(0) {}
} ASN1T_EnabledLaneList;

class EXTERN ASN1C_EnabledLaneList :
public ASN1CType
{
protected:
   ASN1T_EnabledLaneList& msgData;
public:
   /**
    * Control class: ASN1C_EnabledLaneList
    * Data class:    ASN1T_EnabledLaneList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_EnabledLaneList (ASN1T_EnabledLaneList& data);

   /**
    * Control class: ASN1C_EnabledLaneList<br/>
    * Data class: ASN1T_EnabledLaneList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_EnabledLaneList (OSRTMessageBufferIF& msgBuf
      , ASN1T_EnabledLaneList& data);

   /**
    * Control class: ASN1C_EnabledLaneList<br/>
    * Data class: ASN1T_EnabledLaneList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_EnabledLaneList (ASN1CType& ccobj, ASN1T_EnabledLaneList& data);

   virtual ~ASN1C_EnabledLaneList () {}

private:
   ASN1C_EnabledLaneList& operator= (const ASN1C_EnabledLaneList&) {return *this;}
} ;

EXTERN int asn1PE_EnabledLaneList (OSCTXT* pctxt, ASN1T_EnabledLaneList* pvalue);

EXTERN int asn1PD_EnabledLaneList (OSCTXT* pctxt, ASN1T_EnabledLaneList* pvalue);

EXTERN int XmlEnc_EnabledLaneList (OSCTXT* pctxt, 
   ASN1T_EnabledLaneList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EnabledLaneList (OSCTXT* pctxt, ASN1T_EnabledLaneList* pvalue
   );

EXTERN int asn1JsonEnc_EnabledLaneList (OSCTXT *pctxt, ASN1T_EnabledLaneList *pvalue);

EXTERN int asn1JsonDec_EnabledLaneList (OSCTXT *pctxt, ASN1T_EnabledLaneList *pvalue);

EXTERN int asn1PrtToStrm_EnabledLaneList (OSCTXT *pctxt, 
   const char* name, const ASN1T_EnabledLaneList* pvalue);

EXTERN int asn1Init_EnabledLaneList (ASN1T_EnabledLaneList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  TimeChangeDetails                                         */
/*                                                            */
/**************************************************************/
/*
TimeChangeDetails ::= SEQUENCE {
   startTime [0] TimeMark OPTIONAL,
               -- When this phase 1st started
   minEndTime [1] TimeMark,
               -- Expected shortest end time
   maxEndTime [2] TimeMark OPTIONAL,
               -- Expected longest end time
   likelyTime [3] TimeMark OPTIONAL,
               -- Best predicted value based on other data              
   confidence [4] TimeIntervalConfidence OPTIONAL,
               -- Applies to above time element only
   nextTime [5] TimeMark OPTIONAL
               -- A rough estimate of time when 
               -- this phase may next occur again
               -- used to support various ECO driving power 
               -- management needs.
}
*/
struct EXTERN ASN1T_TimeChangeDetails {
   struct {
      unsigned startTimePresent : 1;
      unsigned maxEndTimePresent : 1;
      unsigned likelyTimePresent : 1;
      unsigned confidencePresent : 1;
      unsigned nextTimePresent : 1;
   } m;
   ASN1T_TimeMark startTime;
   ASN1T_TimeMark minEndTime;
   ASN1T_TimeMark maxEndTime;
   ASN1T_TimeMark likelyTime;
   ASN1T_TimeIntervalConfidence confidence;
   ASN1T_TimeMark nextTime;
   ASN1T_TimeChangeDetails ();
} ;

EXTERN int asn1PE_TimeChangeDetails (OSCTXT* pctxt, ASN1T_TimeChangeDetails* pvalue);

EXTERN int asn1PD_TimeChangeDetails (OSCTXT* pctxt, ASN1T_TimeChangeDetails* pvalue);

EXTERN int XmlEnc_TimeChangeDetails (OSCTXT* pctxt, 
   ASN1T_TimeChangeDetails* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TimeChangeDetails (OSCTXT* pctxt, 
   ASN1T_TimeChangeDetails* pvalue);

EXTERN int asn1JsonEnc_TimeChangeDetails (OSCTXT *pctxt, ASN1T_TimeChangeDetails *pvalue);

EXTERN int asn1JsonDec_TimeChangeDetails (OSCTXT *pctxt, ASN1T_TimeChangeDetails *pvalue);

EXTERN int asn1PrtToStrm_TimeChangeDetails (OSCTXT *pctxt, 
   const char* name, const ASN1T_TimeChangeDetails* pvalue);

EXTERN ASN1T_TimeChangeDetails* new_ASN1T_TimeChangeDetails (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_TimeChangeDetails (ASN1T_TimeChangeDetails* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  AdvisorySpeed_regional_element                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'AdvisorySpeed'
*/
struct EXTERN ASN1T_AdvisorySpeed_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_AdvisorySpeed_regional_element (OSCTXT* pctxt, ASN1T_AdvisorySpeed_regional_element* pvalue);

EXTERN int asn1PD_AdvisorySpeed_regional_element (OSCTXT* pctxt, ASN1T_AdvisorySpeed_regional_element* pvalue);

EXTERN int XmlEnc_AdvisorySpeed_regional_element (OSCTXT* pctxt, 
   ASN1T_AdvisorySpeed_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AdvisorySpeed_regional_element (OSCTXT* pctxt, 
   ASN1T_AdvisorySpeed_regional_element* pvalue);

EXTERN int asn1JsonEnc_AdvisorySpeed_regional_element (OSCTXT *pctxt, ASN1T_AdvisorySpeed_regional_element *pvalue);

EXTERN int asn1JsonDec_AdvisorySpeed_regional_element (OSCTXT *pctxt, ASN1T_AdvisorySpeed_regional_element *pvalue);

EXTERN int asn1PrtToStrm_AdvisorySpeed_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_AdvisorySpeed_regional_element* pvalue);

EXTERN ASN1T_AdvisorySpeed_regional_element* 
   new_ASN1T_AdvisorySpeed_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_AdvisorySpeed_regional_element (
   ASN1T_AdvisorySpeed_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_AdvisorySpeed_regional_element (OSCTXT *pctxt, 
   ASN1T_AdvisorySpeed_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  AdvisorySpeed_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'AdvisorySpeed'
*/
/* List of ASN1T_AdvisorySpeed_regional_element */
typedef ASN1TSeqOfList ASN1T_AdvisorySpeed_regional;

class EXTERN ASN1C_AdvisorySpeed_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_AdvisorySpeed_regional& msgData;
public:
   /**
    * Control class: ASN1C_AdvisorySpeed_regional
    * Data class:    ASN1T_AdvisorySpeed_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_AdvisorySpeed_regional (ASN1T_AdvisorySpeed_regional& data);

   /**
    * Control class: ASN1C_AdvisorySpeed_regional<br/>
    * Data class: ASN1T_AdvisorySpeed_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_AdvisorySpeed_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_AdvisorySpeed_regional& data);

   /**
    * Control class: ASN1C_AdvisorySpeed_regional<br/>
    * Data class: ASN1T_AdvisorySpeed_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_AdvisorySpeed_regional (ASN1CType& ccobj
      , ASN1T_AdvisorySpeed_regional& data);

   virtual ~ASN1C_AdvisorySpeed_regional () {}

   /**
    * Data class: ASN1T_AdvisorySpeed_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_AdvisorySpeed_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_AdvisorySpeed_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_AdvisorySpeed_regional_element* NewElement ();

   /**
    * Data class: ASN1T_AdvisorySpeed_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_AdvisorySpeed_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_AdvisorySpeed_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_AdvisorySpeed_regional* pmatches);

private:
   ASN1C_AdvisorySpeed_regional& operator= (const ASN1C_AdvisorySpeed_regional&) {return *this;}
} ;

EXTERN int asn1PE_AdvisorySpeed_regional (OSCTXT* pctxt, ASN1T_AdvisorySpeed_regional* pvalue);

EXTERN int asn1PD_AdvisorySpeed_regional (OSCTXT* pctxt, ASN1T_AdvisorySpeed_regional* pvalue);

EXTERN int XmlEnc_AdvisorySpeed_regional (OSCTXT* pctxt, 
   ASN1T_AdvisorySpeed_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AdvisorySpeed_regional (OSCTXT* pctxt, 
   ASN1T_AdvisorySpeed_regional* pvalue);

EXTERN int asn1JsonEnc_AdvisorySpeed_regional (OSCTXT *pctxt, ASN1T_AdvisorySpeed_regional *pvalue);

EXTERN int asn1JsonDec_AdvisorySpeed_regional (OSCTXT *pctxt, ASN1T_AdvisorySpeed_regional *pvalue);

EXTERN int asn1PrtToStrm_AdvisorySpeed_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_AdvisorySpeed_regional* pvalue);

EXTERN int asn1Init_AdvisorySpeed_regional (ASN1T_AdvisorySpeed_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_AdvisorySpeed_regional (OSCTXT *pctxt, 
   ASN1T_AdvisorySpeed_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  AdvisorySpeed                                             */
/*                                                            */
/**************************************************************/
/*
AdvisorySpeed ::= SEQUENCE {
   type [0] AdvisorySpeedType,
               -- the type of advisory which this is.
   speed [1] SpeedAdvice OPTIONAL,
               -- See Section 11 for converting and translating speed 
               -- expressed in mph into units of m/s
               -- This element is optional ONLY when superceded 
               -- by the presence of a regional speed element found in
               -- Reg-AdvisorySpeed entry
   confidence [2] SpeedConfidence OPTIONAL,
               -- A confidence value for the above speed
   distance [3] ZoneLength OPTIONAL,
               -- Unit = 1 meter,  
               -- The distance indicates the region for which the advised speed 
               -- is recommended, it is specified upstream from the stop bar  
               -- along the connected egressing lane
   class [4] RestrictionClassID OPTIONAL,
               -- the vehicle types to which it applies
               -- when absent, the AdvisorySpeed applies to
               -- all motor vehicle types
   regional [5] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-AdvisorySpeed}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-AdvisorySpeed}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_AdvisorySpeed {
   struct {
      unsigned speedPresent : 1;
      unsigned confidencePresent : 1;
      unsigned distancePresent : 1;
      unsigned class_Present : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_AdvisorySpeedType type;
   ASN1T_SpeedAdvice speed;
   ASN1T_SpeedConfidence confidence;
   ASN1T_ZoneLength distance;
   ASN1T_RestrictionClassID class_;
   ASN1T_AdvisorySpeed_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_AdvisorySpeed ();
} ;

EXTERN int asn1PE_AdvisorySpeed (OSCTXT* pctxt, ASN1T_AdvisorySpeed* pvalue);

EXTERN int asn1PD_AdvisorySpeed (OSCTXT* pctxt, ASN1T_AdvisorySpeed* pvalue);

EXTERN int XmlEnc_AdvisorySpeed (OSCTXT* pctxt, ASN1T_AdvisorySpeed* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AdvisorySpeed (OSCTXT* pctxt, ASN1T_AdvisorySpeed* pvalue);

EXTERN int asn1JsonEnc_AdvisorySpeed (OSCTXT *pctxt, ASN1T_AdvisorySpeed *pvalue);

EXTERN int asn1JsonDec_AdvisorySpeed (OSCTXT *pctxt, ASN1T_AdvisorySpeed *pvalue);

EXTERN int asn1PrtToStrm_AdvisorySpeed (OSCTXT *pctxt, 
   const char* name, const ASN1T_AdvisorySpeed* pvalue);

EXTERN ASN1T_AdvisorySpeed* new_ASN1T_AdvisorySpeed (ASN1CType& ccobj);

EXTERN int asn1Init_AdvisorySpeed (ASN1T_AdvisorySpeed* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_AdvisorySpeed (OSCTXT *pctxt, ASN1T_AdvisorySpeed* pvalue);

/**************************************************************/
/*                                                            */
/*  AdvisorySpeedList                                         */
/*                                                            */
/**************************************************************/
/*
AdvisorySpeedList ::= SEQUENCE (SIZE (1..16)) OF AdvisorySpeed
*/
/* List of ASN1T_AdvisorySpeed */
typedef ASN1TSeqOfList ASN1T_AdvisorySpeedList;

class EXTERN ASN1C_AdvisorySpeedList :
public ASN1CSeqOfList
{
protected:
   ASN1T_AdvisorySpeedList& msgData;
public:
   /**
    * Control class: ASN1C_AdvisorySpeedList
    * Data class:    ASN1T_AdvisorySpeedList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_AdvisorySpeedList (ASN1T_AdvisorySpeedList& data);

   /**
    * Control class: ASN1C_AdvisorySpeedList<br/>
    * Data class: ASN1T_AdvisorySpeedList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_AdvisorySpeedList (OSRTMessageBufferIF& msgBuf
      , ASN1T_AdvisorySpeedList& data);

   /**
    * Control class: ASN1C_AdvisorySpeedList<br/>
    * Data class: ASN1T_AdvisorySpeedList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_AdvisorySpeedList (ASN1CType& ccobj, ASN1T_AdvisorySpeedList& data);

   virtual ~ASN1C_AdvisorySpeedList () {}

   /**
    * Data class: ASN1T_AdvisorySpeed<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_AdvisorySpeed* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_AdvisorySpeed.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_AdvisorySpeed* NewElement ();

   /**
    * Data class: ASN1T_AdvisorySpeed.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_AdvisorySpeed* AppendNewElement ();

private:
   ASN1C_AdvisorySpeedList& operator= (const ASN1C_AdvisorySpeedList&) {return *this;}
} ;

EXTERN int asn1PE_AdvisorySpeedList (OSCTXT* pctxt, ASN1T_AdvisorySpeedList* pvalue);

EXTERN int asn1PD_AdvisorySpeedList (OSCTXT* pctxt, ASN1T_AdvisorySpeedList* pvalue);

EXTERN int XmlEnc_AdvisorySpeedList (OSCTXT* pctxt, 
   ASN1T_AdvisorySpeedList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AdvisorySpeedList (OSCTXT* pctxt, 
   ASN1T_AdvisorySpeedList* pvalue);

EXTERN int asn1JsonEnc_AdvisorySpeedList (OSCTXT *pctxt, ASN1T_AdvisorySpeedList *pvalue);

EXTERN int asn1JsonDec_AdvisorySpeedList (OSCTXT *pctxt, ASN1T_AdvisorySpeedList *pvalue);

EXTERN int asn1PrtToStrm_AdvisorySpeedList (OSCTXT *pctxt, 
   const char* name, const ASN1T_AdvisorySpeedList* pvalue);

EXTERN int asn1Init_AdvisorySpeedList (ASN1T_AdvisorySpeedList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_AdvisorySpeedList (OSCTXT *pctxt, 
   ASN1T_AdvisorySpeedList* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementEvent_regional_element                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MovementEvent'
*/
struct EXTERN ASN1T_MovementEvent_regional_element {
   ASN1T_RegionId regionId;
   struct  {
      /**
       * information object selector
       */
      Reg_MovementEvent::TVALUE t;

      /**
       * Reg-MovementEvent information objects
       */
      union {
         /**
          * id: addGrpB
          */
         struct ASN1T_MovementEvent_addGrpB *_Reg_MovementEvent_addGrpB;

         ASN1TOpenType* extElem1;
      } u;
   } regExtValue;
   ASN1T_MovementEvent_regional_element ();
} ;

EXTERN int asn1PE_MovementEvent_regional_element (OSCTXT* pctxt, ASN1T_MovementEvent_regional_element* pvalue);

EXTERN int asn1PD_MovementEvent_regional_element (OSCTXT* pctxt, ASN1T_MovementEvent_regional_element* pvalue);

EXTERN int XmlEnc_MovementEvent_regional_element (OSCTXT* pctxt, 
   ASN1T_MovementEvent_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MovementEvent_regional_element (OSCTXT* pctxt, 
   ASN1T_MovementEvent_regional_element* pvalue);

EXTERN int asn1JsonEnc_MovementEvent_regional_element (OSCTXT *pctxt, ASN1T_MovementEvent_regional_element *pvalue);

EXTERN int asn1JsonDec_MovementEvent_regional_element (OSCTXT *pctxt, ASN1T_MovementEvent_regional_element *pvalue);

EXTERN int asn1PrtToStrm_MovementEvent_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_MovementEvent_regional_element* pvalue);

EXTERN ASN1T_MovementEvent_regional_element* 
   new_ASN1T_MovementEvent_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_MovementEvent_regional_element (
   ASN1T_MovementEvent_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MovementEvent_regional_element (OSCTXT *pctxt, 
   ASN1T_MovementEvent_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementEvent_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MovementEvent'
*/
/* List of ASN1T_MovementEvent_regional_element */
typedef ASN1TSeqOfList ASN1T_MovementEvent_regional;

class EXTERN ASN1C_MovementEvent_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_MovementEvent_regional& msgData;
public:
   /**
    * Control class: ASN1C_MovementEvent_regional
    * Data class:    ASN1T_MovementEvent_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_MovementEvent_regional (ASN1T_MovementEvent_regional& data);

   /**
    * Control class: ASN1C_MovementEvent_regional<br/>
    * Data class: ASN1T_MovementEvent_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_MovementEvent_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_MovementEvent_regional& data);

   /**
    * Control class: ASN1C_MovementEvent_regional<br/>
    * Data class: ASN1T_MovementEvent_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_MovementEvent_regional (ASN1CType& ccobj
      , ASN1T_MovementEvent_regional& data);

   virtual ~ASN1C_MovementEvent_regional () {}

   /**
    * Data class: ASN1T_MovementEvent_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_MovementEvent_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_MovementEvent_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_MovementEvent_regional_element* NewElement ();

   /**
    * Data class: ASN1T_MovementEvent_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_MovementEvent_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_MovementEvent_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_MovementEvent_regional* pmatches);

private:
   ASN1C_MovementEvent_regional& operator= (const ASN1C_MovementEvent_regional&) {return *this;}
} ;

EXTERN int asn1PE_MovementEvent_regional (OSCTXT* pctxt, ASN1T_MovementEvent_regional* pvalue);

EXTERN int asn1PD_MovementEvent_regional (OSCTXT* pctxt, ASN1T_MovementEvent_regional* pvalue);

EXTERN int XmlEnc_MovementEvent_regional (OSCTXT* pctxt, 
   ASN1T_MovementEvent_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MovementEvent_regional (OSCTXT* pctxt, 
   ASN1T_MovementEvent_regional* pvalue);

EXTERN int asn1JsonEnc_MovementEvent_regional (OSCTXT *pctxt, ASN1T_MovementEvent_regional *pvalue);

EXTERN int asn1JsonDec_MovementEvent_regional (OSCTXT *pctxt, ASN1T_MovementEvent_regional *pvalue);

EXTERN int asn1PrtToStrm_MovementEvent_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_MovementEvent_regional* pvalue);

EXTERN int asn1Init_MovementEvent_regional (ASN1T_MovementEvent_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MovementEvent_regional (OSCTXT *pctxt, 
   ASN1T_MovementEvent_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementEvent                                             */
/*                                                            */
/**************************************************************/
/*
MovementEvent ::= SEQUENCE {
   eventState [0] MovementPhaseState,
                -- Consisting of:
                -- Phase state (the basic 11 states)
                -- Directional, protected, or permissive state
   timing [1] TimeChangeDetails OPTIONAL,
                -- Timing Data in UTC time stamps for event
                -- includes start and min/max end times of phase
                -- confidence and estimated next occurrence
   speeds [2] AdvisorySpeedList OPTIONAL,
                -- various speed advisories for use by
                -- general and specific types of vehicles
                -- supporting green-wave and other flow needs
                -- See Section 11 for converting and translating 
                -- speed expressed in mph into units of m/s
   regional [3] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-MovementEvent}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-MovementEvent}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_MovementEvent {
   struct {
      unsigned timingPresent : 1;
      unsigned speedsPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MovementPhaseState eventState;
   ASN1T_TimeChangeDetails timing;
   ASN1T_AdvisorySpeedList speeds;
   ASN1T_MovementEvent_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_MovementEvent ();
} ;

EXTERN int asn1PE_MovementEvent (OSCTXT* pctxt, ASN1T_MovementEvent* pvalue);

EXTERN int asn1PD_MovementEvent (OSCTXT* pctxt, ASN1T_MovementEvent* pvalue);

EXTERN int XmlEnc_MovementEvent (OSCTXT* pctxt, ASN1T_MovementEvent* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MovementEvent (OSCTXT* pctxt, ASN1T_MovementEvent* pvalue);

EXTERN int asn1JsonEnc_MovementEvent (OSCTXT *pctxt, ASN1T_MovementEvent *pvalue);

EXTERN int asn1JsonDec_MovementEvent (OSCTXT *pctxt, ASN1T_MovementEvent *pvalue);

EXTERN int asn1PrtToStrm_MovementEvent (OSCTXT *pctxt, 
   const char* name, const ASN1T_MovementEvent* pvalue);

EXTERN ASN1T_MovementEvent* new_ASN1T_MovementEvent (ASN1CType& ccobj);

EXTERN int asn1Init_MovementEvent (ASN1T_MovementEvent* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MovementEvent (OSCTXT *pctxt, ASN1T_MovementEvent* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementEventList                                         */
/*                                                            */
/**************************************************************/
/*
MovementEventList ::= SEQUENCE (SIZE (1..16)) OF MovementEvent
*/
/* List of ASN1T_MovementEvent */
typedef ASN1TSeqOfList ASN1T_MovementEventList;

class EXTERN ASN1C_MovementEventList :
public ASN1CSeqOfList
{
protected:
   ASN1T_MovementEventList& msgData;
public:
   /**
    * Control class: ASN1C_MovementEventList
    * Data class:    ASN1T_MovementEventList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_MovementEventList (ASN1T_MovementEventList& data);

   /**
    * Control class: ASN1C_MovementEventList<br/>
    * Data class: ASN1T_MovementEventList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_MovementEventList (OSRTMessageBufferIF& msgBuf
      , ASN1T_MovementEventList& data);

   /**
    * Control class: ASN1C_MovementEventList<br/>
    * Data class: ASN1T_MovementEventList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_MovementEventList (ASN1CType& ccobj, ASN1T_MovementEventList& data);

   virtual ~ASN1C_MovementEventList () {}

   /**
    * Data class: ASN1T_MovementEvent<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_MovementEvent* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_MovementEvent.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_MovementEvent* NewElement ();

   /**
    * Data class: ASN1T_MovementEvent.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_MovementEvent* AppendNewElement ();

private:
   ASN1C_MovementEventList& operator= (const ASN1C_MovementEventList&) {return *this;}
} ;

EXTERN int asn1PE_MovementEventList (OSCTXT* pctxt, ASN1T_MovementEventList* pvalue);

EXTERN int asn1PD_MovementEventList (OSCTXT* pctxt, ASN1T_MovementEventList* pvalue);

EXTERN int XmlEnc_MovementEventList (OSCTXT* pctxt, 
   ASN1T_MovementEventList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MovementEventList (OSCTXT* pctxt, 
   ASN1T_MovementEventList* pvalue);

EXTERN int asn1JsonEnc_MovementEventList (OSCTXT *pctxt, ASN1T_MovementEventList *pvalue);

EXTERN int asn1JsonDec_MovementEventList (OSCTXT *pctxt, ASN1T_MovementEventList *pvalue);

EXTERN int asn1PrtToStrm_MovementEventList (OSCTXT *pctxt, 
   const char* name, const ASN1T_MovementEventList* pvalue);

EXTERN int asn1Init_MovementEventList (ASN1T_MovementEventList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MovementEventList (OSCTXT *pctxt, 
   ASN1T_MovementEventList* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectionManeuverAssist_regional_element                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ConnectionManeuverAssist'
*/
struct EXTERN ASN1T_ConnectionManeuverAssist_regional_element {
   ASN1T_RegionId regionId;
   struct  {
      /**
       * information object selector
       */
      Reg_ConnectionManeuverAssist::TVALUE t;

      /**
       * Reg-ConnectionManeuverAssist information objects
       */
      union {
         /**
          * id: addGrpC
          */
         struct ASN1T_ConnectionManeuverAssist_addGrpC *_Reg_ConnectionManeuverAssist_addGrpC;

         ASN1TOpenType* extElem1;
      } u;
   } regExtValue;
   ASN1T_ConnectionManeuverAssist_regional_element ();
} ;

EXTERN int asn1PE_ConnectionManeuverAssist_regional_element (OSCTXT* pctxt, ASN1T_ConnectionManeuverAssist_regional_element* pvalue);

EXTERN int asn1PD_ConnectionManeuverAssist_regional_element (OSCTXT* pctxt, ASN1T_ConnectionManeuverAssist_regional_element* pvalue);

EXTERN int XmlEnc_ConnectionManeuverAssist_regional_element (OSCTXT* pctxt, 
   ASN1T_ConnectionManeuverAssist_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ConnectionManeuverAssist_regional_element (OSCTXT* pctxt, 
   ASN1T_ConnectionManeuverAssist_regional_element* pvalue);

EXTERN int asn1JsonEnc_ConnectionManeuverAssist_regional_element (OSCTXT *pctxt, ASN1T_ConnectionManeuverAssist_regional_element *pvalue);

EXTERN int asn1JsonDec_ConnectionManeuverAssist_regional_element (OSCTXT *pctxt, ASN1T_ConnectionManeuverAssist_regional_element *pvalue);

EXTERN int asn1PrtToStrm_ConnectionManeuverAssist_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_ConnectionManeuverAssist_regional_element* pvalue);

EXTERN ASN1T_ConnectionManeuverAssist_regional_element* 
   new_ASN1T_ConnectionManeuverAssist_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_ConnectionManeuverAssist_regional_element (
   ASN1T_ConnectionManeuverAssist_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ConnectionManeuverAssist_regional_element (OSCTXT *pctxt, 
   ASN1T_ConnectionManeuverAssist_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectionManeuverAssist_regional                         */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ConnectionManeuverAssist'
*/
/* List of ASN1T_ConnectionManeuverAssist_regional_element */
typedef ASN1TSeqOfList ASN1T_ConnectionManeuverAssist_regional;

class EXTERN ASN1C_ConnectionManeuverAssist_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_ConnectionManeuverAssist_regional& msgData;
public:
   /**
    * Control class: ASN1C_ConnectionManeuverAssist_regional
    * Data class:    ASN1T_ConnectionManeuverAssist_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ConnectionManeuverAssist_regional
       (ASN1T_ConnectionManeuverAssist_regional& data);

   /**
    * Control class: ASN1C_ConnectionManeuverAssist_regional<br/>
    * Data class: ASN1T_ConnectionManeuverAssist_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ConnectionManeuverAssist_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_ConnectionManeuverAssist_regional& data);

   /**
    * Control class: ASN1C_ConnectionManeuverAssist_regional<br/>
    * Data class: ASN1T_ConnectionManeuverAssist_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_ConnectionManeuverAssist_regional (ASN1CType& ccobj
      , ASN1T_ConnectionManeuverAssist_regional& data);

   virtual ~ASN1C_ConnectionManeuverAssist_regional () {}

   /**
    * Data class: ASN1T_ConnectionManeuverAssist_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_ConnectionManeuverAssist_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_ConnectionManeuverAssist_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_ConnectionManeuverAssist_regional_element* NewElement ();

   /**
    * Data class: ASN1T_ConnectionManeuverAssist_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_ConnectionManeuverAssist_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_ConnectionManeuverAssist_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_ConnectionManeuverAssist_regional* pmatches);

private:
   ASN1C_ConnectionManeuverAssist_regional& operator= (const ASN1C_ConnectionManeuverAssist_regional&) {return *this;}
} ;

EXTERN int asn1PE_ConnectionManeuverAssist_regional (OSCTXT* pctxt, ASN1T_ConnectionManeuverAssist_regional* pvalue);

EXTERN int asn1PD_ConnectionManeuverAssist_regional (OSCTXT* pctxt, ASN1T_ConnectionManeuverAssist_regional* pvalue);

EXTERN int XmlEnc_ConnectionManeuverAssist_regional (OSCTXT* pctxt, 
   ASN1T_ConnectionManeuverAssist_regional* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ConnectionManeuverAssist_regional (OSCTXT* pctxt, 
   ASN1T_ConnectionManeuverAssist_regional* pvalue);

EXTERN int asn1JsonEnc_ConnectionManeuverAssist_regional (OSCTXT *pctxt, ASN1T_ConnectionManeuverAssist_regional *pvalue);

EXTERN int asn1JsonDec_ConnectionManeuverAssist_regional (OSCTXT *pctxt, ASN1T_ConnectionManeuverAssist_regional *pvalue);

EXTERN int asn1PrtToStrm_ConnectionManeuverAssist_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_ConnectionManeuverAssist_regional* pvalue);

EXTERN int asn1Init_ConnectionManeuverAssist_regional (
   ASN1T_ConnectionManeuverAssist_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ConnectionManeuverAssist_regional (OSCTXT *pctxt, 
   ASN1T_ConnectionManeuverAssist_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectionManeuverAssist                                  */
/*                                                            */
/**************************************************************/
/*
ConnectionManeuverAssist ::= SEQUENCE {
   connectionID [0] LaneConnectionID,
                        -- the common connectionID used by all lanes to which
                        -- this data applies 
                        -- (this value traces to ConnectsTo entries in lanes)
   -- Expected Clearance Information
   queueLength [1] ZoneLength OPTIONAL,
                        -- Unit = 1 meter, 0 = no queue
                        -- The distance from the stop line to the back 
                        -- edge of the last vehicle in the queue,                     
                        -- as measured along the lane center line.
   availableStorageLength [2] ZoneLength OPTIONAL,
                        -- Unit = 1 meter, 0 = no space remains
                        -- Distance (e.g. beginning from the downstream 
                        -- stop-line up to a given distance) with a high 
                        -- probability for successfully executing the 
                        -- connecting maneuver between the two lanes 
                        -- during the current cycle. 
                        -- Used for enhancing the awareness of vehicles 
                        -- to anticipate if they can pass the stop line
                        -- of the lane. Used for optimizing the green wave, 
                        -- due to knowledge of vehicles waiting in front 
                        -- of a red light (downstream).
                        -- The element nextTime in TimeChangeDetails
                        -- in the containing data frame contains the next 
                        -- timemark at which an active phase is expected, 
                        -- a form of storage flush interval.
   waitOnStop [3] WaitOnStopline OPTIONAL,
                        -- If "true", the vehicles on this specific connecting 
                        -- maneuver have to stop on the stop-line and not 
                        -- to enter the collision area 
   pedBicycleDetect [4] PedestrianBicycleDetect OPTIONAL,
                        -- true if ANY ped or bicycles are detected crossing 
                        -- the above lanes. Set to false ONLY if there is a 
                        -- high certainty that there are none present, 
                        -- otherwise element is not sent.
   regional [5] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-ConnectionManeuverAssist}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-ConnectionManeuverAssist}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_ConnectionManeuverAssist {
   struct {
      unsigned queueLengthPresent : 1;
      unsigned availableStorageLengthPresent : 1;
      unsigned waitOnStopPresent : 1;
      unsigned pedBicycleDetectPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_LaneConnectionID connectionID;
   ASN1T_ZoneLength queueLength;
   ASN1T_ZoneLength availableStorageLength;
   ASN1T_WaitOnStopline waitOnStop;
   ASN1T_PedestrianBicycleDetect pedBicycleDetect;
   ASN1T_ConnectionManeuverAssist_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_ConnectionManeuverAssist ();
} ;

EXTERN int asn1PE_ConnectionManeuverAssist (OSCTXT* pctxt, ASN1T_ConnectionManeuverAssist* pvalue);

EXTERN int asn1PD_ConnectionManeuverAssist (OSCTXT* pctxt, ASN1T_ConnectionManeuverAssist* pvalue);

EXTERN int XmlEnc_ConnectionManeuverAssist (OSCTXT* pctxt, 
   ASN1T_ConnectionManeuverAssist* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ConnectionManeuverAssist (OSCTXT* pctxt, 
   ASN1T_ConnectionManeuverAssist* pvalue);

EXTERN int asn1JsonEnc_ConnectionManeuverAssist (OSCTXT *pctxt, ASN1T_ConnectionManeuverAssist *pvalue);

EXTERN int asn1JsonDec_ConnectionManeuverAssist (OSCTXT *pctxt, ASN1T_ConnectionManeuverAssist *pvalue);

EXTERN int asn1PrtToStrm_ConnectionManeuverAssist (OSCTXT *pctxt, 
   const char* name, const ASN1T_ConnectionManeuverAssist* pvalue);

EXTERN ASN1T_ConnectionManeuverAssist* 
   new_ASN1T_ConnectionManeuverAssist (ASN1CType& ccobj);

EXTERN int asn1Init_ConnectionManeuverAssist (ASN1T_ConnectionManeuverAssist* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ConnectionManeuverAssist (OSCTXT *pctxt, 
   ASN1T_ConnectionManeuverAssist* pvalue);

/**************************************************************/
/*                                                            */
/*  ManeuverAssistList                                        */
/*                                                            */
/**************************************************************/
/*
ManeuverAssistList ::= SEQUENCE (SIZE (1..16)) OF ConnectionManeuverAssist
*/
/* List of ASN1T_ConnectionManeuverAssist */
typedef ASN1TSeqOfList ASN1T_ManeuverAssistList;

class EXTERN ASN1C_ManeuverAssistList :
public ASN1CSeqOfList
{
protected:
   ASN1T_ManeuverAssistList& msgData;
public:
   /**
    * Control class: ASN1C_ManeuverAssistList
    * Data class:    ASN1T_ManeuverAssistList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ManeuverAssistList (ASN1T_ManeuverAssistList& data);

   /**
    * Control class: ASN1C_ManeuverAssistList<br/>
    * Data class: ASN1T_ManeuverAssistList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ManeuverAssistList (OSRTMessageBufferIF& msgBuf
      , ASN1T_ManeuverAssistList& data);

   /**
    * Control class: ASN1C_ManeuverAssistList<br/>
    * Data class: ASN1T_ManeuverAssistList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_ManeuverAssistList (ASN1CType& ccobj, ASN1T_ManeuverAssistList& data);

   virtual ~ASN1C_ManeuverAssistList () {}

   /**
    * Data class: ASN1T_ConnectionManeuverAssist<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_ConnectionManeuverAssist* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_ConnectionManeuverAssist.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_ConnectionManeuverAssist* NewElement ();

   /**
    * Data class: ASN1T_ConnectionManeuverAssist.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_ConnectionManeuverAssist* AppendNewElement ();

private:
   ASN1C_ManeuverAssistList& operator= (const ASN1C_ManeuverAssistList&) {return *this;}
} ;

EXTERN int asn1PE_ManeuverAssistList (OSCTXT* pctxt, ASN1T_ManeuverAssistList* pvalue);

EXTERN int asn1PD_ManeuverAssistList (OSCTXT* pctxt, ASN1T_ManeuverAssistList* pvalue);

EXTERN int XmlEnc_ManeuverAssistList (OSCTXT* pctxt, 
   ASN1T_ManeuverAssistList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ManeuverAssistList (OSCTXT* pctxt, 
   ASN1T_ManeuverAssistList* pvalue);

EXTERN int asn1JsonEnc_ManeuverAssistList (OSCTXT *pctxt, ASN1T_ManeuverAssistList *pvalue);

EXTERN int asn1JsonDec_ManeuverAssistList (OSCTXT *pctxt, ASN1T_ManeuverAssistList *pvalue);

EXTERN int asn1PrtToStrm_ManeuverAssistList (OSCTXT *pctxt, 
   const char* name, const ASN1T_ManeuverAssistList* pvalue);

EXTERN int asn1Init_ManeuverAssistList (ASN1T_ManeuverAssistList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ManeuverAssistList (OSCTXT *pctxt, 
   ASN1T_ManeuverAssistList* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementState_regional_element                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MovementState'
*/
struct EXTERN ASN1T_MovementState_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_MovementState_regional_element (OSCTXT* pctxt, ASN1T_MovementState_regional_element* pvalue);

EXTERN int asn1PD_MovementState_regional_element (OSCTXT* pctxt, ASN1T_MovementState_regional_element* pvalue);

EXTERN int XmlEnc_MovementState_regional_element (OSCTXT* pctxt, 
   ASN1T_MovementState_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MovementState_regional_element (OSCTXT* pctxt, 
   ASN1T_MovementState_regional_element* pvalue);

EXTERN int asn1JsonEnc_MovementState_regional_element (OSCTXT *pctxt, ASN1T_MovementState_regional_element *pvalue);

EXTERN int asn1JsonDec_MovementState_regional_element (OSCTXT *pctxt, ASN1T_MovementState_regional_element *pvalue);

EXTERN int asn1PrtToStrm_MovementState_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_MovementState_regional_element* pvalue);

EXTERN ASN1T_MovementState_regional_element* 
   new_ASN1T_MovementState_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_MovementState_regional_element (
   ASN1T_MovementState_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MovementState_regional_element (OSCTXT *pctxt, 
   ASN1T_MovementState_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementState_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MovementState'
*/
/* List of ASN1T_MovementState_regional_element */
typedef ASN1TSeqOfList ASN1T_MovementState_regional;

class EXTERN ASN1C_MovementState_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_MovementState_regional& msgData;
public:
   /**
    * Control class: ASN1C_MovementState_regional
    * Data class:    ASN1T_MovementState_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_MovementState_regional (ASN1T_MovementState_regional& data);

   /**
    * Control class: ASN1C_MovementState_regional<br/>
    * Data class: ASN1T_MovementState_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_MovementState_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_MovementState_regional& data);

   /**
    * Control class: ASN1C_MovementState_regional<br/>
    * Data class: ASN1T_MovementState_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_MovementState_regional (ASN1CType& ccobj
      , ASN1T_MovementState_regional& data);

   virtual ~ASN1C_MovementState_regional () {}

   /**
    * Data class: ASN1T_MovementState_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_MovementState_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_MovementState_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_MovementState_regional_element* NewElement ();

   /**
    * Data class: ASN1T_MovementState_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_MovementState_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_MovementState_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_MovementState_regional* pmatches);

private:
   ASN1C_MovementState_regional& operator= (const ASN1C_MovementState_regional&) {return *this;}
} ;

EXTERN int asn1PE_MovementState_regional (OSCTXT* pctxt, ASN1T_MovementState_regional* pvalue);

EXTERN int asn1PD_MovementState_regional (OSCTXT* pctxt, ASN1T_MovementState_regional* pvalue);

EXTERN int XmlEnc_MovementState_regional (OSCTXT* pctxt, 
   ASN1T_MovementState_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MovementState_regional (OSCTXT* pctxt, 
   ASN1T_MovementState_regional* pvalue);

EXTERN int asn1JsonEnc_MovementState_regional (OSCTXT *pctxt, ASN1T_MovementState_regional *pvalue);

EXTERN int asn1JsonDec_MovementState_regional (OSCTXT *pctxt, ASN1T_MovementState_regional *pvalue);

EXTERN int asn1PrtToStrm_MovementState_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_MovementState_regional* pvalue);

EXTERN int asn1Init_MovementState_regional (ASN1T_MovementState_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MovementState_regional (OSCTXT *pctxt, 
   ASN1T_MovementState_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementState                                             */
/*                                                            */
/**************************************************************/
/*
MovementState ::= SEQUENCE {
   movementName [0] DescriptiveName OPTIONAL,
                      -- uniquely defines movement by name   
                      -- human readable name for intersection  
                      -- to be used only in debug mode
   signalGroup [1] SignalGroupID,
                      -- the group id is used to map to lists 
                      -- of lanes (and their descriptions) 
                      -- which this MovementState data applies to 
                      -- see comments in the Remarks for usage details 
   state-time-speed [2] MovementEventList,
                      -- Consisting of sets of movement data with:
                      -- a)  SignalPhaseState
                      -- b)  TimeChangeDetails,  and 
                      -- c)  AdvisorySpeeds      (optional )
                      -- Note one or more of the movement events may be for 
                      -- a future time and that this allows conveying multiple 
                      -- predictive phase and movement timing for various uses
                      -- for the current signal group
   maneuverAssistList [3] ManeuverAssistList OPTIONAL,
                      -- This information may also be placed in the 
                      -- IntersectionState when common information applies to
                      -- different lanes in the same way
   regional [4] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-MovementState}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-MovementState}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_MovementState {
   struct {
      unsigned movementNamePresent : 1;
      unsigned maneuverAssistListPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_DescriptiveName movementName;
   ASN1T_SignalGroupID signalGroup;
   ASN1T_MovementEventList state_time_speed;
   ASN1T_ManeuverAssistList maneuverAssistList;
   ASN1T_MovementState_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_MovementState ();
} ;

EXTERN int asn1PE_MovementState (OSCTXT* pctxt, ASN1T_MovementState* pvalue);

EXTERN int asn1PD_MovementState (OSCTXT* pctxt, ASN1T_MovementState* pvalue);

EXTERN int XmlEnc_MovementState (OSCTXT* pctxt, ASN1T_MovementState* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MovementState (OSCTXT* pctxt, ASN1T_MovementState* pvalue);

EXTERN int asn1JsonEnc_MovementState (OSCTXT *pctxt, ASN1T_MovementState *pvalue);

EXTERN int asn1JsonDec_MovementState (OSCTXT *pctxt, ASN1T_MovementState *pvalue);

EXTERN int asn1PrtToStrm_MovementState (OSCTXT *pctxt, 
   const char* name, const ASN1T_MovementState* pvalue);

EXTERN ASN1T_MovementState* new_ASN1T_MovementState (ASN1CType& ccobj);

EXTERN int asn1Init_MovementState (ASN1T_MovementState* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MovementState (OSCTXT *pctxt, ASN1T_MovementState* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementList                                              */
/*                                                            */
/**************************************************************/
/*
MovementList ::= SEQUENCE (SIZE (1..255)) OF MovementState
*/
/* List of ASN1T_MovementState */
typedef ASN1TSeqOfList ASN1T_MovementList;

class EXTERN ASN1C_MovementList :
public ASN1CSeqOfList
{
protected:
   ASN1T_MovementList& msgData;
public:
   /**
    * Control class: ASN1C_MovementList
    * Data class:    ASN1T_MovementList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_MovementList (ASN1T_MovementList& data);

   /**
    * Control class: ASN1C_MovementList<br/>
    * Data class: ASN1T_MovementList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_MovementList (OSRTMessageBufferIF& msgBuf, ASN1T_MovementList& data);

   /**
    * Control class: ASN1C_MovementList<br/>
    * Data class: ASN1T_MovementList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_MovementList (ASN1CType& ccobj, ASN1T_MovementList& data);

   virtual ~ASN1C_MovementList () {}

   /**
    * Data class: ASN1T_MovementState<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_MovementState* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_MovementState.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_MovementState* NewElement ();

   /**
    * Data class: ASN1T_MovementState.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_MovementState* AppendNewElement ();

private:
   ASN1C_MovementList& operator= (const ASN1C_MovementList&) {return *this;}
} ;

EXTERN int asn1PE_MovementList (OSCTXT* pctxt, ASN1T_MovementList* pvalue);

EXTERN int asn1PD_MovementList (OSCTXT* pctxt, ASN1T_MovementList* pvalue);

EXTERN int XmlEnc_MovementList (OSCTXT* pctxt, ASN1T_MovementList* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MovementList (OSCTXT* pctxt, ASN1T_MovementList* pvalue);

EXTERN int asn1JsonEnc_MovementList (OSCTXT *pctxt, ASN1T_MovementList *pvalue);

EXTERN int asn1JsonDec_MovementList (OSCTXT *pctxt, ASN1T_MovementList *pvalue);

EXTERN int asn1PrtToStrm_MovementList (OSCTXT *pctxt, 
   const char* name, const ASN1T_MovementList* pvalue);

EXTERN int asn1Init_MovementList (ASN1T_MovementList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MovementList (OSCTXT *pctxt, ASN1T_MovementList* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionState_regional_element                        */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionState'
*/
struct EXTERN ASN1T_IntersectionState_regional_element {
   ASN1T_RegionId regionId;
   struct  {
      /**
       * information object selector
       */
      Reg_IntersectionState::TVALUE t;

      /**
       * Reg-IntersectionState information objects
       */
      union {
         /**
          * id: addGrpC
          */
         struct ASN1T_IntersectionState_addGrpC *_Reg_IntersectionState_addGrpC;

         ASN1TOpenType* extElem1;
      } u;
   } regExtValue;
   ASN1T_IntersectionState_regional_element ();
} ;

EXTERN int asn1PE_IntersectionState_regional_element (OSCTXT* pctxt, ASN1T_IntersectionState_regional_element* pvalue);

EXTERN int asn1PD_IntersectionState_regional_element (OSCTXT* pctxt, ASN1T_IntersectionState_regional_element* pvalue);

EXTERN int XmlEnc_IntersectionState_regional_element (OSCTXT* pctxt, 
   ASN1T_IntersectionState_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionState_regional_element (OSCTXT* pctxt, 
   ASN1T_IntersectionState_regional_element* pvalue);

EXTERN int asn1JsonEnc_IntersectionState_regional_element (OSCTXT *pctxt, ASN1T_IntersectionState_regional_element *pvalue);

EXTERN int asn1JsonDec_IntersectionState_regional_element (OSCTXT *pctxt, ASN1T_IntersectionState_regional_element *pvalue);

EXTERN int asn1PrtToStrm_IntersectionState_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionState_regional_element* pvalue);

EXTERN ASN1T_IntersectionState_regional_element* 
   new_ASN1T_IntersectionState_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_IntersectionState_regional_element (
   ASN1T_IntersectionState_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionState_regional_element (OSCTXT *pctxt, 
   ASN1T_IntersectionState_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionState_regional                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionState'
*/
/* List of ASN1T_IntersectionState_regional_element */
typedef ASN1TSeqOfList ASN1T_IntersectionState_regional;

class EXTERN ASN1C_IntersectionState_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_IntersectionState_regional& msgData;
public:
   /**
    * Control class: ASN1C_IntersectionState_regional
    * Data class:    ASN1T_IntersectionState_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_IntersectionState_regional (ASN1T_IntersectionState_regional& data);

   /**
    * Control class: ASN1C_IntersectionState_regional<br/>
    * Data class: ASN1T_IntersectionState_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_IntersectionState_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_IntersectionState_regional& data);

   /**
    * Control class: ASN1C_IntersectionState_regional<br/>
    * Data class: ASN1T_IntersectionState_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_IntersectionState_regional (ASN1CType& ccobj
      , ASN1T_IntersectionState_regional& data);

   virtual ~ASN1C_IntersectionState_regional () {}

   /**
    * Data class: ASN1T_IntersectionState_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_IntersectionState_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_IntersectionState_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_IntersectionState_regional_element* NewElement ();

   /**
    * Data class: ASN1T_IntersectionState_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_IntersectionState_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_IntersectionState_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_IntersectionState_regional* pmatches);

private:
   ASN1C_IntersectionState_regional& operator= (const ASN1C_IntersectionState_regional&) {return *this;}
} ;

EXTERN int asn1PE_IntersectionState_regional (OSCTXT* pctxt, ASN1T_IntersectionState_regional* pvalue);

EXTERN int asn1PD_IntersectionState_regional (OSCTXT* pctxt, ASN1T_IntersectionState_regional* pvalue);

EXTERN int XmlEnc_IntersectionState_regional (OSCTXT* pctxt, 
   ASN1T_IntersectionState_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionState_regional (OSCTXT* pctxt, 
   ASN1T_IntersectionState_regional* pvalue);

EXTERN int asn1JsonEnc_IntersectionState_regional (OSCTXT *pctxt, ASN1T_IntersectionState_regional *pvalue);

EXTERN int asn1JsonDec_IntersectionState_regional (OSCTXT *pctxt, ASN1T_IntersectionState_regional *pvalue);

EXTERN int asn1PrtToStrm_IntersectionState_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionState_regional* pvalue);

EXTERN int asn1Init_IntersectionState_regional (
   ASN1T_IntersectionState_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionState_regional (OSCTXT *pctxt, 
   ASN1T_IntersectionState_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionState                                         */
/*                                                            */
/**************************************************************/
/*
IntersectionState ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
                -- human readable name for intersection  
                -- to be used only in debug mode
   id [1] IntersectionReferenceID,
                -- A globally unique value set, consisting of a 
                -- regionID and intersection ID assignment
                -- provides a unique mapping to the 
                -- intersection MAP in question
                -- which provides complete location 
                -- and approach/move/lane data
   revision [2] MsgCount,
   status [3] IntersectionStatusObject,
                -- general status of the controller(s)
   moy [4] MinuteOfTheYear OPTIONAL,
                -- Minute of current UTC year
                -- used only with messages to be archived 
   timeStamp [5] DSecond OPTIONAL,
                -- the mSec point in the current UTC minute that
                -- this message was constructed
   enabledLanes [6] EnabledLaneList OPTIONAL,
                -- a list of lanes where the RevocableLane bit 
                -- has been set which are now active and 
                -- therefore part of the current intersection
   states [7] MovementList,
                -- Each Movement is given in turn
                -- and contains its signal phase state, 
                -- mapping to the lanes it applies to, and
                -- point in time it will end, and it
                -- may contain both active and future states 
   maneuverAssistList [8] ManeuverAssistList OPTIONAL,
                -- Assist data
   regional [9] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-IntersectionState}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-IntersectionState}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_IntersectionState {
   struct {
      unsigned namePresent : 1;
      unsigned moyPresent : 1;
      unsigned timeStampPresent : 1;
      unsigned enabledLanesPresent : 1;
      unsigned maneuverAssistListPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_DescriptiveName name;
   ASN1T_IntersectionReferenceID id;
   ASN1T_MsgCount revision;
   ASN1T_IntersectionStatusObject status;
   ASN1T_MinuteOfTheYear moy;
   ASN1T_DSecond timeStamp;
   ASN1T_EnabledLaneList enabledLanes;
   ASN1T_MovementList states;
   ASN1T_ManeuverAssistList maneuverAssistList;
   ASN1T_IntersectionState_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_IntersectionState ();
} ;

EXTERN int asn1PE_IntersectionState (OSCTXT* pctxt, ASN1T_IntersectionState* pvalue);

EXTERN int asn1PD_IntersectionState (OSCTXT* pctxt, ASN1T_IntersectionState* pvalue);

EXTERN int XmlEnc_IntersectionState (OSCTXT* pctxt, 
   ASN1T_IntersectionState* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionState (OSCTXT* pctxt, 
   ASN1T_IntersectionState* pvalue);

EXTERN int asn1JsonEnc_IntersectionState (OSCTXT *pctxt, ASN1T_IntersectionState *pvalue);

EXTERN int asn1JsonDec_IntersectionState (OSCTXT *pctxt, ASN1T_IntersectionState *pvalue);

EXTERN int asn1PrtToStrm_IntersectionState (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionState* pvalue);

EXTERN ASN1T_IntersectionState* new_ASN1T_IntersectionState (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_IntersectionState (ASN1T_IntersectionState* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionState (OSCTXT *pctxt, 
   ASN1T_IntersectionState* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionStateList                                     */
/*                                                            */
/**************************************************************/
/*
IntersectionStateList ::= SEQUENCE (SIZE (1..32)) OF IntersectionState
*/
/* List of ASN1T_IntersectionState */
typedef ASN1TSeqOfList ASN1T_IntersectionStateList;

class EXTERN ASN1C_IntersectionStateList :
public ASN1CSeqOfList
{
protected:
   ASN1T_IntersectionStateList& msgData;
public:
   /**
    * Control class: ASN1C_IntersectionStateList
    * Data class:    ASN1T_IntersectionStateList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_IntersectionStateList (ASN1T_IntersectionStateList& data);

   /**
    * Control class: ASN1C_IntersectionStateList<br/>
    * Data class: ASN1T_IntersectionStateList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_IntersectionStateList (OSRTMessageBufferIF& msgBuf
      , ASN1T_IntersectionStateList& data);

   /**
    * Control class: ASN1C_IntersectionStateList<br/>
    * Data class: ASN1T_IntersectionStateList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_IntersectionStateList (ASN1CType& ccobj
      , ASN1T_IntersectionStateList& data);

   virtual ~ASN1C_IntersectionStateList () {}

   /**
    * Data class: ASN1T_IntersectionState<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_IntersectionState* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_IntersectionState.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_IntersectionState* NewElement ();

   /**
    * Data class: ASN1T_IntersectionState.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_IntersectionState* AppendNewElement ();

private:
   ASN1C_IntersectionStateList& operator= (const ASN1C_IntersectionStateList&) {return *this;}
} ;

EXTERN int asn1PE_IntersectionStateList (OSCTXT* pctxt, ASN1T_IntersectionStateList* pvalue);

EXTERN int asn1PD_IntersectionStateList (OSCTXT* pctxt, ASN1T_IntersectionStateList* pvalue);

EXTERN int XmlEnc_IntersectionStateList (OSCTXT* pctxt, 
   ASN1T_IntersectionStateList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionStateList (OSCTXT* pctxt, 
   ASN1T_IntersectionStateList* pvalue);

EXTERN int asn1JsonEnc_IntersectionStateList (OSCTXT *pctxt, ASN1T_IntersectionStateList *pvalue);

EXTERN int asn1JsonDec_IntersectionStateList (OSCTXT *pctxt, ASN1T_IntersectionStateList *pvalue);

EXTERN int asn1PrtToStrm_IntersectionStateList (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionStateList* pvalue);

EXTERN int asn1Init_IntersectionStateList (ASN1T_IntersectionStateList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionStateList (OSCTXT *pctxt, 
   ASN1T_IntersectionStateList* pvalue);

/**************************************************************/
/*                                                            */
/*  SPAT_regional_element                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SPAT'
*/
struct EXTERN ASN1T_SPAT_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SPAT_regional_element (OSCTXT* pctxt, ASN1T_SPAT_regional_element* pvalue);

EXTERN int asn1PD_SPAT_regional_element (OSCTXT* pctxt, ASN1T_SPAT_regional_element* pvalue);

EXTERN int XmlEnc_SPAT_regional_element (OSCTXT* pctxt, 
   ASN1T_SPAT_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SPAT_regional_element (OSCTXT* pctxt, 
   ASN1T_SPAT_regional_element* pvalue);

EXTERN int asn1JsonEnc_SPAT_regional_element (OSCTXT *pctxt, ASN1T_SPAT_regional_element *pvalue);

EXTERN int asn1JsonDec_SPAT_regional_element (OSCTXT *pctxt, ASN1T_SPAT_regional_element *pvalue);

EXTERN int asn1PrtToStrm_SPAT_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SPAT_regional_element* pvalue);

EXTERN ASN1T_SPAT_regional_element* 
   new_ASN1T_SPAT_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_SPAT_regional_element (ASN1T_SPAT_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SPAT_regional_element (OSCTXT *pctxt, 
   ASN1T_SPAT_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SPAT_regional                                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SPAT'
*/
/* List of ASN1T_SPAT_regional_element */
typedef ASN1TSeqOfList ASN1T_SPAT_regional;

class EXTERN ASN1C_SPAT_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_SPAT_regional& msgData;
public:
   /**
    * Control class: ASN1C_SPAT_regional
    * Data class:    ASN1T_SPAT_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SPAT_regional (ASN1T_SPAT_regional& data);

   /**
    * Control class: ASN1C_SPAT_regional<br/>
    * Data class: ASN1T_SPAT_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SPAT_regional (OSRTMessageBufferIF& msgBuf, ASN1T_SPAT_regional& data);

   /**
    * Control class: ASN1C_SPAT_regional<br/>
    * Data class: ASN1T_SPAT_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SPAT_regional (ASN1CType& ccobj, ASN1T_SPAT_regional& data);

   virtual ~ASN1C_SPAT_regional () {}

   /**
    * Data class: ASN1T_SPAT_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SPAT_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SPAT_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SPAT_regional_element* NewElement ();

   /**
    * Data class: ASN1T_SPAT_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SPAT_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_SPAT_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, ASN1T_SPAT_regional* pmatches);

private:
   ASN1C_SPAT_regional& operator= (const ASN1C_SPAT_regional&) {return *this;}
} ;

EXTERN int asn1PE_SPAT_regional (OSCTXT* pctxt, ASN1T_SPAT_regional* pvalue);

EXTERN int asn1PD_SPAT_regional (OSCTXT* pctxt, ASN1T_SPAT_regional* pvalue);

EXTERN int XmlEnc_SPAT_regional (OSCTXT* pctxt, ASN1T_SPAT_regional* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SPAT_regional (OSCTXT* pctxt, ASN1T_SPAT_regional* pvalue);

EXTERN int asn1JsonEnc_SPAT_regional (OSCTXT *pctxt, ASN1T_SPAT_regional *pvalue);

EXTERN int asn1JsonDec_SPAT_regional (OSCTXT *pctxt, ASN1T_SPAT_regional *pvalue);

EXTERN int asn1PrtToStrm_SPAT_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_SPAT_regional* pvalue);

EXTERN int asn1Init_SPAT_regional (ASN1T_SPAT_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SPAT_regional (OSCTXT *pctxt, ASN1T_SPAT_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SPAT                                                      */
/*                                                            */
/**************************************************************/
/*
SPAT ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   name [1] DescriptiveName OPTIONAL,
                 -- human readable name for this collection 
                 -- to be used only in debug mode
   intersections [2] IntersectionStateList,
                 -- sets of SPAT data (one per intersection)  
   -- If PrioritizationResponse data is required, it is found 
   -- in the RegionalSPAT entry below
   regional [3] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-SPAT}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-SPAT}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SPAT {
   struct {
      unsigned timeStampPresent : 1;
      unsigned namePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_DescriptiveName name;
   ASN1T_IntersectionStateList intersections;
   ASN1T_SPAT_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_SPAT ();
} ;

EXTERN int asn1PE_SPAT (OSCTXT* pctxt, ASN1T_SPAT* pvalue);

EXTERN int asn1PD_SPAT (OSCTXT* pctxt, ASN1T_SPAT* pvalue);

EXTERN int XmlEnc_SPAT (OSCTXT* pctxt, ASN1T_SPAT* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SPAT (OSCTXT* pctxt, ASN1T_SPAT* pvalue);

EXTERN int asn1JsonEnc_SPAT (OSCTXT *pctxt, ASN1T_SPAT *pvalue);

EXTERN int asn1JsonDec_SPAT (OSCTXT *pctxt, ASN1T_SPAT *pvalue);

EXTERN int asn1PrtToStrm_SPAT (OSCTXT *pctxt, 
   const char* name, const ASN1T_SPAT* pvalue);

EXTERN ASN1T_SPAT* new_ASN1T_SPAT (ASN1CType& ccobj);

EXTERN int asn1Init_SPAT (ASN1T_SPAT* pvalue, OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SPAT (OSCTXT *pctxt, ASN1T_SPAT* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestedItemList                                         */
/*                                                            */
/**************************************************************/
/*
RequestedItemList ::= SEQUENCE (SIZE (1..32)) OF RequestedItem
*/
typedef struct EXTERN ASN1T_RequestedItemList {
   OSUINT8 n;
   ASN1T_RequestedItem elem[32];
   ASN1T_RequestedItemList () : n(0) {}
} ASN1T_RequestedItemList;

class EXTERN ASN1C_RequestedItemList :
public ASN1CType
{
protected:
   ASN1T_RequestedItemList& msgData;
public:
   /**
    * Control class: ASN1C_RequestedItemList
    * Data class:    ASN1T_RequestedItemList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RequestedItemList (ASN1T_RequestedItemList& data);

   /**
    * Control class: ASN1C_RequestedItemList<br/>
    * Data class: ASN1T_RequestedItemList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RequestedItemList (OSRTMessageBufferIF& msgBuf
      , ASN1T_RequestedItemList& data);

   /**
    * Control class: ASN1C_RequestedItemList<br/>
    * Data class: ASN1T_RequestedItemList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RequestedItemList (ASN1CType& ccobj, ASN1T_RequestedItemList& data);

   virtual ~ASN1C_RequestedItemList () {}

private:
   ASN1C_RequestedItemList& operator= (const ASN1C_RequestedItemList&) {return *this;}
} ;

EXTERN int asn1PE_RequestedItemList (OSCTXT* pctxt, ASN1T_RequestedItemList* pvalue);

EXTERN int asn1PD_RequestedItemList (OSCTXT* pctxt, ASN1T_RequestedItemList* pvalue);

EXTERN int XmlEnc_RequestedItemList (OSCTXT* pctxt, 
   ASN1T_RequestedItemList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestedItemList (OSCTXT* pctxt, 
   ASN1T_RequestedItemList* pvalue);

EXTERN int asn1JsonEnc_RequestedItemList (OSCTXT *pctxt, ASN1T_RequestedItemList *pvalue);

EXTERN int asn1JsonDec_RequestedItemList (OSCTXT *pctxt, ASN1T_RequestedItemList *pvalue);

EXTERN int asn1PrtToStrm_RequestedItemList (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestedItemList* pvalue);

EXTERN int asn1Init_RequestedItemList (ASN1T_RequestedItemList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  CommonSafetyRequest_regional_element                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'CommonSafetyRequest'
*/
struct EXTERN ASN1T_CommonSafetyRequest_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_CommonSafetyRequest_regional_element (OSCTXT* pctxt, ASN1T_CommonSafetyRequest_regional_element* pvalue);

EXTERN int asn1PD_CommonSafetyRequest_regional_element (OSCTXT* pctxt, ASN1T_CommonSafetyRequest_regional_element* pvalue);

EXTERN int XmlEnc_CommonSafetyRequest_regional_element (OSCTXT* pctxt, 
   ASN1T_CommonSafetyRequest_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CommonSafetyRequest_regional_element (OSCTXT* pctxt, 
   ASN1T_CommonSafetyRequest_regional_element* pvalue);

EXTERN int asn1JsonEnc_CommonSafetyRequest_regional_element (OSCTXT *pctxt, ASN1T_CommonSafetyRequest_regional_element *pvalue);

EXTERN int asn1JsonDec_CommonSafetyRequest_regional_element (OSCTXT *pctxt, ASN1T_CommonSafetyRequest_regional_element *pvalue);

EXTERN int asn1PrtToStrm_CommonSafetyRequest_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_CommonSafetyRequest_regional_element* pvalue);

EXTERN ASN1T_CommonSafetyRequest_regional_element* 
   new_ASN1T_CommonSafetyRequest_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_CommonSafetyRequest_regional_element (
   ASN1T_CommonSafetyRequest_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_CommonSafetyRequest_regional_element (OSCTXT *pctxt, 
   ASN1T_CommonSafetyRequest_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  CommonSafetyRequest_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'CommonSafetyRequest'
*/
/* List of ASN1T_CommonSafetyRequest_regional_element */
typedef ASN1TSeqOfList ASN1T_CommonSafetyRequest_regional;

class EXTERN ASN1C_CommonSafetyRequest_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_CommonSafetyRequest_regional& msgData;
public:
   /**
    * Control class: ASN1C_CommonSafetyRequest_regional
    * Data class:    ASN1T_CommonSafetyRequest_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_CommonSafetyRequest_regional
       (ASN1T_CommonSafetyRequest_regional& data);

   /**
    * Control class: ASN1C_CommonSafetyRequest_regional<br/>
    * Data class: ASN1T_CommonSafetyRequest_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_CommonSafetyRequest_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_CommonSafetyRequest_regional& data);

   /**
    * Control class: ASN1C_CommonSafetyRequest_regional<br/>
    * Data class: ASN1T_CommonSafetyRequest_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_CommonSafetyRequest_regional (ASN1CType& ccobj
      , ASN1T_CommonSafetyRequest_regional& data);

   virtual ~ASN1C_CommonSafetyRequest_regional () {}

   /**
    * Data class: ASN1T_CommonSafetyRequest_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_CommonSafetyRequest_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_CommonSafetyRequest_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_CommonSafetyRequest_regional_element* NewElement ();

   /**
    * Data class: ASN1T_CommonSafetyRequest_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_CommonSafetyRequest_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_CommonSafetyRequest_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_CommonSafetyRequest_regional* pmatches);

private:
   ASN1C_CommonSafetyRequest_regional& operator= (const ASN1C_CommonSafetyRequest_regional&) {return *this;}
} ;

EXTERN int asn1PE_CommonSafetyRequest_regional (OSCTXT* pctxt, ASN1T_CommonSafetyRequest_regional* pvalue);

EXTERN int asn1PD_CommonSafetyRequest_regional (OSCTXT* pctxt, ASN1T_CommonSafetyRequest_regional* pvalue);

EXTERN int XmlEnc_CommonSafetyRequest_regional (OSCTXT* pctxt, 
   ASN1T_CommonSafetyRequest_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CommonSafetyRequest_regional (OSCTXT* pctxt, 
   ASN1T_CommonSafetyRequest_regional* pvalue);

EXTERN int asn1JsonEnc_CommonSafetyRequest_regional (OSCTXT *pctxt, ASN1T_CommonSafetyRequest_regional *pvalue);

EXTERN int asn1JsonDec_CommonSafetyRequest_regional (OSCTXT *pctxt, ASN1T_CommonSafetyRequest_regional *pvalue);

EXTERN int asn1PrtToStrm_CommonSafetyRequest_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_CommonSafetyRequest_regional* pvalue);

EXTERN int asn1Init_CommonSafetyRequest_regional (
   ASN1T_CommonSafetyRequest_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_CommonSafetyRequest_regional (OSCTXT *pctxt, 
   ASN1T_CommonSafetyRequest_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  CommonSafetyRequest                                       */
/*                                                            */
/**************************************************************/
/*
CommonSafetyRequest ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   msgCnt [1] MsgCount OPTIONAL,
   id [2] TemporaryID OPTIONAL, -- targeted remote device              
   requests [3] RequestedItemList,
   -- Note: Above no longer uses the same request as probe management
   regional [4] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-CommonSafetyRequest}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-CommonSafetyRequest}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_CommonSafetyRequest {
   struct {
      unsigned timeStampPresent : 1;
      unsigned msgCntPresent : 1;
      unsigned idPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_MsgCount msgCnt;
   ASN1T_TemporaryID id;
   ASN1T_RequestedItemList requests;
   ASN1T_CommonSafetyRequest_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_CommonSafetyRequest ();
} ;

EXTERN int asn1PE_CommonSafetyRequest (OSCTXT* pctxt, ASN1T_CommonSafetyRequest* pvalue);

EXTERN int asn1PD_CommonSafetyRequest (OSCTXT* pctxt, ASN1T_CommonSafetyRequest* pvalue);

EXTERN int XmlEnc_CommonSafetyRequest (OSCTXT* pctxt, 
   ASN1T_CommonSafetyRequest* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CommonSafetyRequest (OSCTXT* pctxt, 
   ASN1T_CommonSafetyRequest* pvalue);

EXTERN int asn1JsonEnc_CommonSafetyRequest (OSCTXT *pctxt, ASN1T_CommonSafetyRequest *pvalue);

EXTERN int asn1JsonDec_CommonSafetyRequest (OSCTXT *pctxt, ASN1T_CommonSafetyRequest *pvalue);

EXTERN int asn1PrtToStrm_CommonSafetyRequest (OSCTXT *pctxt, 
   const char* name, const ASN1T_CommonSafetyRequest* pvalue);

EXTERN ASN1T_CommonSafetyRequest* 
   new_ASN1T_CommonSafetyRequest (ASN1CType& ccobj);

EXTERN int asn1Init_CommonSafetyRequest (ASN1T_CommonSafetyRequest* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_CommonSafetyRequest (OSCTXT *pctxt, 
   ASN1T_CommonSafetyRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSideAlert_description                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RoadSideAlert'
*/
typedef struct EXTERN ASN1T_RoadSideAlert_description {
   OSUINT8 n;
   ASN1T_ITIScodes elem[8];
   ASN1T_RoadSideAlert_description () : n(0) {}
} ASN1T_RoadSideAlert_description;

class EXTERN ASN1C_RoadSideAlert_description :
public ASN1CType
{
protected:
   ASN1T_RoadSideAlert_description& msgData;
public:
   /**
    * Control class: ASN1C_RoadSideAlert_description
    * Data class:    ASN1T_RoadSideAlert_description
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RoadSideAlert_description (ASN1T_RoadSideAlert_description& data);

   /**
    * Control class: ASN1C_RoadSideAlert_description<br/>
    * Data class: ASN1T_RoadSideAlert_description<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RoadSideAlert_description (OSRTMessageBufferIF& msgBuf
      , ASN1T_RoadSideAlert_description& data);

   /**
    * Control class: ASN1C_RoadSideAlert_description<br/>
    * Data class: ASN1T_RoadSideAlert_description<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RoadSideAlert_description (ASN1CType& ccobj
      , ASN1T_RoadSideAlert_description& data);

   virtual ~ASN1C_RoadSideAlert_description () {}

private:
   ASN1C_RoadSideAlert_description& operator= (const ASN1C_RoadSideAlert_description&) {return *this;}
} ;

EXTERN int asn1PE_RoadSideAlert_description (OSCTXT* pctxt, ASN1T_RoadSideAlert_description* pvalue);

EXTERN int asn1PD_RoadSideAlert_description (OSCTXT* pctxt, ASN1T_RoadSideAlert_description* pvalue);

EXTERN int XmlEnc_RoadSideAlert_description (OSCTXT* pctxt, 
   ASN1T_RoadSideAlert_description* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSideAlert_description (OSCTXT* pctxt, 
   ASN1T_RoadSideAlert_description* pvalue);

EXTERN int asn1JsonEnc_RoadSideAlert_description (OSCTXT *pctxt, ASN1T_RoadSideAlert_description *pvalue);

EXTERN int asn1JsonDec_RoadSideAlert_description (OSCTXT *pctxt, ASN1T_RoadSideAlert_description *pvalue);

EXTERN int asn1PrtToStrm_RoadSideAlert_description (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSideAlert_description* pvalue);

EXTERN int asn1Init_RoadSideAlert_description (
   ASN1T_RoadSideAlert_description* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  RoadSideAlert_regional_element                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RoadSideAlert'
*/
struct EXTERN ASN1T_RoadSideAlert_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_RoadSideAlert_regional_element (OSCTXT* pctxt, ASN1T_RoadSideAlert_regional_element* pvalue);

EXTERN int asn1PD_RoadSideAlert_regional_element (OSCTXT* pctxt, ASN1T_RoadSideAlert_regional_element* pvalue);

EXTERN int XmlEnc_RoadSideAlert_regional_element (OSCTXT* pctxt, 
   ASN1T_RoadSideAlert_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSideAlert_regional_element (OSCTXT* pctxt, 
   ASN1T_RoadSideAlert_regional_element* pvalue);

EXTERN int asn1JsonEnc_RoadSideAlert_regional_element (OSCTXT *pctxt, ASN1T_RoadSideAlert_regional_element *pvalue);

EXTERN int asn1JsonDec_RoadSideAlert_regional_element (OSCTXT *pctxt, ASN1T_RoadSideAlert_regional_element *pvalue);

EXTERN int asn1PrtToStrm_RoadSideAlert_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSideAlert_regional_element* pvalue);

EXTERN ASN1T_RoadSideAlert_regional_element* 
   new_ASN1T_RoadSideAlert_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_RoadSideAlert_regional_element (
   ASN1T_RoadSideAlert_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSideAlert_regional_element (OSCTXT *pctxt, 
   ASN1T_RoadSideAlert_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSideAlert_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RoadSideAlert'
*/
/* List of ASN1T_RoadSideAlert_regional_element */
typedef ASN1TSeqOfList ASN1T_RoadSideAlert_regional;

class EXTERN ASN1C_RoadSideAlert_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_RoadSideAlert_regional& msgData;
public:
   /**
    * Control class: ASN1C_RoadSideAlert_regional
    * Data class:    ASN1T_RoadSideAlert_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RoadSideAlert_regional (ASN1T_RoadSideAlert_regional& data);

   /**
    * Control class: ASN1C_RoadSideAlert_regional<br/>
    * Data class: ASN1T_RoadSideAlert_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RoadSideAlert_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_RoadSideAlert_regional& data);

   /**
    * Control class: ASN1C_RoadSideAlert_regional<br/>
    * Data class: ASN1T_RoadSideAlert_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RoadSideAlert_regional (ASN1CType& ccobj
      , ASN1T_RoadSideAlert_regional& data);

   virtual ~ASN1C_RoadSideAlert_regional () {}

   /**
    * Data class: ASN1T_RoadSideAlert_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RoadSideAlert_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RoadSideAlert_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RoadSideAlert_regional_element* NewElement ();

   /**
    * Data class: ASN1T_RoadSideAlert_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RoadSideAlert_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_RoadSideAlert_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_RoadSideAlert_regional* pmatches);

private:
   ASN1C_RoadSideAlert_regional& operator= (const ASN1C_RoadSideAlert_regional&) {return *this;}
} ;

EXTERN int asn1PE_RoadSideAlert_regional (OSCTXT* pctxt, ASN1T_RoadSideAlert_regional* pvalue);

EXTERN int asn1PD_RoadSideAlert_regional (OSCTXT* pctxt, ASN1T_RoadSideAlert_regional* pvalue);

EXTERN int XmlEnc_RoadSideAlert_regional (OSCTXT* pctxt, 
   ASN1T_RoadSideAlert_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSideAlert_regional (OSCTXT* pctxt, 
   ASN1T_RoadSideAlert_regional* pvalue);

EXTERN int asn1JsonEnc_RoadSideAlert_regional (OSCTXT *pctxt, ASN1T_RoadSideAlert_regional *pvalue);

EXTERN int asn1JsonDec_RoadSideAlert_regional (OSCTXT *pctxt, ASN1T_RoadSideAlert_regional *pvalue);

EXTERN int asn1PrtToStrm_RoadSideAlert_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSideAlert_regional* pvalue);

EXTERN int asn1Init_RoadSideAlert_regional (ASN1T_RoadSideAlert_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSideAlert_regional (OSCTXT *pctxt, 
   ASN1T_RoadSideAlert_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSideAlert                                             */
/*                                                            */
/**************************************************************/
/*
RoadSideAlert ::= SEQUENCE {
   msgCnt [0] MsgCount,
   timeStamp [1] MinuteOfTheYear OPTIONAL,
   typeEvent [2] ITIScodes,
                 -- a category and an item from that category 
                 -- all ITS stds use the same types here
                 -- to explain the type of  the 
                 -- alert / danger / hazard involved
   description [3] SEQUENCE (SIZE (1..8)) OF ITIScodes OPTIONAL,
                 -- up to eight ITIS code set entries to further
                 -- describe the event, give advice, or any 
                 -- other ITIS codes
   priority [4] Priority OPTIONAL,
                 -- the urgency of this message, a relative
                 -- degree of merit compared with other 
                 -- similar messages for this type (not other
                 -- messages being sent by the device), nor a 
                 -- priority of display urgency
   heading [5] HeadingSlice OPTIONAL,
                 -- Applicable headings/direction
   extent [6] Extent OPTIONAL,
                 -- the spatial distance over which this
                 -- message applies and should be presented 
                 -- to the driver
   position [7] FullPositionVector OPTIONAL,
                 -- a compact summary of the position,
                 -- heading, speed, etc. of the 
                 -- event in question. Including stationary
                 -- and wide area events. 
   furtherInfoID [8] FurtherInfoID OPTIONAL,
                 -- an index link to any other incident 
                 -- information data that may be available 
                 -- in the normal ATIS incident description 
                 -- or other messages
                 -- 1~2 octets in length
   regional [9] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-RoadSideAlert}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-RoadSideAlert}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_RoadSideAlert {
   struct {
      unsigned timeStampPresent : 1;
      unsigned descriptionPresent : 1;
      unsigned priorityPresent : 1;
      unsigned headingPresent : 1;
      unsigned extentPresent : 1;
      unsigned positionPresent : 1;
      unsigned furtherInfoIDPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MsgCount msgCnt;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_ITIScodes typeEvent;
   ASN1T_RoadSideAlert_description description;
   ASN1T_Priority priority;
   ASN1T_HeadingSlice heading;
   ASN1T_Extent extent;
   ASN1T_FullPositionVector position;
   ASN1T_FurtherInfoID furtherInfoID;
   ASN1T_RoadSideAlert_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_RoadSideAlert ();
} ;

EXTERN int asn1PE_RoadSideAlert (OSCTXT* pctxt, ASN1T_RoadSideAlert* pvalue);

EXTERN int asn1PD_RoadSideAlert (OSCTXT* pctxt, ASN1T_RoadSideAlert* pvalue);

EXTERN int XmlEnc_RoadSideAlert (OSCTXT* pctxt, ASN1T_RoadSideAlert* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSideAlert (OSCTXT* pctxt, ASN1T_RoadSideAlert* pvalue);

EXTERN int asn1JsonEnc_RoadSideAlert (OSCTXT *pctxt, ASN1T_RoadSideAlert *pvalue);

EXTERN int asn1JsonDec_RoadSideAlert (OSCTXT *pctxt, ASN1T_RoadSideAlert *pvalue);

EXTERN int asn1PrtToStrm_RoadSideAlert (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSideAlert* pvalue);

EXTERN ASN1T_RoadSideAlert* new_ASN1T_RoadSideAlert (ASN1CType& ccobj);

EXTERN int asn1Init_RoadSideAlert (ASN1T_RoadSideAlert* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSideAlert (OSCTXT *pctxt, ASN1T_RoadSideAlert* pvalue);

/**************************************************************/
/*                                                            */
/*  EmergencyVehicleAlert_regional_element                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'EmergencyVehicleAlert'
*/
struct EXTERN ASN1T_EmergencyVehicleAlert_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_EmergencyVehicleAlert_regional_element (OSCTXT* pctxt, ASN1T_EmergencyVehicleAlert_regional_element* pvalue);

EXTERN int asn1PD_EmergencyVehicleAlert_regional_element (OSCTXT* pctxt, ASN1T_EmergencyVehicleAlert_regional_element* pvalue);

EXTERN int XmlEnc_EmergencyVehicleAlert_regional_element (OSCTXT* pctxt, 
   ASN1T_EmergencyVehicleAlert_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EmergencyVehicleAlert_regional_element (OSCTXT* pctxt, 
   ASN1T_EmergencyVehicleAlert_regional_element* pvalue);

EXTERN int asn1JsonEnc_EmergencyVehicleAlert_regional_element (OSCTXT *pctxt, ASN1T_EmergencyVehicleAlert_regional_element *pvalue);

EXTERN int asn1JsonDec_EmergencyVehicleAlert_regional_element (OSCTXT *pctxt, ASN1T_EmergencyVehicleAlert_regional_element *pvalue);

EXTERN int asn1PrtToStrm_EmergencyVehicleAlert_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_EmergencyVehicleAlert_regional_element* pvalue);

EXTERN ASN1T_EmergencyVehicleAlert_regional_element* 
   new_ASN1T_EmergencyVehicleAlert_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_EmergencyVehicleAlert_regional_element (
   ASN1T_EmergencyVehicleAlert_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_EmergencyVehicleAlert_regional_element (OSCTXT *pctxt, 
   ASN1T_EmergencyVehicleAlert_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  EmergencyVehicleAlert_regional                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'EmergencyVehicleAlert'
*/
/* List of ASN1T_EmergencyVehicleAlert_regional_element */
typedef ASN1TSeqOfList ASN1T_EmergencyVehicleAlert_regional;

class EXTERN ASN1C_EmergencyVehicleAlert_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_EmergencyVehicleAlert_regional& msgData;
public:
   /**
    * Control class: ASN1C_EmergencyVehicleAlert_regional
    * Data class:    ASN1T_EmergencyVehicleAlert_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_EmergencyVehicleAlert_regional
       (ASN1T_EmergencyVehicleAlert_regional& data);

   /**
    * Control class: ASN1C_EmergencyVehicleAlert_regional<br/>
    * Data class: ASN1T_EmergencyVehicleAlert_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_EmergencyVehicleAlert_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_EmergencyVehicleAlert_regional& data);

   /**
    * Control class: ASN1C_EmergencyVehicleAlert_regional<br/>
    * Data class: ASN1T_EmergencyVehicleAlert_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_EmergencyVehicleAlert_regional (ASN1CType& ccobj
      , ASN1T_EmergencyVehicleAlert_regional& data);

   virtual ~ASN1C_EmergencyVehicleAlert_regional () {}

   /**
    * Data class: ASN1T_EmergencyVehicleAlert_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_EmergencyVehicleAlert_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_EmergencyVehicleAlert_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_EmergencyVehicleAlert_regional_element* NewElement ();

   /**
    * Data class: ASN1T_EmergencyVehicleAlert_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_EmergencyVehicleAlert_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_EmergencyVehicleAlert_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_EmergencyVehicleAlert_regional* pmatches);

private:
   ASN1C_EmergencyVehicleAlert_regional& operator= (const ASN1C_EmergencyVehicleAlert_regional&) {return *this;}
} ;

EXTERN int asn1PE_EmergencyVehicleAlert_regional (OSCTXT* pctxt, ASN1T_EmergencyVehicleAlert_regional* pvalue);

EXTERN int asn1PD_EmergencyVehicleAlert_regional (OSCTXT* pctxt, ASN1T_EmergencyVehicleAlert_regional* pvalue);

EXTERN int XmlEnc_EmergencyVehicleAlert_regional (OSCTXT* pctxt, 
   ASN1T_EmergencyVehicleAlert_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EmergencyVehicleAlert_regional (OSCTXT* pctxt, 
   ASN1T_EmergencyVehicleAlert_regional* pvalue);

EXTERN int asn1JsonEnc_EmergencyVehicleAlert_regional (OSCTXT *pctxt, ASN1T_EmergencyVehicleAlert_regional *pvalue);

EXTERN int asn1JsonDec_EmergencyVehicleAlert_regional (OSCTXT *pctxt, ASN1T_EmergencyVehicleAlert_regional *pvalue);

EXTERN int asn1PrtToStrm_EmergencyVehicleAlert_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_EmergencyVehicleAlert_regional* pvalue);

EXTERN int asn1Init_EmergencyVehicleAlert_regional (
   ASN1T_EmergencyVehicleAlert_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_EmergencyVehicleAlert_regional (OSCTXT *pctxt, 
   ASN1T_EmergencyVehicleAlert_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  EmergencyVehicleAlert                                     */
/*                                                            */
/**************************************************************/
/*
EmergencyVehicleAlert ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   id [1] TemporaryID OPTIONAL,
   rsaMsg [2] RoadSideAlert,
     -- the DSRCmsgID inside this 
                   -- data frame is set as per the 
                   -- RoadSideAlert.  
   responseType [3] ResponseType OPTIONAL,
   details [4] EmergencyDetails OPTIONAL,
                   -- Combines these 3 items: 
                   -- SirenInUse,                     
                   -- LightbarInUse,                  
                   -- MultiVehicleReponse,
   mass [5] VehicleMass OPTIONAL,
   basicType [6] VehicleType OPTIONAL,
                                -- gross size and axle cnt
   -- type of vehicle and agency when known
   vehicleType [7] VehicleGroupAffected OPTIONAL,
   responseEquip [8] IncidentResponseEquipment OPTIONAL,
   responderType [9] ResponderGroupAffected OPTIONAL,
   regional [10] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-EmergencyVehicleAlert}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-EmergencyVehicleAlert}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_EmergencyVehicleAlert {
   struct {
      unsigned timeStampPresent : 1;
      unsigned idPresent : 1;
      unsigned responseTypePresent : 1;
      unsigned detailsPresent : 1;
      unsigned massPresent : 1;
      unsigned basicTypePresent : 1;
      unsigned vehicleTypePresent : 1;
      unsigned responseEquipPresent : 1;
      unsigned responderTypePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_TemporaryID id;
   ASN1T_RoadSideAlert rsaMsg;
   ASN1T_ResponseType responseType;
   ASN1T_EmergencyDetails details;
   ASN1T_VehicleMass mass;
   ASN1T_VehicleType basicType;
   ASN1T_VehicleGroupAffected vehicleType;
   ASN1T_IncidentResponseEquipment responseEquip;
   ASN1T_ResponderGroupAffected responderType;
   ASN1T_EmergencyVehicleAlert_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_EmergencyVehicleAlert ();
} ;

EXTERN int asn1PE_EmergencyVehicleAlert (OSCTXT* pctxt, ASN1T_EmergencyVehicleAlert* pvalue);

EXTERN int asn1PD_EmergencyVehicleAlert (OSCTXT* pctxt, ASN1T_EmergencyVehicleAlert* pvalue);

EXTERN int XmlEnc_EmergencyVehicleAlert (OSCTXT* pctxt, 
   ASN1T_EmergencyVehicleAlert* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EmergencyVehicleAlert (OSCTXT* pctxt, 
   ASN1T_EmergencyVehicleAlert* pvalue);

EXTERN int asn1JsonEnc_EmergencyVehicleAlert (OSCTXT *pctxt, ASN1T_EmergencyVehicleAlert *pvalue);

EXTERN int asn1JsonDec_EmergencyVehicleAlert (OSCTXT *pctxt, ASN1T_EmergencyVehicleAlert *pvalue);

EXTERN int asn1PrtToStrm_EmergencyVehicleAlert (OSCTXT *pctxt, 
   const char* name, const ASN1T_EmergencyVehicleAlert* pvalue);

EXTERN ASN1T_EmergencyVehicleAlert* 
   new_ASN1T_EmergencyVehicleAlert (ASN1CType& ccobj);

EXTERN int asn1Init_EmergencyVehicleAlert (ASN1T_EmergencyVehicleAlert* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_EmergencyVehicleAlert (OSCTXT *pctxt, 
   ASN1T_EmergencyVehicleAlert* pvalue);

/**************************************************************/
/*                                                            */
/*  ApproachOrLane                                            */
/*                                                            */
/**************************************************************/
/*
ApproachOrLane ::= CHOICE {
   approach [0] ApproachID,
   lane [1] LaneID
}
*/
/* Choice tag constants */

#define T_ApproachOrLane_approach       1
#define T_ApproachOrLane_lane           2

struct EXTERN ASN1T_ApproachOrLane {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ApproachID approach;
      /* t = 2 */
      ASN1T_LaneID lane;
   } u;
   ASN1T_ApproachOrLane () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_ApproachOrLane (OSCTXT* pctxt, ASN1T_ApproachOrLane* pvalue);

EXTERN int asn1PD_ApproachOrLane (OSCTXT* pctxt, ASN1T_ApproachOrLane* pvalue);

EXTERN int XmlEnc_ApproachOrLane (OSCTXT* pctxt, ASN1T_ApproachOrLane* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ApproachOrLane (OSCTXT* pctxt, ASN1T_ApproachOrLane* pvalue)
   ;

EXTERN int asn1JsonEnc_ApproachOrLane (OSCTXT *pctxt, ASN1T_ApproachOrLane *pvalue);

EXTERN int asn1JsonDec_ApproachOrLane (OSCTXT *pctxt, ASN1T_ApproachOrLane *pvalue);

EXTERN int asn1PrtToStrm_ApproachOrLane (OSCTXT *pctxt, 
   const char* name, const ASN1T_ApproachOrLane* pvalue);

EXTERN ASN1T_ApproachOrLane* new_ASN1T_ApproachOrLane (ASN1CType& ccobj);

EXTERN int asn1Init_ApproachOrLane (ASN1T_ApproachOrLane* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  IntersectionCollision_regional_element                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionCollision'
*/
struct EXTERN ASN1T_IntersectionCollision_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_IntersectionCollision_regional_element (OSCTXT* pctxt, ASN1T_IntersectionCollision_regional_element* pvalue);

EXTERN int asn1PD_IntersectionCollision_regional_element (OSCTXT* pctxt, ASN1T_IntersectionCollision_regional_element* pvalue);

EXTERN int XmlEnc_IntersectionCollision_regional_element (OSCTXT* pctxt, 
   ASN1T_IntersectionCollision_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionCollision_regional_element (OSCTXT* pctxt, 
   ASN1T_IntersectionCollision_regional_element* pvalue);

EXTERN int asn1JsonEnc_IntersectionCollision_regional_element (OSCTXT *pctxt, ASN1T_IntersectionCollision_regional_element *pvalue);

EXTERN int asn1JsonDec_IntersectionCollision_regional_element (OSCTXT *pctxt, ASN1T_IntersectionCollision_regional_element *pvalue);

EXTERN int asn1PrtToStrm_IntersectionCollision_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionCollision_regional_element* pvalue);

EXTERN ASN1T_IntersectionCollision_regional_element* 
   new_ASN1T_IntersectionCollision_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_IntersectionCollision_regional_element (
   ASN1T_IntersectionCollision_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionCollision_regional_element (OSCTXT *pctxt, 
   ASN1T_IntersectionCollision_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionCollision_regional                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionCollision'
*/
/* List of ASN1T_IntersectionCollision_regional_element */
typedef ASN1TSeqOfList ASN1T_IntersectionCollision_regional;

class EXTERN ASN1C_IntersectionCollision_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_IntersectionCollision_regional& msgData;
public:
   /**
    * Control class: ASN1C_IntersectionCollision_regional
    * Data class:    ASN1T_IntersectionCollision_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_IntersectionCollision_regional
       (ASN1T_IntersectionCollision_regional& data);

   /**
    * Control class: ASN1C_IntersectionCollision_regional<br/>
    * Data class: ASN1T_IntersectionCollision_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_IntersectionCollision_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_IntersectionCollision_regional& data);

   /**
    * Control class: ASN1C_IntersectionCollision_regional<br/>
    * Data class: ASN1T_IntersectionCollision_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_IntersectionCollision_regional (ASN1CType& ccobj
      , ASN1T_IntersectionCollision_regional& data);

   virtual ~ASN1C_IntersectionCollision_regional () {}

   /**
    * Data class: ASN1T_IntersectionCollision_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_IntersectionCollision_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_IntersectionCollision_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_IntersectionCollision_regional_element* NewElement ();

   /**
    * Data class: ASN1T_IntersectionCollision_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_IntersectionCollision_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_IntersectionCollision_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_IntersectionCollision_regional* pmatches);

private:
   ASN1C_IntersectionCollision_regional& operator= (const ASN1C_IntersectionCollision_regional&) {return *this;}
} ;

EXTERN int asn1PE_IntersectionCollision_regional (OSCTXT* pctxt, ASN1T_IntersectionCollision_regional* pvalue);

EXTERN int asn1PD_IntersectionCollision_regional (OSCTXT* pctxt, ASN1T_IntersectionCollision_regional* pvalue);

EXTERN int XmlEnc_IntersectionCollision_regional (OSCTXT* pctxt, 
   ASN1T_IntersectionCollision_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionCollision_regional (OSCTXT* pctxt, 
   ASN1T_IntersectionCollision_regional* pvalue);

EXTERN int asn1JsonEnc_IntersectionCollision_regional (OSCTXT *pctxt, ASN1T_IntersectionCollision_regional *pvalue);

EXTERN int asn1JsonDec_IntersectionCollision_regional (OSCTXT *pctxt, ASN1T_IntersectionCollision_regional *pvalue);

EXTERN int asn1PrtToStrm_IntersectionCollision_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionCollision_regional* pvalue);

EXTERN int asn1Init_IntersectionCollision_regional (
   ASN1T_IntersectionCollision_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionCollision_regional (OSCTXT *pctxt, 
   ASN1T_IntersectionCollision_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionCollision                                     */
/*                                                            */
/**************************************************************/
/*
IntersectionCollision ::= SEQUENCE {
   msgCnt [0] MsgCount,
   id [1] TemporaryID,
   timeStamp [2] MinuteOfTheYear OPTIONAL,
   partOne [3] BSMcoreData OPTIONAL,
   path [4] PathHistory OPTIONAL,
                  -- a set of recent path points forming a history
   pathPrediction [5] PathPrediction OPTIONAL,
                  -- the predicted path
   intersectionID [6] IntersectionReferenceID,
                  -- the applicable Intersection
   laneNumber [7] EXPLICIT ApproachOrLane,
                  -- the best estimate of the applicable Lane or Approach
   eventFlag [8] VehicleEventFlags,
                  -- used to convey vehicle Panic Events,  
                  -- Set to indicate "Intersection Violation" 
   regional [9] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-IntersectionCollision}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-IntersectionCollision}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_IntersectionCollision {
   struct {
      unsigned timeStampPresent : 1;
      unsigned partOnePresent : 1;
      unsigned pathPresent : 1;
      unsigned pathPredictionPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MsgCount msgCnt;
   ASN1T_TemporaryID id;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_BSMcoreData partOne;
   ASN1T_PathHistory path;
   ASN1T_PathPrediction pathPrediction;
   ASN1T_IntersectionReferenceID intersectionID;
   ASN1T_ApproachOrLane laneNumber;
   ASN1T_VehicleEventFlags eventFlag;
   ASN1T_IntersectionCollision_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_IntersectionCollision ();
} ;

EXTERN int asn1PE_IntersectionCollision (OSCTXT* pctxt, ASN1T_IntersectionCollision* pvalue);

EXTERN int asn1PD_IntersectionCollision (OSCTXT* pctxt, ASN1T_IntersectionCollision* pvalue);

EXTERN int XmlEnc_IntersectionCollision (OSCTXT* pctxt, 
   ASN1T_IntersectionCollision* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionCollision (OSCTXT* pctxt, 
   ASN1T_IntersectionCollision* pvalue);

EXTERN int asn1JsonEnc_IntersectionCollision (OSCTXT *pctxt, ASN1T_IntersectionCollision *pvalue);

EXTERN int asn1JsonDec_IntersectionCollision (OSCTXT *pctxt, ASN1T_IntersectionCollision *pvalue);

EXTERN int asn1PrtToStrm_IntersectionCollision (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionCollision* pvalue);

EXTERN ASN1T_IntersectionCollision* 
   new_ASN1T_IntersectionCollision (ASN1CType& ccobj);

EXTERN int asn1Init_IntersectionCollision (ASN1T_IntersectionCollision* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionCollision (OSCTXT *pctxt, 
   ASN1T_IntersectionCollision* pvalue);

/**************************************************************/
/*                                                            */
/*  NMEAcorrections_regional_element                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NMEAcorrections'
*/
struct EXTERN ASN1T_NMEAcorrections_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_NMEAcorrections_regional_element (OSCTXT* pctxt, ASN1T_NMEAcorrections_regional_element* pvalue);

EXTERN int asn1PD_NMEAcorrections_regional_element (OSCTXT* pctxt, ASN1T_NMEAcorrections_regional_element* pvalue);

EXTERN int XmlEnc_NMEAcorrections_regional_element (OSCTXT* pctxt, 
   ASN1T_NMEAcorrections_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NMEAcorrections_regional_element (OSCTXT* pctxt, 
   ASN1T_NMEAcorrections_regional_element* pvalue);

EXTERN int asn1JsonEnc_NMEAcorrections_regional_element (OSCTXT *pctxt, ASN1T_NMEAcorrections_regional_element *pvalue);

EXTERN int asn1JsonDec_NMEAcorrections_regional_element (OSCTXT *pctxt, ASN1T_NMEAcorrections_regional_element *pvalue);

EXTERN int asn1PrtToStrm_NMEAcorrections_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_NMEAcorrections_regional_element* pvalue);

EXTERN ASN1T_NMEAcorrections_regional_element* 
   new_ASN1T_NMEAcorrections_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_NMEAcorrections_regional_element (
   ASN1T_NMEAcorrections_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NMEAcorrections_regional_element (OSCTXT *pctxt, 
   ASN1T_NMEAcorrections_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  NMEAcorrections_regional                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NMEAcorrections'
*/
/* List of ASN1T_NMEAcorrections_regional_element */
typedef ASN1TSeqOfList ASN1T_NMEAcorrections_regional;

class EXTERN ASN1C_NMEAcorrections_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_NMEAcorrections_regional& msgData;
public:
   /**
    * Control class: ASN1C_NMEAcorrections_regional
    * Data class:    ASN1T_NMEAcorrections_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_NMEAcorrections_regional (ASN1T_NMEAcorrections_regional& data);

   /**
    * Control class: ASN1C_NMEAcorrections_regional<br/>
    * Data class: ASN1T_NMEAcorrections_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_NMEAcorrections_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_NMEAcorrections_regional& data);

   /**
    * Control class: ASN1C_NMEAcorrections_regional<br/>
    * Data class: ASN1T_NMEAcorrections_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_NMEAcorrections_regional (ASN1CType& ccobj
      , ASN1T_NMEAcorrections_regional& data);

   virtual ~ASN1C_NMEAcorrections_regional () {}

   /**
    * Data class: ASN1T_NMEAcorrections_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_NMEAcorrections_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_NMEAcorrections_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_NMEAcorrections_regional_element* NewElement ();

   /**
    * Data class: ASN1T_NMEAcorrections_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_NMEAcorrections_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_NMEAcorrections_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_NMEAcorrections_regional* pmatches);

private:
   ASN1C_NMEAcorrections_regional& operator= (const ASN1C_NMEAcorrections_regional&) {return *this;}
} ;

EXTERN int asn1PE_NMEAcorrections_regional (OSCTXT* pctxt, ASN1T_NMEAcorrections_regional* pvalue);

EXTERN int asn1PD_NMEAcorrections_regional (OSCTXT* pctxt, ASN1T_NMEAcorrections_regional* pvalue);

EXTERN int XmlEnc_NMEAcorrections_regional (OSCTXT* pctxt, 
   ASN1T_NMEAcorrections_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NMEAcorrections_regional (OSCTXT* pctxt, 
   ASN1T_NMEAcorrections_regional* pvalue);

EXTERN int asn1JsonEnc_NMEAcorrections_regional (OSCTXT *pctxt, ASN1T_NMEAcorrections_regional *pvalue);

EXTERN int asn1JsonDec_NMEAcorrections_regional (OSCTXT *pctxt, ASN1T_NMEAcorrections_regional *pvalue);

EXTERN int asn1PrtToStrm_NMEAcorrections_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_NMEAcorrections_regional* pvalue);

EXTERN int asn1Init_NMEAcorrections_regional (ASN1T_NMEAcorrections_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NMEAcorrections_regional (OSCTXT *pctxt, 
   ASN1T_NMEAcorrections_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  NMEAcorrections                                           */
/*                                                            */
/**************************************************************/
/*
NMEAcorrections ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   rev [1] NMEA-Revision OPTIONAL,
             -- the specific edition of the standard
             -- that is being sent, 4.x at the time of publication
   msg [2] NMEA-MsgType OPTIONAL,
             -- the message and sub-message type, as
             -- defined in the revision being used
   -- NOTE The message type is also in the payload expressed as a string, 
   wdCount [3] ObjectCount OPTIONAL,
             -- a count of octets to follow
             -- observe that not all NMEA sentences are limited to 82 characters 
   payload [4] NMEA-Payload,
   regional [5] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-NMEAcorrections}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-NMEAcorrections}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_NMEAcorrections {
   struct {
      unsigned timeStampPresent : 1;
      unsigned revPresent : 1;
      unsigned msgPresent : 1;
      unsigned wdCountPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_NMEA_Revision rev;
   ASN1T_NMEA_MsgType msg;
   ASN1T_ObjectCount wdCount;
   ASN1T_NMEA_Payload payload;
   ASN1T_NMEAcorrections_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_NMEAcorrections ();
} ;

EXTERN int asn1PE_NMEAcorrections (OSCTXT* pctxt, ASN1T_NMEAcorrections* pvalue);

EXTERN int asn1PD_NMEAcorrections (OSCTXT* pctxt, ASN1T_NMEAcorrections* pvalue);

EXTERN int XmlEnc_NMEAcorrections (OSCTXT* pctxt, 
   ASN1T_NMEAcorrections* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NMEAcorrections (OSCTXT* pctxt, ASN1T_NMEAcorrections* pvalue
   );

EXTERN int asn1JsonEnc_NMEAcorrections (OSCTXT *pctxt, ASN1T_NMEAcorrections *pvalue);

EXTERN int asn1JsonDec_NMEAcorrections (OSCTXT *pctxt, ASN1T_NMEAcorrections *pvalue);

EXTERN int asn1PrtToStrm_NMEAcorrections (OSCTXT *pctxt, 
   const char* name, const ASN1T_NMEAcorrections* pvalue);

EXTERN ASN1T_NMEAcorrections* new_ASN1T_NMEAcorrections (ASN1CType& ccobj);

EXTERN int asn1Init_NMEAcorrections (ASN1T_NMEAcorrections* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NMEAcorrections (OSCTXT *pctxt, ASN1T_NMEAcorrections* pvalue);

/**************************************************************/
/*                                                            */
/*  Sample                                                    */
/*                                                            */
/**************************************************************/
/*
Sample ::= SEQUENCE {
   sampleStart [0] INTEGER (0..255), --  Sample Starting Point
   sampleEnd [1] INTEGER (0..255) --  Sample Ending Point
}
*/
struct EXTERN ASN1T_Sample {
   OSUINT8 sampleStart;
   OSUINT8 sampleEnd;
} ;

EXTERN int asn1PE_Sample (OSCTXT* pctxt, ASN1T_Sample* pvalue);

EXTERN int asn1PD_Sample (OSCTXT* pctxt, ASN1T_Sample* pvalue);

EXTERN int XmlEnc_Sample (OSCTXT* pctxt, ASN1T_Sample* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Sample (OSCTXT* pctxt, ASN1T_Sample* pvalue);

EXTERN int asn1JsonEnc_Sample (OSCTXT *pctxt, ASN1T_Sample *pvalue);

EXTERN int asn1JsonDec_Sample (OSCTXT *pctxt, ASN1T_Sample *pvalue);

EXTERN int asn1PrtToStrm_Sample (OSCTXT *pctxt, 
   const char* name, const ASN1T_Sample* pvalue);

EXTERN ASN1T_Sample* new_ASN1T_Sample (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ProbeDataManagement_term                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeDataManagement'
*/
/* Choice tag constants */

#define T_ProbeDataManagement_term_termtime 1
#define T_ProbeDataManagement_term_termDistance 2

struct EXTERN ASN1T_ProbeDataManagement_term {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_TermTime termtime;
      /* t = 2 */
      ASN1T_TermDistance termDistance;
   } u;
   ASN1T_ProbeDataManagement_term () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_ProbeDataManagement_term (OSCTXT* pctxt, ASN1T_ProbeDataManagement_term* pvalue);

EXTERN int asn1PD_ProbeDataManagement_term (OSCTXT* pctxt, ASN1T_ProbeDataManagement_term* pvalue);

EXTERN int XmlEnc_ProbeDataManagement_term (OSCTXT* pctxt, 
   ASN1T_ProbeDataManagement_term* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeDataManagement_term (OSCTXT* pctxt, 
   ASN1T_ProbeDataManagement_term* pvalue);

EXTERN int asn1JsonEnc_ProbeDataManagement_term (OSCTXT *pctxt, ASN1T_ProbeDataManagement_term *pvalue);

EXTERN int asn1JsonDec_ProbeDataManagement_term (OSCTXT *pctxt, ASN1T_ProbeDataManagement_term *pvalue);

EXTERN int asn1PrtToStrm_ProbeDataManagement_term (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeDataManagement_term* pvalue);

EXTERN ASN1T_ProbeDataManagement_term* 
   new_ASN1T_ProbeDataManagement_term (ASN1CType& ccobj);

EXTERN int asn1Init_ProbeDataManagement_term (ASN1T_ProbeDataManagement_term* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  SnapshotTime                                              */
/*                                                            */
/**************************************************************/
/*
SnapshotTime ::= SEQUENCE {
   speed1 [0] GrossSpeed, -- meters/sec - the instantaneous speed  
                           -- when the calculation is performed
   time1 [1] SecondOfTime, -- in seconds
   speed2 [2] GrossSpeed, -- meters/sec - the instantaneous speed 
                           -- when the calculation is performed
   time2 [3] SecondOfTime -- in seconds
}
*/
struct EXTERN ASN1T_SnapshotTime {
   ASN1T_GrossSpeed speed1;
   ASN1T_SecondOfTime time1;
   ASN1T_GrossSpeed speed2;
   ASN1T_SecondOfTime time2;
} ;

EXTERN int asn1PE_SnapshotTime (OSCTXT* pctxt, ASN1T_SnapshotTime* pvalue);

EXTERN int asn1PD_SnapshotTime (OSCTXT* pctxt, ASN1T_SnapshotTime* pvalue);

EXTERN int XmlEnc_SnapshotTime (OSCTXT* pctxt, ASN1T_SnapshotTime* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SnapshotTime (OSCTXT* pctxt, ASN1T_SnapshotTime* pvalue);

EXTERN int asn1JsonEnc_SnapshotTime (OSCTXT *pctxt, ASN1T_SnapshotTime *pvalue);

EXTERN int asn1JsonDec_SnapshotTime (OSCTXT *pctxt, ASN1T_SnapshotTime *pvalue);

EXTERN int asn1PrtToStrm_SnapshotTime (OSCTXT *pctxt, 
   const char* name, const ASN1T_SnapshotTime* pvalue);

EXTERN ASN1T_SnapshotTime* new_ASN1T_SnapshotTime (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SnapshotDistance                                          */
/*                                                            */
/**************************************************************/
/*
SnapshotDistance ::= SEQUENCE {
   distance1 [0] GrossDistance, -- meters
   speed1 [1] GrossSpeed, -- meters/second
   distance2 [2] GrossDistance, -- meters
   speed2 [3] GrossSpeed -- meters/second
}
*/
struct EXTERN ASN1T_SnapshotDistance {
   ASN1T_GrossDistance distance1;
   ASN1T_GrossSpeed speed1;
   ASN1T_GrossDistance distance2;
   ASN1T_GrossSpeed speed2;
} ;

EXTERN int asn1PE_SnapshotDistance (OSCTXT* pctxt, ASN1T_SnapshotDistance* pvalue);

EXTERN int asn1PD_SnapshotDistance (OSCTXT* pctxt, ASN1T_SnapshotDistance* pvalue);

EXTERN int XmlEnc_SnapshotDistance (OSCTXT* pctxt, 
   ASN1T_SnapshotDistance* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SnapshotDistance (OSCTXT* pctxt, 
   ASN1T_SnapshotDistance* pvalue);

EXTERN int asn1JsonEnc_SnapshotDistance (OSCTXT *pctxt, ASN1T_SnapshotDistance *pvalue);

EXTERN int asn1JsonDec_SnapshotDistance (OSCTXT *pctxt, ASN1T_SnapshotDistance *pvalue);

EXTERN int asn1PrtToStrm_SnapshotDistance (OSCTXT *pctxt, 
   const char* name, const ASN1T_SnapshotDistance* pvalue);

EXTERN ASN1T_SnapshotDistance* new_ASN1T_SnapshotDistance (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ProbeDataManagement_snapshot                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeDataManagement'
*/
/* Choice tag constants */

#define T_ProbeDataManagement_snapshot_snapshotTime 1
#define T_ProbeDataManagement_snapshot_snapshotDistance 2

struct EXTERN ASN1T_ProbeDataManagement_snapshot {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_SnapshotTime *snapshotTime;
      /* t = 2 */
      ASN1T_SnapshotDistance *snapshotDistance;
   } u;
   ASN1T_ProbeDataManagement_snapshot () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_ProbeDataManagement_snapshot (OSCTXT* pctxt, ASN1T_ProbeDataManagement_snapshot* pvalue);

EXTERN int asn1PD_ProbeDataManagement_snapshot (OSCTXT* pctxt, ASN1T_ProbeDataManagement_snapshot* pvalue);

EXTERN int XmlEnc_ProbeDataManagement_snapshot (OSCTXT* pctxt, 
   ASN1T_ProbeDataManagement_snapshot* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeDataManagement_snapshot (OSCTXT* pctxt, 
   ASN1T_ProbeDataManagement_snapshot* pvalue);

EXTERN int asn1JsonEnc_ProbeDataManagement_snapshot (OSCTXT *pctxt, ASN1T_ProbeDataManagement_snapshot *pvalue);

EXTERN int asn1JsonDec_ProbeDataManagement_snapshot (OSCTXT *pctxt, ASN1T_ProbeDataManagement_snapshot *pvalue);

EXTERN int asn1PrtToStrm_ProbeDataManagement_snapshot (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeDataManagement_snapshot* pvalue);

EXTERN ASN1T_ProbeDataManagement_snapshot* 
   new_ASN1T_ProbeDataManagement_snapshot (ASN1CType& ccobj);

EXTERN int asn1Init_ProbeDataManagement_snapshot (
   ASN1T_ProbeDataManagement_snapshot* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ProbeDataManagement_snapshot (OSCTXT *pctxt, 
   ASN1T_ProbeDataManagement_snapshot* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatusRequest                                      */
/*                                                            */
/**************************************************************/
/*
VehicleStatusRequest ::= SEQUENCE {
   dataType [0] VehicleStatusDeviceTypeTag,
   subType [1] INTEGER (1..15) OPTIONAL,
   sendOnLessThenValue [2] INTEGER (-32767..32767) OPTIONAL,
   sendOnMoreThenValue [3] INTEGER (-32767..32767) OPTIONAL,
   sendAll [4] BOOLEAN OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_VehicleStatusRequest {
   struct {
      unsigned subTypePresent : 1;
      unsigned sendOnLessThenValuePresent : 1;
      unsigned sendOnMoreThenValuePresent : 1;
      unsigned sendAllPresent : 1;
   } m;
   ASN1T_VehicleStatusDeviceTypeTag dataType;
   OSUINT8 subType;
   OSINT16 sendOnLessThenValue;
   OSINT16 sendOnMoreThenValue;
   OSBOOL sendAll;
   ASN1TSeqExt extElem1;
   ASN1T_VehicleStatusRequest ();
} ;

EXTERN int asn1PE_VehicleStatusRequest (OSCTXT* pctxt, ASN1T_VehicleStatusRequest* pvalue);

EXTERN int asn1PD_VehicleStatusRequest (OSCTXT* pctxt, ASN1T_VehicleStatusRequest* pvalue);

EXTERN int XmlEnc_VehicleStatusRequest (OSCTXT* pctxt, 
   ASN1T_VehicleStatusRequest* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatusRequest (OSCTXT* pctxt, 
   ASN1T_VehicleStatusRequest* pvalue);

EXTERN int asn1JsonEnc_VehicleStatusRequest (OSCTXT *pctxt, ASN1T_VehicleStatusRequest *pvalue);

EXTERN int asn1JsonDec_VehicleStatusRequest (OSCTXT *pctxt, ASN1T_VehicleStatusRequest *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatusRequest (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatusRequest* pvalue);

EXTERN ASN1T_VehicleStatusRequest* 
   new_ASN1T_VehicleStatusRequest (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleStatusRequest (ASN1T_VehicleStatusRequest* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleStatusRequest (OSCTXT *pctxt, 
   ASN1T_VehicleStatusRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatusRequestList                                  */
/*                                                            */
/**************************************************************/
/*
VehicleStatusRequestList ::= SEQUENCE (SIZE (1..32)) OF VehicleStatusRequest
*/
/* List of ASN1T_VehicleStatusRequest */
typedef ASN1TSeqOfList ASN1T_VehicleStatusRequestList;

class EXTERN ASN1C_VehicleStatusRequestList :
public ASN1CSeqOfList
{
protected:
   ASN1T_VehicleStatusRequestList& msgData;
public:
   /**
    * Control class: ASN1C_VehicleStatusRequestList
    * Data class:    ASN1T_VehicleStatusRequestList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VehicleStatusRequestList (ASN1T_VehicleStatusRequestList& data);

   /**
    * Control class: ASN1C_VehicleStatusRequestList<br/>
    * Data class: ASN1T_VehicleStatusRequestList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VehicleStatusRequestList (OSRTMessageBufferIF& msgBuf
      , ASN1T_VehicleStatusRequestList& data);

   /**
    * Control class: ASN1C_VehicleStatusRequestList<br/>
    * Data class: ASN1T_VehicleStatusRequestList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_VehicleStatusRequestList (ASN1CType& ccobj
      , ASN1T_VehicleStatusRequestList& data);

   virtual ~ASN1C_VehicleStatusRequestList () {}

   /**
    * Data class: ASN1T_VehicleStatusRequest<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_VehicleStatusRequest* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_VehicleStatusRequest.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_VehicleStatusRequest* NewElement ();

   /**
    * Data class: ASN1T_VehicleStatusRequest.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_VehicleStatusRequest* AppendNewElement ();

private:
   ASN1C_VehicleStatusRequestList& operator= (const ASN1C_VehicleStatusRequestList&) {return *this;}
} ;

EXTERN int asn1PE_VehicleStatusRequestList (OSCTXT* pctxt, ASN1T_VehicleStatusRequestList* pvalue);

EXTERN int asn1PD_VehicleStatusRequestList (OSCTXT* pctxt, ASN1T_VehicleStatusRequestList* pvalue);

EXTERN int XmlEnc_VehicleStatusRequestList (OSCTXT* pctxt, 
   ASN1T_VehicleStatusRequestList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatusRequestList (OSCTXT* pctxt, 
   ASN1T_VehicleStatusRequestList* pvalue);

EXTERN int asn1JsonEnc_VehicleStatusRequestList (OSCTXT *pctxt, ASN1T_VehicleStatusRequestList *pvalue);

EXTERN int asn1JsonDec_VehicleStatusRequestList (OSCTXT *pctxt, ASN1T_VehicleStatusRequestList *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatusRequestList (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatusRequestList* pvalue);

EXTERN int asn1Init_VehicleStatusRequestList (ASN1T_VehicleStatusRequestList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleStatusRequestList (OSCTXT *pctxt, 
   ASN1T_VehicleStatusRequestList* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeDataManagement_regional_element                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeDataManagement'
*/
struct EXTERN ASN1T_ProbeDataManagement_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_ProbeDataManagement_regional_element (OSCTXT* pctxt, ASN1T_ProbeDataManagement_regional_element* pvalue);

EXTERN int asn1PD_ProbeDataManagement_regional_element (OSCTXT* pctxt, ASN1T_ProbeDataManagement_regional_element* pvalue);

EXTERN int XmlEnc_ProbeDataManagement_regional_element (OSCTXT* pctxt, 
   ASN1T_ProbeDataManagement_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeDataManagement_regional_element (OSCTXT* pctxt, 
   ASN1T_ProbeDataManagement_regional_element* pvalue);

EXTERN int asn1JsonEnc_ProbeDataManagement_regional_element (OSCTXT *pctxt, ASN1T_ProbeDataManagement_regional_element *pvalue);

EXTERN int asn1JsonDec_ProbeDataManagement_regional_element (OSCTXT *pctxt, ASN1T_ProbeDataManagement_regional_element *pvalue);

EXTERN int asn1PrtToStrm_ProbeDataManagement_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeDataManagement_regional_element* pvalue);

EXTERN ASN1T_ProbeDataManagement_regional_element* 
   new_ASN1T_ProbeDataManagement_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_ProbeDataManagement_regional_element (
   ASN1T_ProbeDataManagement_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ProbeDataManagement_regional_element (OSCTXT *pctxt, 
   ASN1T_ProbeDataManagement_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeDataManagement_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeDataManagement'
*/
/* List of ASN1T_ProbeDataManagement_regional_element */
typedef ASN1TSeqOfList ASN1T_ProbeDataManagement_regional;

class EXTERN ASN1C_ProbeDataManagement_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_ProbeDataManagement_regional& msgData;
public:
   /**
    * Control class: ASN1C_ProbeDataManagement_regional
    * Data class:    ASN1T_ProbeDataManagement_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ProbeDataManagement_regional
       (ASN1T_ProbeDataManagement_regional& data);

   /**
    * Control class: ASN1C_ProbeDataManagement_regional<br/>
    * Data class: ASN1T_ProbeDataManagement_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ProbeDataManagement_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_ProbeDataManagement_regional& data);

   /**
    * Control class: ASN1C_ProbeDataManagement_regional<br/>
    * Data class: ASN1T_ProbeDataManagement_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_ProbeDataManagement_regional (ASN1CType& ccobj
      , ASN1T_ProbeDataManagement_regional& data);

   virtual ~ASN1C_ProbeDataManagement_regional () {}

   /**
    * Data class: ASN1T_ProbeDataManagement_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_ProbeDataManagement_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_ProbeDataManagement_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_ProbeDataManagement_regional_element* NewElement ();

   /**
    * Data class: ASN1T_ProbeDataManagement_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_ProbeDataManagement_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_ProbeDataManagement_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_ProbeDataManagement_regional* pmatches);

private:
   ASN1C_ProbeDataManagement_regional& operator= (const ASN1C_ProbeDataManagement_regional&) {return *this;}
} ;

EXTERN int asn1PE_ProbeDataManagement_regional (OSCTXT* pctxt, ASN1T_ProbeDataManagement_regional* pvalue);

EXTERN int asn1PD_ProbeDataManagement_regional (OSCTXT* pctxt, ASN1T_ProbeDataManagement_regional* pvalue);

EXTERN int XmlEnc_ProbeDataManagement_regional (OSCTXT* pctxt, 
   ASN1T_ProbeDataManagement_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeDataManagement_regional (OSCTXT* pctxt, 
   ASN1T_ProbeDataManagement_regional* pvalue);

EXTERN int asn1JsonEnc_ProbeDataManagement_regional (OSCTXT *pctxt, ASN1T_ProbeDataManagement_regional *pvalue);

EXTERN int asn1JsonDec_ProbeDataManagement_regional (OSCTXT *pctxt, ASN1T_ProbeDataManagement_regional *pvalue);

EXTERN int asn1PrtToStrm_ProbeDataManagement_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeDataManagement_regional* pvalue);

EXTERN int asn1Init_ProbeDataManagement_regional (
   ASN1T_ProbeDataManagement_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ProbeDataManagement_regional (OSCTXT *pctxt, 
   ASN1T_ProbeDataManagement_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeDataManagement                                       */
/*                                                            */
/**************************************************************/
/*
ProbeDataManagement ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   sample [1] Sample, -- Identifies the vehicle  
                                          -- population affected by this
   directions [2] HeadingSlice, -- Applicable headings/directions
   term [3] EXPLICIT CHOICE {
      termtime [0] TermTime, -- Terminate this management process 
                                          -- based on Time-to-Live
      termDistance [1] TermDistance
   },
   snapshot [4] EXPLICIT CHOICE {
      snapshotTime [0] SnapshotTime, -- Collect snapshots based on Time
                                          -- the value 0 indicates forever
      snapshotDistance [1] SnapshotDistance
   },
   txInterval [5] SecondOfTime, -- Time Interval at which to send snapshots
   dataElements [6] VehicleStatusRequestList OPTIONAL,
                                          -- Control data frames and associated 
                                          -- trigger thresholds to be changed 
   regional [7] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-ProbeDataManagement}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-ProbeDataManagement}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_ProbeDataManagement {
   struct {
      unsigned timeStampPresent : 1;
      unsigned dataElementsPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_Sample sample;
   ASN1T_HeadingSlice directions;
   ASN1T_ProbeDataManagement_term term;
   ASN1T_ProbeDataManagement_snapshot snapshot;
   ASN1T_SecondOfTime txInterval;
   ASN1T_VehicleStatusRequestList dataElements;
   ASN1T_ProbeDataManagement_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_ProbeDataManagement ();
} ;

EXTERN int asn1PE_ProbeDataManagement (OSCTXT* pctxt, ASN1T_ProbeDataManagement* pvalue);

EXTERN int asn1PD_ProbeDataManagement (OSCTXT* pctxt, ASN1T_ProbeDataManagement* pvalue);

EXTERN int XmlEnc_ProbeDataManagement (OSCTXT* pctxt, 
   ASN1T_ProbeDataManagement* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeDataManagement (OSCTXT* pctxt, 
   ASN1T_ProbeDataManagement* pvalue);

EXTERN int asn1JsonEnc_ProbeDataManagement (OSCTXT *pctxt, ASN1T_ProbeDataManagement *pvalue);

EXTERN int asn1JsonDec_ProbeDataManagement (OSCTXT *pctxt, ASN1T_ProbeDataManagement *pvalue);

EXTERN int asn1PrtToStrm_ProbeDataManagement (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeDataManagement* pvalue);

EXTERN ASN1T_ProbeDataManagement* 
   new_ASN1T_ProbeDataManagement (ASN1CType& ccobj);

EXTERN int asn1Init_ProbeDataManagement (ASN1T_ProbeDataManagement* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ProbeDataManagement (OSCTXT *pctxt, 
   ASN1T_ProbeDataManagement* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleID                                                 */
/*                                                            */
/**************************************************************/
/*
VehicleID ::= CHOICE {
   entityID [0] TemporaryID,
   stationID [1] StationID
}
*/
/* Choice tag constants */

#define T_VehicleID_entityID            1
#define T_VehicleID_stationID           2

struct EXTERN ASN1T_VehicleID {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_TemporaryID *entityID;
      /* t = 2 */
      ASN1T_StationID stationID;
   } u;
   ASN1T_VehicleID () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_VehicleID (OSCTXT* pctxt, ASN1T_VehicleID* pvalue);

EXTERN int asn1PD_VehicleID (OSCTXT* pctxt, ASN1T_VehicleID* pvalue);

EXTERN int XmlEnc_VehicleID (OSCTXT* pctxt, ASN1T_VehicleID* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleID (OSCTXT* pctxt, ASN1T_VehicleID* pvalue);

EXTERN int asn1JsonEnc_VehicleID (OSCTXT *pctxt, ASN1T_VehicleID *pvalue);

EXTERN int asn1JsonDec_VehicleID (OSCTXT *pctxt, ASN1T_VehicleID *pvalue);

EXTERN int asn1PrtToStrm_VehicleID (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleID* pvalue);

EXTERN ASN1T_VehicleID* new_ASN1T_VehicleID (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleID (ASN1T_VehicleID* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleID (OSCTXT *pctxt, ASN1T_VehicleID* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleIdent_vehicleClass                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleIdent'
*/
/* Choice tag constants */

#define T_VehicleIdent_vehicleClass_vGroup 1
#define T_VehicleIdent_vehicleClass_rGroup 2
#define T_VehicleIdent_vehicleClass_rEquip 3

struct EXTERN ASN1T_VehicleIdent_vehicleClass {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_VehicleGroupAffected vGroup;
      /* t = 2 */
      ASN1T_ResponderGroupAffected rGroup;
      /* t = 3 */
      ASN1T_IncidentResponseEquipment rEquip;
   } u;
   ASN1T_VehicleIdent_vehicleClass () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_VehicleIdent_vehicleClass (OSCTXT* pctxt, ASN1T_VehicleIdent_vehicleClass* pvalue);

EXTERN int asn1PD_VehicleIdent_vehicleClass (OSCTXT* pctxt, ASN1T_VehicleIdent_vehicleClass* pvalue);

EXTERN int XmlEnc_VehicleIdent_vehicleClass (OSCTXT* pctxt, 
   ASN1T_VehicleIdent_vehicleClass* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleIdent_vehicleClass (OSCTXT* pctxt, 
   ASN1T_VehicleIdent_vehicleClass* pvalue);

EXTERN int asn1JsonEnc_VehicleIdent_vehicleClass (OSCTXT *pctxt, ASN1T_VehicleIdent_vehicleClass *pvalue);

EXTERN int asn1JsonDec_VehicleIdent_vehicleClass (OSCTXT *pctxt, ASN1T_VehicleIdent_vehicleClass *pvalue);

EXTERN int asn1PrtToStrm_VehicleIdent_vehicleClass (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleIdent_vehicleClass* pvalue);

EXTERN ASN1T_VehicleIdent_vehicleClass* 
   new_ASN1T_VehicleIdent_vehicleClass (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleIdent_vehicleClass (
   ASN1T_VehicleIdent_vehicleClass* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  VehicleIdent                                              */
/*                                                            */
/**************************************************************/
/*
VehicleIdent ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
                  -- a human readable name for debugging use
   vin [1] VINstring OPTIONAL,
                  -- vehicle VIN value
   ownerCode [2] IA5String (SIZE (1..32)) OPTIONAL,
                  -- vehicle owner code 
   id [3] EXPLICIT VehicleID OPTIONAL,
                  -- same value used in the BSM
   vehicleType [4] VehicleType OPTIONAL,
   vehicleClass [5] EXPLICIT CHOICE {
      vGroup [0] VehicleGroupAffected,
      rGroup [1] ResponderGroupAffected,
      rEquip [2] IncidentResponseEquipment
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_VehicleIdent {
   struct {
      unsigned namePresent : 1;
      unsigned vinPresent : 1;
      unsigned ownerCodePresent : 1;
      unsigned idPresent : 1;
      unsigned vehicleTypePresent : 1;
      unsigned vehicleClassPresent : 1;
   } m;
   ASN1T_DescriptiveName name;
   ASN1T_VINstring vin;
   const char* ownerCode;
   ASN1T_VehicleID id;
   ASN1T_VehicleType vehicleType;
   ASN1T_VehicleIdent_vehicleClass vehicleClass;
   ASN1TSeqExt extElem1;
   ASN1T_VehicleIdent ();
} ;

EXTERN int asn1PE_VehicleIdent (OSCTXT* pctxt, ASN1T_VehicleIdent* pvalue);

EXTERN int asn1PD_VehicleIdent (OSCTXT* pctxt, ASN1T_VehicleIdent* pvalue);

EXTERN int XmlEnc_VehicleIdent (OSCTXT* pctxt, ASN1T_VehicleIdent* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleIdent (OSCTXT* pctxt, ASN1T_VehicleIdent* pvalue);

EXTERN int asn1JsonEnc_VehicleIdent (OSCTXT *pctxt, ASN1T_VehicleIdent *pvalue);

EXTERN int asn1JsonDec_VehicleIdent (OSCTXT *pctxt, ASN1T_VehicleIdent *pvalue);

EXTERN int asn1PrtToStrm_VehicleIdent (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleIdent* pvalue);

EXTERN ASN1T_VehicleIdent* new_ASN1T_VehicleIdent (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleIdent (ASN1T_VehicleIdent* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleIdent (OSCTXT *pctxt, ASN1T_VehicleIdent* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_steering                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
struct EXTERN ASN1T_VehicleStatus_steering {
   struct {
      unsigned confidencePresent : 1;
      unsigned ratePresent : 1;
      unsigned wheelsPresent : 1;
   } m;
   ASN1T_SteeringWheelAngle angle;
   ASN1T_SteeringWheelAngleConfidence confidence;
   ASN1T_SteeringWheelAngleRateOfChange rate;
   ASN1T_DrivingWheelAngle wheels;
   ASN1T_VehicleStatus_steering ();
} ;

EXTERN int asn1PE_VehicleStatus_steering (OSCTXT* pctxt, ASN1T_VehicleStatus_steering* pvalue);

EXTERN int asn1PD_VehicleStatus_steering (OSCTXT* pctxt, ASN1T_VehicleStatus_steering* pvalue);

EXTERN int XmlEnc_VehicleStatus_steering (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_steering* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatus_steering (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_steering* pvalue);

EXTERN int asn1JsonEnc_VehicleStatus_steering (OSCTXT *pctxt, ASN1T_VehicleStatus_steering *pvalue);

EXTERN int asn1JsonDec_VehicleStatus_steering (OSCTXT *pctxt, ASN1T_VehicleStatus_steering *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_steering (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatus_steering* pvalue);

EXTERN ASN1T_VehicleStatus_steering* 
   new_ASN1T_VehicleStatus_steering (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleStatus_steering (ASN1T_VehicleStatus_steering* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  AccelSteerYawRateConfidence                               */
/*                                                            */
/**************************************************************/
/*
AccelSteerYawRateConfidence ::= SEQUENCE {
   yawRate [0] YawRateConfidence,
   acceleration [1] AccelerationConfidence,
   steeringWheelAngle [2] SteeringWheelAngleConfidence
}
*/
struct EXTERN ASN1T_AccelSteerYawRateConfidence {
   ASN1T_YawRateConfidence yawRate;
   ASN1T_AccelerationConfidence acceleration;
   ASN1T_SteeringWheelAngleConfidence steeringWheelAngle;
} ;

EXTERN int asn1PE_AccelSteerYawRateConfidence (OSCTXT* pctxt, ASN1T_AccelSteerYawRateConfidence* pvalue);

EXTERN int asn1PD_AccelSteerYawRateConfidence (OSCTXT* pctxt, ASN1T_AccelSteerYawRateConfidence* pvalue);

EXTERN int XmlEnc_AccelSteerYawRateConfidence (OSCTXT* pctxt, 
   ASN1T_AccelSteerYawRateConfidence* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AccelSteerYawRateConfidence (OSCTXT* pctxt, 
   ASN1T_AccelSteerYawRateConfidence* pvalue);

EXTERN int asn1JsonEnc_AccelSteerYawRateConfidence (OSCTXT *pctxt, ASN1T_AccelSteerYawRateConfidence *pvalue);

EXTERN int asn1JsonDec_AccelSteerYawRateConfidence (OSCTXT *pctxt, ASN1T_AccelSteerYawRateConfidence *pvalue);

EXTERN int asn1PrtToStrm_AccelSteerYawRateConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_AccelSteerYawRateConfidence* pvalue);

EXTERN ASN1T_AccelSteerYawRateConfidence* 
   new_ASN1T_AccelSteerYawRateConfidence (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ConfidenceSet                                             */
/*                                                            */
/**************************************************************/
/*
ConfidenceSet ::= SEQUENCE {
   accelConfidence [0] AccelSteerYawRateConfidence OPTIONAL,
   speedConfidence [1] SpeedandHeadingandThrottleConfidence OPTIONAL,
   timeConfidence [2] TimeConfidence OPTIONAL,
   posConfidence [3] PositionConfidenceSet OPTIONAL,
   steerConfidence [4] SteeringWheelAngleConfidence OPTIONAL,
   headingConfidence [5] HeadingConfidence OPTIONAL,
   throttleConfidence [6] ThrottleConfidence OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_ConfidenceSet {
   struct {
      unsigned accelConfidencePresent : 1;
      unsigned speedConfidencePresent : 1;
      unsigned timeConfidencePresent : 1;
      unsigned posConfidencePresent : 1;
      unsigned steerConfidencePresent : 1;
      unsigned headingConfidencePresent : 1;
      unsigned throttleConfidencePresent : 1;
   } m;
   ASN1T_AccelSteerYawRateConfidence accelConfidence;
   ASN1T_SpeedandHeadingandThrottleConfidence speedConfidence;
   ASN1T_TimeConfidence timeConfidence;
   ASN1T_PositionConfidenceSet posConfidence;
   ASN1T_SteeringWheelAngleConfidence steerConfidence;
   ASN1T_HeadingConfidence headingConfidence;
   ASN1T_ThrottleConfidence throttleConfidence;
   ASN1TSeqExt extElem1;
   ASN1T_ConfidenceSet ();
} ;

EXTERN int asn1PE_ConfidenceSet (OSCTXT* pctxt, ASN1T_ConfidenceSet* pvalue);

EXTERN int asn1PD_ConfidenceSet (OSCTXT* pctxt, ASN1T_ConfidenceSet* pvalue);

EXTERN int XmlEnc_ConfidenceSet (OSCTXT* pctxt, ASN1T_ConfidenceSet* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ConfidenceSet (OSCTXT* pctxt, ASN1T_ConfidenceSet* pvalue);

EXTERN int asn1JsonEnc_ConfidenceSet (OSCTXT *pctxt, ASN1T_ConfidenceSet *pvalue);

EXTERN int asn1JsonDec_ConfidenceSet (OSCTXT *pctxt, ASN1T_ConfidenceSet *pvalue);

EXTERN int asn1PrtToStrm_ConfidenceSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_ConfidenceSet* pvalue);

EXTERN ASN1T_ConfidenceSet* new_ASN1T_ConfidenceSet (ASN1CType& ccobj);

EXTERN int asn1Init_ConfidenceSet (ASN1T_ConfidenceSet* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ConfidenceSet (OSCTXT *pctxt, ASN1T_ConfidenceSet* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_accelSets                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
struct EXTERN ASN1T_VehicleStatus_accelSets {
   struct {
      unsigned accel4wayPresent : 1;
      unsigned vertAccelThresPresent : 1;
      unsigned yawRateConPresent : 1;
      unsigned hozAccelConPresent : 1;
      unsigned confidenceSetPresent : 1;
   } m;
   ASN1T_AccelerationSet4Way accel4way;
   ASN1T_VerticalAccelerationThreshold vertAccelThres;
   ASN1T_YawRateConfidence yawRateCon;
   ASN1T_AccelerationConfidence hozAccelCon;
   ASN1T_ConfidenceSet confidenceSet;
   ASN1T_VehicleStatus_accelSets ();
} ;

EXTERN int asn1PE_VehicleStatus_accelSets (OSCTXT* pctxt, ASN1T_VehicleStatus_accelSets* pvalue);

EXTERN int asn1PD_VehicleStatus_accelSets (OSCTXT* pctxt, ASN1T_VehicleStatus_accelSets* pvalue);

EXTERN int XmlEnc_VehicleStatus_accelSets (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_accelSets* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatus_accelSets (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_accelSets* pvalue);

EXTERN int asn1JsonEnc_VehicleStatus_accelSets (OSCTXT *pctxt, ASN1T_VehicleStatus_accelSets *pvalue);

EXTERN int asn1JsonDec_VehicleStatus_accelSets (OSCTXT *pctxt, ASN1T_VehicleStatus_accelSets *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_accelSets (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatus_accelSets* pvalue);

EXTERN ASN1T_VehicleStatus_accelSets* 
   new_ASN1T_VehicleStatus_accelSets (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleStatus_accelSets (ASN1T_VehicleStatus_accelSets* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleStatus_accelSets (OSCTXT *pctxt, 
   ASN1T_VehicleStatus_accelSets* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_object                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
struct EXTERN ASN1T_VehicleStatus_object {
   ASN1T_ObstacleDistance obDist;
   ASN1T_Angle obDirect;
   ASN1T_DDateTime dateTime;
} ;

EXTERN int asn1PE_VehicleStatus_object (OSCTXT* pctxt, ASN1T_VehicleStatus_object* pvalue);

EXTERN int asn1PD_VehicleStatus_object (OSCTXT* pctxt, ASN1T_VehicleStatus_object* pvalue);

EXTERN int XmlEnc_VehicleStatus_object (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_object* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatus_object (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_object* pvalue);

EXTERN int asn1JsonEnc_VehicleStatus_object (OSCTXT *pctxt, ASN1T_VehicleStatus_object *pvalue);

EXTERN int asn1JsonDec_VehicleStatus_object (OSCTXT *pctxt, ASN1T_VehicleStatus_object *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_object (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatus_object* pvalue);

EXTERN ASN1T_VehicleStatus_object* 
   new_ASN1T_VehicleStatus_object (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleStatus_object (ASN1T_VehicleStatus_object* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_vehicleData                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
struct EXTERN ASN1T_VehicleStatus_vehicleData {
   ASN1T_VehicleHeight height;
   ASN1T_BumperHeights bumpers;
   ASN1T_VehicleMass mass;
   ASN1T_TrailerWeight trailerWeight;
   ASN1T_VehicleType type;
} ;

EXTERN int asn1PE_VehicleStatus_vehicleData (OSCTXT* pctxt, ASN1T_VehicleStatus_vehicleData* pvalue);

EXTERN int asn1PD_VehicleStatus_vehicleData (OSCTXT* pctxt, ASN1T_VehicleStatus_vehicleData* pvalue);

EXTERN int XmlEnc_VehicleStatus_vehicleData (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_vehicleData* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatus_vehicleData (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_vehicleData* pvalue);

EXTERN int asn1JsonEnc_VehicleStatus_vehicleData (OSCTXT *pctxt, ASN1T_VehicleStatus_vehicleData *pvalue);

EXTERN int asn1JsonDec_VehicleStatus_vehicleData (OSCTXT *pctxt, ASN1T_VehicleStatus_vehicleData *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_vehicleData (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatus_vehicleData* pvalue);

EXTERN ASN1T_VehicleStatus_vehicleData* 
   new_ASN1T_VehicleStatus_vehicleData (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TireData                                                  */
/*                                                            */
/**************************************************************/
/*
TireData ::= SEQUENCE {
   location [0] TireLocation OPTIONAL,
   pressure [1] TirePressure OPTIONAL,
   temp [2] TireTemp OPTIONAL,
   wheelSensorStatus [3] WheelSensorStatus OPTIONAL,
   wheelEndElectFault [4] WheelEndElectFault OPTIONAL,
   leakageRate [5] TireLeakageRate OPTIONAL,
   detection [6] TirePressureThresholdDetection OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TireData {
   struct {
      unsigned locationPresent : 1;
      unsigned pressurePresent : 1;
      unsigned tempPresent : 1;
      unsigned wheelSensorStatusPresent : 1;
      unsigned wheelEndElectFaultPresent : 1;
      unsigned leakageRatePresent : 1;
      unsigned detectionPresent : 1;
   } m;
   ASN1T_TireLocation location;
   ASN1T_TirePressure pressure;
   ASN1T_TireTemp temp;
   ASN1T_WheelSensorStatus wheelSensorStatus;
   ASN1T_WheelEndElectFault wheelEndElectFault;
   ASN1T_TireLeakageRate leakageRate;
   ASN1T_TirePressureThresholdDetection detection;
   ASN1TSeqExt extElem1;
   ASN1T_TireData ();
} ;

EXTERN int asn1PE_TireData (OSCTXT* pctxt, ASN1T_TireData* pvalue);

EXTERN int asn1PD_TireData (OSCTXT* pctxt, ASN1T_TireData* pvalue);

EXTERN int XmlEnc_TireData (OSCTXT* pctxt, ASN1T_TireData* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TireData (OSCTXT* pctxt, ASN1T_TireData* pvalue);

EXTERN int asn1JsonEnc_TireData (OSCTXT *pctxt, ASN1T_TireData *pvalue);

EXTERN int asn1JsonDec_TireData (OSCTXT *pctxt, ASN1T_TireData *pvalue);

EXTERN int asn1PrtToStrm_TireData (OSCTXT *pctxt, 
   const char* name, const ASN1T_TireData* pvalue);

EXTERN ASN1T_TireData* new_ASN1T_TireData (ASN1CType& ccobj);

EXTERN int asn1Init_TireData (ASN1T_TireData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TireData (OSCTXT *pctxt, ASN1T_TireData* pvalue);

/**************************************************************/
/*                                                            */
/*  TireDataList                                              */
/*                                                            */
/**************************************************************/
/*
TireDataList ::= SEQUENCE (SIZE (1..16)) OF TireData
*/
/* List of ASN1T_TireData */
typedef ASN1TSeqOfList ASN1T_TireDataList;

class EXTERN ASN1C_TireDataList :
public ASN1CSeqOfList
{
protected:
   ASN1T_TireDataList& msgData;
public:
   /**
    * Control class: ASN1C_TireDataList
    * Data class:    ASN1T_TireDataList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TireDataList (ASN1T_TireDataList& data);

   /**
    * Control class: ASN1C_TireDataList<br/>
    * Data class: ASN1T_TireDataList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TireDataList (OSRTMessageBufferIF& msgBuf, ASN1T_TireDataList& data);

   /**
    * Control class: ASN1C_TireDataList<br/>
    * Data class: ASN1T_TireDataList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_TireDataList (ASN1CType& ccobj, ASN1T_TireDataList& data);

   virtual ~ASN1C_TireDataList () {}

   /**
    * Data class: ASN1T_TireData<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_TireData* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_TireData.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_TireData* NewElement ();

   /**
    * Data class: ASN1T_TireData.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_TireData* AppendNewElement ();

private:
   ASN1C_TireDataList& operator= (const ASN1C_TireDataList&) {return *this;}
} ;

EXTERN int asn1PE_TireDataList (OSCTXT* pctxt, ASN1T_TireDataList* pvalue);

EXTERN int asn1PD_TireDataList (OSCTXT* pctxt, ASN1T_TireDataList* pvalue);

EXTERN int XmlEnc_TireDataList (OSCTXT* pctxt, ASN1T_TireDataList* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TireDataList (OSCTXT* pctxt, ASN1T_TireDataList* pvalue);

EXTERN int asn1JsonEnc_TireDataList (OSCTXT *pctxt, ASN1T_TireDataList *pvalue);

EXTERN int asn1JsonDec_TireDataList (OSCTXT *pctxt, ASN1T_TireDataList *pvalue);

EXTERN int asn1PrtToStrm_TireDataList (OSCTXT *pctxt, 
   const char* name, const ASN1T_TireDataList* pvalue);

EXTERN int asn1Init_TireDataList (ASN1T_TireDataList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TireDataList (OSCTXT *pctxt, ASN1T_TireDataList* pvalue);

/**************************************************************/
/*                                                            */
/*  AxleWeightSet                                             */
/*                                                            */
/**************************************************************/
/*
AxleWeightSet ::= SEQUENCE {
   location [0] AxleLocation OPTIONAL,
   weight [1] AxleWeight OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_AxleWeightSet {
   struct {
      unsigned locationPresent : 1;
      unsigned weightPresent : 1;
   } m;
   ASN1T_AxleLocation location;
   ASN1T_AxleWeight weight;
   ASN1TSeqExt extElem1;
   ASN1T_AxleWeightSet ();
} ;

EXTERN int asn1PE_AxleWeightSet (OSCTXT* pctxt, ASN1T_AxleWeightSet* pvalue);

EXTERN int asn1PD_AxleWeightSet (OSCTXT* pctxt, ASN1T_AxleWeightSet* pvalue);

EXTERN int XmlEnc_AxleWeightSet (OSCTXT* pctxt, ASN1T_AxleWeightSet* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AxleWeightSet (OSCTXT* pctxt, ASN1T_AxleWeightSet* pvalue);

EXTERN int asn1JsonEnc_AxleWeightSet (OSCTXT *pctxt, ASN1T_AxleWeightSet *pvalue);

EXTERN int asn1JsonDec_AxleWeightSet (OSCTXT *pctxt, ASN1T_AxleWeightSet *pvalue);

EXTERN int asn1PrtToStrm_AxleWeightSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_AxleWeightSet* pvalue);

EXTERN ASN1T_AxleWeightSet* new_ASN1T_AxleWeightSet (ASN1CType& ccobj);

EXTERN int asn1Init_AxleWeightSet (ASN1T_AxleWeightSet* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_AxleWeightSet (OSCTXT *pctxt, ASN1T_AxleWeightSet* pvalue);

/**************************************************************/
/*                                                            */
/*  AxleWeightList                                            */
/*                                                            */
/**************************************************************/
/*
AxleWeightList ::= SEQUENCE (SIZE (1..16)) OF AxleWeightSet
*/
/* List of ASN1T_AxleWeightSet */
typedef ASN1TSeqOfList ASN1T_AxleWeightList;

class EXTERN ASN1C_AxleWeightList :
public ASN1CSeqOfList
{
protected:
   ASN1T_AxleWeightList& msgData;
public:
   /**
    * Control class: ASN1C_AxleWeightList
    * Data class:    ASN1T_AxleWeightList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_AxleWeightList (ASN1T_AxleWeightList& data);

   /**
    * Control class: ASN1C_AxleWeightList<br/>
    * Data class: ASN1T_AxleWeightList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_AxleWeightList (OSRTMessageBufferIF& msgBuf
      , ASN1T_AxleWeightList& data);

   /**
    * Control class: ASN1C_AxleWeightList<br/>
    * Data class: ASN1T_AxleWeightList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_AxleWeightList (ASN1CType& ccobj, ASN1T_AxleWeightList& data);

   virtual ~ASN1C_AxleWeightList () {}

   /**
    * Data class: ASN1T_AxleWeightSet<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_AxleWeightSet* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_AxleWeightSet.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_AxleWeightSet* NewElement ();

   /**
    * Data class: ASN1T_AxleWeightSet.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_AxleWeightSet* AppendNewElement ();

private:
   ASN1C_AxleWeightList& operator= (const ASN1C_AxleWeightList&) {return *this;}
} ;

EXTERN int asn1PE_AxleWeightList (OSCTXT* pctxt, ASN1T_AxleWeightList* pvalue);

EXTERN int asn1PD_AxleWeightList (OSCTXT* pctxt, ASN1T_AxleWeightList* pvalue);

EXTERN int XmlEnc_AxleWeightList (OSCTXT* pctxt, ASN1T_AxleWeightList* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AxleWeightList (OSCTXT* pctxt, ASN1T_AxleWeightList* pvalue)
   ;

EXTERN int asn1JsonEnc_AxleWeightList (OSCTXT *pctxt, ASN1T_AxleWeightList *pvalue);

EXTERN int asn1JsonDec_AxleWeightList (OSCTXT *pctxt, ASN1T_AxleWeightList *pvalue);

EXTERN int asn1PrtToStrm_AxleWeightList (OSCTXT *pctxt, 
   const char* name, const ASN1T_AxleWeightList* pvalue);

EXTERN int asn1Init_AxleWeightList (ASN1T_AxleWeightList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_AxleWeightList (OSCTXT *pctxt, ASN1T_AxleWeightList* pvalue);

/**************************************************************/
/*                                                            */
/*  J1939data                                                 */
/*                                                            */
/**************************************************************/
/*
J1939data ::= SEQUENCE {
   -- Tire conditions by tire
   tires [0] TireDataList OPTIONAL,
   -- Vehicle Weights by axle
   axles [1] AxleWeightList OPTIONAL,
   trailerWeight [2] TrailerWeight OPTIONAL,
   cargoWeight [3] CargoWeight OPTIONAL,
   steeringAxleTemperature [4] SteeringAxleTemperature OPTIONAL,
   driveAxleLocation [5] DriveAxleLocation OPTIONAL,
   driveAxleLiftAirPressure [6] DriveAxleLiftAirPressure OPTIONAL,
   driveAxleTemperature [7] DriveAxleTemperature OPTIONAL,
   driveAxleLubePressure [8] DriveAxleLubePressure OPTIONAL,
   steeringAxleLubePressure [9] SteeringAxleLubePressure OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_J1939data {
   struct {
      unsigned tiresPresent : 1;
      unsigned axlesPresent : 1;
      unsigned trailerWeightPresent : 1;
      unsigned cargoWeightPresent : 1;
      unsigned steeringAxleTemperaturePresent : 1;
      unsigned driveAxleLocationPresent : 1;
      unsigned driveAxleLiftAirPressurePresent : 1;
      unsigned driveAxleTemperaturePresent : 1;
      unsigned driveAxleLubePressurePresent : 1;
      unsigned steeringAxleLubePressurePresent : 1;
   } m;
   ASN1T_TireDataList tires;
   ASN1T_AxleWeightList axles;
   ASN1T_TrailerWeight trailerWeight;
   ASN1T_CargoWeight cargoWeight;
   ASN1T_SteeringAxleTemperature steeringAxleTemperature;
   ASN1T_DriveAxleLocation driveAxleLocation;
   ASN1T_DriveAxleLiftAirPressure driveAxleLiftAirPressure;
   ASN1T_DriveAxleTemperature driveAxleTemperature;
   ASN1T_DriveAxleLubePressure driveAxleLubePressure;
   ASN1T_SteeringAxleLubePressure steeringAxleLubePressure;
   ASN1TSeqExt extElem1;
   ASN1T_J1939data ();
} ;

EXTERN int asn1PE_J1939data (OSCTXT* pctxt, ASN1T_J1939data* pvalue);

EXTERN int asn1PD_J1939data (OSCTXT* pctxt, ASN1T_J1939data* pvalue);

EXTERN int XmlEnc_J1939data (OSCTXT* pctxt, ASN1T_J1939data* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_J1939data (OSCTXT* pctxt, ASN1T_J1939data* pvalue);

EXTERN int asn1JsonEnc_J1939data (OSCTXT *pctxt, ASN1T_J1939data *pvalue);

EXTERN int asn1JsonDec_J1939data (OSCTXT *pctxt, ASN1T_J1939data *pvalue);

EXTERN int asn1PrtToStrm_J1939data (OSCTXT *pctxt, 
   const char* name, const ASN1T_J1939data* pvalue);

EXTERN ASN1T_J1939data* new_ASN1T_J1939data (ASN1CType& ccobj);

EXTERN int asn1Init_J1939data (ASN1T_J1939data* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_J1939data (OSCTXT *pctxt, ASN1T_J1939data* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_weatherReport                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
struct EXTERN ASN1T_VehicleStatus_weatherReport {
   struct {
      unsigned rainRatePresent : 1;
      unsigned precipSituationPresent : 1;
      unsigned solarRadiationPresent : 1;
      unsigned frictionPresent : 1;
   } m;
   ASN1T_EssPrecipYesNo isRaining;
   ASN1T_EssPrecipRate rainRate;
   ASN1T_EssPrecipSituation precipSituation;
   ASN1T_EssSolarRadiation solarRadiation;
   ASN1T_EssMobileFriction friction;
   ASN1T_VehicleStatus_weatherReport ();
} ;

EXTERN int asn1PE_VehicleStatus_weatherReport (OSCTXT* pctxt, ASN1T_VehicleStatus_weatherReport* pvalue);

EXTERN int asn1PD_VehicleStatus_weatherReport (OSCTXT* pctxt, ASN1T_VehicleStatus_weatherReport* pvalue);

EXTERN int XmlEnc_VehicleStatus_weatherReport (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_weatherReport* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatus_weatherReport (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_weatherReport* pvalue);

EXTERN int asn1JsonEnc_VehicleStatus_weatherReport (OSCTXT *pctxt, ASN1T_VehicleStatus_weatherReport *pvalue);

EXTERN int asn1JsonDec_VehicleStatus_weatherReport (OSCTXT *pctxt, ASN1T_VehicleStatus_weatherReport *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_weatherReport (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatus_weatherReport* pvalue);

EXTERN ASN1T_VehicleStatus_weatherReport* 
   new_ASN1T_VehicleStatus_weatherReport (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleStatus_weatherReport (
   ASN1T_VehicleStatus_weatherReport* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  VehicleStatus                                             */
/*                                                            */
/**************************************************************/
/*
VehicleStatus ::= SEQUENCE {
   lights [0] ExteriorLights OPTIONAL, -- Exterior Lights
   lightBar [1] LightbarInUse OPTIONAL, -- PS Lights
   wipers [2] WiperSet OPTIONAL, -- Wipers
   brakeStatus [3] BrakeSystemStatus OPTIONAL,
                                                            -- Braking Data
   brakePressure [4] BrakeAppliedPressure OPTIONAL, -- Braking Pressure
   roadFriction [5] CoefficientOfFriction OPTIONAL, -- Roadway Friction 
   sunData [6] SunSensor OPTIONAL, -- Sun Sensor        
   rainData [7] RainSensor OPTIONAL, -- Rain Sensor        
   airTemp [8] AmbientAirTemperature OPTIONAL, -- Air Temperature    
   airPres [9] AmbientAirPressure OPTIONAL, -- Air Pressure
   steering [10] SEQUENCE {
      angle [0] SteeringWheelAngle,
      confidence [1] SteeringWheelAngleConfidence OPTIONAL,
      rate [2] SteeringWheelAngleRateOfChange OPTIONAL,
      wheels [3] DrivingWheelAngle OPTIONAL
   } OPTIONAL, -- steering data
   accelSets [11] SEQUENCE {
      accel4way [0] AccelerationSet4Way OPTIONAL,
      vertAccelThres [1] VerticalAccelerationThreshold OPTIONAL,
                                                      -- Wheel which has 
                                                      -- exceeded acceleration point
      yawRateCon [2] YawRateConfidence OPTIONAL,
                                                      -- Yaw Rate Confidence
      hozAccelCon [3] AccelerationConfidence OPTIONAL,
                                                      -- Acceleration Confidence 
      confidenceSet [4] ConfidenceSet OPTIONAL
                                                      -- general ConfidenceSet 
   } OPTIONAL,
   object [12] SEQUENCE {
      obDist [0] ObstacleDistance, -- Obstacle Distance        
      obDirect [1] Angle, -- Obstacle Direction        
      dateTime [2] DDateTime -- time detected
   } OPTIONAL, -- detected Obstacle data
   fullPos [13] FullPositionVector OPTIONAL, -- complete set of time and
                                                    -- position, speed, heading
   throttlePos [14] ThrottlePosition OPTIONAL,
   speedHeadC [15] SpeedandHeadingandThrottleConfidence OPTIONAL,
   speedC [16] SpeedConfidence OPTIONAL,
   vehicleData [17] SEQUENCE {
      height [0] VehicleHeight,
      bumpers [1] BumperHeights,
      mass [2] VehicleMass,
      trailerWeight [3] TrailerWeight,
      type [4] VehicleType
   } OPTIONAL, -- vehicle data
   vehicleIdent [18] VehicleIdent OPTIONAL, -- common vehicle identity data
   j1939data [19] J1939data OPTIONAL, -- Various SAE J1938 data items
   weatherReport [20] SEQUENCE {
      isRaining [0] EssPrecipYesNo,
      rainRate [1] EssPrecipRate OPTIONAL,
      precipSituation [2] EssPrecipSituation OPTIONAL,
      solarRadiation [3] EssSolarRadiation OPTIONAL,
      friction [4] EssMobileFriction OPTIONAL
   } OPTIONAL, -- local weather data
   gnssStatus [21] GNSSstatus OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_VehicleStatus {
   struct {
      unsigned lightsPresent : 1;
      unsigned lightBarPresent : 1;
      unsigned wipersPresent : 1;
      unsigned brakeStatusPresent : 1;
      unsigned brakePressurePresent : 1;
      unsigned roadFrictionPresent : 1;
      unsigned sunDataPresent : 1;
      unsigned rainDataPresent : 1;
      unsigned airTempPresent : 1;
      unsigned airPresPresent : 1;
      unsigned steeringPresent : 1;
      unsigned accelSetsPresent : 1;
      unsigned objectPresent : 1;
      unsigned fullPosPresent : 1;
      unsigned throttlePosPresent : 1;
      unsigned speedHeadCPresent : 1;
      unsigned speedCPresent : 1;
      unsigned vehicleDataPresent : 1;
      unsigned vehicleIdentPresent : 1;
      unsigned j1939dataPresent : 1;
      unsigned weatherReportPresent : 1;
      unsigned gnssStatusPresent : 1;
   } m;
   ASN1T_ExteriorLights lights;
   ASN1T_LightbarInUse lightBar;
   ASN1T_WiperSet wipers;
   ASN1T_BrakeSystemStatus brakeStatus;
   ASN1T_BrakeAppliedPressure brakePressure;
   ASN1T_CoefficientOfFriction roadFriction;
   ASN1T_SunSensor sunData;
   ASN1T_RainSensor rainData;
   ASN1T_AmbientAirTemperature airTemp;
   ASN1T_AmbientAirPressure airPres;
   ASN1T_VehicleStatus_steering steering;
   ASN1T_VehicleStatus_accelSets accelSets;
   ASN1T_VehicleStatus_object object;
   ASN1T_FullPositionVector fullPos;
   ASN1T_ThrottlePosition throttlePos;
   ASN1T_SpeedandHeadingandThrottleConfidence speedHeadC;
   ASN1T_SpeedConfidence speedC;
   ASN1T_VehicleStatus_vehicleData vehicleData;
   ASN1T_VehicleIdent vehicleIdent;
   ASN1T_J1939data j1939data;
   ASN1T_VehicleStatus_weatherReport weatherReport;
   ASN1T_GNSSstatus gnssStatus;
   ASN1TSeqExt extElem1;
   ASN1T_VehicleStatus ();
} ;

EXTERN int asn1PE_VehicleStatus (OSCTXT* pctxt, ASN1T_VehicleStatus* pvalue);

EXTERN int asn1PD_VehicleStatus (OSCTXT* pctxt, ASN1T_VehicleStatus* pvalue);

EXTERN int XmlEnc_VehicleStatus (OSCTXT* pctxt, ASN1T_VehicleStatus* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatus (OSCTXT* pctxt, ASN1T_VehicleStatus* pvalue);

EXTERN int asn1JsonEnc_VehicleStatus (OSCTXT *pctxt, ASN1T_VehicleStatus *pvalue);

EXTERN int asn1JsonDec_VehicleStatus (OSCTXT *pctxt, ASN1T_VehicleStatus *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatus* pvalue);

EXTERN ASN1T_VehicleStatus* new_ASN1T_VehicleStatus (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleStatus (ASN1T_VehicleStatus* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleStatus (OSCTXT *pctxt, ASN1T_VehicleStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  Snapshot                                                  */
/*                                                            */
/**************************************************************/
/*
Snapshot ::= SEQUENCE {
   thePosition [0] FullPositionVector,
                -- data of the position and speed, 
   safetyExt [1] VehicleSafetyExtensions OPTIONAL,
   dataSet [2] VehicleStatus OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_Snapshot {
   struct {
      unsigned safetyExtPresent : 1;
      unsigned dataSetPresent : 1;
   } m;
   ASN1T_FullPositionVector thePosition;
   ASN1T_VehicleSafetyExtensions safetyExt;
   ASN1T_VehicleStatus dataSet;
   ASN1TSeqExt extElem1;
   ASN1T_Snapshot ();
} ;

EXTERN int asn1PE_Snapshot (OSCTXT* pctxt, ASN1T_Snapshot* pvalue);

EXTERN int asn1PD_Snapshot (OSCTXT* pctxt, ASN1T_Snapshot* pvalue);

EXTERN int XmlEnc_Snapshot (OSCTXT* pctxt, ASN1T_Snapshot* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Snapshot (OSCTXT* pctxt, ASN1T_Snapshot* pvalue);

EXTERN int asn1JsonEnc_Snapshot (OSCTXT *pctxt, ASN1T_Snapshot *pvalue);

EXTERN int asn1JsonDec_Snapshot (OSCTXT *pctxt, ASN1T_Snapshot *pvalue);

EXTERN int asn1PrtToStrm_Snapshot (OSCTXT *pctxt, 
   const char* name, const ASN1T_Snapshot* pvalue);

EXTERN ASN1T_Snapshot* new_ASN1T_Snapshot (ASN1CType& ccobj);

EXTERN int asn1Init_Snapshot (ASN1T_Snapshot* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_Snapshot (OSCTXT *pctxt, ASN1T_Snapshot* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData_snapshots                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeVehicleData'
*/
/* List of ASN1T_Snapshot */
typedef ASN1TSeqOfList ASN1T_ProbeVehicleData_snapshots;

class EXTERN ASN1C_ProbeVehicleData_snapshots :
public ASN1CSeqOfList
{
protected:
   ASN1T_ProbeVehicleData_snapshots& msgData;
public:
   /**
    * Control class: ASN1C_ProbeVehicleData_snapshots
    * Data class:    ASN1T_ProbeVehicleData_snapshots
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ProbeVehicleData_snapshots (ASN1T_ProbeVehicleData_snapshots& data);

   /**
    * Control class: ASN1C_ProbeVehicleData_snapshots<br/>
    * Data class: ASN1T_ProbeVehicleData_snapshots<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ProbeVehicleData_snapshots (OSRTMessageBufferIF& msgBuf
      , ASN1T_ProbeVehicleData_snapshots& data);

   /**
    * Control class: ASN1C_ProbeVehicleData_snapshots<br/>
    * Data class: ASN1T_ProbeVehicleData_snapshots<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_ProbeVehicleData_snapshots (ASN1CType& ccobj
      , ASN1T_ProbeVehicleData_snapshots& data);

   virtual ~ASN1C_ProbeVehicleData_snapshots () {}

   /**
    * Data class: ASN1T_Snapshot<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_Snapshot* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_Snapshot.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_Snapshot* NewElement ();

   /**
    * Data class: ASN1T_Snapshot.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_Snapshot* AppendNewElement ();

private:
   ASN1C_ProbeVehicleData_snapshots& operator= (const ASN1C_ProbeVehicleData_snapshots&) {return *this;}
} ;

EXTERN int asn1PE_ProbeVehicleData_snapshots (OSCTXT* pctxt, ASN1T_ProbeVehicleData_snapshots* pvalue);

EXTERN int asn1PD_ProbeVehicleData_snapshots (OSCTXT* pctxt, ASN1T_ProbeVehicleData_snapshots* pvalue);

EXTERN int XmlEnc_ProbeVehicleData_snapshots (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData_snapshots* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeVehicleData_snapshots (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData_snapshots* pvalue);

EXTERN int asn1JsonEnc_ProbeVehicleData_snapshots (OSCTXT *pctxt, ASN1T_ProbeVehicleData_snapshots *pvalue);

EXTERN int asn1JsonDec_ProbeVehicleData_snapshots (OSCTXT *pctxt, ASN1T_ProbeVehicleData_snapshots *pvalue);

EXTERN int asn1PrtToStrm_ProbeVehicleData_snapshots (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeVehicleData_snapshots* pvalue);

EXTERN int asn1Init_ProbeVehicleData_snapshots (
   ASN1T_ProbeVehicleData_snapshots* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ProbeVehicleData_snapshots (OSCTXT *pctxt, 
   ASN1T_ProbeVehicleData_snapshots* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData_regional_element                         */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeVehicleData'
*/
struct EXTERN ASN1T_ProbeVehicleData_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_ProbeVehicleData_regional_element (OSCTXT* pctxt, ASN1T_ProbeVehicleData_regional_element* pvalue);

EXTERN int asn1PD_ProbeVehicleData_regional_element (OSCTXT* pctxt, ASN1T_ProbeVehicleData_regional_element* pvalue);

EXTERN int XmlEnc_ProbeVehicleData_regional_element (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeVehicleData_regional_element (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData_regional_element* pvalue);

EXTERN int asn1JsonEnc_ProbeVehicleData_regional_element (OSCTXT *pctxt, ASN1T_ProbeVehicleData_regional_element *pvalue);

EXTERN int asn1JsonDec_ProbeVehicleData_regional_element (OSCTXT *pctxt, ASN1T_ProbeVehicleData_regional_element *pvalue);

EXTERN int asn1PrtToStrm_ProbeVehicleData_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeVehicleData_regional_element* pvalue);

EXTERN ASN1T_ProbeVehicleData_regional_element* 
   new_ASN1T_ProbeVehicleData_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_ProbeVehicleData_regional_element (
   ASN1T_ProbeVehicleData_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ProbeVehicleData_regional_element (OSCTXT *pctxt, 
   ASN1T_ProbeVehicleData_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData_regional                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeVehicleData'
*/
/* List of ASN1T_ProbeVehicleData_regional_element */
typedef ASN1TSeqOfList ASN1T_ProbeVehicleData_regional;

class EXTERN ASN1C_ProbeVehicleData_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_ProbeVehicleData_regional& msgData;
public:
   /**
    * Control class: ASN1C_ProbeVehicleData_regional
    * Data class:    ASN1T_ProbeVehicleData_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ProbeVehicleData_regional (ASN1T_ProbeVehicleData_regional& data);

   /**
    * Control class: ASN1C_ProbeVehicleData_regional<br/>
    * Data class: ASN1T_ProbeVehicleData_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ProbeVehicleData_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_ProbeVehicleData_regional& data);

   /**
    * Control class: ASN1C_ProbeVehicleData_regional<br/>
    * Data class: ASN1T_ProbeVehicleData_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_ProbeVehicleData_regional (ASN1CType& ccobj
      , ASN1T_ProbeVehicleData_regional& data);

   virtual ~ASN1C_ProbeVehicleData_regional () {}

   /**
    * Data class: ASN1T_ProbeVehicleData_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_ProbeVehicleData_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_ProbeVehicleData_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_ProbeVehicleData_regional_element* NewElement ();

   /**
    * Data class: ASN1T_ProbeVehicleData_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_ProbeVehicleData_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_ProbeVehicleData_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_ProbeVehicleData_regional* pmatches);

private:
   ASN1C_ProbeVehicleData_regional& operator= (const ASN1C_ProbeVehicleData_regional&) {return *this;}
} ;

EXTERN int asn1PE_ProbeVehicleData_regional (OSCTXT* pctxt, ASN1T_ProbeVehicleData_regional* pvalue);

EXTERN int asn1PD_ProbeVehicleData_regional (OSCTXT* pctxt, ASN1T_ProbeVehicleData_regional* pvalue);

EXTERN int XmlEnc_ProbeVehicleData_regional (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeVehicleData_regional (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData_regional* pvalue);

EXTERN int asn1JsonEnc_ProbeVehicleData_regional (OSCTXT *pctxt, ASN1T_ProbeVehicleData_regional *pvalue);

EXTERN int asn1JsonDec_ProbeVehicleData_regional (OSCTXT *pctxt, ASN1T_ProbeVehicleData_regional *pvalue);

EXTERN int asn1PrtToStrm_ProbeVehicleData_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeVehicleData_regional* pvalue);

EXTERN int asn1Init_ProbeVehicleData_regional (
   ASN1T_ProbeVehicleData_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ProbeVehicleData_regional (OSCTXT *pctxt, 
   ASN1T_ProbeVehicleData_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData                                          */
/*                                                            */
/**************************************************************/
/*
ProbeVehicleData ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   segNum [1] ProbeSegmentNumber OPTIONAL,
                                         -- a short term Ident value
                                         -- not used when ident is used
   probeID [2] VehicleIdent OPTIONAL,
                                         -- identity data for selected 
                                         -- types of vehicles    
   startVector [3] FullPositionVector, -- the space and time of 
                                         -- transmission to the RSU
   vehicleType [4] VehicleClassification, -- type of vehicle, 
   snapshots [5] SEQUENCE (SIZE (1..32)) OF Snapshot,
                                         -- a seq of name-value pairs 
                                         -- along with the space and time 
                                         -- of the first measurement set
   regional [6] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-ProbeVehicleData}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-ProbeVehicleData}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_ProbeVehicleData {
   struct {
      unsigned timeStampPresent : 1;
      unsigned segNumPresent : 1;
      unsigned probeIDPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_ProbeSegmentNumber segNum;
   ASN1T_VehicleIdent probeID;
   ASN1T_FullPositionVector startVector;
   ASN1T_VehicleClassification vehicleType;
   ASN1T_ProbeVehicleData_snapshots snapshots;
   ASN1T_ProbeVehicleData_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_ProbeVehicleData ();
} ;

EXTERN int asn1PE_ProbeVehicleData (OSCTXT* pctxt, ASN1T_ProbeVehicleData* pvalue);

EXTERN int asn1PD_ProbeVehicleData (OSCTXT* pctxt, ASN1T_ProbeVehicleData* pvalue);

EXTERN int XmlEnc_ProbeVehicleData (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeVehicleData (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData* pvalue);

EXTERN int asn1JsonEnc_ProbeVehicleData (OSCTXT *pctxt, ASN1T_ProbeVehicleData *pvalue);

EXTERN int asn1JsonDec_ProbeVehicleData (OSCTXT *pctxt, ASN1T_ProbeVehicleData *pvalue);

EXTERN int asn1PrtToStrm_ProbeVehicleData (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeVehicleData* pvalue);

EXTERN ASN1T_ProbeVehicleData* new_ASN1T_ProbeVehicleData (ASN1CType& ccobj);

EXTERN int asn1Init_ProbeVehicleData (ASN1T_ProbeVehicleData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ProbeVehicleData (OSCTXT *pctxt, ASN1T_ProbeVehicleData* pvalue);

/**************************************************************/
/*                                                            */
/*  RTCMcorrections_regional_element                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RTCMcorrections'
*/
struct EXTERN ASN1T_RTCMcorrections_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_RTCMcorrections_regional_element (OSCTXT* pctxt, ASN1T_RTCMcorrections_regional_element* pvalue);

EXTERN int asn1PD_RTCMcorrections_regional_element (OSCTXT* pctxt, ASN1T_RTCMcorrections_regional_element* pvalue);

EXTERN int XmlEnc_RTCMcorrections_regional_element (OSCTXT* pctxt, 
   ASN1T_RTCMcorrections_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RTCMcorrections_regional_element (OSCTXT* pctxt, 
   ASN1T_RTCMcorrections_regional_element* pvalue);

EXTERN int asn1JsonEnc_RTCMcorrections_regional_element (OSCTXT *pctxt, ASN1T_RTCMcorrections_regional_element *pvalue);

EXTERN int asn1JsonDec_RTCMcorrections_regional_element (OSCTXT *pctxt, ASN1T_RTCMcorrections_regional_element *pvalue);

EXTERN int asn1PrtToStrm_RTCMcorrections_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_RTCMcorrections_regional_element* pvalue);

EXTERN ASN1T_RTCMcorrections_regional_element* 
   new_ASN1T_RTCMcorrections_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_RTCMcorrections_regional_element (
   ASN1T_RTCMcorrections_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RTCMcorrections_regional_element (OSCTXT *pctxt, 
   ASN1T_RTCMcorrections_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  RTCMcorrections_regional                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RTCMcorrections'
*/
/* List of ASN1T_RTCMcorrections_regional_element */
typedef ASN1TSeqOfList ASN1T_RTCMcorrections_regional;

class EXTERN ASN1C_RTCMcorrections_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_RTCMcorrections_regional& msgData;
public:
   /**
    * Control class: ASN1C_RTCMcorrections_regional
    * Data class:    ASN1T_RTCMcorrections_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RTCMcorrections_regional (ASN1T_RTCMcorrections_regional& data);

   /**
    * Control class: ASN1C_RTCMcorrections_regional<br/>
    * Data class: ASN1T_RTCMcorrections_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RTCMcorrections_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_RTCMcorrections_regional& data);

   /**
    * Control class: ASN1C_RTCMcorrections_regional<br/>
    * Data class: ASN1T_RTCMcorrections_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RTCMcorrections_regional (ASN1CType& ccobj
      , ASN1T_RTCMcorrections_regional& data);

   virtual ~ASN1C_RTCMcorrections_regional () {}

   /**
    * Data class: ASN1T_RTCMcorrections_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RTCMcorrections_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RTCMcorrections_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RTCMcorrections_regional_element* NewElement ();

   /**
    * Data class: ASN1T_RTCMcorrections_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RTCMcorrections_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_RTCMcorrections_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_RTCMcorrections_regional* pmatches);

private:
   ASN1C_RTCMcorrections_regional& operator= (const ASN1C_RTCMcorrections_regional&) {return *this;}
} ;

EXTERN int asn1PE_RTCMcorrections_regional (OSCTXT* pctxt, ASN1T_RTCMcorrections_regional* pvalue);

EXTERN int asn1PD_RTCMcorrections_regional (OSCTXT* pctxt, ASN1T_RTCMcorrections_regional* pvalue);

EXTERN int XmlEnc_RTCMcorrections_regional (OSCTXT* pctxt, 
   ASN1T_RTCMcorrections_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RTCMcorrections_regional (OSCTXT* pctxt, 
   ASN1T_RTCMcorrections_regional* pvalue);

EXTERN int asn1JsonEnc_RTCMcorrections_regional (OSCTXT *pctxt, ASN1T_RTCMcorrections_regional *pvalue);

EXTERN int asn1JsonDec_RTCMcorrections_regional (OSCTXT *pctxt, ASN1T_RTCMcorrections_regional *pvalue);

EXTERN int asn1PrtToStrm_RTCMcorrections_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_RTCMcorrections_regional* pvalue);

EXTERN int asn1Init_RTCMcorrections_regional (ASN1T_RTCMcorrections_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RTCMcorrections_regional (OSCTXT *pctxt, 
   ASN1T_RTCMcorrections_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RTCMcorrections                                           */
/*                                                            */
/**************************************************************/
/*
RTCMcorrections ::= SEQUENCE {
   msgCnt [0] MsgCount,
   rev [1] RTCM-Revision,
               -- the specific edition of the standard
               -- that is being sent
   timeStamp [2] MinuteOfTheYear OPTIONAL,
   -- Observer position, if needed
   anchorPoint [3] FullPositionVector OPTIONAL,
   -- Precise ant position and noise data for a rover
   rtcmHeader [4] RTCMheader OPTIONAL,
   -- one or more RTCM messages
   msgs [5] RTCMmessageList,
   regional [6] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-RTCMcorrections}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-RTCMcorrections}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_RTCMcorrections {
   struct {
      unsigned timeStampPresent : 1;
      unsigned anchorPointPresent : 1;
      unsigned rtcmHeaderPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MsgCount msgCnt;
   ASN1T_RTCM_Revision rev;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_FullPositionVector anchorPoint;
   ASN1T_RTCMheader rtcmHeader;
   ASN1T_RTCMmessageList msgs;
   ASN1T_RTCMcorrections_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_RTCMcorrections ();
} ;

EXTERN int asn1PE_RTCMcorrections (OSCTXT* pctxt, ASN1T_RTCMcorrections* pvalue);

EXTERN int asn1PD_RTCMcorrections (OSCTXT* pctxt, ASN1T_RTCMcorrections* pvalue);

EXTERN int XmlEnc_RTCMcorrections (OSCTXT* pctxt, 
   ASN1T_RTCMcorrections* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RTCMcorrections (OSCTXT* pctxt, ASN1T_RTCMcorrections* pvalue
   );

EXTERN int asn1JsonEnc_RTCMcorrections (OSCTXT *pctxt, ASN1T_RTCMcorrections *pvalue);

EXTERN int asn1JsonDec_RTCMcorrections (OSCTXT *pctxt, ASN1T_RTCMcorrections *pvalue);

EXTERN int asn1PrtToStrm_RTCMcorrections (OSCTXT *pctxt, 
   const char* name, const ASN1T_RTCMcorrections* pvalue);

EXTERN ASN1T_RTCMcorrections* new_ASN1T_RTCMcorrections (ASN1CType& ccobj);

EXTERN int asn1Init_RTCMcorrections (ASN1T_RTCMcorrections* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RTCMcorrections (OSCTXT *pctxt, ASN1T_RTCMcorrections* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionAccessPoint                                   */
/*                                                            */
/**************************************************************/
/*
IntersectionAccessPoint ::= CHOICE {
   lane [0] LaneID,
   approach [1] ApproachID,
   connection [2] LaneConnectionID,
   ...
}
*/
/* Choice tag constants */

#define T_IntersectionAccessPoint_lane  1
#define T_IntersectionAccessPoint_approach 2
#define T_IntersectionAccessPoint_connection 3
#define T_IntersectionAccessPoint_extElem1 4

struct EXTERN ASN1T_IntersectionAccessPoint {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_LaneID lane;
      /* t = 2 */
      ASN1T_ApproachID approach;
      /* t = 3 */
      ASN1T_LaneConnectionID connection;
      /* t = 4 */
      ASN1TOpenType *extElem1;
   } u;
   ASN1T_IntersectionAccessPoint () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_IntersectionAccessPoint (OSCTXT* pctxt, ASN1T_IntersectionAccessPoint* pvalue);

EXTERN int asn1PD_IntersectionAccessPoint (OSCTXT* pctxt, ASN1T_IntersectionAccessPoint* pvalue);

EXTERN int XmlEnc_IntersectionAccessPoint (OSCTXT* pctxt, 
   ASN1T_IntersectionAccessPoint* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionAccessPoint (OSCTXT* pctxt, 
   ASN1T_IntersectionAccessPoint* pvalue);

EXTERN int asn1JsonEnc_IntersectionAccessPoint (OSCTXT *pctxt, ASN1T_IntersectionAccessPoint *pvalue);

EXTERN int asn1JsonDec_IntersectionAccessPoint (OSCTXT *pctxt, ASN1T_IntersectionAccessPoint *pvalue);

EXTERN int asn1PrtToStrm_IntersectionAccessPoint (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionAccessPoint* pvalue);

EXTERN ASN1T_IntersectionAccessPoint* 
   new_ASN1T_IntersectionAccessPoint (ASN1CType& ccobj);

EXTERN int asn1Init_IntersectionAccessPoint (ASN1T_IntersectionAccessPoint* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionAccessPoint (OSCTXT *pctxt, 
   ASN1T_IntersectionAccessPoint* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequest_regional_element                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequest'
*/
struct EXTERN ASN1T_SignalRequest_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SignalRequest_regional_element (OSCTXT* pctxt, ASN1T_SignalRequest_regional_element* pvalue);

EXTERN int asn1PD_SignalRequest_regional_element (OSCTXT* pctxt, ASN1T_SignalRequest_regional_element* pvalue);

EXTERN int XmlEnc_SignalRequest_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalRequest_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequest_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalRequest_regional_element* pvalue);

EXTERN int asn1JsonEnc_SignalRequest_regional_element (OSCTXT *pctxt, ASN1T_SignalRequest_regional_element *pvalue);

EXTERN int asn1JsonDec_SignalRequest_regional_element (OSCTXT *pctxt, ASN1T_SignalRequest_regional_element *pvalue);

EXTERN int asn1PrtToStrm_SignalRequest_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequest_regional_element* pvalue);

EXTERN ASN1T_SignalRequest_regional_element* 
   new_ASN1T_SignalRequest_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequest_regional_element (
   ASN1T_SignalRequest_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequest_regional_element (OSCTXT *pctxt, 
   ASN1T_SignalRequest_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequest_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequest'
*/
/* List of ASN1T_SignalRequest_regional_element */
typedef ASN1TSeqOfList ASN1T_SignalRequest_regional;

class EXTERN ASN1C_SignalRequest_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalRequest_regional& msgData;
public:
   /**
    * Control class: ASN1C_SignalRequest_regional
    * Data class:    ASN1T_SignalRequest_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalRequest_regional (ASN1T_SignalRequest_regional& data);

   /**
    * Control class: ASN1C_SignalRequest_regional<br/>
    * Data class: ASN1T_SignalRequest_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalRequest_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalRequest_regional& data);

   /**
    * Control class: ASN1C_SignalRequest_regional<br/>
    * Data class: ASN1T_SignalRequest_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalRequest_regional (ASN1CType& ccobj
      , ASN1T_SignalRequest_regional& data);

   virtual ~ASN1C_SignalRequest_regional () {}

   /**
    * Data class: ASN1T_SignalRequest_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalRequest_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalRequest_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalRequest_regional_element* NewElement ();

   /**
    * Data class: ASN1T_SignalRequest_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalRequest_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_SignalRequest_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_SignalRequest_regional* pmatches);

private:
   ASN1C_SignalRequest_regional& operator= (const ASN1C_SignalRequest_regional&) {return *this;}
} ;

EXTERN int asn1PE_SignalRequest_regional (OSCTXT* pctxt, ASN1T_SignalRequest_regional* pvalue);

EXTERN int asn1PD_SignalRequest_regional (OSCTXT* pctxt, ASN1T_SignalRequest_regional* pvalue);

EXTERN int XmlEnc_SignalRequest_regional (OSCTXT* pctxt, 
   ASN1T_SignalRequest_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequest_regional (OSCTXT* pctxt, 
   ASN1T_SignalRequest_regional* pvalue);

EXTERN int asn1JsonEnc_SignalRequest_regional (OSCTXT *pctxt, ASN1T_SignalRequest_regional *pvalue);

EXTERN int asn1JsonDec_SignalRequest_regional (OSCTXT *pctxt, ASN1T_SignalRequest_regional *pvalue);

EXTERN int asn1PrtToStrm_SignalRequest_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequest_regional* pvalue);

EXTERN int asn1Init_SignalRequest_regional (ASN1T_SignalRequest_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequest_regional (OSCTXT *pctxt, 
   ASN1T_SignalRequest_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequest                                             */
/*                                                            */
/**************************************************************/
/*
SignalRequest ::= SEQUENCE {
   -- the unique ID of the target intersection 
   id [0] IntersectionReferenceID,
   -- The unique requestID used by the requestor
   requestID [1] RequestID,
   -- The type of request or cancel for priority or preempt use
   -- when a prior request is canceled, only the requestID is needed
   requestType [2] PriorityRequestType,
   -- In typical use either an approach or a lane number would
   -- be given, this indicates the requested 
   -- path through the intersection to the degree it is known.
   inBoundLane [3] EXPLICIT IntersectionAccessPoint,
                 -- desired entry approach or lane
   outBoundLane [4] EXPLICIT IntersectionAccessPoint OPTIONAL,
                 -- desired exit approach or lane
                 -- the values zero is used to indicate 
                 -- intent to stop within the intersection
   regional [5] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-SignalRequest}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-SignalRequest}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SignalRequest {
   struct {
      unsigned outBoundLanePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_IntersectionReferenceID id;
   ASN1T_RequestID requestID;
   ASN1T_PriorityRequestType requestType;
   ASN1T_IntersectionAccessPoint inBoundLane;
   ASN1T_IntersectionAccessPoint outBoundLane;
   ASN1T_SignalRequest_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_SignalRequest ();
} ;

EXTERN int asn1PE_SignalRequest (OSCTXT* pctxt, ASN1T_SignalRequest* pvalue);

EXTERN int asn1PD_SignalRequest (OSCTXT* pctxt, ASN1T_SignalRequest* pvalue);

EXTERN int XmlEnc_SignalRequest (OSCTXT* pctxt, ASN1T_SignalRequest* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequest (OSCTXT* pctxt, ASN1T_SignalRequest* pvalue);

EXTERN int asn1JsonEnc_SignalRequest (OSCTXT *pctxt, ASN1T_SignalRequest *pvalue);

EXTERN int asn1JsonDec_SignalRequest (OSCTXT *pctxt, ASN1T_SignalRequest *pvalue);

EXTERN int asn1PrtToStrm_SignalRequest (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequest* pvalue);

EXTERN ASN1T_SignalRequest* new_ASN1T_SignalRequest (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequest (ASN1T_SignalRequest* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequest (OSCTXT *pctxt, ASN1T_SignalRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestPackage_regional_element                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequestPackage'
*/
struct EXTERN ASN1T_SignalRequestPackage_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SignalRequestPackage_regional_element (OSCTXT* pctxt, ASN1T_SignalRequestPackage_regional_element* pvalue);

EXTERN int asn1PD_SignalRequestPackage_regional_element (OSCTXT* pctxt, ASN1T_SignalRequestPackage_regional_element* pvalue);

EXTERN int XmlEnc_SignalRequestPackage_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalRequestPackage_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestPackage_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalRequestPackage_regional_element* pvalue);

EXTERN int asn1JsonEnc_SignalRequestPackage_regional_element (OSCTXT *pctxt, ASN1T_SignalRequestPackage_regional_element *pvalue);

EXTERN int asn1JsonDec_SignalRequestPackage_regional_element (OSCTXT *pctxt, ASN1T_SignalRequestPackage_regional_element *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestPackage_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestPackage_regional_element* pvalue);

EXTERN ASN1T_SignalRequestPackage_regional_element* 
   new_ASN1T_SignalRequestPackage_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequestPackage_regional_element (
   ASN1T_SignalRequestPackage_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestPackage_regional_element (OSCTXT *pctxt, 
   ASN1T_SignalRequestPackage_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestPackage_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequestPackage'
*/
/* List of ASN1T_SignalRequestPackage_regional_element */
typedef ASN1TSeqOfList ASN1T_SignalRequestPackage_regional;

class EXTERN ASN1C_SignalRequestPackage_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalRequestPackage_regional& msgData;
public:
   /**
    * Control class: ASN1C_SignalRequestPackage_regional
    * Data class:    ASN1T_SignalRequestPackage_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalRequestPackage_regional
       (ASN1T_SignalRequestPackage_regional& data);

   /**
    * Control class: ASN1C_SignalRequestPackage_regional<br/>
    * Data class: ASN1T_SignalRequestPackage_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalRequestPackage_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalRequestPackage_regional& data);

   /**
    * Control class: ASN1C_SignalRequestPackage_regional<br/>
    * Data class: ASN1T_SignalRequestPackage_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalRequestPackage_regional (ASN1CType& ccobj
      , ASN1T_SignalRequestPackage_regional& data);

   virtual ~ASN1C_SignalRequestPackage_regional () {}

   /**
    * Data class: ASN1T_SignalRequestPackage_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalRequestPackage_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalRequestPackage_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalRequestPackage_regional_element* NewElement ();

   /**
    * Data class: ASN1T_SignalRequestPackage_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalRequestPackage_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_SignalRequestPackage_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_SignalRequestPackage_regional* pmatches);

private:
   ASN1C_SignalRequestPackage_regional& operator= (const ASN1C_SignalRequestPackage_regional&) {return *this;}
} ;

EXTERN int asn1PE_SignalRequestPackage_regional (OSCTXT* pctxt, ASN1T_SignalRequestPackage_regional* pvalue);

EXTERN int asn1PD_SignalRequestPackage_regional (OSCTXT* pctxt, ASN1T_SignalRequestPackage_regional* pvalue);

EXTERN int XmlEnc_SignalRequestPackage_regional (OSCTXT* pctxt, 
   ASN1T_SignalRequestPackage_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestPackage_regional (OSCTXT* pctxt, 
   ASN1T_SignalRequestPackage_regional* pvalue);

EXTERN int asn1JsonEnc_SignalRequestPackage_regional (OSCTXT *pctxt, ASN1T_SignalRequestPackage_regional *pvalue);

EXTERN int asn1JsonDec_SignalRequestPackage_regional (OSCTXT *pctxt, ASN1T_SignalRequestPackage_regional *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestPackage_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestPackage_regional* pvalue);

EXTERN int asn1Init_SignalRequestPackage_regional (
   ASN1T_SignalRequestPackage_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestPackage_regional (OSCTXT *pctxt, 
   ASN1T_SignalRequestPackage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestPackage                                      */
/*                                                            */
/**************************************************************/
/*
SignalRequestPackage ::= SEQUENCE {
   request [0] SignalRequest,
                  -- The specific request to the intersection
                  -- contains IntersectionID, request type,
                  -- requested action (approach/lane request)
   -- The Estimated Time of Arrival (ETA) when the service is requested
   minute [1] MinuteOfTheYear OPTIONAL,
   second [2] DSecond OPTIONAL,
   duration [3] DSecond OPTIONAL,
                  -- The duration value is used to provide a short interval that
                  -- extends the ETA so that the requesting vehicle can arrive at 
                  -- the point of service with uncertainty or with some desired
                  -- duration of service. This concept can be used to avoid needing 
                  -- to frequently update the request.
                  -- The requester must update the ETA and duration values if the
                  -- period of services extends beyond the duration time.  
                  -- It should be assumed that if the vehicle does not clear the
                  -- intersection when the duration is reached, the request will 
                  -- be cancelled and the intersection will revert to 
                  -- normal operation.
   regional [4] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-SignalRequestPackage}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-SignalRequestPackage}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SignalRequestPackage {
   struct {
      unsigned minutePresent : 1;
      unsigned secondPresent : 1;
      unsigned durationPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_SignalRequest request;
   ASN1T_MinuteOfTheYear minute;
   ASN1T_DSecond second;
   ASN1T_DSecond duration;
   ASN1T_SignalRequestPackage_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_SignalRequestPackage ();
} ;

EXTERN int asn1PE_SignalRequestPackage (OSCTXT* pctxt, ASN1T_SignalRequestPackage* pvalue);

EXTERN int asn1PD_SignalRequestPackage (OSCTXT* pctxt, ASN1T_SignalRequestPackage* pvalue);

EXTERN int XmlEnc_SignalRequestPackage (OSCTXT* pctxt, 
   ASN1T_SignalRequestPackage* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestPackage (OSCTXT* pctxt, 
   ASN1T_SignalRequestPackage* pvalue);

EXTERN int asn1JsonEnc_SignalRequestPackage (OSCTXT *pctxt, ASN1T_SignalRequestPackage *pvalue);

EXTERN int asn1JsonDec_SignalRequestPackage (OSCTXT *pctxt, ASN1T_SignalRequestPackage *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestPackage (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestPackage* pvalue);

EXTERN ASN1T_SignalRequestPackage* 
   new_ASN1T_SignalRequestPackage (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequestPackage (ASN1T_SignalRequestPackage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestPackage (OSCTXT *pctxt, 
   ASN1T_SignalRequestPackage* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestList                                         */
/*                                                            */
/**************************************************************/
/*
SignalRequestList ::= SEQUENCE (SIZE (1..32)) OF SignalRequestPackage
*/
/* List of ASN1T_SignalRequestPackage */
typedef ASN1TSeqOfList ASN1T_SignalRequestList;

class EXTERN ASN1C_SignalRequestList :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalRequestList& msgData;
public:
   /**
    * Control class: ASN1C_SignalRequestList
    * Data class:    ASN1T_SignalRequestList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalRequestList (ASN1T_SignalRequestList& data);

   /**
    * Control class: ASN1C_SignalRequestList<br/>
    * Data class: ASN1T_SignalRequestList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalRequestList (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalRequestList& data);

   /**
    * Control class: ASN1C_SignalRequestList<br/>
    * Data class: ASN1T_SignalRequestList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalRequestList (ASN1CType& ccobj, ASN1T_SignalRequestList& data);

   virtual ~ASN1C_SignalRequestList () {}

   /**
    * Data class: ASN1T_SignalRequestPackage<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalRequestPackage* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalRequestPackage.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalRequestPackage* NewElement ();

   /**
    * Data class: ASN1T_SignalRequestPackage.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalRequestPackage* AppendNewElement ();

private:
   ASN1C_SignalRequestList& operator= (const ASN1C_SignalRequestList&) {return *this;}
} ;

EXTERN int asn1PE_SignalRequestList (OSCTXT* pctxt, ASN1T_SignalRequestList* pvalue);

EXTERN int asn1PD_SignalRequestList (OSCTXT* pctxt, ASN1T_SignalRequestList* pvalue);

EXTERN int XmlEnc_SignalRequestList (OSCTXT* pctxt, 
   ASN1T_SignalRequestList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestList (OSCTXT* pctxt, 
   ASN1T_SignalRequestList* pvalue);

EXTERN int asn1JsonEnc_SignalRequestList (OSCTXT *pctxt, ASN1T_SignalRequestList *pvalue);

EXTERN int asn1JsonDec_SignalRequestList (OSCTXT *pctxt, ASN1T_SignalRequestList *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestList (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestList* pvalue);

EXTERN int asn1Init_SignalRequestList (ASN1T_SignalRequestList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestList (OSCTXT *pctxt, 
   ASN1T_SignalRequestList* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorType_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RequestorType'
*/
struct EXTERN ASN1T_RequestorType_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_RequestorType_regional (OSCTXT* pctxt, ASN1T_RequestorType_regional* pvalue);

EXTERN int asn1PD_RequestorType_regional (OSCTXT* pctxt, ASN1T_RequestorType_regional* pvalue);

EXTERN int XmlEnc_RequestorType_regional (OSCTXT* pctxt, 
   ASN1T_RequestorType_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestorType_regional (OSCTXT* pctxt, 
   ASN1T_RequestorType_regional* pvalue);

EXTERN int asn1JsonEnc_RequestorType_regional (OSCTXT *pctxt, ASN1T_RequestorType_regional *pvalue);

EXTERN int asn1JsonDec_RequestorType_regional (OSCTXT *pctxt, ASN1T_RequestorType_regional *pvalue);

EXTERN int asn1PrtToStrm_RequestorType_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestorType_regional* pvalue);

EXTERN ASN1T_RequestorType_regional* 
   new_ASN1T_RequestorType_regional (ASN1CType& ccobj);

EXTERN int asn1Init_RequestorType_regional (ASN1T_RequestorType_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RequestorType_regional (OSCTXT *pctxt, 
   ASN1T_RequestorType_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorType                                             */
/*                                                            */
/**************************************************************/
/*
RequestorType ::= SEQUENCE {
   -- Defines who is requesting
   role [0] BasicVehicleRole, -- Basic role of this user at this time
   subrole [1] RequestSubRole OPTIONAL, -- A local list with role based items 
   -- Defines what kind of request (a level of importance in the Priority Scheme)
   request [2] RequestImportanceLevel OPTIONAL, -- A local list with request items 
   -- Additional classification details 
   iso3883 [3] Iso3833VehicleType OPTIONAL,
   hpmsType [4] VehicleType OPTIONAL, -- HPMS classification types
   regional [5] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-RequestorType}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-RequestorType}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_RequestorType {
   struct {
      unsigned subrolePresent : 1;
      unsigned requestPresent : 1;
      unsigned iso3883Present : 1;
      unsigned hpmsTypePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_BasicVehicleRole role;
   ASN1T_RequestSubRole subrole;
   ASN1T_RequestImportanceLevel request;
   ASN1T_Iso3833VehicleType iso3883;
   ASN1T_VehicleType hpmsType;
   ASN1T_RequestorType_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_RequestorType ();
} ;

EXTERN int asn1PE_RequestorType (OSCTXT* pctxt, ASN1T_RequestorType* pvalue);

EXTERN int asn1PD_RequestorType (OSCTXT* pctxt, ASN1T_RequestorType* pvalue);

EXTERN int XmlEnc_RequestorType (OSCTXT* pctxt, ASN1T_RequestorType* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestorType (OSCTXT* pctxt, ASN1T_RequestorType* pvalue);

EXTERN int asn1JsonEnc_RequestorType (OSCTXT *pctxt, ASN1T_RequestorType *pvalue);

EXTERN int asn1JsonDec_RequestorType (OSCTXT *pctxt, ASN1T_RequestorType *pvalue);

EXTERN int asn1PrtToStrm_RequestorType (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestorType* pvalue);

EXTERN ASN1T_RequestorType* new_ASN1T_RequestorType (ASN1CType& ccobj);

EXTERN int asn1Init_RequestorType (ASN1T_RequestorType* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RequestorType (OSCTXT *pctxt, ASN1T_RequestorType* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorPositionVector                                   */
/*                                                            */
/**************************************************************/
/*
RequestorPositionVector ::= SEQUENCE {
   position [0] Position3D,
   heading [1] Angle OPTIONAL,
   speed [2] TransmissionAndSpeed OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_RequestorPositionVector {
   struct {
      unsigned headingPresent : 1;
      unsigned speedPresent : 1;
   } m;
   ASN1T_Position3D position;
   ASN1T_Angle heading;
   ASN1T_TransmissionAndSpeed speed;
   ASN1TSeqExt extElem1;
   ASN1T_RequestorPositionVector ();
} ;

EXTERN int asn1PE_RequestorPositionVector (OSCTXT* pctxt, ASN1T_RequestorPositionVector* pvalue);

EXTERN int asn1PD_RequestorPositionVector (OSCTXT* pctxt, ASN1T_RequestorPositionVector* pvalue);

EXTERN int XmlEnc_RequestorPositionVector (OSCTXT* pctxt, 
   ASN1T_RequestorPositionVector* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestorPositionVector (OSCTXT* pctxt, 
   ASN1T_RequestorPositionVector* pvalue);

EXTERN int asn1JsonEnc_RequestorPositionVector (OSCTXT *pctxt, ASN1T_RequestorPositionVector *pvalue);

EXTERN int asn1JsonDec_RequestorPositionVector (OSCTXT *pctxt, ASN1T_RequestorPositionVector *pvalue);

EXTERN int asn1PrtToStrm_RequestorPositionVector (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestorPositionVector* pvalue);

EXTERN ASN1T_RequestorPositionVector* 
   new_ASN1T_RequestorPositionVector (ASN1CType& ccobj);

EXTERN int asn1Init_RequestorPositionVector (ASN1T_RequestorPositionVector* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RequestorPositionVector (OSCTXT *pctxt, 
   ASN1T_RequestorPositionVector* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorDescription_regional_element                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RequestorDescription'
*/
struct EXTERN ASN1T_RequestorDescription_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_RequestorDescription_regional_element (OSCTXT* pctxt, ASN1T_RequestorDescription_regional_element* pvalue);

EXTERN int asn1PD_RequestorDescription_regional_element (OSCTXT* pctxt, ASN1T_RequestorDescription_regional_element* pvalue);

EXTERN int XmlEnc_RequestorDescription_regional_element (OSCTXT* pctxt, 
   ASN1T_RequestorDescription_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestorDescription_regional_element (OSCTXT* pctxt, 
   ASN1T_RequestorDescription_regional_element* pvalue);

EXTERN int asn1JsonEnc_RequestorDescription_regional_element (OSCTXT *pctxt, ASN1T_RequestorDescription_regional_element *pvalue);

EXTERN int asn1JsonDec_RequestorDescription_regional_element (OSCTXT *pctxt, ASN1T_RequestorDescription_regional_element *pvalue);

EXTERN int asn1PrtToStrm_RequestorDescription_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestorDescription_regional_element* pvalue);

EXTERN ASN1T_RequestorDescription_regional_element* 
   new_ASN1T_RequestorDescription_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_RequestorDescription_regional_element (
   ASN1T_RequestorDescription_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RequestorDescription_regional_element (OSCTXT *pctxt, 
   ASN1T_RequestorDescription_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorDescription_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RequestorDescription'
*/
/* List of ASN1T_RequestorDescription_regional_element */
typedef ASN1TSeqOfList ASN1T_RequestorDescription_regional;

class EXTERN ASN1C_RequestorDescription_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_RequestorDescription_regional& msgData;
public:
   /**
    * Control class: ASN1C_RequestorDescription_regional
    * Data class:    ASN1T_RequestorDescription_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RequestorDescription_regional
       (ASN1T_RequestorDescription_regional& data);

   /**
    * Control class: ASN1C_RequestorDescription_regional<br/>
    * Data class: ASN1T_RequestorDescription_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RequestorDescription_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_RequestorDescription_regional& data);

   /**
    * Control class: ASN1C_RequestorDescription_regional<br/>
    * Data class: ASN1T_RequestorDescription_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RequestorDescription_regional (ASN1CType& ccobj
      , ASN1T_RequestorDescription_regional& data);

   virtual ~ASN1C_RequestorDescription_regional () {}

   /**
    * Data class: ASN1T_RequestorDescription_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RequestorDescription_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RequestorDescription_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RequestorDescription_regional_element* NewElement ();

   /**
    * Data class: ASN1T_RequestorDescription_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RequestorDescription_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_RequestorDescription_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_RequestorDescription_regional* pmatches);

private:
   ASN1C_RequestorDescription_regional& operator= (const ASN1C_RequestorDescription_regional&) {return *this;}
} ;

EXTERN int asn1PE_RequestorDescription_regional (OSCTXT* pctxt, ASN1T_RequestorDescription_regional* pvalue);

EXTERN int asn1PD_RequestorDescription_regional (OSCTXT* pctxt, ASN1T_RequestorDescription_regional* pvalue);

EXTERN int XmlEnc_RequestorDescription_regional (OSCTXT* pctxt, 
   ASN1T_RequestorDescription_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestorDescription_regional (OSCTXT* pctxt, 
   ASN1T_RequestorDescription_regional* pvalue);

EXTERN int asn1JsonEnc_RequestorDescription_regional (OSCTXT *pctxt, ASN1T_RequestorDescription_regional *pvalue);

EXTERN int asn1JsonDec_RequestorDescription_regional (OSCTXT *pctxt, ASN1T_RequestorDescription_regional *pvalue);

EXTERN int asn1PrtToStrm_RequestorDescription_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestorDescription_regional* pvalue);

EXTERN int asn1Init_RequestorDescription_regional (
   ASN1T_RequestorDescription_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RequestorDescription_regional (OSCTXT *pctxt, 
   ASN1T_RequestorDescription_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorDescription                                      */
/*                                                            */
/**************************************************************/
/*
RequestorDescription ::= SEQUENCE {
   id [0] EXPLICIT VehicleID,
                     -- The ID used in the BSM or CAM of the requestor
                     -- This ID is presumed not to change 
                     -- during the exchange
   type [1] RequestorType OPTIONAL,
                     -- Information regarding all type and class data
                     -- about the requesting vehicle 
   position [2] RequestorPositionVector OPTIONAL,
                     -- The location of the requesting vehicle
   name [3] DescriptiveName OPTIONAL,
                     -- A human readable name for debugging use
   -- Support for Transit requests
   routeName [4] DescriptiveName OPTIONAL,
                     -- A string for transit operations use
   transitStatus [5] TransitVehicleStatus OPTIONAL,
                     -- current vehicle state (loading, etc.)
   transitOccupancy [6] TransitVehicleOccupancy OPTIONAL,
                     -- current vehicle occupancy 
   transitSchedule [7] DeltaTime OPTIONAL,
                     -- current vehicle schedule adherence 
   regional [8] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-RequestorDescription}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-RequestorDescription}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_RequestorDescription {
   struct {
      unsigned typePresent : 1;
      unsigned positionPresent : 1;
      unsigned namePresent : 1;
      unsigned routeNamePresent : 1;
      unsigned transitStatusPresent : 1;
      unsigned transitOccupancyPresent : 1;
      unsigned transitSchedulePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_VehicleID id;
   ASN1T_RequestorType type;
   ASN1T_RequestorPositionVector position;
   ASN1T_DescriptiveName name;
   ASN1T_DescriptiveName routeName;
   ASN1T_TransitVehicleStatus transitStatus;
   ASN1T_TransitVehicleOccupancy transitOccupancy;
   ASN1T_DeltaTime transitSchedule;
   ASN1T_RequestorDescription_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_RequestorDescription ();
} ;

EXTERN int asn1PE_RequestorDescription (OSCTXT* pctxt, ASN1T_RequestorDescription* pvalue);

EXTERN int asn1PD_RequestorDescription (OSCTXT* pctxt, ASN1T_RequestorDescription* pvalue);

EXTERN int XmlEnc_RequestorDescription (OSCTXT* pctxt, 
   ASN1T_RequestorDescription* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestorDescription (OSCTXT* pctxt, 
   ASN1T_RequestorDescription* pvalue);

EXTERN int asn1JsonEnc_RequestorDescription (OSCTXT *pctxt, ASN1T_RequestorDescription *pvalue);

EXTERN int asn1JsonDec_RequestorDescription (OSCTXT *pctxt, ASN1T_RequestorDescription *pvalue);

EXTERN int asn1PrtToStrm_RequestorDescription (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestorDescription* pvalue);

EXTERN ASN1T_RequestorDescription* 
   new_ASN1T_RequestorDescription (ASN1CType& ccobj);

EXTERN int asn1Init_RequestorDescription (ASN1T_RequestorDescription* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RequestorDescription (OSCTXT *pctxt, 
   ASN1T_RequestorDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestMessage_regional_element                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequestMessage'
*/
struct EXTERN ASN1T_SignalRequestMessage_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SignalRequestMessage_regional_element (OSCTXT* pctxt, ASN1T_SignalRequestMessage_regional_element* pvalue);

EXTERN int asn1PD_SignalRequestMessage_regional_element (OSCTXT* pctxt, ASN1T_SignalRequestMessage_regional_element* pvalue);

EXTERN int XmlEnc_SignalRequestMessage_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalRequestMessage_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestMessage_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalRequestMessage_regional_element* pvalue);

EXTERN int asn1JsonEnc_SignalRequestMessage_regional_element (OSCTXT *pctxt, ASN1T_SignalRequestMessage_regional_element *pvalue);

EXTERN int asn1JsonDec_SignalRequestMessage_regional_element (OSCTXT *pctxt, ASN1T_SignalRequestMessage_regional_element *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestMessage_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestMessage_regional_element* pvalue);

EXTERN ASN1T_SignalRequestMessage_regional_element* 
   new_ASN1T_SignalRequestMessage_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequestMessage_regional_element (
   ASN1T_SignalRequestMessage_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestMessage_regional_element (OSCTXT *pctxt, 
   ASN1T_SignalRequestMessage_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestMessage_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequestMessage'
*/
/* List of ASN1T_SignalRequestMessage_regional_element */
typedef ASN1TSeqOfList ASN1T_SignalRequestMessage_regional;

class EXTERN ASN1C_SignalRequestMessage_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalRequestMessage_regional& msgData;
public:
   /**
    * Control class: ASN1C_SignalRequestMessage_regional
    * Data class:    ASN1T_SignalRequestMessage_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalRequestMessage_regional
       (ASN1T_SignalRequestMessage_regional& data);

   /**
    * Control class: ASN1C_SignalRequestMessage_regional<br/>
    * Data class: ASN1T_SignalRequestMessage_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalRequestMessage_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalRequestMessage_regional& data);

   /**
    * Control class: ASN1C_SignalRequestMessage_regional<br/>
    * Data class: ASN1T_SignalRequestMessage_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalRequestMessage_regional (ASN1CType& ccobj
      , ASN1T_SignalRequestMessage_regional& data);

   virtual ~ASN1C_SignalRequestMessage_regional () {}

   /**
    * Data class: ASN1T_SignalRequestMessage_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalRequestMessage_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalRequestMessage_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalRequestMessage_regional_element* NewElement ();

   /**
    * Data class: ASN1T_SignalRequestMessage_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalRequestMessage_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_SignalRequestMessage_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_SignalRequestMessage_regional* pmatches);

private:
   ASN1C_SignalRequestMessage_regional& operator= (const ASN1C_SignalRequestMessage_regional&) {return *this;}
} ;

EXTERN int asn1PE_SignalRequestMessage_regional (OSCTXT* pctxt, ASN1T_SignalRequestMessage_regional* pvalue);

EXTERN int asn1PD_SignalRequestMessage_regional (OSCTXT* pctxt, ASN1T_SignalRequestMessage_regional* pvalue);

EXTERN int XmlEnc_SignalRequestMessage_regional (OSCTXT* pctxt, 
   ASN1T_SignalRequestMessage_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestMessage_regional (OSCTXT* pctxt, 
   ASN1T_SignalRequestMessage_regional* pvalue);

EXTERN int asn1JsonEnc_SignalRequestMessage_regional (OSCTXT *pctxt, ASN1T_SignalRequestMessage_regional *pvalue);

EXTERN int asn1JsonDec_SignalRequestMessage_regional (OSCTXT *pctxt, ASN1T_SignalRequestMessage_regional *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestMessage_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestMessage_regional* pvalue);

EXTERN int asn1Init_SignalRequestMessage_regional (
   ASN1T_SignalRequestMessage_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestMessage_regional (OSCTXT *pctxt, 
   ASN1T_SignalRequestMessage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestMessage                                      */
/*                                                            */
/**************************************************************/
/*
SignalRequestMessage ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   second [1] DSecond,
   sequenceNumber [2] MsgCount OPTIONAL,
   requests [3] SignalRequestList OPTIONAL,
                   -- Request Data for one or more signalized 
                   -- intersections that support SRM dialogs
   requestor [4] RequestorDescription,
                   -- Requesting Device and other User Data
                   -- contains vehicle ID (if from a vehicle)
                   -- as well as type data and current position
                   -- and may contain additional transit data
   regional [5] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-SignalRequestMessage}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-SignalRequestMessage}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SignalRequestMessage {
   struct {
      unsigned timeStampPresent : 1;
      unsigned sequenceNumberPresent : 1;
      unsigned requestsPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_DSecond second;
   ASN1T_MsgCount sequenceNumber;
   ASN1T_SignalRequestList requests;
   ASN1T_RequestorDescription requestor;
   ASN1T_SignalRequestMessage_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_SignalRequestMessage ();
} ;

EXTERN int asn1PE_SignalRequestMessage (OSCTXT* pctxt, ASN1T_SignalRequestMessage* pvalue);

EXTERN int asn1PD_SignalRequestMessage (OSCTXT* pctxt, ASN1T_SignalRequestMessage* pvalue);

EXTERN int XmlEnc_SignalRequestMessage (OSCTXT* pctxt, 
   ASN1T_SignalRequestMessage* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestMessage (OSCTXT* pctxt, 
   ASN1T_SignalRequestMessage* pvalue);

EXTERN int asn1JsonEnc_SignalRequestMessage (OSCTXT *pctxt, ASN1T_SignalRequestMessage *pvalue);

EXTERN int asn1JsonDec_SignalRequestMessage (OSCTXT *pctxt, ASN1T_SignalRequestMessage *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestMessage (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestMessage* pvalue);

EXTERN ASN1T_SignalRequestMessage* 
   new_ASN1T_SignalRequestMessage (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequestMessage (ASN1T_SignalRequestMessage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestMessage (OSCTXT *pctxt, 
   ASN1T_SignalRequestMessage* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequesterInfo                                       */
/*                                                            */
/**************************************************************/
/*
SignalRequesterInfo ::= SEQUENCE {
   -- These three items serve to uniquely identify the requester
   -- and the specific request to all parties
   id [0] EXPLICIT VehicleID,
   request [1] RequestID,
   sequenceNumber [2] MsgCount,
   role [3] BasicVehicleRole OPTIONAL,
   typeData [4] RequestorType OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SignalRequesterInfo {
   struct {
      unsigned rolePresent : 1;
      unsigned typeDataPresent : 1;
   } m;
   ASN1T_VehicleID id;
   ASN1T_RequestID request;
   ASN1T_MsgCount sequenceNumber;
   ASN1T_BasicVehicleRole role;
   ASN1T_RequestorType typeData;
   ASN1TSeqExt extElem1;
   ASN1T_SignalRequesterInfo ();
} ;

EXTERN int asn1PE_SignalRequesterInfo (OSCTXT* pctxt, ASN1T_SignalRequesterInfo* pvalue);

EXTERN int asn1PD_SignalRequesterInfo (OSCTXT* pctxt, ASN1T_SignalRequesterInfo* pvalue);

EXTERN int XmlEnc_SignalRequesterInfo (OSCTXT* pctxt, 
   ASN1T_SignalRequesterInfo* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequesterInfo (OSCTXT* pctxt, 
   ASN1T_SignalRequesterInfo* pvalue);

EXTERN int asn1JsonEnc_SignalRequesterInfo (OSCTXT *pctxt, ASN1T_SignalRequesterInfo *pvalue);

EXTERN int asn1JsonDec_SignalRequesterInfo (OSCTXT *pctxt, ASN1T_SignalRequesterInfo *pvalue);

EXTERN int asn1PrtToStrm_SignalRequesterInfo (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequesterInfo* pvalue);

EXTERN ASN1T_SignalRequesterInfo* 
   new_ASN1T_SignalRequesterInfo (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequesterInfo (ASN1T_SignalRequesterInfo* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequesterInfo (OSCTXT *pctxt, 
   ASN1T_SignalRequesterInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusPackage_regional_element                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalStatusPackage'
*/
struct EXTERN ASN1T_SignalStatusPackage_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SignalStatusPackage_regional_element (OSCTXT* pctxt, ASN1T_SignalStatusPackage_regional_element* pvalue);

EXTERN int asn1PD_SignalStatusPackage_regional_element (OSCTXT* pctxt, ASN1T_SignalStatusPackage_regional_element* pvalue);

EXTERN int XmlEnc_SignalStatusPackage_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalStatusPackage_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalStatusPackage_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalStatusPackage_regional_element* pvalue);

EXTERN int asn1JsonEnc_SignalStatusPackage_regional_element (OSCTXT *pctxt, ASN1T_SignalStatusPackage_regional_element *pvalue);

EXTERN int asn1JsonDec_SignalStatusPackage_regional_element (OSCTXT *pctxt, ASN1T_SignalStatusPackage_regional_element *pvalue);

EXTERN int asn1PrtToStrm_SignalStatusPackage_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalStatusPackage_regional_element* pvalue);

EXTERN ASN1T_SignalStatusPackage_regional_element* 
   new_ASN1T_SignalStatusPackage_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_SignalStatusPackage_regional_element (
   ASN1T_SignalStatusPackage_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalStatusPackage_regional_element (OSCTXT *pctxt, 
   ASN1T_SignalStatusPackage_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusPackage_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalStatusPackage'
*/
/* List of ASN1T_SignalStatusPackage_regional_element */
typedef ASN1TSeqOfList ASN1T_SignalStatusPackage_regional;

class EXTERN ASN1C_SignalStatusPackage_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalStatusPackage_regional& msgData;
public:
   /**
    * Control class: ASN1C_SignalStatusPackage_regional
    * Data class:    ASN1T_SignalStatusPackage_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalStatusPackage_regional
       (ASN1T_SignalStatusPackage_regional& data);

   /**
    * Control class: ASN1C_SignalStatusPackage_regional<br/>
    * Data class: ASN1T_SignalStatusPackage_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalStatusPackage_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalStatusPackage_regional& data);

   /**
    * Control class: ASN1C_SignalStatusPackage_regional<br/>
    * Data class: ASN1T_SignalStatusPackage_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalStatusPackage_regional (ASN1CType& ccobj
      , ASN1T_SignalStatusPackage_regional& data);

   virtual ~ASN1C_SignalStatusPackage_regional () {}

   /**
    * Data class: ASN1T_SignalStatusPackage_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalStatusPackage_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalStatusPackage_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalStatusPackage_regional_element* NewElement ();

   /**
    * Data class: ASN1T_SignalStatusPackage_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalStatusPackage_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_SignalStatusPackage_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_SignalStatusPackage_regional* pmatches);

private:
   ASN1C_SignalStatusPackage_regional& operator= (const ASN1C_SignalStatusPackage_regional&) {return *this;}
} ;

EXTERN int asn1PE_SignalStatusPackage_regional (OSCTXT* pctxt, ASN1T_SignalStatusPackage_regional* pvalue);

EXTERN int asn1PD_SignalStatusPackage_regional (OSCTXT* pctxt, ASN1T_SignalStatusPackage_regional* pvalue);

EXTERN int XmlEnc_SignalStatusPackage_regional (OSCTXT* pctxt, 
   ASN1T_SignalStatusPackage_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalStatusPackage_regional (OSCTXT* pctxt, 
   ASN1T_SignalStatusPackage_regional* pvalue);

EXTERN int asn1JsonEnc_SignalStatusPackage_regional (OSCTXT *pctxt, ASN1T_SignalStatusPackage_regional *pvalue);

EXTERN int asn1JsonDec_SignalStatusPackage_regional (OSCTXT *pctxt, ASN1T_SignalStatusPackage_regional *pvalue);

EXTERN int asn1PrtToStrm_SignalStatusPackage_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalStatusPackage_regional* pvalue);

EXTERN int asn1Init_SignalStatusPackage_regional (
   ASN1T_SignalStatusPackage_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalStatusPackage_regional (OSCTXT *pctxt, 
   ASN1T_SignalStatusPackage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusPackage                                       */
/*                                                            */
/**************************************************************/
/*
SignalStatusPackage ::= SEQUENCE {
   -- The party that made the initial SRM request
   requester [0] SignalRequesterInfo OPTIONAL,
   -- The lanes or approaches used in the request
   inboundOn [1] EXPLICIT IntersectionAccessPoint, -- estimated lane / approach of vehicle
   outboundOn [2] EXPLICIT IntersectionAccessPoint OPTIONAL,
   -- The Estimated Time of Arrival (ETA) when the service is requested
   -- This data echos the data of the request 
   minute [3] MinuteOfTheYear OPTIONAL,
   second [4] DSecond OPTIONAL,
   duration [5] DSecond OPTIONAL,
   -- the SRM status for this request
   status [6] PrioritizationResponseStatus,
                -- Status of request, this may include rejection
   regional [7] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-SignalStatusPackage}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-SignalStatusPackage}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SignalStatusPackage {
   struct {
      unsigned requesterPresent : 1;
      unsigned outboundOnPresent : 1;
      unsigned minutePresent : 1;
      unsigned secondPresent : 1;
      unsigned durationPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_SignalRequesterInfo requester;
   ASN1T_IntersectionAccessPoint inboundOn;
   ASN1T_IntersectionAccessPoint outboundOn;
   ASN1T_MinuteOfTheYear minute;
   ASN1T_DSecond second;
   ASN1T_DSecond duration;
   ASN1T_PrioritizationResponseStatus status;
   ASN1T_SignalStatusPackage_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_SignalStatusPackage ();
} ;

EXTERN int asn1PE_SignalStatusPackage (OSCTXT* pctxt, ASN1T_SignalStatusPackage* pvalue);

EXTERN int asn1PD_SignalStatusPackage (OSCTXT* pctxt, ASN1T_SignalStatusPackage* pvalue);

EXTERN int XmlEnc_SignalStatusPackage (OSCTXT* pctxt, 
   ASN1T_SignalStatusPackage* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalStatusPackage (OSCTXT* pctxt, 
   ASN1T_SignalStatusPackage* pvalue);

EXTERN int asn1JsonEnc_SignalStatusPackage (OSCTXT *pctxt, ASN1T_SignalStatusPackage *pvalue);

EXTERN int asn1JsonDec_SignalStatusPackage (OSCTXT *pctxt, ASN1T_SignalStatusPackage *pvalue);

EXTERN int asn1PrtToStrm_SignalStatusPackage (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalStatusPackage* pvalue);

EXTERN ASN1T_SignalStatusPackage* 
   new_ASN1T_SignalStatusPackage (ASN1CType& ccobj);

EXTERN int asn1Init_SignalStatusPackage (ASN1T_SignalStatusPackage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalStatusPackage (OSCTXT *pctxt, 
   ASN1T_SignalStatusPackage* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusPackageList                                   */
/*                                                            */
/**************************************************************/
/*
SignalStatusPackageList ::= SEQUENCE (SIZE (1..32)) OF SignalStatusPackage
*/
/* List of ASN1T_SignalStatusPackage */
typedef ASN1TSeqOfList ASN1T_SignalStatusPackageList;

class EXTERN ASN1C_SignalStatusPackageList :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalStatusPackageList& msgData;
public:
   /**
    * Control class: ASN1C_SignalStatusPackageList
    * Data class:    ASN1T_SignalStatusPackageList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalStatusPackageList (ASN1T_SignalStatusPackageList& data);

   /**
    * Control class: ASN1C_SignalStatusPackageList<br/>
    * Data class: ASN1T_SignalStatusPackageList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalStatusPackageList (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalStatusPackageList& data);

   /**
    * Control class: ASN1C_SignalStatusPackageList<br/>
    * Data class: ASN1T_SignalStatusPackageList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalStatusPackageList (ASN1CType& ccobj
      , ASN1T_SignalStatusPackageList& data);

   virtual ~ASN1C_SignalStatusPackageList () {}

   /**
    * Data class: ASN1T_SignalStatusPackage<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalStatusPackage* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalStatusPackage.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalStatusPackage* NewElement ();

   /**
    * Data class: ASN1T_SignalStatusPackage.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalStatusPackage* AppendNewElement ();

private:
   ASN1C_SignalStatusPackageList& operator= (const ASN1C_SignalStatusPackageList&) {return *this;}
} ;

EXTERN int asn1PE_SignalStatusPackageList (OSCTXT* pctxt, ASN1T_SignalStatusPackageList* pvalue);

EXTERN int asn1PD_SignalStatusPackageList (OSCTXT* pctxt, ASN1T_SignalStatusPackageList* pvalue);

EXTERN int XmlEnc_SignalStatusPackageList (OSCTXT* pctxt, 
   ASN1T_SignalStatusPackageList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalStatusPackageList (OSCTXT* pctxt, 
   ASN1T_SignalStatusPackageList* pvalue);

EXTERN int asn1JsonEnc_SignalStatusPackageList (OSCTXT *pctxt, ASN1T_SignalStatusPackageList *pvalue);

EXTERN int asn1JsonDec_SignalStatusPackageList (OSCTXT *pctxt, ASN1T_SignalStatusPackageList *pvalue);

EXTERN int asn1PrtToStrm_SignalStatusPackageList (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalStatusPackageList* pvalue);

EXTERN int asn1Init_SignalStatusPackageList (ASN1T_SignalStatusPackageList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalStatusPackageList (OSCTXT *pctxt, 
   ASN1T_SignalStatusPackageList* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatus_regional_element                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalStatus'
*/
struct EXTERN ASN1T_SignalStatus_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SignalStatus_regional_element (OSCTXT* pctxt, ASN1T_SignalStatus_regional_element* pvalue);

EXTERN int asn1PD_SignalStatus_regional_element (OSCTXT* pctxt, ASN1T_SignalStatus_regional_element* pvalue);

EXTERN int XmlEnc_SignalStatus_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalStatus_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalStatus_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalStatus_regional_element* pvalue);

EXTERN int asn1JsonEnc_SignalStatus_regional_element (OSCTXT *pctxt, ASN1T_SignalStatus_regional_element *pvalue);

EXTERN int asn1JsonDec_SignalStatus_regional_element (OSCTXT *pctxt, ASN1T_SignalStatus_regional_element *pvalue);

EXTERN int asn1PrtToStrm_SignalStatus_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalStatus_regional_element* pvalue);

EXTERN ASN1T_SignalStatus_regional_element* 
   new_ASN1T_SignalStatus_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_SignalStatus_regional_element (
   ASN1T_SignalStatus_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalStatus_regional_element (OSCTXT *pctxt, 
   ASN1T_SignalStatus_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatus_regional                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalStatus'
*/
/* List of ASN1T_SignalStatus_regional_element */
typedef ASN1TSeqOfList ASN1T_SignalStatus_regional;

class EXTERN ASN1C_SignalStatus_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalStatus_regional& msgData;
public:
   /**
    * Control class: ASN1C_SignalStatus_regional
    * Data class:    ASN1T_SignalStatus_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalStatus_regional (ASN1T_SignalStatus_regional& data);

   /**
    * Control class: ASN1C_SignalStatus_regional<br/>
    * Data class: ASN1T_SignalStatus_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalStatus_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalStatus_regional& data);

   /**
    * Control class: ASN1C_SignalStatus_regional<br/>
    * Data class: ASN1T_SignalStatus_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalStatus_regional (ASN1CType& ccobj
      , ASN1T_SignalStatus_regional& data);

   virtual ~ASN1C_SignalStatus_regional () {}

   /**
    * Data class: ASN1T_SignalStatus_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalStatus_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalStatus_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalStatus_regional_element* NewElement ();

   /**
    * Data class: ASN1T_SignalStatus_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalStatus_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_SignalStatus_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_SignalStatus_regional* pmatches);

private:
   ASN1C_SignalStatus_regional& operator= (const ASN1C_SignalStatus_regional&) {return *this;}
} ;

EXTERN int asn1PE_SignalStatus_regional (OSCTXT* pctxt, ASN1T_SignalStatus_regional* pvalue);

EXTERN int asn1PD_SignalStatus_regional (OSCTXT* pctxt, ASN1T_SignalStatus_regional* pvalue);

EXTERN int XmlEnc_SignalStatus_regional (OSCTXT* pctxt, 
   ASN1T_SignalStatus_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalStatus_regional (OSCTXT* pctxt, 
   ASN1T_SignalStatus_regional* pvalue);

EXTERN int asn1JsonEnc_SignalStatus_regional (OSCTXT *pctxt, ASN1T_SignalStatus_regional *pvalue);

EXTERN int asn1JsonDec_SignalStatus_regional (OSCTXT *pctxt, ASN1T_SignalStatus_regional *pvalue);

EXTERN int asn1PrtToStrm_SignalStatus_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalStatus_regional* pvalue);

EXTERN int asn1Init_SignalStatus_regional (ASN1T_SignalStatus_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalStatus_regional (OSCTXT *pctxt, 
   ASN1T_SignalStatus_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatus                                              */
/*                                                            */
/**************************************************************/
/*
SignalStatus ::= SEQUENCE {
   sequenceNumber [0] MsgCount,
                  -- changed whenever the below contents have change
   id [1] IntersectionReferenceID,
                  -- this provides a unique mapping to the 
                  -- intersection map in question
                  -- which provides complete location 
                  -- and approach/movement/lane data
                  -- as well as zones for priority/preemption
   sigStatus [2] SignalStatusPackageList,
                  -- a list of detailed status containing all
                  -- priority or preemption state data, both
                  -- active and pending, and who requested it
                  -- requests which are denied are also listed
                  -- here for a short period of time
   regional [3] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-SignalStatus}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-SignalStatus}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SignalStatus {
   struct {
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MsgCount sequenceNumber;
   ASN1T_IntersectionReferenceID id;
   ASN1T_SignalStatusPackageList sigStatus;
   ASN1T_SignalStatus_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_SignalStatus ();
} ;

EXTERN int asn1PE_SignalStatus (OSCTXT* pctxt, ASN1T_SignalStatus* pvalue);

EXTERN int asn1PD_SignalStatus (OSCTXT* pctxt, ASN1T_SignalStatus* pvalue);

EXTERN int XmlEnc_SignalStatus (OSCTXT* pctxt, ASN1T_SignalStatus* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalStatus (OSCTXT* pctxt, ASN1T_SignalStatus* pvalue);

EXTERN int asn1JsonEnc_SignalStatus (OSCTXT *pctxt, ASN1T_SignalStatus *pvalue);

EXTERN int asn1JsonDec_SignalStatus (OSCTXT *pctxt, ASN1T_SignalStatus *pvalue);

EXTERN int asn1PrtToStrm_SignalStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalStatus* pvalue);

EXTERN ASN1T_SignalStatus* new_ASN1T_SignalStatus (ASN1CType& ccobj);

EXTERN int asn1Init_SignalStatus (ASN1T_SignalStatus* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalStatus (OSCTXT *pctxt, ASN1T_SignalStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusList                                          */
/*                                                            */
/**************************************************************/
/*
SignalStatusList ::= SEQUENCE (SIZE (1..32)) OF SignalStatus
*/
/* List of ASN1T_SignalStatus */
typedef ASN1TSeqOfList ASN1T_SignalStatusList;

class EXTERN ASN1C_SignalStatusList :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalStatusList& msgData;
public:
   /**
    * Control class: ASN1C_SignalStatusList
    * Data class:    ASN1T_SignalStatusList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalStatusList (ASN1T_SignalStatusList& data);

   /**
    * Control class: ASN1C_SignalStatusList<br/>
    * Data class: ASN1T_SignalStatusList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalStatusList (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalStatusList& data);

   /**
    * Control class: ASN1C_SignalStatusList<br/>
    * Data class: ASN1T_SignalStatusList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalStatusList (ASN1CType& ccobj, ASN1T_SignalStatusList& data);

   virtual ~ASN1C_SignalStatusList () {}

   /**
    * Data class: ASN1T_SignalStatus<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalStatus* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalStatus.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalStatus* NewElement ();

   /**
    * Data class: ASN1T_SignalStatus.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalStatus* AppendNewElement ();

private:
   ASN1C_SignalStatusList& operator= (const ASN1C_SignalStatusList&) {return *this;}
} ;

EXTERN int asn1PE_SignalStatusList (OSCTXT* pctxt, ASN1T_SignalStatusList* pvalue);

EXTERN int asn1PD_SignalStatusList (OSCTXT* pctxt, ASN1T_SignalStatusList* pvalue);

EXTERN int XmlEnc_SignalStatusList (OSCTXT* pctxt, 
   ASN1T_SignalStatusList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalStatusList (OSCTXT* pctxt, 
   ASN1T_SignalStatusList* pvalue);

EXTERN int asn1JsonEnc_SignalStatusList (OSCTXT *pctxt, ASN1T_SignalStatusList *pvalue);

EXTERN int asn1JsonDec_SignalStatusList (OSCTXT *pctxt, ASN1T_SignalStatusList *pvalue);

EXTERN int asn1PrtToStrm_SignalStatusList (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalStatusList* pvalue);

EXTERN int asn1Init_SignalStatusList (ASN1T_SignalStatusList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalStatusList (OSCTXT *pctxt, ASN1T_SignalStatusList* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusMessage_regional_element                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalStatusMessage'
*/
struct EXTERN ASN1T_SignalStatusMessage_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SignalStatusMessage_regional_element (OSCTXT* pctxt, ASN1T_SignalStatusMessage_regional_element* pvalue);

EXTERN int asn1PD_SignalStatusMessage_regional_element (OSCTXT* pctxt, ASN1T_SignalStatusMessage_regional_element* pvalue);

EXTERN int XmlEnc_SignalStatusMessage_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalStatusMessage_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalStatusMessage_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalStatusMessage_regional_element* pvalue);

EXTERN int asn1JsonEnc_SignalStatusMessage_regional_element (OSCTXT *pctxt, ASN1T_SignalStatusMessage_regional_element *pvalue);

EXTERN int asn1JsonDec_SignalStatusMessage_regional_element (OSCTXT *pctxt, ASN1T_SignalStatusMessage_regional_element *pvalue);

EXTERN int asn1PrtToStrm_SignalStatusMessage_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalStatusMessage_regional_element* pvalue);

EXTERN ASN1T_SignalStatusMessage_regional_element* 
   new_ASN1T_SignalStatusMessage_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_SignalStatusMessage_regional_element (
   ASN1T_SignalStatusMessage_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalStatusMessage_regional_element (OSCTXT *pctxt, 
   ASN1T_SignalStatusMessage_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusMessage_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalStatusMessage'
*/
/* List of ASN1T_SignalStatusMessage_regional_element */
typedef ASN1TSeqOfList ASN1T_SignalStatusMessage_regional;

class EXTERN ASN1C_SignalStatusMessage_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalStatusMessage_regional& msgData;
public:
   /**
    * Control class: ASN1C_SignalStatusMessage_regional
    * Data class:    ASN1T_SignalStatusMessage_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalStatusMessage_regional
       (ASN1T_SignalStatusMessage_regional& data);

   /**
    * Control class: ASN1C_SignalStatusMessage_regional<br/>
    * Data class: ASN1T_SignalStatusMessage_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalStatusMessage_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalStatusMessage_regional& data);

   /**
    * Control class: ASN1C_SignalStatusMessage_regional<br/>
    * Data class: ASN1T_SignalStatusMessage_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalStatusMessage_regional (ASN1CType& ccobj
      , ASN1T_SignalStatusMessage_regional& data);

   virtual ~ASN1C_SignalStatusMessage_regional () {}

   /**
    * Data class: ASN1T_SignalStatusMessage_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalStatusMessage_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalStatusMessage_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalStatusMessage_regional_element* NewElement ();

   /**
    * Data class: ASN1T_SignalStatusMessage_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalStatusMessage_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_SignalStatusMessage_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_SignalStatusMessage_regional* pmatches);

private:
   ASN1C_SignalStatusMessage_regional& operator= (const ASN1C_SignalStatusMessage_regional&) {return *this;}
} ;

EXTERN int asn1PE_SignalStatusMessage_regional (OSCTXT* pctxt, ASN1T_SignalStatusMessage_regional* pvalue);

EXTERN int asn1PD_SignalStatusMessage_regional (OSCTXT* pctxt, ASN1T_SignalStatusMessage_regional* pvalue);

EXTERN int XmlEnc_SignalStatusMessage_regional (OSCTXT* pctxt, 
   ASN1T_SignalStatusMessage_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalStatusMessage_regional (OSCTXT* pctxt, 
   ASN1T_SignalStatusMessage_regional* pvalue);

EXTERN int asn1JsonEnc_SignalStatusMessage_regional (OSCTXT *pctxt, ASN1T_SignalStatusMessage_regional *pvalue);

EXTERN int asn1JsonDec_SignalStatusMessage_regional (OSCTXT *pctxt, ASN1T_SignalStatusMessage_regional *pvalue);

EXTERN int asn1PrtToStrm_SignalStatusMessage_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalStatusMessage_regional* pvalue);

EXTERN int asn1Init_SignalStatusMessage_regional (
   ASN1T_SignalStatusMessage_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalStatusMessage_regional (OSCTXT *pctxt, 
   ASN1T_SignalStatusMessage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusMessage                                       */
/*                                                            */
/**************************************************************/
/*
SignalStatusMessage ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   second [1] DSecond,
   sequenceNumber [2] MsgCount OPTIONAL,
   -- Status Data for one of more signalized intersections
   status [3] SignalStatusList,
   regional [4] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-SignalStatusMessage}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-SignalStatusMessage}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SignalStatusMessage {
   struct {
      unsigned timeStampPresent : 1;
      unsigned sequenceNumberPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_DSecond second;
   ASN1T_MsgCount sequenceNumber;
   ASN1T_SignalStatusList status;
   ASN1T_SignalStatusMessage_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_SignalStatusMessage ();
} ;

EXTERN int asn1PE_SignalStatusMessage (OSCTXT* pctxt, ASN1T_SignalStatusMessage* pvalue);

EXTERN int asn1PD_SignalStatusMessage (OSCTXT* pctxt, ASN1T_SignalStatusMessage* pvalue);

EXTERN int XmlEnc_SignalStatusMessage (OSCTXT* pctxt, 
   ASN1T_SignalStatusMessage* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalStatusMessage (OSCTXT* pctxt, 
   ASN1T_SignalStatusMessage* pvalue);

EXTERN int asn1JsonEnc_SignalStatusMessage (OSCTXT *pctxt, ASN1T_SignalStatusMessage *pvalue);

EXTERN int asn1JsonDec_SignalStatusMessage (OSCTXT *pctxt, ASN1T_SignalStatusMessage *pvalue);

EXTERN int asn1PrtToStrm_SignalStatusMessage (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalStatusMessage* pvalue);

EXTERN ASN1T_SignalStatusMessage* 
   new_ASN1T_SignalStatusMessage (ASN1CType& ccobj);

EXTERN int asn1Init_SignalStatusMessage (ASN1T_SignalStatusMessage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalStatusMessage (OSCTXT *pctxt, 
   ASN1T_SignalStatusMessage* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSignID                                                */
/*                                                            */
/**************************************************************/
/*
RoadSignID ::= SEQUENCE {
   position [0] Position3D,
                   -- Location of sign
   viewAngle [1] HeadingSlice,
                   -- Vehicle direction of travel while
                   -- facing active side of sign
   mutcdCode [2] MUTCDCode OPTIONAL,
                   -- Tag for MUTCD code or "generic sign" 
   crc [3] MsgCRC OPTIONAL
                   -- Used to provide a check sum
}
*/
struct EXTERN ASN1T_RoadSignID {
   struct {
      unsigned mutcdCodePresent : 1;
      unsigned crcPresent : 1;
   } m;
   ASN1T_Position3D position;
   ASN1T_HeadingSlice viewAngle;
   ASN1T_MUTCDCode mutcdCode;
   ASN1T_MsgCRC crc;
   ASN1T_RoadSignID ();
} ;

EXTERN int asn1PE_RoadSignID (OSCTXT* pctxt, ASN1T_RoadSignID* pvalue);

EXTERN int asn1PD_RoadSignID (OSCTXT* pctxt, ASN1T_RoadSignID* pvalue);

EXTERN int XmlEnc_RoadSignID (OSCTXT* pctxt, ASN1T_RoadSignID* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RoadSignID (OSCTXT* pctxt, ASN1T_RoadSignID* pvalue);

EXTERN int asn1JsonEnc_RoadSignID (OSCTXT *pctxt, ASN1T_RoadSignID *pvalue);

EXTERN int asn1JsonDec_RoadSignID (OSCTXT *pctxt, ASN1T_RoadSignID *pvalue);

EXTERN int asn1PrtToStrm_RoadSignID (OSCTXT *pctxt, 
   const char* name, const ASN1T_RoadSignID* pvalue);

EXTERN ASN1T_RoadSignID* new_ASN1T_RoadSignID (ASN1CType& ccobj);

EXTERN int asn1Init_RoadSignID (ASN1T_RoadSignID* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RoadSignID (OSCTXT *pctxt, ASN1T_RoadSignID* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame_msgId                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerDataFrame'
*/
/* Choice tag constants */

#define T_TravelerDataFrame_msgId_furtherInfoID 1
#define T_TravelerDataFrame_msgId_roadSignID 2

struct EXTERN ASN1T_TravelerDataFrame_msgId {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_FurtherInfoID *furtherInfoID;
      /* t = 2 */
      ASN1T_RoadSignID *roadSignID;
   } u;
   ASN1T_TravelerDataFrame_msgId () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_TravelerDataFrame_msgId (OSCTXT* pctxt, ASN1T_TravelerDataFrame_msgId* pvalue);

EXTERN int asn1PD_TravelerDataFrame_msgId (OSCTXT* pctxt, ASN1T_TravelerDataFrame_msgId* pvalue);

EXTERN int XmlEnc_TravelerDataFrame_msgId (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame_msgId* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerDataFrame_msgId (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame_msgId* pvalue);

EXTERN int asn1JsonEnc_TravelerDataFrame_msgId (OSCTXT *pctxt, ASN1T_TravelerDataFrame_msgId *pvalue);

EXTERN int asn1JsonDec_TravelerDataFrame_msgId (OSCTXT *pctxt, ASN1T_TravelerDataFrame_msgId *pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrame_msgId (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerDataFrame_msgId* pvalue);

EXTERN ASN1T_TravelerDataFrame_msgId* 
   new_ASN1T_TravelerDataFrame_msgId (ASN1CType& ccobj);

EXTERN int asn1Init_TravelerDataFrame_msgId (ASN1T_TravelerDataFrame_msgId* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerDataFrame_msgId (OSCTXT *pctxt, 
   ASN1T_TravelerDataFrame_msgId* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_24B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-24B ::= SEQUENCE {
   -- ranges of +- 0.0002047 degrees
   -- ranges of +- 22.634554 meters at the equator
   lon [0] OffsetLL-B12,
   lat [1] OffsetLL-B12
}
*/
struct EXTERN ASN1T_Node_LL_24B {
   ASN1T_OffsetLL_B12 lon;
   ASN1T_OffsetLL_B12 lat;
} ;

EXTERN int asn1PE_Node_LL_24B (OSCTXT* pctxt, ASN1T_Node_LL_24B* pvalue);

EXTERN int asn1PD_Node_LL_24B (OSCTXT* pctxt, ASN1T_Node_LL_24B* pvalue);

EXTERN int XmlEnc_Node_LL_24B (OSCTXT* pctxt, ASN1T_Node_LL_24B* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LL_24B (OSCTXT* pctxt, ASN1T_Node_LL_24B* pvalue);

EXTERN int asn1JsonEnc_Node_LL_24B (OSCTXT *pctxt, ASN1T_Node_LL_24B *pvalue);

EXTERN int asn1JsonDec_Node_LL_24B (OSCTXT *pctxt, ASN1T_Node_LL_24B *pvalue);

EXTERN int asn1PrtToStrm_Node_LL_24B (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LL_24B* pvalue);

EXTERN ASN1T_Node_LL_24B* new_ASN1T_Node_LL_24B (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_LL_28B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-28B ::= SEQUENCE {
   -- ranges of +- 0.0008191 degrees
   -- ranges of +- 90.571389 meters at the equator
   lon [0] OffsetLL-B14,
   lat [1] OffsetLL-B14
}
*/
struct EXTERN ASN1T_Node_LL_28B {
   ASN1T_OffsetLL_B14 lon;
   ASN1T_OffsetLL_B14 lat;
} ;

EXTERN int asn1PE_Node_LL_28B (OSCTXT* pctxt, ASN1T_Node_LL_28B* pvalue);

EXTERN int asn1PD_Node_LL_28B (OSCTXT* pctxt, ASN1T_Node_LL_28B* pvalue);

EXTERN int XmlEnc_Node_LL_28B (OSCTXT* pctxt, ASN1T_Node_LL_28B* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LL_28B (OSCTXT* pctxt, ASN1T_Node_LL_28B* pvalue);

EXTERN int asn1JsonEnc_Node_LL_28B (OSCTXT *pctxt, ASN1T_Node_LL_28B *pvalue);

EXTERN int asn1JsonDec_Node_LL_28B (OSCTXT *pctxt, ASN1T_Node_LL_28B *pvalue);

EXTERN int asn1PrtToStrm_Node_LL_28B (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LL_28B* pvalue);

EXTERN ASN1T_Node_LL_28B* new_ASN1T_Node_LL_28B (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_LL_32B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-32B ::= SEQUENCE {
   -- ranges of +- 0.0032767 degrees
   -- ranges of +- 362.31873 meters at the equator
   lon [0] OffsetLL-B16,
   lat [1] OffsetLL-B16
}
*/
struct EXTERN ASN1T_Node_LL_32B {
   ASN1T_OffsetLL_B16 lon;
   ASN1T_OffsetLL_B16 lat;
} ;

EXTERN int asn1PE_Node_LL_32B (OSCTXT* pctxt, ASN1T_Node_LL_32B* pvalue);

EXTERN int asn1PD_Node_LL_32B (OSCTXT* pctxt, ASN1T_Node_LL_32B* pvalue);

EXTERN int XmlEnc_Node_LL_32B (OSCTXT* pctxt, ASN1T_Node_LL_32B* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LL_32B (OSCTXT* pctxt, ASN1T_Node_LL_32B* pvalue);

EXTERN int asn1JsonEnc_Node_LL_32B (OSCTXT *pctxt, ASN1T_Node_LL_32B *pvalue);

EXTERN int asn1JsonDec_Node_LL_32B (OSCTXT *pctxt, ASN1T_Node_LL_32B *pvalue);

EXTERN int asn1PrtToStrm_Node_LL_32B (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LL_32B* pvalue);

EXTERN ASN1T_Node_LL_32B* new_ASN1T_Node_LL_32B (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_LL_36B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-36B ::= SEQUENCE {
   -- ranges of +- 0.0131071 degrees
   -- ranges of +- 01.449308 Kmeters at the equator
   lon [0] OffsetLL-B18,
   lat [1] OffsetLL-B18
}
*/
struct EXTERN ASN1T_Node_LL_36B {
   ASN1T_OffsetLL_B18 lon;
   ASN1T_OffsetLL_B18 lat;
} ;

EXTERN int asn1PE_Node_LL_36B (OSCTXT* pctxt, ASN1T_Node_LL_36B* pvalue);

EXTERN int asn1PD_Node_LL_36B (OSCTXT* pctxt, ASN1T_Node_LL_36B* pvalue);

EXTERN int XmlEnc_Node_LL_36B (OSCTXT* pctxt, ASN1T_Node_LL_36B* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LL_36B (OSCTXT* pctxt, ASN1T_Node_LL_36B* pvalue);

EXTERN int asn1JsonEnc_Node_LL_36B (OSCTXT *pctxt, ASN1T_Node_LL_36B *pvalue);

EXTERN int asn1JsonDec_Node_LL_36B (OSCTXT *pctxt, ASN1T_Node_LL_36B *pvalue);

EXTERN int asn1PrtToStrm_Node_LL_36B (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LL_36B* pvalue);

EXTERN ASN1T_Node_LL_36B* new_ASN1T_Node_LL_36B (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_LL_44B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-44B ::= SEQUENCE {
   -- ranges of +- 0.2097151 degrees
   -- ranges of +- 23.189096 Kmeters at the equator
   lon [0] OffsetLL-B22,
   lat [1] OffsetLL-B22
}
*/
struct EXTERN ASN1T_Node_LL_44B {
   ASN1T_OffsetLL_B22 lon;
   ASN1T_OffsetLL_B22 lat;
} ;

EXTERN int asn1PE_Node_LL_44B (OSCTXT* pctxt, ASN1T_Node_LL_44B* pvalue);

EXTERN int asn1PD_Node_LL_44B (OSCTXT* pctxt, ASN1T_Node_LL_44B* pvalue);

EXTERN int XmlEnc_Node_LL_44B (OSCTXT* pctxt, ASN1T_Node_LL_44B* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LL_44B (OSCTXT* pctxt, ASN1T_Node_LL_44B* pvalue);

EXTERN int asn1JsonEnc_Node_LL_44B (OSCTXT *pctxt, ASN1T_Node_LL_44B *pvalue);

EXTERN int asn1JsonDec_Node_LL_44B (OSCTXT *pctxt, ASN1T_Node_LL_44B *pvalue);

EXTERN int asn1PrtToStrm_Node_LL_44B (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LL_44B* pvalue);

EXTERN ASN1T_Node_LL_44B* new_ASN1T_Node_LL_44B (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Node_LL_48B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-48B ::= SEQUENCE {
   -- ranges of +- 0.8388607 degrees
   -- ranges of +- 92.756481 Kmeters at the equator
   lon [0] OffsetLL-B24,
   lat [1] OffsetLL-B24
}
*/
struct EXTERN ASN1T_Node_LL_48B {
   ASN1T_OffsetLL_B24 lon;
   ASN1T_OffsetLL_B24 lat;
} ;

EXTERN int asn1PE_Node_LL_48B (OSCTXT* pctxt, ASN1T_Node_LL_48B* pvalue);

EXTERN int asn1PD_Node_LL_48B (OSCTXT* pctxt, ASN1T_Node_LL_48B* pvalue);

EXTERN int XmlEnc_Node_LL_48B (OSCTXT* pctxt, ASN1T_Node_LL_48B* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Node_LL_48B (OSCTXT* pctxt, ASN1T_Node_LL_48B* pvalue);

EXTERN int asn1JsonEnc_Node_LL_48B (OSCTXT *pctxt, ASN1T_Node_LL_48B *pvalue);

EXTERN int asn1JsonDec_Node_LL_48B (OSCTXT *pctxt, ASN1T_Node_LL_48B *pvalue);

EXTERN int asn1PrtToStrm_Node_LL_48B (OSCTXT *pctxt, 
   const char* name, const ASN1T_Node_LL_48B* pvalue);

EXTERN ASN1T_Node_LL_48B* new_ASN1T_Node_LL_48B (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  NodeOffsetPointLL_regional                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NodeOffsetPointLL'
*/
struct EXTERN ASN1T_NodeOffsetPointLL_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_NodeOffsetPointLL_regional (OSCTXT* pctxt, ASN1T_NodeOffsetPointLL_regional* pvalue);

EXTERN int asn1PD_NodeOffsetPointLL_regional (OSCTXT* pctxt, ASN1T_NodeOffsetPointLL_regional* pvalue);

EXTERN int XmlEnc_NodeOffsetPointLL_regional (OSCTXT* pctxt, 
   ASN1T_NodeOffsetPointLL_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeOffsetPointLL_regional (OSCTXT* pctxt, 
   ASN1T_NodeOffsetPointLL_regional* pvalue);

EXTERN int asn1JsonEnc_NodeOffsetPointLL_regional (OSCTXT *pctxt, ASN1T_NodeOffsetPointLL_regional *pvalue);

EXTERN int asn1JsonDec_NodeOffsetPointLL_regional (OSCTXT *pctxt, ASN1T_NodeOffsetPointLL_regional *pvalue);

EXTERN int asn1PrtToStrm_NodeOffsetPointLL_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeOffsetPointLL_regional* pvalue);

EXTERN ASN1T_NodeOffsetPointLL_regional* 
   new_ASN1T_NodeOffsetPointLL_regional (ASN1CType& ccobj);

EXTERN int asn1Init_NodeOffsetPointLL_regional (
   ASN1T_NodeOffsetPointLL_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeOffsetPointLL_regional (OSCTXT *pctxt, 
   ASN1T_NodeOffsetPointLL_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeOffsetPointLL                                         */
/*                                                            */
/**************************************************************/
/*
NodeOffsetPointLL ::= CHOICE {
   -- Nodes with LL content         Span at the equator when using a zoom of one:
   node-LL1 [0] Node-LL-24B, -- within +- 22.634554  meters of last node
   node-LL2 [1] Node-LL-28B, -- within +- 90.571389  meters of last node
   node-LL3 [2] Node-LL-32B, -- within +- 362.31873  meters of last node
   node-LL4 [3] Node-LL-36B, -- within +- 01.449308 Kmeters of last node
   node-LL5 [4] Node-LL-44B, -- within +- 23.189096 Kmeters of last node
   node-LL6 [5] Node-LL-48B, -- within +- 92.756481 Kmeters of last node
   node-LatLon [6] Node-LLmD-64b, -- node is a full 32b Lat/Lon range
   regional [7] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-NodeOffsetPointLL}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-NodeOffsetPointLL}{@regionId})
   }
}
*/
/* Choice tag constants */

#define T_NodeOffsetPointLL_node_LL1    1
#define T_NodeOffsetPointLL_node_LL2    2
#define T_NodeOffsetPointLL_node_LL3    3
#define T_NodeOffsetPointLL_node_LL4    4
#define T_NodeOffsetPointLL_node_LL5    5
#define T_NodeOffsetPointLL_node_LL6    6
#define T_NodeOffsetPointLL_node_LatLon 7
#define T_NodeOffsetPointLL_regional    8

struct EXTERN ASN1T_NodeOffsetPointLL {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_Node_LL_24B *node_LL1;
      /* t = 2 */
      ASN1T_Node_LL_28B *node_LL2;
      /* t = 3 */
      ASN1T_Node_LL_32B *node_LL3;
      /* t = 4 */
      ASN1T_Node_LL_36B *node_LL4;
      /* t = 5 */
      ASN1T_Node_LL_44B *node_LL5;
      /* t = 6 */
      ASN1T_Node_LL_48B *node_LL6;
      /* t = 7 */
      ASN1T_Node_LLmD_64b *node_LatLon;
      /* t = 8 */
      ASN1T_NodeOffsetPointLL_regional *regional;
   } u;
   ASN1T_NodeOffsetPointLL () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_NodeOffsetPointLL (OSCTXT* pctxt, ASN1T_NodeOffsetPointLL* pvalue);

EXTERN int asn1PD_NodeOffsetPointLL (OSCTXT* pctxt, ASN1T_NodeOffsetPointLL* pvalue);

EXTERN int XmlEnc_NodeOffsetPointLL (OSCTXT* pctxt, 
   ASN1T_NodeOffsetPointLL* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeOffsetPointLL (OSCTXT* pctxt, 
   ASN1T_NodeOffsetPointLL* pvalue);

EXTERN int asn1JsonEnc_NodeOffsetPointLL (OSCTXT *pctxt, ASN1T_NodeOffsetPointLL *pvalue);

EXTERN int asn1JsonDec_NodeOffsetPointLL (OSCTXT *pctxt, ASN1T_NodeOffsetPointLL *pvalue);

EXTERN int asn1PrtToStrm_NodeOffsetPointLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeOffsetPointLL* pvalue);

EXTERN ASN1T_NodeOffsetPointLL* new_ASN1T_NodeOffsetPointLL (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_NodeOffsetPointLL (ASN1T_NodeOffsetPointLL* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeOffsetPointLL (OSCTXT *pctxt, 
   ASN1T_NodeOffsetPointLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeLLList                                       */
/*                                                            */
/**************************************************************/
/*
NodeAttributeLLList ::= SEQUENCE (SIZE (1..8)) OF NodeAttributeLL
*/
typedef struct EXTERN ASN1T_NodeAttributeLLList {
   OSUINT8 n;
   ASN1T_NodeAttributeLL elem[8];
   ASN1T_NodeAttributeLLList () : n(0) {}
} ASN1T_NodeAttributeLLList;

class EXTERN ASN1C_NodeAttributeLLList :
public ASN1CType
{
protected:
   ASN1T_NodeAttributeLLList& msgData;
public:
   /**
    * Control class: ASN1C_NodeAttributeLLList
    * Data class:    ASN1T_NodeAttributeLLList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_NodeAttributeLLList (ASN1T_NodeAttributeLLList& data);

   /**
    * Control class: ASN1C_NodeAttributeLLList<br/>
    * Data class: ASN1T_NodeAttributeLLList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_NodeAttributeLLList (OSRTMessageBufferIF& msgBuf
      , ASN1T_NodeAttributeLLList& data);

   /**
    * Control class: ASN1C_NodeAttributeLLList<br/>
    * Data class: ASN1T_NodeAttributeLLList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_NodeAttributeLLList (ASN1CType& ccobj, ASN1T_NodeAttributeLLList& data
      );

   virtual ~ASN1C_NodeAttributeLLList () {}

private:
   ASN1C_NodeAttributeLLList& operator= (const ASN1C_NodeAttributeLLList&) {return *this;}
} ;

EXTERN int asn1PE_NodeAttributeLLList (OSCTXT* pctxt, ASN1T_NodeAttributeLLList* pvalue);

EXTERN int asn1PD_NodeAttributeLLList (OSCTXT* pctxt, ASN1T_NodeAttributeLLList* pvalue);

EXTERN int XmlEnc_NodeAttributeLLList (OSCTXT* pctxt, 
   ASN1T_NodeAttributeLLList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeLLList (OSCTXT* pctxt, 
   ASN1T_NodeAttributeLLList* pvalue);

EXTERN int asn1JsonEnc_NodeAttributeLLList (OSCTXT *pctxt, ASN1T_NodeAttributeLLList *pvalue);

EXTERN int asn1JsonDec_NodeAttributeLLList (OSCTXT *pctxt, ASN1T_NodeAttributeLLList *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeLLList (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeLLList* pvalue);

EXTERN int asn1Init_NodeAttributeLLList (ASN1T_NodeAttributeLLList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  SegmentAttributeLLList                                    */
/*                                                            */
/**************************************************************/
/*
SegmentAttributeLLList ::= SEQUENCE (SIZE (1..8)) OF SegmentAttributeLL
*/
typedef struct EXTERN ASN1T_SegmentAttributeLLList {
   OSUINT8 n;
   ASN1T_SegmentAttributeLL elem[8];
   ASN1T_SegmentAttributeLLList () : n(0) {}
} ASN1T_SegmentAttributeLLList;

class EXTERN ASN1C_SegmentAttributeLLList :
public ASN1CType
{
protected:
   ASN1T_SegmentAttributeLLList& msgData;
public:
   /**
    * Control class: ASN1C_SegmentAttributeLLList
    * Data class:    ASN1T_SegmentAttributeLLList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SegmentAttributeLLList (ASN1T_SegmentAttributeLLList& data);

   /**
    * Control class: ASN1C_SegmentAttributeLLList<br/>
    * Data class: ASN1T_SegmentAttributeLLList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SegmentAttributeLLList (OSRTMessageBufferIF& msgBuf
      , ASN1T_SegmentAttributeLLList& data);

   /**
    * Control class: ASN1C_SegmentAttributeLLList<br/>
    * Data class: ASN1T_SegmentAttributeLLList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SegmentAttributeLLList (ASN1CType& ccobj
      , ASN1T_SegmentAttributeLLList& data);

   virtual ~ASN1C_SegmentAttributeLLList () {}

private:
   ASN1C_SegmentAttributeLLList& operator= (const ASN1C_SegmentAttributeLLList&) {return *this;}
} ;

EXTERN int asn1PE_SegmentAttributeLLList (OSCTXT* pctxt, ASN1T_SegmentAttributeLLList* pvalue);

EXTERN int asn1PD_SegmentAttributeLLList (OSCTXT* pctxt, ASN1T_SegmentAttributeLLList* pvalue);

EXTERN int XmlEnc_SegmentAttributeLLList (OSCTXT* pctxt, 
   ASN1T_SegmentAttributeLLList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SegmentAttributeLLList (OSCTXT* pctxt, 
   ASN1T_SegmentAttributeLLList* pvalue);

EXTERN int asn1JsonEnc_SegmentAttributeLLList (OSCTXT *pctxt, ASN1T_SegmentAttributeLLList *pvalue);

EXTERN int asn1JsonDec_SegmentAttributeLLList (OSCTXT *pctxt, ASN1T_SegmentAttributeLLList *pvalue);

EXTERN int asn1PrtToStrm_SegmentAttributeLLList (OSCTXT *pctxt, 
   const char* name, const ASN1T_SegmentAttributeLLList* pvalue);

EXTERN int asn1Init_SegmentAttributeLLList (ASN1T_SegmentAttributeLLList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetLL_regional_element                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NodeAttributeSetLL'
*/
struct EXTERN ASN1T_NodeAttributeSetLL_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_NodeAttributeSetLL_regional_element (OSCTXT* pctxt, ASN1T_NodeAttributeSetLL_regional_element* pvalue);

EXTERN int asn1PD_NodeAttributeSetLL_regional_element (OSCTXT* pctxt, ASN1T_NodeAttributeSetLL_regional_element* pvalue);

EXTERN int XmlEnc_NodeAttributeSetLL_regional_element (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetLL_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeSetLL_regional_element (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetLL_regional_element* pvalue);

EXTERN int asn1JsonEnc_NodeAttributeSetLL_regional_element (OSCTXT *pctxt, ASN1T_NodeAttributeSetLL_regional_element *pvalue);

EXTERN int asn1JsonDec_NodeAttributeSetLL_regional_element (OSCTXT *pctxt, ASN1T_NodeAttributeSetLL_regional_element *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetLL_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeSetLL_regional_element* pvalue);

EXTERN ASN1T_NodeAttributeSetLL_regional_element* 
   new_ASN1T_NodeAttributeSetLL_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_NodeAttributeSetLL_regional_element (
   ASN1T_NodeAttributeSetLL_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeAttributeSetLL_regional_element (OSCTXT *pctxt, 
   ASN1T_NodeAttributeSetLL_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetLL_regional                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NodeAttributeSetLL'
*/
/* List of ASN1T_NodeAttributeSetLL_regional_element */
typedef ASN1TSeqOfList ASN1T_NodeAttributeSetLL_regional;

class EXTERN ASN1C_NodeAttributeSetLL_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_NodeAttributeSetLL_regional& msgData;
public:
   /**
    * Control class: ASN1C_NodeAttributeSetLL_regional
    * Data class:    ASN1T_NodeAttributeSetLL_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_NodeAttributeSetLL_regional (ASN1T_NodeAttributeSetLL_regional& data);

   /**
    * Control class: ASN1C_NodeAttributeSetLL_regional<br/>
    * Data class: ASN1T_NodeAttributeSetLL_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_NodeAttributeSetLL_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_NodeAttributeSetLL_regional& data);

   /**
    * Control class: ASN1C_NodeAttributeSetLL_regional<br/>
    * Data class: ASN1T_NodeAttributeSetLL_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_NodeAttributeSetLL_regional (ASN1CType& ccobj
      , ASN1T_NodeAttributeSetLL_regional& data);

   virtual ~ASN1C_NodeAttributeSetLL_regional () {}

   /**
    * Data class: ASN1T_NodeAttributeSetLL_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_NodeAttributeSetLL_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_NodeAttributeSetLL_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_NodeAttributeSetLL_regional_element* NewElement ();

   /**
    * Data class: ASN1T_NodeAttributeSetLL_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_NodeAttributeSetLL_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_NodeAttributeSetLL_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_NodeAttributeSetLL_regional* pmatches);

private:
   ASN1C_NodeAttributeSetLL_regional& operator= (const ASN1C_NodeAttributeSetLL_regional&) {return *this;}
} ;

EXTERN int asn1PE_NodeAttributeSetLL_regional (OSCTXT* pctxt, ASN1T_NodeAttributeSetLL_regional* pvalue);

EXTERN int asn1PD_NodeAttributeSetLL_regional (OSCTXT* pctxt, ASN1T_NodeAttributeSetLL_regional* pvalue);

EXTERN int XmlEnc_NodeAttributeSetLL_regional (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetLL_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeSetLL_regional (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetLL_regional* pvalue);

EXTERN int asn1JsonEnc_NodeAttributeSetLL_regional (OSCTXT *pctxt, ASN1T_NodeAttributeSetLL_regional *pvalue);

EXTERN int asn1JsonDec_NodeAttributeSetLL_regional (OSCTXT *pctxt, ASN1T_NodeAttributeSetLL_regional *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetLL_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeSetLL_regional* pvalue);

EXTERN int asn1Init_NodeAttributeSetLL_regional (
   ASN1T_NodeAttributeSetLL_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeAttributeSetLL_regional (OSCTXT *pctxt, 
   ASN1T_NodeAttributeSetLL_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetLL                                        */
/*                                                            */
/**************************************************************/
/*
NodeAttributeSetLL ::= SEQUENCE {
   localNode [0] NodeAttributeLLList OPTIONAL,
                -- Attribute states which pertain to this node point
   disabled [1] SegmentAttributeLLList OPTIONAL,
                -- Attribute states which are disabled at this node point
   enabled [2] SegmentAttributeLLList OPTIONAL,
                -- Attribute states which are enabled at this node point
                -- and which remain enabled until disabled or the lane ends
   data [3] LaneDataAttributeList OPTIONAL,
                -- Attributes which require an additional data values
                -- some of these are local to the node point, while others
                -- persist with the provided values until changed
                -- and this is indicated in each entry
   dWidth [4] Offset-B10 OPTIONAL,
                -- A value added to the current lane width
                -- at this node and from this node onwards, in 1cm steps
                -- lane width between nodes are a linear taper between pts
                -- the value of zero shall not be sent here
   dElevation [5] Offset-B10 OPTIONAL,
                -- A value added to the current Elevation 
                -- at this node from this node onwards, in 10cm steps
                -- elevations between nodes are a linear taper between pts
                -- the value of zero shall not be sent here
   regional [6] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-NodeAttributeSetLL}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-NodeAttributeSetLL}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_NodeAttributeSetLL {
   struct {
      unsigned localNodePresent : 1;
      unsigned disabledPresent : 1;
      unsigned enabledPresent : 1;
      unsigned dataPresent : 1;
      unsigned dWidthPresent : 1;
      unsigned dElevationPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_NodeAttributeLLList localNode;
   ASN1T_SegmentAttributeLLList disabled;
   ASN1T_SegmentAttributeLLList enabled;
   ASN1T_LaneDataAttributeList data;
   ASN1T_Offset_B10 dWidth;
   ASN1T_Offset_B10 dElevation;
   ASN1T_NodeAttributeSetLL_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_NodeAttributeSetLL ();
} ;

EXTERN int asn1PE_NodeAttributeSetLL (OSCTXT* pctxt, ASN1T_NodeAttributeSetLL* pvalue);

EXTERN int asn1PD_NodeAttributeSetLL (OSCTXT* pctxt, ASN1T_NodeAttributeSetLL* pvalue);

EXTERN int XmlEnc_NodeAttributeSetLL (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetLL* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeAttributeSetLL (OSCTXT* pctxt, 
   ASN1T_NodeAttributeSetLL* pvalue);

EXTERN int asn1JsonEnc_NodeAttributeSetLL (OSCTXT *pctxt, ASN1T_NodeAttributeSetLL *pvalue);

EXTERN int asn1JsonDec_NodeAttributeSetLL (OSCTXT *pctxt, ASN1T_NodeAttributeSetLL *pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeAttributeSetLL* pvalue);

EXTERN ASN1T_NodeAttributeSetLL* 
   new_ASN1T_NodeAttributeSetLL (ASN1CType& ccobj);

EXTERN int asn1Init_NodeAttributeSetLL (ASN1T_NodeAttributeSetLL* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeAttributeSetLL (OSCTXT *pctxt, 
   ASN1T_NodeAttributeSetLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeLL                                                    */
/*                                                            */
/**************************************************************/
/*
NodeLL ::= SEQUENCE {
   delta [0] EXPLICIT NodeOffsetPointLL,
               -- A choice of which Lat,Lon offset value to use  
               -- this includes various delta values as well a regional choices
   attributes [1] NodeAttributeSetLL OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_NodeLL {
   struct {
      unsigned attributesPresent : 1;
   } m;
   ASN1T_NodeOffsetPointLL delta;
   ASN1T_NodeAttributeSetLL attributes;
   ASN1TSeqExt extElem1;
   ASN1T_NodeLL ();
} ;

EXTERN int asn1PE_NodeLL (OSCTXT* pctxt, ASN1T_NodeLL* pvalue);

EXTERN int asn1PD_NodeLL (OSCTXT* pctxt, ASN1T_NodeLL* pvalue);

EXTERN int XmlEnc_NodeLL (OSCTXT* pctxt, ASN1T_NodeLL* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeLL (OSCTXT* pctxt, ASN1T_NodeLL* pvalue);

EXTERN int asn1JsonEnc_NodeLL (OSCTXT *pctxt, ASN1T_NodeLL *pvalue);

EXTERN int asn1JsonDec_NodeLL (OSCTXT *pctxt, ASN1T_NodeLL *pvalue);

EXTERN int asn1PrtToStrm_NodeLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeLL* pvalue);

EXTERN ASN1T_NodeLL* new_ASN1T_NodeLL (ASN1CType& ccobj);

EXTERN int asn1Init_NodeLL (ASN1T_NodeLL* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeLL (OSCTXT *pctxt, ASN1T_NodeLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeSetLL                                                 */
/*                                                            */
/**************************************************************/
/*
NodeSetLL ::= SEQUENCE (SIZE (2..63)) OF NodeLL
*/
/* List of ASN1T_NodeLL */
typedef ASN1TSeqOfList ASN1T_NodeSetLL;

class EXTERN ASN1C_NodeSetLL :
public ASN1CSeqOfList
{
protected:
   ASN1T_NodeSetLL& msgData;
public:
   /**
    * Control class: ASN1C_NodeSetLL
    * Data class:    ASN1T_NodeSetLL
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_NodeSetLL (ASN1T_NodeSetLL& data);

   /**
    * Control class: ASN1C_NodeSetLL<br/>
    * Data class: ASN1T_NodeSetLL<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_NodeSetLL (OSRTMessageBufferIF& msgBuf, ASN1T_NodeSetLL& data);

   /**
    * Control class: ASN1C_NodeSetLL<br/>
    * Data class: ASN1T_NodeSetLL<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_NodeSetLL (ASN1CType& ccobj, ASN1T_NodeSetLL& data);

   virtual ~ASN1C_NodeSetLL () {}

   /**
    * Data class: ASN1T_NodeLL<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_NodeLL* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_NodeLL.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_NodeLL* NewElement ();

   /**
    * Data class: ASN1T_NodeLL.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_NodeLL* AppendNewElement ();

private:
   ASN1C_NodeSetLL& operator= (const ASN1C_NodeSetLL&) {return *this;}
} ;

EXTERN int asn1PE_NodeSetLL (OSCTXT* pctxt, ASN1T_NodeSetLL* pvalue);

EXTERN int asn1PD_NodeSetLL (OSCTXT* pctxt, ASN1T_NodeSetLL* pvalue);

EXTERN int XmlEnc_NodeSetLL (OSCTXT* pctxt, ASN1T_NodeSetLL* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeSetLL (OSCTXT* pctxt, ASN1T_NodeSetLL* pvalue);

EXTERN int asn1JsonEnc_NodeSetLL (OSCTXT *pctxt, ASN1T_NodeSetLL *pvalue);

EXTERN int asn1JsonDec_NodeSetLL (OSCTXT *pctxt, ASN1T_NodeSetLL *pvalue);

EXTERN int asn1PrtToStrm_NodeSetLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeSetLL* pvalue);

EXTERN int asn1Init_NodeSetLL (ASN1T_NodeSetLL* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeSetLL (OSCTXT *pctxt, ASN1T_NodeSetLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeListLL                                                */
/*                                                            */
/**************************************************************/
/*
NodeListLL ::= CHOICE {
   nodes [0] NodeSetLL,
   ...
}
*/
/* Choice tag constants */

#define T_NodeListLL_nodes              1
#define T_NodeListLL_extElem1           2

struct EXTERN ASN1T_NodeListLL {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_NodeSetLL *nodes;
      /* t = 2 */
      ASN1TOpenType *extElem1;
   } u;
   ASN1T_NodeListLL () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_NodeListLL (OSCTXT* pctxt, ASN1T_NodeListLL* pvalue);

EXTERN int asn1PD_NodeListLL (OSCTXT* pctxt, ASN1T_NodeListLL* pvalue);

EXTERN int XmlEnc_NodeListLL (OSCTXT* pctxt, ASN1T_NodeListLL* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_NodeListLL (OSCTXT* pctxt, ASN1T_NodeListLL* pvalue);

EXTERN int asn1JsonEnc_NodeListLL (OSCTXT *pctxt, ASN1T_NodeListLL *pvalue);

EXTERN int asn1JsonDec_NodeListLL (OSCTXT *pctxt, ASN1T_NodeListLL *pvalue);

EXTERN int asn1PrtToStrm_NodeListLL (OSCTXT *pctxt, 
   const char* name, const ASN1T_NodeListLL* pvalue);

EXTERN ASN1T_NodeListLL* new_ASN1T_NodeListLL (ASN1CType& ccobj);

EXTERN int asn1Init_NodeListLL (ASN1T_NodeListLL* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_NodeListLL (OSCTXT *pctxt, ASN1T_NodeListLL* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetSystem_offset                                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'OffsetSystem'
*/
/* Choice tag constants */

#define T_OffsetSystem_offset_xy        1
#define T_OffsetSystem_offset_ll        2

struct EXTERN ASN1T_OffsetSystem_offset {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_NodeListXY *xy;
      /* t = 2 */
      ASN1T_NodeListLL *ll;
   } u;
   ASN1T_OffsetSystem_offset () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_OffsetSystem_offset (OSCTXT* pctxt, ASN1T_OffsetSystem_offset* pvalue);

EXTERN int asn1PD_OffsetSystem_offset (OSCTXT* pctxt, ASN1T_OffsetSystem_offset* pvalue);

EXTERN int XmlEnc_OffsetSystem_offset (OSCTXT* pctxt, 
   ASN1T_OffsetSystem_offset* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetSystem_offset (OSCTXT* pctxt, 
   ASN1T_OffsetSystem_offset* pvalue);

EXTERN int asn1JsonEnc_OffsetSystem_offset (OSCTXT *pctxt, ASN1T_OffsetSystem_offset *pvalue);

EXTERN int asn1JsonDec_OffsetSystem_offset (OSCTXT *pctxt, ASN1T_OffsetSystem_offset *pvalue);

EXTERN int asn1PrtToStrm_OffsetSystem_offset (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetSystem_offset* pvalue);

EXTERN ASN1T_OffsetSystem_offset* 
   new_ASN1T_OffsetSystem_offset (ASN1CType& ccobj);

EXTERN int asn1Init_OffsetSystem_offset (ASN1T_OffsetSystem_offset* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_OffsetSystem_offset (OSCTXT *pctxt, 
   ASN1T_OffsetSystem_offset* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetSystem                                              */
/*                                                            */
/**************************************************************/
/*
OffsetSystem ::= SEQUENCE {
   scale [0] Zoom OPTIONAL,
   offset [1] EXPLICIT CHOICE {
      xy [0] EXPLICIT NodeListXY, -- offsets of 1.0 centimeters 
      ll [1] EXPLICIT NodeListLL
   }
}
*/
struct EXTERN ASN1T_OffsetSystem {
   struct {
      unsigned scalePresent : 1;
   } m;
   ASN1T_Zoom scale;
   ASN1T_OffsetSystem_offset offset;
   ASN1T_OffsetSystem ();
} ;

EXTERN int asn1PE_OffsetSystem (OSCTXT* pctxt, ASN1T_OffsetSystem* pvalue);

EXTERN int asn1PD_OffsetSystem (OSCTXT* pctxt, ASN1T_OffsetSystem* pvalue);

EXTERN int XmlEnc_OffsetSystem (OSCTXT* pctxt, ASN1T_OffsetSystem* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_OffsetSystem (OSCTXT* pctxt, ASN1T_OffsetSystem* pvalue);

EXTERN int asn1JsonEnc_OffsetSystem (OSCTXT *pctxt, ASN1T_OffsetSystem *pvalue);

EXTERN int asn1JsonDec_OffsetSystem (OSCTXT *pctxt, ASN1T_OffsetSystem *pvalue);

EXTERN int asn1PrtToStrm_OffsetSystem (OSCTXT *pctxt, 
   const char* name, const ASN1T_OffsetSystem* pvalue);

EXTERN ASN1T_OffsetSystem* new_ASN1T_OffsetSystem (ASN1CType& ccobj);

EXTERN int asn1Init_OffsetSystem (ASN1T_OffsetSystem* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_OffsetSystem (OSCTXT *pctxt, ASN1T_OffsetSystem* pvalue);

/**************************************************************/
/*                                                            */
/*  Circle                                                    */
/*                                                            */
/**************************************************************/
/*
Circle ::= SEQUENCE {
   center [0] Position3D,
   radius [1] Radius-B12,
   units [2] DistanceUnits
}
*/
struct EXTERN ASN1T_Circle {
   ASN1T_Position3D center;
   ASN1T_Radius_B12 radius;
   ASN1T_DistanceUnits units;
} ;

EXTERN int asn1PE_Circle (OSCTXT* pctxt, ASN1T_Circle* pvalue);

EXTERN int asn1PD_Circle (OSCTXT* pctxt, ASN1T_Circle* pvalue);

EXTERN int XmlEnc_Circle (OSCTXT* pctxt, ASN1T_Circle* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Circle (OSCTXT* pctxt, ASN1T_Circle* pvalue);

EXTERN int asn1JsonEnc_Circle (OSCTXT *pctxt, ASN1T_Circle *pvalue);

EXTERN int asn1JsonDec_Circle (OSCTXT *pctxt, ASN1T_Circle *pvalue);

EXTERN int asn1PrtToStrm_Circle (OSCTXT *pctxt, 
   const char* name, const ASN1T_Circle* pvalue);

EXTERN ASN1T_Circle* new_ASN1T_Circle (ASN1CType& ccobj);

EXTERN int asn1Init_Circle (ASN1T_Circle* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_Circle (OSCTXT *pctxt, ASN1T_Circle* pvalue);

/**************************************************************/
/*                                                            */
/*  GeometricProjection_regional_element                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeometricProjection'
*/
struct EXTERN ASN1T_GeometricProjection_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_GeometricProjection_regional_element (OSCTXT* pctxt, ASN1T_GeometricProjection_regional_element* pvalue);

EXTERN int asn1PD_GeometricProjection_regional_element (OSCTXT* pctxt, ASN1T_GeometricProjection_regional_element* pvalue);

EXTERN int XmlEnc_GeometricProjection_regional_element (OSCTXT* pctxt, 
   ASN1T_GeometricProjection_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeometricProjection_regional_element (OSCTXT* pctxt, 
   ASN1T_GeometricProjection_regional_element* pvalue);

EXTERN int asn1JsonEnc_GeometricProjection_regional_element (OSCTXT *pctxt, ASN1T_GeometricProjection_regional_element *pvalue);

EXTERN int asn1JsonDec_GeometricProjection_regional_element (OSCTXT *pctxt, ASN1T_GeometricProjection_regional_element *pvalue);

EXTERN int asn1PrtToStrm_GeometricProjection_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeometricProjection_regional_element* pvalue);

EXTERN ASN1T_GeometricProjection_regional_element* 
   new_ASN1T_GeometricProjection_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_GeometricProjection_regional_element (
   ASN1T_GeometricProjection_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeometricProjection_regional_element (OSCTXT *pctxt, 
   ASN1T_GeometricProjection_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  GeometricProjection_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeometricProjection'
*/
/* List of ASN1T_GeometricProjection_regional_element */
typedef ASN1TSeqOfList ASN1T_GeometricProjection_regional;

class EXTERN ASN1C_GeometricProjection_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_GeometricProjection_regional& msgData;
public:
   /**
    * Control class: ASN1C_GeometricProjection_regional
    * Data class:    ASN1T_GeometricProjection_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_GeometricProjection_regional
       (ASN1T_GeometricProjection_regional& data);

   /**
    * Control class: ASN1C_GeometricProjection_regional<br/>
    * Data class: ASN1T_GeometricProjection_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_GeometricProjection_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_GeometricProjection_regional& data);

   /**
    * Control class: ASN1C_GeometricProjection_regional<br/>
    * Data class: ASN1T_GeometricProjection_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_GeometricProjection_regional (ASN1CType& ccobj
      , ASN1T_GeometricProjection_regional& data);

   virtual ~ASN1C_GeometricProjection_regional () {}

   /**
    * Data class: ASN1T_GeometricProjection_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GeometricProjection_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GeometricProjection_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GeometricProjection_regional_element* NewElement ();

   /**
    * Data class: ASN1T_GeometricProjection_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GeometricProjection_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_GeometricProjection_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_GeometricProjection_regional* pmatches);

private:
   ASN1C_GeometricProjection_regional& operator= (const ASN1C_GeometricProjection_regional&) {return *this;}
} ;

EXTERN int asn1PE_GeometricProjection_regional (OSCTXT* pctxt, ASN1T_GeometricProjection_regional* pvalue);

EXTERN int asn1PD_GeometricProjection_regional (OSCTXT* pctxt, ASN1T_GeometricProjection_regional* pvalue);

EXTERN int XmlEnc_GeometricProjection_regional (OSCTXT* pctxt, 
   ASN1T_GeometricProjection_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeometricProjection_regional (OSCTXT* pctxt, 
   ASN1T_GeometricProjection_regional* pvalue);

EXTERN int asn1JsonEnc_GeometricProjection_regional (OSCTXT *pctxt, ASN1T_GeometricProjection_regional *pvalue);

EXTERN int asn1JsonDec_GeometricProjection_regional (OSCTXT *pctxt, ASN1T_GeometricProjection_regional *pvalue);

EXTERN int asn1PrtToStrm_GeometricProjection_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeometricProjection_regional* pvalue);

EXTERN int asn1Init_GeometricProjection_regional (
   ASN1T_GeometricProjection_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeometricProjection_regional (OSCTXT *pctxt, 
   ASN1T_GeometricProjection_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  GeometricProjection                                       */
/*                                                            */
/**************************************************************/
/*
GeometricProjection ::= SEQUENCE {
   direction [0] HeadingSlice,
                    -- field of view over which this applies,
   extent [1] Extent OPTIONAL,
                    -- the spatial distance over which this
                    -- message applies and should be presented
   laneWidth [2] LaneWidth OPTIONAL, -- used when a width is needed
   circle [3] Circle, -- A point and radius
   regional [4] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-GeometricProjection}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-GeometricProjection}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_GeometricProjection {
   struct {
      unsigned extentPresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_HeadingSlice direction;
   ASN1T_Extent extent;
   ASN1T_LaneWidth laneWidth;
   ASN1T_Circle circle;
   ASN1T_GeometricProjection_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_GeometricProjection ();
} ;

EXTERN int asn1PE_GeometricProjection (OSCTXT* pctxt, ASN1T_GeometricProjection* pvalue);

EXTERN int asn1PD_GeometricProjection (OSCTXT* pctxt, ASN1T_GeometricProjection* pvalue);

EXTERN int XmlEnc_GeometricProjection (OSCTXT* pctxt, 
   ASN1T_GeometricProjection* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeometricProjection (OSCTXT* pctxt, 
   ASN1T_GeometricProjection* pvalue);

EXTERN int asn1JsonEnc_GeometricProjection (OSCTXT *pctxt, ASN1T_GeometricProjection *pvalue);

EXTERN int asn1JsonDec_GeometricProjection (OSCTXT *pctxt, ASN1T_GeometricProjection *pvalue);

EXTERN int asn1PrtToStrm_GeometricProjection (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeometricProjection* pvalue);

EXTERN ASN1T_GeometricProjection* 
   new_ASN1T_GeometricProjection (ASN1CType& ccobj);

EXTERN int asn1Init_GeometricProjection (ASN1T_GeometricProjection* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeometricProjection (OSCTXT *pctxt, 
   ASN1T_GeometricProjection* pvalue);

/**************************************************************/
/*                                                            */
/*  ShapePointSet                                             */
/*                                                            */
/**************************************************************/
/*
ShapePointSet ::= SEQUENCE {
   anchor [0] Position3D OPTIONAL,
   laneWidth [1] LaneWidth OPTIONAL,
   directionality [2] DirectionOfUse OPTIONAL,
   nodeList [3] EXPLICIT NodeListXY,
   ...
}
*/
struct EXTERN ASN1T_ShapePointSet {
   struct {
      unsigned anchorPresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned directionalityPresent : 1;
   } m;
   ASN1T_Position3D anchor;
   ASN1T_LaneWidth laneWidth;
   ASN1T_DirectionOfUse directionality;
   ASN1T_NodeListXY nodeList;
   ASN1TSeqExt extElem1;
   ASN1T_ShapePointSet ();
} ;

EXTERN int asn1PE_ShapePointSet (OSCTXT* pctxt, ASN1T_ShapePointSet* pvalue);

EXTERN int asn1PD_ShapePointSet (OSCTXT* pctxt, ASN1T_ShapePointSet* pvalue);

EXTERN int XmlEnc_ShapePointSet (OSCTXT* pctxt, ASN1T_ShapePointSet* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ShapePointSet (OSCTXT* pctxt, ASN1T_ShapePointSet* pvalue);

EXTERN int asn1JsonEnc_ShapePointSet (OSCTXT *pctxt, ASN1T_ShapePointSet *pvalue);

EXTERN int asn1JsonDec_ShapePointSet (OSCTXT *pctxt, ASN1T_ShapePointSet *pvalue);

EXTERN int asn1PrtToStrm_ShapePointSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_ShapePointSet* pvalue);

EXTERN ASN1T_ShapePointSet* new_ASN1T_ShapePointSet (ASN1CType& ccobj);

EXTERN int asn1Init_ShapePointSet (ASN1T_ShapePointSet* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ShapePointSet (OSCTXT *pctxt, ASN1T_ShapePointSet* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionOffsets                                             */
/*                                                            */
/**************************************************************/
/*
RegionOffsets ::= SEQUENCE {
   xOffset [0] OffsetLL-B16,
   yOffset [1] OffsetLL-B16,
   zOffset [2] OffsetLL-B16 OPTIONAL
            -- all in signed values where 
            -- the LSB is in units of 1 meter  
}
*/
struct EXTERN ASN1T_RegionOffsets {
   struct {
      unsigned zOffsetPresent : 1;
   } m;
   ASN1T_OffsetLL_B16 xOffset;
   ASN1T_OffsetLL_B16 yOffset;
   ASN1T_OffsetLL_B16 zOffset;
   ASN1T_RegionOffsets ();
} ;

EXTERN int asn1PE_RegionOffsets (OSCTXT* pctxt, ASN1T_RegionOffsets* pvalue);

EXTERN int asn1PD_RegionOffsets (OSCTXT* pctxt, ASN1T_RegionOffsets* pvalue);

EXTERN int XmlEnc_RegionOffsets (OSCTXT* pctxt, ASN1T_RegionOffsets* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RegionOffsets (OSCTXT* pctxt, ASN1T_RegionOffsets* pvalue);

EXTERN int asn1JsonEnc_RegionOffsets (OSCTXT *pctxt, ASN1T_RegionOffsets *pvalue);

EXTERN int asn1JsonDec_RegionOffsets (OSCTXT *pctxt, ASN1T_RegionOffsets *pvalue);

EXTERN int asn1PrtToStrm_RegionOffsets (OSCTXT *pctxt, 
   const char* name, const ASN1T_RegionOffsets* pvalue);

EXTERN ASN1T_RegionOffsets* new_ASN1T_RegionOffsets (ASN1CType& ccobj);

EXTERN int asn1Init_RegionOffsets (ASN1T_RegionOffsets* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  RegionList                                                */
/*                                                            */
/**************************************************************/
/*
RegionList ::= SEQUENCE (SIZE (1..64)) OF RegionOffsets
    the Position3D ref point (starting point or anchor)
    is found in the outer object.

*/
/* List of ASN1T_RegionOffsets */
typedef ASN1TSeqOfList ASN1T_RegionList;

class EXTERN ASN1C_RegionList :
public ASN1CSeqOfList
{
protected:
   ASN1T_RegionList& msgData;
public:
   /**
    * Control class: ASN1C_RegionList
    * Data class:    ASN1T_RegionList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RegionList (ASN1T_RegionList& data);

   /**
    * Control class: ASN1C_RegionList<br/>
    * Data class: ASN1T_RegionList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RegionList (OSRTMessageBufferIF& msgBuf, ASN1T_RegionList& data);

   /**
    * Control class: ASN1C_RegionList<br/>
    * Data class: ASN1T_RegionList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RegionList (ASN1CType& ccobj, ASN1T_RegionList& data);

   virtual ~ASN1C_RegionList () {}

   /**
    * Data class: ASN1T_RegionOffsets<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RegionOffsets* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RegionOffsets.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RegionOffsets* NewElement ();

   /**
    * Data class: ASN1T_RegionOffsets.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RegionOffsets* AppendNewElement ();

private:
   ASN1C_RegionList& operator= (const ASN1C_RegionList&) {return *this;}
} ;

EXTERN int asn1PE_RegionList (OSCTXT* pctxt, ASN1T_RegionList* pvalue);

EXTERN int asn1PD_RegionList (OSCTXT* pctxt, ASN1T_RegionList* pvalue);

EXTERN int XmlEnc_RegionList (OSCTXT* pctxt, ASN1T_RegionList* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RegionList (OSCTXT* pctxt, ASN1T_RegionList* pvalue);

EXTERN int asn1JsonEnc_RegionList (OSCTXT *pctxt, ASN1T_RegionList *pvalue);

EXTERN int asn1JsonDec_RegionList (OSCTXT *pctxt, ASN1T_RegionList *pvalue);

EXTERN int asn1PrtToStrm_RegionList (OSCTXT *pctxt, 
   const char* name, const ASN1T_RegionList* pvalue);

EXTERN int asn1Init_RegionList (ASN1T_RegionList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RegionList (OSCTXT *pctxt, ASN1T_RegionList* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionPointSet                                            */
/*                                                            */
/**************************************************************/
/*
RegionPointSet ::= SEQUENCE {
   anchor [0] Position3D OPTIONAL,
   scale [1] Zoom OPTIONAL,
   nodeList [2] RegionList,
   ...
}
*/
struct EXTERN ASN1T_RegionPointSet {
   struct {
      unsigned anchorPresent : 1;
      unsigned scalePresent : 1;
   } m;
   ASN1T_Position3D anchor;
   ASN1T_Zoom scale;
   ASN1T_RegionList nodeList;
   ASN1TSeqExt extElem1;
   ASN1T_RegionPointSet ();
} ;

EXTERN int asn1PE_RegionPointSet (OSCTXT* pctxt, ASN1T_RegionPointSet* pvalue);

EXTERN int asn1PD_RegionPointSet (OSCTXT* pctxt, ASN1T_RegionPointSet* pvalue);

EXTERN int XmlEnc_RegionPointSet (OSCTXT* pctxt, ASN1T_RegionPointSet* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RegionPointSet (OSCTXT* pctxt, ASN1T_RegionPointSet* pvalue)
   ;

EXTERN int asn1JsonEnc_RegionPointSet (OSCTXT *pctxt, ASN1T_RegionPointSet *pvalue);

EXTERN int asn1JsonDec_RegionPointSet (OSCTXT *pctxt, ASN1T_RegionPointSet *pvalue);

EXTERN int asn1PrtToStrm_RegionPointSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_RegionPointSet* pvalue);

EXTERN ASN1T_RegionPointSet* new_ASN1T_RegionPointSet (ASN1CType& ccobj);

EXTERN int asn1Init_RegionPointSet (ASN1T_RegionPointSet* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RegionPointSet (OSCTXT *pctxt, ASN1T_RegionPointSet* pvalue);

/**************************************************************/
/*                                                            */
/*  ValidRegion_area                                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ValidRegion'
*/
/* Choice tag constants */

#define T_ValidRegion_area_shapePointSet 1
#define T_ValidRegion_area_circle       2
#define T_ValidRegion_area_regionPointSet 3

struct EXTERN ASN1T_ValidRegion_area {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ShapePointSet *shapePointSet;
      /* t = 2 */
      ASN1T_Circle *circle;
      /* t = 3 */
      ASN1T_RegionPointSet *regionPointSet;
   } u;
   ASN1T_ValidRegion_area () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_ValidRegion_area (OSCTXT* pctxt, ASN1T_ValidRegion_area* pvalue);

EXTERN int asn1PD_ValidRegion_area (OSCTXT* pctxt, ASN1T_ValidRegion_area* pvalue);

EXTERN int XmlEnc_ValidRegion_area (OSCTXT* pctxt, 
   ASN1T_ValidRegion_area* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ValidRegion_area (OSCTXT* pctxt, 
   ASN1T_ValidRegion_area* pvalue);

EXTERN int asn1JsonEnc_ValidRegion_area (OSCTXT *pctxt, ASN1T_ValidRegion_area *pvalue);

EXTERN int asn1JsonDec_ValidRegion_area (OSCTXT *pctxt, ASN1T_ValidRegion_area *pvalue);

EXTERN int asn1PrtToStrm_ValidRegion_area (OSCTXT *pctxt, 
   const char* name, const ASN1T_ValidRegion_area* pvalue);

EXTERN ASN1T_ValidRegion_area* new_ASN1T_ValidRegion_area (ASN1CType& ccobj);

EXTERN int asn1Init_ValidRegion_area (ASN1T_ValidRegion_area* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ValidRegion_area (OSCTXT *pctxt, ASN1T_ValidRegion_area* pvalue);

/**************************************************************/
/*                                                            */
/*  ValidRegion                                               */
/*                                                            */
/**************************************************************/
/*
ValidRegion ::= SEQUENCE {
   direction [0] HeadingSlice,
                     -- field of view over which this applies,
   extent [1] Extent OPTIONAL,
                     -- the spatial distance over which this
                     -- message applies and should be presented 
                     -- to the driver
   area [2] EXPLICIT CHOICE {
      shapePointSet [0] ShapePointSet,
                     -- A short road segment
      circle [1] Circle,
                     -- A point and radius
      regionPointSet [2] RegionPointSet
   }
}
*/
struct EXTERN ASN1T_ValidRegion {
   struct {
      unsigned extentPresent : 1;
   } m;
   ASN1T_HeadingSlice direction;
   ASN1T_Extent extent;
   ASN1T_ValidRegion_area area;
   ASN1T_ValidRegion ();
} ;

EXTERN int asn1PE_ValidRegion (OSCTXT* pctxt, ASN1T_ValidRegion* pvalue);

EXTERN int asn1PD_ValidRegion (OSCTXT* pctxt, ASN1T_ValidRegion* pvalue);

EXTERN int XmlEnc_ValidRegion (OSCTXT* pctxt, ASN1T_ValidRegion* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ValidRegion (OSCTXT* pctxt, ASN1T_ValidRegion* pvalue);

EXTERN int asn1JsonEnc_ValidRegion (OSCTXT *pctxt, ASN1T_ValidRegion *pvalue);

EXTERN int asn1JsonDec_ValidRegion (OSCTXT *pctxt, ASN1T_ValidRegion *pvalue);

EXTERN int asn1PrtToStrm_ValidRegion (OSCTXT *pctxt, 
   const char* name, const ASN1T_ValidRegion* pvalue);

EXTERN ASN1T_ValidRegion* new_ASN1T_ValidRegion (ASN1CType& ccobj);

EXTERN int asn1Init_ValidRegion (ASN1T_ValidRegion* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ValidRegion (OSCTXT *pctxt, ASN1T_ValidRegion* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath_description                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeographicalPath'
*/
/* Choice tag constants */

#define T_GeographicalPath_description_path 1
#define T_GeographicalPath_description_geometry 2
#define T_GeographicalPath_description_oldRegion 3
#define T_GeographicalPath_description_extElem1 4

struct EXTERN ASN1T_GeographicalPath_description {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_OffsetSystem *path;
      /* t = 2 */
      ASN1T_GeometricProjection *geometry;
      /* t = 3 */
      ASN1T_ValidRegion *oldRegion;
      /* t = 4 */
      ASN1TOpenType *extElem1;
   } u;
   ASN1T_GeographicalPath_description () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_GeographicalPath_description (OSCTXT* pctxt, ASN1T_GeographicalPath_description* pvalue);

EXTERN int asn1PD_GeographicalPath_description (OSCTXT* pctxt, ASN1T_GeographicalPath_description* pvalue);

EXTERN int XmlEnc_GeographicalPath_description (OSCTXT* pctxt, 
   ASN1T_GeographicalPath_description* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeographicalPath_description (OSCTXT* pctxt, 
   ASN1T_GeographicalPath_description* pvalue);

EXTERN int asn1JsonEnc_GeographicalPath_description (OSCTXT *pctxt, ASN1T_GeographicalPath_description *pvalue);

EXTERN int asn1JsonDec_GeographicalPath_description (OSCTXT *pctxt, ASN1T_GeographicalPath_description *pvalue);

EXTERN int asn1PrtToStrm_GeographicalPath_description (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeographicalPath_description* pvalue);

EXTERN ASN1T_GeographicalPath_description* 
   new_ASN1T_GeographicalPath_description (ASN1CType& ccobj);

EXTERN int asn1Init_GeographicalPath_description (
   ASN1T_GeographicalPath_description* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeographicalPath_description (OSCTXT *pctxt, 
   ASN1T_GeographicalPath_description* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath_regional_element                         */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeographicalPath'
*/
struct EXTERN ASN1T_GeographicalPath_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_GeographicalPath_regional_element (OSCTXT* pctxt, ASN1T_GeographicalPath_regional_element* pvalue);

EXTERN int asn1PD_GeographicalPath_regional_element (OSCTXT* pctxt, ASN1T_GeographicalPath_regional_element* pvalue);

EXTERN int XmlEnc_GeographicalPath_regional_element (OSCTXT* pctxt, 
   ASN1T_GeographicalPath_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeographicalPath_regional_element (OSCTXT* pctxt, 
   ASN1T_GeographicalPath_regional_element* pvalue);

EXTERN int asn1JsonEnc_GeographicalPath_regional_element (OSCTXT *pctxt, ASN1T_GeographicalPath_regional_element *pvalue);

EXTERN int asn1JsonDec_GeographicalPath_regional_element (OSCTXT *pctxt, ASN1T_GeographicalPath_regional_element *pvalue);

EXTERN int asn1PrtToStrm_GeographicalPath_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeographicalPath_regional_element* pvalue);

EXTERN ASN1T_GeographicalPath_regional_element* 
   new_ASN1T_GeographicalPath_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_GeographicalPath_regional_element (
   ASN1T_GeographicalPath_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeographicalPath_regional_element (OSCTXT *pctxt, 
   ASN1T_GeographicalPath_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath_regional                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeographicalPath'
*/
/* List of ASN1T_GeographicalPath_regional_element */
typedef ASN1TSeqOfList ASN1T_GeographicalPath_regional;

class EXTERN ASN1C_GeographicalPath_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_GeographicalPath_regional& msgData;
public:
   /**
    * Control class: ASN1C_GeographicalPath_regional
    * Data class:    ASN1T_GeographicalPath_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_GeographicalPath_regional (ASN1T_GeographicalPath_regional& data);

   /**
    * Control class: ASN1C_GeographicalPath_regional<br/>
    * Data class: ASN1T_GeographicalPath_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_GeographicalPath_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_GeographicalPath_regional& data);

   /**
    * Control class: ASN1C_GeographicalPath_regional<br/>
    * Data class: ASN1T_GeographicalPath_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_GeographicalPath_regional (ASN1CType& ccobj
      , ASN1T_GeographicalPath_regional& data);

   virtual ~ASN1C_GeographicalPath_regional () {}

   /**
    * Data class: ASN1T_GeographicalPath_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GeographicalPath_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GeographicalPath_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GeographicalPath_regional_element* NewElement ();

   /**
    * Data class: ASN1T_GeographicalPath_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GeographicalPath_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_GeographicalPath_regional_element* GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_GeographicalPath_regional* pmatches);

private:
   ASN1C_GeographicalPath_regional& operator= (const ASN1C_GeographicalPath_regional&) {return *this;}
} ;

EXTERN int asn1PE_GeographicalPath_regional (OSCTXT* pctxt, ASN1T_GeographicalPath_regional* pvalue);

EXTERN int asn1PD_GeographicalPath_regional (OSCTXT* pctxt, ASN1T_GeographicalPath_regional* pvalue);

EXTERN int XmlEnc_GeographicalPath_regional (OSCTXT* pctxt, 
   ASN1T_GeographicalPath_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeographicalPath_regional (OSCTXT* pctxt, 
   ASN1T_GeographicalPath_regional* pvalue);

EXTERN int asn1JsonEnc_GeographicalPath_regional (OSCTXT *pctxt, ASN1T_GeographicalPath_regional *pvalue);

EXTERN int asn1JsonDec_GeographicalPath_regional (OSCTXT *pctxt, ASN1T_GeographicalPath_regional *pvalue);

EXTERN int asn1PrtToStrm_GeographicalPath_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeographicalPath_regional* pvalue);

EXTERN int asn1Init_GeographicalPath_regional (
   ASN1T_GeographicalPath_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeographicalPath_regional (OSCTXT *pctxt, 
   ASN1T_GeographicalPath_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath                                          */
/*                                                            */
/**************************************************************/
/*
GeographicalPath ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
   id [1] RoadSegmentReferenceID OPTIONAL,
   anchor [2] Position3D OPTIONAL,
   laneWidth [3] LaneWidth OPTIONAL,
   directionality [4] DirectionOfUse OPTIONAL,
   closedPath [5] BOOLEAN OPTIONAL,
                    -- when true, last point closes to first
   direction [6] HeadingSlice OPTIONAL,
                    -- field of view over which this applies
   description [7] EXPLICIT CHOICE {
      path [0] OffsetSystem,
                   -- The XYZ and LLH system of paths
      geometry [1] GeometricProjection,
                   -- A projected circle from a point
      oldRegion [2] ValidRegion,
      ...
   } OPTIONAL,
   regional [8] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-GeographicalPath}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-GeographicalPath}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_GeographicalPath {
   struct {
      unsigned namePresent : 1;
      unsigned idPresent : 1;
      unsigned anchorPresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned directionalityPresent : 1;
      unsigned closedPathPresent : 1;
      unsigned directionPresent : 1;
      unsigned descriptionPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_DescriptiveName name;
   ASN1T_RoadSegmentReferenceID id;
   ASN1T_Position3D anchor;
   ASN1T_LaneWidth laneWidth;
   ASN1T_DirectionOfUse directionality;
   OSBOOL closedPath;
   ASN1T_HeadingSlice direction;
   ASN1T_GeographicalPath_description description;
   ASN1T_GeographicalPath_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_GeographicalPath ();
} ;

EXTERN int asn1PE_GeographicalPath (OSCTXT* pctxt, ASN1T_GeographicalPath* pvalue);

EXTERN int asn1PD_GeographicalPath (OSCTXT* pctxt, ASN1T_GeographicalPath* pvalue);

EXTERN int XmlEnc_GeographicalPath (OSCTXT* pctxt, 
   ASN1T_GeographicalPath* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GeographicalPath (OSCTXT* pctxt, 
   ASN1T_GeographicalPath* pvalue);

EXTERN int asn1JsonEnc_GeographicalPath (OSCTXT *pctxt, ASN1T_GeographicalPath *pvalue);

EXTERN int asn1JsonDec_GeographicalPath (OSCTXT *pctxt, ASN1T_GeographicalPath *pvalue);

EXTERN int asn1PrtToStrm_GeographicalPath (OSCTXT *pctxt, 
   const char* name, const ASN1T_GeographicalPath* pvalue);

EXTERN ASN1T_GeographicalPath* new_ASN1T_GeographicalPath (ASN1CType& ccobj);

EXTERN int asn1Init_GeographicalPath (ASN1T_GeographicalPath* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GeographicalPath (OSCTXT *pctxt, ASN1T_GeographicalPath* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame_regions                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerDataFrame'
*/
/* List of ASN1T_GeographicalPath */
typedef ASN1TSeqOfList ASN1T_TravelerDataFrame_regions;

class EXTERN ASN1C_TravelerDataFrame_regions :
public ASN1CSeqOfList
{
protected:
   ASN1T_TravelerDataFrame_regions& msgData;
public:
   /**
    * Control class: ASN1C_TravelerDataFrame_regions
    * Data class:    ASN1T_TravelerDataFrame_regions
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TravelerDataFrame_regions (ASN1T_TravelerDataFrame_regions& data);

   /**
    * Control class: ASN1C_TravelerDataFrame_regions<br/>
    * Data class: ASN1T_TravelerDataFrame_regions<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TravelerDataFrame_regions (OSRTMessageBufferIF& msgBuf
      , ASN1T_TravelerDataFrame_regions& data);

   /**
    * Control class: ASN1C_TravelerDataFrame_regions<br/>
    * Data class: ASN1T_TravelerDataFrame_regions<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_TravelerDataFrame_regions (ASN1CType& ccobj
      , ASN1T_TravelerDataFrame_regions& data);

   virtual ~ASN1C_TravelerDataFrame_regions () {}

   /**
    * Data class: ASN1T_GeographicalPath<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GeographicalPath* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GeographicalPath.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GeographicalPath* NewElement ();

   /**
    * Data class: ASN1T_GeographicalPath.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GeographicalPath* AppendNewElement ();

private:
   ASN1C_TravelerDataFrame_regions& operator= (const ASN1C_TravelerDataFrame_regions&) {return *this;}
} ;

EXTERN int asn1PE_TravelerDataFrame_regions (OSCTXT* pctxt, ASN1T_TravelerDataFrame_regions* pvalue);

EXTERN int asn1PD_TravelerDataFrame_regions (OSCTXT* pctxt, ASN1T_TravelerDataFrame_regions* pvalue);

EXTERN int XmlEnc_TravelerDataFrame_regions (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame_regions* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerDataFrame_regions (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame_regions* pvalue);

EXTERN int asn1JsonEnc_TravelerDataFrame_regions (OSCTXT *pctxt, ASN1T_TravelerDataFrame_regions *pvalue);

EXTERN int asn1JsonDec_TravelerDataFrame_regions (OSCTXT *pctxt, ASN1T_TravelerDataFrame_regions *pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrame_regions (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerDataFrame_regions* pvalue);

EXTERN int asn1Init_TravelerDataFrame_regions (
   ASN1T_TravelerDataFrame_regions* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerDataFrame_regions (OSCTXT *pctxt, 
   ASN1T_TravelerDataFrame_regions* pvalue);

/**************************************************************/
/*                                                            */
/*  WorkZone_element_item                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'WorkZone'
*/
/* Choice tag constants */

#define T_WorkZone_element_item_itis    1
#define T_WorkZone_element_item_text    2

struct EXTERN ASN1T_WorkZone_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ITIScodes itis;
      /* t = 2 */
      ASN1T_ITIStextPhrase text;
   } u;
   ASN1T_WorkZone_element_item () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_WorkZone_element_item (OSCTXT* pctxt, ASN1T_WorkZone_element_item* pvalue);

EXTERN int asn1PD_WorkZone_element_item (OSCTXT* pctxt, ASN1T_WorkZone_element_item* pvalue);

EXTERN int XmlEnc_WorkZone_element_item (OSCTXT* pctxt, 
   ASN1T_WorkZone_element_item* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WorkZone_element_item (OSCTXT* pctxt, 
   ASN1T_WorkZone_element_item* pvalue);

EXTERN int asn1JsonEnc_WorkZone_element_item (OSCTXT *pctxt, ASN1T_WorkZone_element_item *pvalue);

EXTERN int asn1JsonDec_WorkZone_element_item (OSCTXT *pctxt, ASN1T_WorkZone_element_item *pvalue);

EXTERN int asn1PrtToStrm_WorkZone_element_item (OSCTXT *pctxt, 
   const char* name, const ASN1T_WorkZone_element_item* pvalue);

EXTERN ASN1T_WorkZone_element_item* 
   new_ASN1T_WorkZone_element_item (ASN1CType& ccobj);

EXTERN int asn1Init_WorkZone_element_item (ASN1T_WorkZone_element_item* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_WorkZone_element_item (OSCTXT *pctxt, 
   ASN1T_WorkZone_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  WorkZone_element                                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'WorkZone'
*/
struct EXTERN ASN1T_WorkZone_element {
   ASN1T_WorkZone_element_item item;
} ;

EXTERN int asn1PE_WorkZone_element (OSCTXT* pctxt, ASN1T_WorkZone_element* pvalue);

EXTERN int asn1PD_WorkZone_element (OSCTXT* pctxt, ASN1T_WorkZone_element* pvalue);

EXTERN int XmlEnc_WorkZone_element (OSCTXT* pctxt, 
   ASN1T_WorkZone_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WorkZone_element (OSCTXT* pctxt, 
   ASN1T_WorkZone_element* pvalue);

EXTERN int asn1JsonEnc_WorkZone_element (OSCTXT *pctxt, ASN1T_WorkZone_element *pvalue);

EXTERN int asn1JsonDec_WorkZone_element (OSCTXT *pctxt, ASN1T_WorkZone_element *pvalue);

EXTERN int asn1PrtToStrm_WorkZone_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_WorkZone_element* pvalue);

EXTERN ASN1T_WorkZone_element* new_ASN1T_WorkZone_element (ASN1CType& ccobj);

EXTERN int asn1Init_WorkZone_element (ASN1T_WorkZone_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_WorkZone_element (OSCTXT *pctxt, ASN1T_WorkZone_element* pvalue);

/**************************************************************/
/*                                                            */
/*  WorkZone                                                  */
/*                                                            */
/**************************************************************/
/*
WorkZone ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] EXPLICIT CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of ASN1T_WorkZone_element */
typedef ASN1TSeqOfList ASN1T_WorkZone;

class EXTERN ASN1C_WorkZone :
public ASN1CSeqOfList
{
protected:
   ASN1T_WorkZone& msgData;
public:
   /**
    * Control class: ASN1C_WorkZone
    * Data class:    ASN1T_WorkZone
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_WorkZone (ASN1T_WorkZone& data);

   /**
    * Control class: ASN1C_WorkZone<br/>
    * Data class: ASN1T_WorkZone<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_WorkZone (OSRTMessageBufferIF& msgBuf, ASN1T_WorkZone& data);

   /**
    * Control class: ASN1C_WorkZone<br/>
    * Data class: ASN1T_WorkZone<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_WorkZone (ASN1CType& ccobj, ASN1T_WorkZone& data);

   virtual ~ASN1C_WorkZone () {}

   /**
    * Data class: ASN1T_WorkZone_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_WorkZone_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_WorkZone_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_WorkZone_element* NewElement ();

   /**
    * Data class: ASN1T_WorkZone_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_WorkZone_element* AppendNewElement ();

private:
   ASN1C_WorkZone& operator= (const ASN1C_WorkZone&) {return *this;}
} ;

EXTERN int asn1PE_WorkZone (OSCTXT* pctxt, ASN1T_WorkZone* pvalue);

EXTERN int asn1PD_WorkZone (OSCTXT* pctxt, ASN1T_WorkZone* pvalue);

EXTERN int XmlEnc_WorkZone (OSCTXT* pctxt, ASN1T_WorkZone* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WorkZone (OSCTXT* pctxt, ASN1T_WorkZone* pvalue);

EXTERN int asn1JsonEnc_WorkZone (OSCTXT *pctxt, ASN1T_WorkZone *pvalue);

EXTERN int asn1JsonDec_WorkZone (OSCTXT *pctxt, ASN1T_WorkZone *pvalue);

EXTERN int asn1PrtToStrm_WorkZone (OSCTXT *pctxt, 
   const char* name, const ASN1T_WorkZone* pvalue);

EXTERN int asn1Init_WorkZone (ASN1T_WorkZone* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_WorkZone (OSCTXT *pctxt, ASN1T_WorkZone* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericSignage_element_item                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericSignage'
*/
/* Choice tag constants */

#define T_GenericSignage_element_item_itis 1
#define T_GenericSignage_element_item_text 2

struct EXTERN ASN1T_GenericSignage_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ITIScodes itis;
      /* t = 2 */
      ASN1T_ITIStextPhrase text;
   } u;
   ASN1T_GenericSignage_element_item () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_GenericSignage_element_item (OSCTXT* pctxt, ASN1T_GenericSignage_element_item* pvalue);

EXTERN int asn1PD_GenericSignage_element_item (OSCTXT* pctxt, ASN1T_GenericSignage_element_item* pvalue);

EXTERN int XmlEnc_GenericSignage_element_item (OSCTXT* pctxt, 
   ASN1T_GenericSignage_element_item* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GenericSignage_element_item (OSCTXT* pctxt, 
   ASN1T_GenericSignage_element_item* pvalue);

EXTERN int asn1JsonEnc_GenericSignage_element_item (OSCTXT *pctxt, ASN1T_GenericSignage_element_item *pvalue);

EXTERN int asn1JsonDec_GenericSignage_element_item (OSCTXT *pctxt, ASN1T_GenericSignage_element_item *pvalue);

EXTERN int asn1PrtToStrm_GenericSignage_element_item (OSCTXT *pctxt, 
   const char* name, const ASN1T_GenericSignage_element_item* pvalue);

EXTERN ASN1T_GenericSignage_element_item* 
   new_ASN1T_GenericSignage_element_item (ASN1CType& ccobj);

EXTERN int asn1Init_GenericSignage_element_item (
   ASN1T_GenericSignage_element_item* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GenericSignage_element_item (OSCTXT *pctxt, 
   ASN1T_GenericSignage_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericSignage_element                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericSignage'
*/
struct EXTERN ASN1T_GenericSignage_element {
   ASN1T_GenericSignage_element_item item;
} ;

EXTERN int asn1PE_GenericSignage_element (OSCTXT* pctxt, ASN1T_GenericSignage_element* pvalue);

EXTERN int asn1PD_GenericSignage_element (OSCTXT* pctxt, ASN1T_GenericSignage_element* pvalue);

EXTERN int XmlEnc_GenericSignage_element (OSCTXT* pctxt, 
   ASN1T_GenericSignage_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GenericSignage_element (OSCTXT* pctxt, 
   ASN1T_GenericSignage_element* pvalue);

EXTERN int asn1JsonEnc_GenericSignage_element (OSCTXT *pctxt, ASN1T_GenericSignage_element *pvalue);

EXTERN int asn1JsonDec_GenericSignage_element (OSCTXT *pctxt, ASN1T_GenericSignage_element *pvalue);

EXTERN int asn1PrtToStrm_GenericSignage_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_GenericSignage_element* pvalue);

EXTERN ASN1T_GenericSignage_element* 
   new_ASN1T_GenericSignage_element (ASN1CType& ccobj);

EXTERN int asn1Init_GenericSignage_element (ASN1T_GenericSignage_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GenericSignage_element (OSCTXT *pctxt, 
   ASN1T_GenericSignage_element* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericSignage                                            */
/*                                                            */
/**************************************************************/
/*
GenericSignage ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] EXPLICIT CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of ASN1T_GenericSignage_element */
typedef ASN1TSeqOfList ASN1T_GenericSignage;

class EXTERN ASN1C_GenericSignage :
public ASN1CSeqOfList
{
protected:
   ASN1T_GenericSignage& msgData;
public:
   /**
    * Control class: ASN1C_GenericSignage
    * Data class:    ASN1T_GenericSignage
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_GenericSignage (ASN1T_GenericSignage& data);

   /**
    * Control class: ASN1C_GenericSignage<br/>
    * Data class: ASN1T_GenericSignage<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_GenericSignage (OSRTMessageBufferIF& msgBuf
      , ASN1T_GenericSignage& data);

   /**
    * Control class: ASN1C_GenericSignage<br/>
    * Data class: ASN1T_GenericSignage<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_GenericSignage (ASN1CType& ccobj, ASN1T_GenericSignage& data);

   virtual ~ASN1C_GenericSignage () {}

   /**
    * Data class: ASN1T_GenericSignage_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_GenericSignage_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_GenericSignage_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_GenericSignage_element* NewElement ();

   /**
    * Data class: ASN1T_GenericSignage_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_GenericSignage_element* AppendNewElement ();

private:
   ASN1C_GenericSignage& operator= (const ASN1C_GenericSignage&) {return *this;}
} ;

EXTERN int asn1PE_GenericSignage (OSCTXT* pctxt, ASN1T_GenericSignage* pvalue);

EXTERN int asn1PD_GenericSignage (OSCTXT* pctxt, ASN1T_GenericSignage* pvalue);

EXTERN int XmlEnc_GenericSignage (OSCTXT* pctxt, ASN1T_GenericSignage* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GenericSignage (OSCTXT* pctxt, ASN1T_GenericSignage* pvalue)
   ;

EXTERN int asn1JsonEnc_GenericSignage (OSCTXT *pctxt, ASN1T_GenericSignage *pvalue);

EXTERN int asn1JsonDec_GenericSignage (OSCTXT *pctxt, ASN1T_GenericSignage *pvalue);

EXTERN int asn1PrtToStrm_GenericSignage (OSCTXT *pctxt, 
   const char* name, const ASN1T_GenericSignage* pvalue);

EXTERN int asn1Init_GenericSignage (ASN1T_GenericSignage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GenericSignage (OSCTXT *pctxt, ASN1T_GenericSignage* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimit_element_item                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SpeedLimit'
*/
/* Choice tag constants */

#define T_SpeedLimit_element_item_itis  1
#define T_SpeedLimit_element_item_text  2

struct EXTERN ASN1T_SpeedLimit_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ITIScodes itis;
      /* t = 2 */
      ASN1T_ITIStextPhrase text;
   } u;
   ASN1T_SpeedLimit_element_item () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_SpeedLimit_element_item (OSCTXT* pctxt, ASN1T_SpeedLimit_element_item* pvalue);

EXTERN int asn1PD_SpeedLimit_element_item (OSCTXT* pctxt, ASN1T_SpeedLimit_element_item* pvalue);

EXTERN int XmlEnc_SpeedLimit_element_item (OSCTXT* pctxt, 
   ASN1T_SpeedLimit_element_item* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedLimit_element_item (OSCTXT* pctxt, 
   ASN1T_SpeedLimit_element_item* pvalue);

EXTERN int asn1JsonEnc_SpeedLimit_element_item (OSCTXT *pctxt, ASN1T_SpeedLimit_element_item *pvalue);

EXTERN int asn1JsonDec_SpeedLimit_element_item (OSCTXT *pctxt, ASN1T_SpeedLimit_element_item *pvalue);

EXTERN int asn1PrtToStrm_SpeedLimit_element_item (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedLimit_element_item* pvalue);

EXTERN ASN1T_SpeedLimit_element_item* 
   new_ASN1T_SpeedLimit_element_item (ASN1CType& ccobj);

EXTERN int asn1Init_SpeedLimit_element_item (ASN1T_SpeedLimit_element_item* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SpeedLimit_element_item (OSCTXT *pctxt, 
   ASN1T_SpeedLimit_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimit_element                                        */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SpeedLimit'
*/
struct EXTERN ASN1T_SpeedLimit_element {
   ASN1T_SpeedLimit_element_item item;
} ;

EXTERN int asn1PE_SpeedLimit_element (OSCTXT* pctxt, ASN1T_SpeedLimit_element* pvalue);

EXTERN int asn1PD_SpeedLimit_element (OSCTXT* pctxt, ASN1T_SpeedLimit_element* pvalue);

EXTERN int XmlEnc_SpeedLimit_element (OSCTXT* pctxt, 
   ASN1T_SpeedLimit_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedLimit_element (OSCTXT* pctxt, 
   ASN1T_SpeedLimit_element* pvalue);

EXTERN int asn1JsonEnc_SpeedLimit_element (OSCTXT *pctxt, ASN1T_SpeedLimit_element *pvalue);

EXTERN int asn1JsonDec_SpeedLimit_element (OSCTXT *pctxt, ASN1T_SpeedLimit_element *pvalue);

EXTERN int asn1PrtToStrm_SpeedLimit_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedLimit_element* pvalue);

EXTERN ASN1T_SpeedLimit_element* 
   new_ASN1T_SpeedLimit_element (ASN1CType& ccobj);

EXTERN int asn1Init_SpeedLimit_element (ASN1T_SpeedLimit_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SpeedLimit_element (OSCTXT *pctxt, 
   ASN1T_SpeedLimit_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimit                                                */
/*                                                            */
/**************************************************************/
/*
SpeedLimit ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] EXPLICIT CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of ASN1T_SpeedLimit_element */
typedef ASN1TSeqOfList ASN1T_SpeedLimit;

class EXTERN ASN1C_SpeedLimit :
public ASN1CSeqOfList
{
protected:
   ASN1T_SpeedLimit& msgData;
public:
   /**
    * Control class: ASN1C_SpeedLimit
    * Data class:    ASN1T_SpeedLimit
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SpeedLimit (ASN1T_SpeedLimit& data);

   /**
    * Control class: ASN1C_SpeedLimit<br/>
    * Data class: ASN1T_SpeedLimit<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SpeedLimit (OSRTMessageBufferIF& msgBuf, ASN1T_SpeedLimit& data);

   /**
    * Control class: ASN1C_SpeedLimit<br/>
    * Data class: ASN1T_SpeedLimit<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SpeedLimit (ASN1CType& ccobj, ASN1T_SpeedLimit& data);

   virtual ~ASN1C_SpeedLimit () {}

   /**
    * Data class: ASN1T_SpeedLimit_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SpeedLimit_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SpeedLimit_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SpeedLimit_element* NewElement ();

   /**
    * Data class: ASN1T_SpeedLimit_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SpeedLimit_element* AppendNewElement ();

private:
   ASN1C_SpeedLimit& operator= (const ASN1C_SpeedLimit&) {return *this;}
} ;

EXTERN int asn1PE_SpeedLimit (OSCTXT* pctxt, ASN1T_SpeedLimit* pvalue);

EXTERN int asn1PD_SpeedLimit (OSCTXT* pctxt, ASN1T_SpeedLimit* pvalue);

EXTERN int XmlEnc_SpeedLimit (OSCTXT* pctxt, ASN1T_SpeedLimit* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SpeedLimit (OSCTXT* pctxt, ASN1T_SpeedLimit* pvalue);

EXTERN int asn1JsonEnc_SpeedLimit (OSCTXT *pctxt, ASN1T_SpeedLimit *pvalue);

EXTERN int asn1JsonDec_SpeedLimit (OSCTXT *pctxt, ASN1T_SpeedLimit *pvalue);

EXTERN int asn1PrtToStrm_SpeedLimit (OSCTXT *pctxt, 
   const char* name, const ASN1T_SpeedLimit* pvalue);

EXTERN int asn1Init_SpeedLimit (ASN1T_SpeedLimit* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SpeedLimit (OSCTXT *pctxt, ASN1T_SpeedLimit* pvalue);

/**************************************************************/
/*                                                            */
/*  ExitService_element_item                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ExitService'
*/
/* Choice tag constants */

#define T_ExitService_element_item_itis 1
#define T_ExitService_element_item_text 2

struct EXTERN ASN1T_ExitService_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ITIScodes itis;
      /* t = 2 */
      ASN1T_ITIStextPhrase text;
   } u;
   ASN1T_ExitService_element_item () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_ExitService_element_item (OSCTXT* pctxt, ASN1T_ExitService_element_item* pvalue);

EXTERN int asn1PD_ExitService_element_item (OSCTXT* pctxt, ASN1T_ExitService_element_item* pvalue);

EXTERN int XmlEnc_ExitService_element_item (OSCTXT* pctxt, 
   ASN1T_ExitService_element_item* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ExitService_element_item (OSCTXT* pctxt, 
   ASN1T_ExitService_element_item* pvalue);

EXTERN int asn1JsonEnc_ExitService_element_item (OSCTXT *pctxt, ASN1T_ExitService_element_item *pvalue);

EXTERN int asn1JsonDec_ExitService_element_item (OSCTXT *pctxt, ASN1T_ExitService_element_item *pvalue);

EXTERN int asn1PrtToStrm_ExitService_element_item (OSCTXT *pctxt, 
   const char* name, const ASN1T_ExitService_element_item* pvalue);

EXTERN ASN1T_ExitService_element_item* 
   new_ASN1T_ExitService_element_item (ASN1CType& ccobj);

EXTERN int asn1Init_ExitService_element_item (ASN1T_ExitService_element_item* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ExitService_element_item (OSCTXT *pctxt, 
   ASN1T_ExitService_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  ExitService_element                                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ExitService'
*/
struct EXTERN ASN1T_ExitService_element {
   ASN1T_ExitService_element_item item;
} ;

EXTERN int asn1PE_ExitService_element (OSCTXT* pctxt, ASN1T_ExitService_element* pvalue);

EXTERN int asn1PD_ExitService_element (OSCTXT* pctxt, ASN1T_ExitService_element* pvalue);

EXTERN int XmlEnc_ExitService_element (OSCTXT* pctxt, 
   ASN1T_ExitService_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ExitService_element (OSCTXT* pctxt, 
   ASN1T_ExitService_element* pvalue);

EXTERN int asn1JsonEnc_ExitService_element (OSCTXT *pctxt, ASN1T_ExitService_element *pvalue);

EXTERN int asn1JsonDec_ExitService_element (OSCTXT *pctxt, ASN1T_ExitService_element *pvalue);

EXTERN int asn1PrtToStrm_ExitService_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_ExitService_element* pvalue);

EXTERN ASN1T_ExitService_element* 
   new_ASN1T_ExitService_element (ASN1CType& ccobj);

EXTERN int asn1Init_ExitService_element (ASN1T_ExitService_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ExitService_element (OSCTXT *pctxt, 
   ASN1T_ExitService_element* pvalue);

/**************************************************************/
/*                                                            */
/*  ExitService                                               */
/*                                                            */
/**************************************************************/
/*
ExitService ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] EXPLICIT CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of ASN1T_ExitService_element */
typedef ASN1TSeqOfList ASN1T_ExitService;

class EXTERN ASN1C_ExitService :
public ASN1CSeqOfList
{
protected:
   ASN1T_ExitService& msgData;
public:
   /**
    * Control class: ASN1C_ExitService
    * Data class:    ASN1T_ExitService
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ExitService (ASN1T_ExitService& data);

   /**
    * Control class: ASN1C_ExitService<br/>
    * Data class: ASN1T_ExitService<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ExitService (OSRTMessageBufferIF& msgBuf, ASN1T_ExitService& data);

   /**
    * Control class: ASN1C_ExitService<br/>
    * Data class: ASN1T_ExitService<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_ExitService (ASN1CType& ccobj, ASN1T_ExitService& data);

   virtual ~ASN1C_ExitService () {}

   /**
    * Data class: ASN1T_ExitService_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_ExitService_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_ExitService_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_ExitService_element* NewElement ();

   /**
    * Data class: ASN1T_ExitService_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_ExitService_element* AppendNewElement ();

private:
   ASN1C_ExitService& operator= (const ASN1C_ExitService&) {return *this;}
} ;

EXTERN int asn1PE_ExitService (OSCTXT* pctxt, ASN1T_ExitService* pvalue);

EXTERN int asn1PD_ExitService (OSCTXT* pctxt, ASN1T_ExitService* pvalue);

EXTERN int XmlEnc_ExitService (OSCTXT* pctxt, ASN1T_ExitService* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ExitService (OSCTXT* pctxt, ASN1T_ExitService* pvalue);

EXTERN int asn1JsonEnc_ExitService (OSCTXT *pctxt, ASN1T_ExitService *pvalue);

EXTERN int asn1JsonDec_ExitService (OSCTXT *pctxt, ASN1T_ExitService *pvalue);

EXTERN int asn1PrtToStrm_ExitService (OSCTXT *pctxt, 
   const char* name, const ASN1T_ExitService* pvalue);

EXTERN int asn1Init_ExitService (ASN1T_ExitService* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ExitService (OSCTXT *pctxt, ASN1T_ExitService* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame_content                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerDataFrame'
*/
/* Choice tag constants */

#define T_TravelerDataFrame_content_advisory 1
#define T_TravelerDataFrame_content_workZone 2
#define T_TravelerDataFrame_content_genericSign 3
#define T_TravelerDataFrame_content_speedLimit 4
#define T_TravelerDataFrame_content_exitService 5

struct EXTERN ASN1T_TravelerDataFrame_content {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_ITIScodesAndText *advisory;
      /* t = 2 */
      ASN1T_WorkZone *workZone;
      /* t = 3 */
      ASN1T_GenericSignage *genericSign;
      /* t = 4 */
      ASN1T_SpeedLimit *speedLimit;
      /* t = 5 */
      ASN1T_ExitService *exitService;
   } u;
   ASN1T_TravelerDataFrame_content () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_TravelerDataFrame_content (OSCTXT* pctxt, ASN1T_TravelerDataFrame_content* pvalue);

EXTERN int asn1PD_TravelerDataFrame_content (OSCTXT* pctxt, ASN1T_TravelerDataFrame_content* pvalue);

EXTERN int XmlEnc_TravelerDataFrame_content (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame_content* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerDataFrame_content (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame_content* pvalue);

EXTERN int asn1JsonEnc_TravelerDataFrame_content (OSCTXT *pctxt, ASN1T_TravelerDataFrame_content *pvalue);

EXTERN int asn1JsonDec_TravelerDataFrame_content (OSCTXT *pctxt, ASN1T_TravelerDataFrame_content *pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrame_content (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerDataFrame_content* pvalue);

EXTERN ASN1T_TravelerDataFrame_content* 
   new_ASN1T_TravelerDataFrame_content (ASN1CType& ccobj);

EXTERN int asn1Init_TravelerDataFrame_content (
   ASN1T_TravelerDataFrame_content* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerDataFrame_content (OSCTXT *pctxt, 
   ASN1T_TravelerDataFrame_content* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame                                         */
/*                                                            */
/**************************************************************/
/*
TravelerDataFrame ::= SEQUENCE {
   -- Part I, Frame header
   sspTimRights [0] SSPindex,
   frameType [1] TravelerInfoType, -- (enum, advisory or road sign)
   msgId [2] EXPLICIT CHOICE {
      furtherInfoID [0] FurtherInfoID, -- links to ATIS msg
      roadSignID [1] RoadSignID
   },
   startYear [3] DYear OPTIONAL, -- only if needed
   startTime [4] MinuteOfTheYear,
   duratonTime [5] MinutesDuration,
   priority [6] SignPrority,
   -- Part II, Applicable Regions of Use
   sspLocationRights [7] SSPindex,
   regions [8] SEQUENCE (SIZE (1..16)) OF GeographicalPath,
   -- Part III, Content
   sspMsgRights1 [9] SSPindex, -- allowed message types
   sspMsgRights2 [10] SSPindex, -- allowed message content
   content [11] EXPLICIT CHOICE {
      advisory [0] ITIScodesAndText,
                               -- typical ITIS warnings
      workZone [1] WorkZone,
                               -- work zone signs and directions
      genericSign [2] GenericSignage,
                               -- MUTCD signs and directions
      speedLimit [3] SpeedLimit,
                               -- speed limits and cautions
      exitService [4] ExitService
   },
   url [12] URL-Short OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TravelerDataFrame {
   struct {
      unsigned startYearPresent : 1;
      unsigned urlPresent : 1;
   } m;
   ASN1T_SSPindex sspTimRights;
   ASN1T_TravelerInfoType frameType;
   ASN1T_TravelerDataFrame_msgId msgId;
   ASN1T_DYear startYear;
   ASN1T_MinuteOfTheYear startTime;
   ASN1T_MinutesDuration duratonTime;
   ASN1T_SignPrority priority;
   ASN1T_SSPindex sspLocationRights;
   ASN1T_TravelerDataFrame_regions regions;
   ASN1T_SSPindex sspMsgRights1;
   ASN1T_SSPindex sspMsgRights2;
   ASN1T_TravelerDataFrame_content content;
   ASN1T_URL_Short url;
   ASN1TSeqExt extElem1;
   ASN1T_TravelerDataFrame ();
} ;

EXTERN int asn1PE_TravelerDataFrame (OSCTXT* pctxt, ASN1T_TravelerDataFrame* pvalue);

EXTERN int asn1PD_TravelerDataFrame (OSCTXT* pctxt, ASN1T_TravelerDataFrame* pvalue);

EXTERN int XmlEnc_TravelerDataFrame (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerDataFrame (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrame* pvalue);

EXTERN int asn1JsonEnc_TravelerDataFrame (OSCTXT *pctxt, ASN1T_TravelerDataFrame *pvalue);

EXTERN int asn1JsonDec_TravelerDataFrame (OSCTXT *pctxt, ASN1T_TravelerDataFrame *pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrame (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerDataFrame* pvalue);

EXTERN ASN1T_TravelerDataFrame* new_ASN1T_TravelerDataFrame (ASN1CType& ccobj)
   ;

EXTERN int asn1Init_TravelerDataFrame (ASN1T_TravelerDataFrame* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerDataFrame (OSCTXT *pctxt, 
   ASN1T_TravelerDataFrame* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrameList                                     */
/*                                                            */
/**************************************************************/
/*
TravelerDataFrameList ::= SEQUENCE (SIZE (1..8)) OF TravelerDataFrame
*/
/* List of ASN1T_TravelerDataFrame */
typedef ASN1TSeqOfList ASN1T_TravelerDataFrameList;

class EXTERN ASN1C_TravelerDataFrameList :
public ASN1CSeqOfList
{
protected:
   ASN1T_TravelerDataFrameList& msgData;
public:
   /**
    * Control class: ASN1C_TravelerDataFrameList
    * Data class:    ASN1T_TravelerDataFrameList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TravelerDataFrameList (ASN1T_TravelerDataFrameList& data);

   /**
    * Control class: ASN1C_TravelerDataFrameList<br/>
    * Data class: ASN1T_TravelerDataFrameList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TravelerDataFrameList (OSRTMessageBufferIF& msgBuf
      , ASN1T_TravelerDataFrameList& data);

   /**
    * Control class: ASN1C_TravelerDataFrameList<br/>
    * Data class: ASN1T_TravelerDataFrameList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_TravelerDataFrameList (ASN1CType& ccobj
      , ASN1T_TravelerDataFrameList& data);

   virtual ~ASN1C_TravelerDataFrameList () {}

   /**
    * Data class: ASN1T_TravelerDataFrame<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_TravelerDataFrame* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_TravelerDataFrame.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_TravelerDataFrame* NewElement ();

   /**
    * Data class: ASN1T_TravelerDataFrame.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_TravelerDataFrame* AppendNewElement ();

private:
   ASN1C_TravelerDataFrameList& operator= (const ASN1C_TravelerDataFrameList&) {return *this;}
} ;

EXTERN int asn1PE_TravelerDataFrameList (OSCTXT* pctxt, ASN1T_TravelerDataFrameList* pvalue);

EXTERN int asn1PD_TravelerDataFrameList (OSCTXT* pctxt, ASN1T_TravelerDataFrameList* pvalue);

EXTERN int XmlEnc_TravelerDataFrameList (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrameList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerDataFrameList (OSCTXT* pctxt, 
   ASN1T_TravelerDataFrameList* pvalue);

EXTERN int asn1JsonEnc_TravelerDataFrameList (OSCTXT *pctxt, ASN1T_TravelerDataFrameList *pvalue);

EXTERN int asn1JsonDec_TravelerDataFrameList (OSCTXT *pctxt, ASN1T_TravelerDataFrameList *pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrameList (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerDataFrameList* pvalue);

EXTERN int asn1Init_TravelerDataFrameList (ASN1T_TravelerDataFrameList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerDataFrameList (OSCTXT *pctxt, 
   ASN1T_TravelerDataFrameList* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInformation_regional_element                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerInformation'
*/
struct EXTERN ASN1T_TravelerInformation_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TravelerInformation_regional_element (OSCTXT* pctxt, ASN1T_TravelerInformation_regional_element* pvalue);

EXTERN int asn1PD_TravelerInformation_regional_element (OSCTXT* pctxt, ASN1T_TravelerInformation_regional_element* pvalue);

EXTERN int XmlEnc_TravelerInformation_regional_element (OSCTXT* pctxt, 
   ASN1T_TravelerInformation_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerInformation_regional_element (OSCTXT* pctxt, 
   ASN1T_TravelerInformation_regional_element* pvalue);

EXTERN int asn1JsonEnc_TravelerInformation_regional_element (OSCTXT *pctxt, ASN1T_TravelerInformation_regional_element *pvalue);

EXTERN int asn1JsonDec_TravelerInformation_regional_element (OSCTXT *pctxt, ASN1T_TravelerInformation_regional_element *pvalue);

EXTERN int asn1PrtToStrm_TravelerInformation_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerInformation_regional_element* pvalue);

EXTERN ASN1T_TravelerInformation_regional_element* 
   new_ASN1T_TravelerInformation_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_TravelerInformation_regional_element (
   ASN1T_TravelerInformation_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerInformation_regional_element (OSCTXT *pctxt, 
   ASN1T_TravelerInformation_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInformation_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerInformation'
*/
/* List of ASN1T_TravelerInformation_regional_element */
typedef ASN1TSeqOfList ASN1T_TravelerInformation_regional;

class EXTERN ASN1C_TravelerInformation_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_TravelerInformation_regional& msgData;
public:
   /**
    * Control class: ASN1C_TravelerInformation_regional
    * Data class:    ASN1T_TravelerInformation_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TravelerInformation_regional
       (ASN1T_TravelerInformation_regional& data);

   /**
    * Control class: ASN1C_TravelerInformation_regional<br/>
    * Data class: ASN1T_TravelerInformation_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TravelerInformation_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_TravelerInformation_regional& data);

   /**
    * Control class: ASN1C_TravelerInformation_regional<br/>
    * Data class: ASN1T_TravelerInformation_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_TravelerInformation_regional (ASN1CType& ccobj
      , ASN1T_TravelerInformation_regional& data);

   virtual ~ASN1C_TravelerInformation_regional () {}

   /**
    * Data class: ASN1T_TravelerInformation_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_TravelerInformation_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_TravelerInformation_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_TravelerInformation_regional_element* NewElement ();

   /**
    * Data class: ASN1T_TravelerInformation_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_TravelerInformation_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_TravelerInformation_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_TravelerInformation_regional* pmatches);

private:
   ASN1C_TravelerInformation_regional& operator= (const ASN1C_TravelerInformation_regional&) {return *this;}
} ;

EXTERN int asn1PE_TravelerInformation_regional (OSCTXT* pctxt, ASN1T_TravelerInformation_regional* pvalue);

EXTERN int asn1PD_TravelerInformation_regional (OSCTXT* pctxt, ASN1T_TravelerInformation_regional* pvalue);

EXTERN int XmlEnc_TravelerInformation_regional (OSCTXT* pctxt, 
   ASN1T_TravelerInformation_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerInformation_regional (OSCTXT* pctxt, 
   ASN1T_TravelerInformation_regional* pvalue);

EXTERN int asn1JsonEnc_TravelerInformation_regional (OSCTXT *pctxt, ASN1T_TravelerInformation_regional *pvalue);

EXTERN int asn1JsonDec_TravelerInformation_regional (OSCTXT *pctxt, ASN1T_TravelerInformation_regional *pvalue);

EXTERN int asn1PrtToStrm_TravelerInformation_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerInformation_regional* pvalue);

EXTERN int asn1Init_TravelerInformation_regional (
   ASN1T_TravelerInformation_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerInformation_regional (OSCTXT *pctxt, 
   ASN1T_TravelerInformation_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInformation                                       */
/*                                                            */
/**************************************************************/
/*
TravelerInformation ::= SEQUENCE {
   msgCnt [0] MsgCount,
   timeStamp [1] MinuteOfTheYear OPTIONAL,
   packetID [2] UniqueMSGID OPTIONAL,
   urlB [3] URL-Base OPTIONAL,
   -- A set of one or more self contained 
   -- traveler information messages (frames)
   dataFrames [4] TravelerDataFrameList,
   regional [5] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TravelerInformation}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TravelerInformation}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TravelerInformation {
   struct {
      unsigned timeStampPresent : 1;
      unsigned packetIDPresent : 1;
      unsigned urlBPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_MsgCount msgCnt;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_UniqueMSGID packetID;
   ASN1T_URL_Base urlB;
   ASN1T_TravelerDataFrameList dataFrames;
   ASN1T_TravelerInformation_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TravelerInformation ();
} ;

EXTERN int asn1PE_TravelerInformation (OSCTXT* pctxt, ASN1T_TravelerInformation* pvalue);

EXTERN int asn1PD_TravelerInformation (OSCTXT* pctxt, ASN1T_TravelerInformation* pvalue);

EXTERN int XmlEnc_TravelerInformation (OSCTXT* pctxt, 
   ASN1T_TravelerInformation* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TravelerInformation (OSCTXT* pctxt, 
   ASN1T_TravelerInformation* pvalue);

EXTERN int asn1JsonEnc_TravelerInformation (OSCTXT *pctxt, ASN1T_TravelerInformation *pvalue);

EXTERN int asn1JsonDec_TravelerInformation (OSCTXT *pctxt, ASN1T_TravelerInformation *pvalue);

EXTERN int asn1PrtToStrm_TravelerInformation (OSCTXT *pctxt, 
   const char* name, const ASN1T_TravelerInformation* pvalue);

EXTERN ASN1T_TravelerInformation* 
   new_ASN1T_TravelerInformation (ASN1CType& ccobj);

EXTERN int asn1Init_TravelerInformation (ASN1T_TravelerInformation* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TravelerInformation (OSCTXT *pctxt, 
   ASN1T_TravelerInformation* pvalue);

/**************************************************************/
/*                                                            */
/*  PropelledInformation                                      */
/*                                                            */
/**************************************************************/
/*
PropelledInformation ::= CHOICE {
   human [0] HumanPropelledType, -- PersonalDeviceUserType would be a aPEDESTRIAN
   animal [1] AnimalPropelledType,
   motor [2] MotorizedPropelledType,
   ...
}
*/
/* Choice tag constants */

#define T_PropelledInformation_human    1
#define T_PropelledInformation_animal   2
#define T_PropelledInformation_motor    3
#define T_PropelledInformation_extElem1 4

struct EXTERN ASN1T_PropelledInformation {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_HumanPropelledType human;
      /* t = 2 */
      ASN1T_AnimalPropelledType animal;
      /* t = 3 */
      ASN1T_MotorizedPropelledType motor;
      /* t = 4 */
      ASN1TOpenType *extElem1;
   } u;
   ASN1T_PropelledInformation () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_PropelledInformation (OSCTXT* pctxt, ASN1T_PropelledInformation* pvalue);

EXTERN int asn1PD_PropelledInformation (OSCTXT* pctxt, ASN1T_PropelledInformation* pvalue);

EXTERN int XmlEnc_PropelledInformation (OSCTXT* pctxt, 
   ASN1T_PropelledInformation* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PropelledInformation (OSCTXT* pctxt, 
   ASN1T_PropelledInformation* pvalue);

EXTERN int asn1JsonEnc_PropelledInformation (OSCTXT *pctxt, ASN1T_PropelledInformation *pvalue);

EXTERN int asn1JsonDec_PropelledInformation (OSCTXT *pctxt, ASN1T_PropelledInformation *pvalue);

EXTERN int asn1PrtToStrm_PropelledInformation (OSCTXT *pctxt, 
   const char* name, const ASN1T_PropelledInformation* pvalue);

EXTERN ASN1T_PropelledInformation* 
   new_ASN1T_PropelledInformation (ASN1CType& ccobj);

EXTERN int asn1Init_PropelledInformation (ASN1T_PropelledInformation* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PropelledInformation (OSCTXT *pctxt, 
   ASN1T_PropelledInformation* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalSafetyMessage_regional_element                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PersonalSafetyMessage'
*/
struct EXTERN ASN1T_PersonalSafetyMessage_regional_element {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_PersonalSafetyMessage_regional_element (OSCTXT* pctxt, ASN1T_PersonalSafetyMessage_regional_element* pvalue);

EXTERN int asn1PD_PersonalSafetyMessage_regional_element (OSCTXT* pctxt, ASN1T_PersonalSafetyMessage_regional_element* pvalue);

EXTERN int XmlEnc_PersonalSafetyMessage_regional_element (OSCTXT* pctxt, 
   ASN1T_PersonalSafetyMessage_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PersonalSafetyMessage_regional_element (OSCTXT* pctxt, 
   ASN1T_PersonalSafetyMessage_regional_element* pvalue);

EXTERN int asn1JsonEnc_PersonalSafetyMessage_regional_element (OSCTXT *pctxt, ASN1T_PersonalSafetyMessage_regional_element *pvalue);

EXTERN int asn1JsonDec_PersonalSafetyMessage_regional_element (OSCTXT *pctxt, ASN1T_PersonalSafetyMessage_regional_element *pvalue);

EXTERN int asn1PrtToStrm_PersonalSafetyMessage_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_PersonalSafetyMessage_regional_element* pvalue);

EXTERN ASN1T_PersonalSafetyMessage_regional_element* 
   new_ASN1T_PersonalSafetyMessage_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_PersonalSafetyMessage_regional_element (
   ASN1T_PersonalSafetyMessage_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PersonalSafetyMessage_regional_element (OSCTXT *pctxt, 
   ASN1T_PersonalSafetyMessage_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalSafetyMessage_regional                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PersonalSafetyMessage'
*/
/* List of ASN1T_PersonalSafetyMessage_regional_element */
typedef ASN1TSeqOfList ASN1T_PersonalSafetyMessage_regional;

class EXTERN ASN1C_PersonalSafetyMessage_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_PersonalSafetyMessage_regional& msgData;
public:
   /**
    * Control class: ASN1C_PersonalSafetyMessage_regional
    * Data class:    ASN1T_PersonalSafetyMessage_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PersonalSafetyMessage_regional
       (ASN1T_PersonalSafetyMessage_regional& data);

   /**
    * Control class: ASN1C_PersonalSafetyMessage_regional<br/>
    * Data class: ASN1T_PersonalSafetyMessage_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PersonalSafetyMessage_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_PersonalSafetyMessage_regional& data);

   /**
    * Control class: ASN1C_PersonalSafetyMessage_regional<br/>
    * Data class: ASN1T_PersonalSafetyMessage_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_PersonalSafetyMessage_regional (ASN1CType& ccobj
      , ASN1T_PersonalSafetyMessage_regional& data);

   virtual ~ASN1C_PersonalSafetyMessage_regional () {}

   /**
    * Data class: ASN1T_PersonalSafetyMessage_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_PersonalSafetyMessage_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_PersonalSafetyMessage_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_PersonalSafetyMessage_regional_element* NewElement ();

   /**
    * Data class: ASN1T_PersonalSafetyMessage_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_PersonalSafetyMessage_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   ASN1T_PersonalSafetyMessage_regional_element* 
      GetIE (ASN1T_RegionId regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (ASN1T_RegionId regionId, 
      ASN1T_PersonalSafetyMessage_regional* pmatches);

private:
   ASN1C_PersonalSafetyMessage_regional& operator= (const ASN1C_PersonalSafetyMessage_regional&) {return *this;}
} ;

EXTERN int asn1PE_PersonalSafetyMessage_regional (OSCTXT* pctxt, ASN1T_PersonalSafetyMessage_regional* pvalue);

EXTERN int asn1PD_PersonalSafetyMessage_regional (OSCTXT* pctxt, ASN1T_PersonalSafetyMessage_regional* pvalue);

EXTERN int XmlEnc_PersonalSafetyMessage_regional (OSCTXT* pctxt, 
   ASN1T_PersonalSafetyMessage_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PersonalSafetyMessage_regional (OSCTXT* pctxt, 
   ASN1T_PersonalSafetyMessage_regional* pvalue);

EXTERN int asn1JsonEnc_PersonalSafetyMessage_regional (OSCTXT *pctxt, ASN1T_PersonalSafetyMessage_regional *pvalue);

EXTERN int asn1JsonDec_PersonalSafetyMessage_regional (OSCTXT *pctxt, ASN1T_PersonalSafetyMessage_regional *pvalue);

EXTERN int asn1PrtToStrm_PersonalSafetyMessage_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_PersonalSafetyMessage_regional* pvalue);

EXTERN int asn1Init_PersonalSafetyMessage_regional (
   ASN1T_PersonalSafetyMessage_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PersonalSafetyMessage_regional (OSCTXT *pctxt, 
   ASN1T_PersonalSafetyMessage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalSafetyMessage                                     */
/*                                                            */
/**************************************************************/
/*
PersonalSafetyMessage ::= SEQUENCE {
   basicType [0] PersonalDeviceUserType,
   secMark [1] DSecond,
   msgCnt [2] MsgCount,
   id [3] TemporaryID,
   position [4] Position3D, --  Lat, Long, Elevation     
   accuracy [5] PositionalAccuracy,
   speed [6] Velocity,
   heading [7] Heading,
   accelSet [8] AccelerationSet4Way OPTIONAL,
   pathHistory [9] PathHistory OPTIONAL,
   pathPrediction [10] PathPrediction OPTIONAL,
   propulsion [11] EXPLICIT PropelledInformation OPTIONAL,
   useState [12] PersonalDeviceUsageState OPTIONAL,
   crossRequest [13] PersonalCrossingRequest OPTIONAL,
   crossState [14] PersonalCrossingInProgress OPTIONAL,
   clusterSize [15] NumberOfParticipantsInCluster OPTIONAL,
   clusterRadius [16] PersonalClusterRadius OPTIONAL,
   eventResponderType [17] PublicSafetyEventResponderWorkerType OPTIONAL,
   activityType [18] PublicSafetyAndRoadWorkerActivity OPTIONAL,
   activitySubType [19] PublicSafetyDirectingTrafficSubType OPTIONAL,
   assistType [20] PersonalAssistive OPTIONAL,
   sizing [21] UserSizeAndBehaviour OPTIONAL,
   attachment [22] Attachment OPTIONAL,
   attachmentRadius [23] AttachmentRadius OPTIONAL,
   animalType [24] AnimalType OPTIONAL,
   regional [25] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-PersonalSafetyMessage}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-PersonalSafetyMessage}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_PersonalSafetyMessage {
   struct {
      unsigned accelSetPresent : 1;
      unsigned pathHistoryPresent : 1;
      unsigned pathPredictionPresent : 1;
      unsigned propulsionPresent : 1;
      unsigned useStatePresent : 1;
      unsigned crossRequestPresent : 1;
      unsigned crossStatePresent : 1;
      unsigned clusterSizePresent : 1;
      unsigned clusterRadiusPresent : 1;
      unsigned eventResponderTypePresent : 1;
      unsigned activityTypePresent : 1;
      unsigned activitySubTypePresent : 1;
      unsigned assistTypePresent : 1;
      unsigned sizingPresent : 1;
      unsigned attachmentPresent : 1;
      unsigned attachmentRadiusPresent : 1;
      unsigned animalTypePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_PersonalDeviceUserType basicType;
   ASN1T_DSecond secMark;
   ASN1T_MsgCount msgCnt;
   ASN1T_TemporaryID id;
   ASN1T_Position3D position;
   ASN1T_PositionalAccuracy accuracy;
   ASN1T_Velocity speed;
   ASN1T_Heading heading;
   ASN1T_AccelerationSet4Way accelSet;
   ASN1T_PathHistory pathHistory;
   ASN1T_PathPrediction pathPrediction;
   ASN1T_PropelledInformation propulsion;
   ASN1T_PersonalDeviceUsageState useState;
   ASN1T_PersonalCrossingRequest crossRequest;
   ASN1T_PersonalCrossingInProgress crossState;
   ASN1T_NumberOfParticipantsInCluster clusterSize;
   ASN1T_PersonalClusterRadius clusterRadius;
   ASN1T_PublicSafetyEventResponderWorkerType eventResponderType;
   ASN1T_PublicSafetyAndRoadWorkerActivity activityType;
   ASN1T_PublicSafetyDirectingTrafficSubType activitySubType;
   ASN1T_PersonalAssistive assistType;
   ASN1T_UserSizeAndBehaviour sizing;
   ASN1T_Attachment attachment;
   ASN1T_AttachmentRadius attachmentRadius;
   ASN1T_AnimalType animalType;
   ASN1T_PersonalSafetyMessage_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_PersonalSafetyMessage ();
} ;

EXTERN int asn1PE_PersonalSafetyMessage (OSCTXT* pctxt, ASN1T_PersonalSafetyMessage* pvalue);

EXTERN int asn1PD_PersonalSafetyMessage (OSCTXT* pctxt, ASN1T_PersonalSafetyMessage* pvalue);

EXTERN int XmlEnc_PersonalSafetyMessage (OSCTXT* pctxt, 
   ASN1T_PersonalSafetyMessage* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PersonalSafetyMessage (OSCTXT* pctxt, 
   ASN1T_PersonalSafetyMessage* pvalue);

EXTERN int asn1JsonEnc_PersonalSafetyMessage (OSCTXT *pctxt, ASN1T_PersonalSafetyMessage *pvalue);

EXTERN int asn1JsonDec_PersonalSafetyMessage (OSCTXT *pctxt, ASN1T_PersonalSafetyMessage *pvalue);

EXTERN int asn1PrtToStrm_PersonalSafetyMessage (OSCTXT *pctxt, 
   const char* name, const ASN1T_PersonalSafetyMessage* pvalue);

EXTERN ASN1T_PersonalSafetyMessage* 
   new_ASN1T_PersonalSafetyMessage (ASN1CType& ccobj);

EXTERN int asn1Init_PersonalSafetyMessage (ASN1T_PersonalSafetyMessage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PersonalSafetyMessage (OSCTXT *pctxt, 
   ASN1T_PersonalSafetyMessage* pvalue);

/**************************************************************/
/*                                                            */
/*  Header                                                    */
/*                                                            */
/**************************************************************/
/*
Header ::= SEQUENCE {
   -- Basic time and sequence values for the message
   year [0] DYear OPTIONAL,
   timeStamp [1] MinuteOfTheYear OPTIONAL,
   secMark [2] DSecond OPTIONAL,
   msgIssueRevision [3] MsgCount OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_Header {
   struct {
      unsigned yearPresent : 1;
      unsigned timeStampPresent : 1;
      unsigned secMarkPresent : 1;
      unsigned msgIssueRevisionPresent : 1;
   } m;
   ASN1T_DYear year;
   ASN1T_MinuteOfTheYear timeStamp;
   ASN1T_DSecond secMark;
   ASN1T_MsgCount msgIssueRevision;
   ASN1TSeqExt extElem1;
   ASN1T_Header ();
} ;

EXTERN int asn1PE_Header (OSCTXT* pctxt, ASN1T_Header* pvalue);

EXTERN int asn1PD_Header (OSCTXT* pctxt, ASN1T_Header* pvalue);

EXTERN int XmlEnc_Header (OSCTXT* pctxt, ASN1T_Header* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Header (OSCTXT* pctxt, ASN1T_Header* pvalue);

EXTERN int asn1JsonEnc_Header (OSCTXT *pctxt, ASN1T_Header *pvalue);

EXTERN int asn1JsonDec_Header (OSCTXT *pctxt, ASN1T_Header *pvalue);

EXTERN int asn1PrtToStrm_Header (OSCTXT *pctxt, 
   const char* name, const ASN1T_Header* pvalue);

EXTERN ASN1T_Header* new_ASN1T_Header (ASN1CType& ccobj);

EXTERN int asn1Init_Header (ASN1T_Header* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_Header (OSCTXT *pctxt, ASN1T_Header* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage00_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage00'
*/
struct EXTERN ASN1T_TestMessage00_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage00_regional (OSCTXT* pctxt, ASN1T_TestMessage00_regional* pvalue);

EXTERN int asn1PD_TestMessage00_regional (OSCTXT* pctxt, ASN1T_TestMessage00_regional* pvalue);

EXTERN int XmlEnc_TestMessage00_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage00_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage00_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage00_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage00_regional (OSCTXT *pctxt, ASN1T_TestMessage00_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage00_regional (OSCTXT *pctxt, ASN1T_TestMessage00_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage00_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage00_regional* pvalue);

EXTERN ASN1T_TestMessage00_regional* 
   new_ASN1T_TestMessage00_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage00_regional (ASN1T_TestMessage00_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage00_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage00_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage00                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage00 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   -- All content is added in below data frame
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage00}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage00}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage00 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage00_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage00 ();
} ;

EXTERN int asn1PE_TestMessage00 (OSCTXT* pctxt, ASN1T_TestMessage00* pvalue);

EXTERN int asn1PD_TestMessage00 (OSCTXT* pctxt, ASN1T_TestMessage00* pvalue);

EXTERN int XmlEnc_TestMessage00 (OSCTXT* pctxt, ASN1T_TestMessage00* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage00 (OSCTXT* pctxt, ASN1T_TestMessage00* pvalue);

EXTERN int asn1JsonEnc_TestMessage00 (OSCTXT *pctxt, ASN1T_TestMessage00 *pvalue);

EXTERN int asn1JsonDec_TestMessage00 (OSCTXT *pctxt, ASN1T_TestMessage00 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage00 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage00* pvalue);

EXTERN ASN1T_TestMessage00* new_ASN1T_TestMessage00 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage00 (ASN1T_TestMessage00* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage00 (OSCTXT *pctxt, ASN1T_TestMessage00* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage01_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage01'
*/
struct EXTERN ASN1T_TestMessage01_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage01_regional (OSCTXT* pctxt, ASN1T_TestMessage01_regional* pvalue);

EXTERN int asn1PD_TestMessage01_regional (OSCTXT* pctxt, ASN1T_TestMessage01_regional* pvalue);

EXTERN int XmlEnc_TestMessage01_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage01_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage01_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage01_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage01_regional (OSCTXT *pctxt, ASN1T_TestMessage01_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage01_regional (OSCTXT *pctxt, ASN1T_TestMessage01_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage01_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage01_regional* pvalue);

EXTERN ASN1T_TestMessage01_regional* 
   new_ASN1T_TestMessage01_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage01_regional (ASN1T_TestMessage01_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage01_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage01_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage01                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage01 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage01}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage01}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage01 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage01_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage01 ();
} ;

EXTERN int asn1PE_TestMessage01 (OSCTXT* pctxt, ASN1T_TestMessage01* pvalue);

EXTERN int asn1PD_TestMessage01 (OSCTXT* pctxt, ASN1T_TestMessage01* pvalue);

EXTERN int XmlEnc_TestMessage01 (OSCTXT* pctxt, ASN1T_TestMessage01* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage01 (OSCTXT* pctxt, ASN1T_TestMessage01* pvalue);

EXTERN int asn1JsonEnc_TestMessage01 (OSCTXT *pctxt, ASN1T_TestMessage01 *pvalue);

EXTERN int asn1JsonDec_TestMessage01 (OSCTXT *pctxt, ASN1T_TestMessage01 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage01 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage01* pvalue);

EXTERN ASN1T_TestMessage01* new_ASN1T_TestMessage01 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage01 (ASN1T_TestMessage01* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage01 (OSCTXT *pctxt, ASN1T_TestMessage01* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage02_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage02'
*/
struct EXTERN ASN1T_TestMessage02_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage02_regional (OSCTXT* pctxt, ASN1T_TestMessage02_regional* pvalue);

EXTERN int asn1PD_TestMessage02_regional (OSCTXT* pctxt, ASN1T_TestMessage02_regional* pvalue);

EXTERN int XmlEnc_TestMessage02_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage02_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage02_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage02_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage02_regional (OSCTXT *pctxt, ASN1T_TestMessage02_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage02_regional (OSCTXT *pctxt, ASN1T_TestMessage02_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage02_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage02_regional* pvalue);

EXTERN ASN1T_TestMessage02_regional* 
   new_ASN1T_TestMessage02_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage02_regional (ASN1T_TestMessage02_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage02_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage02_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage02                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage02 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage02}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage02}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage02 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage02_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage02 ();
} ;

EXTERN int asn1PE_TestMessage02 (OSCTXT* pctxt, ASN1T_TestMessage02* pvalue);

EXTERN int asn1PD_TestMessage02 (OSCTXT* pctxt, ASN1T_TestMessage02* pvalue);

EXTERN int XmlEnc_TestMessage02 (OSCTXT* pctxt, ASN1T_TestMessage02* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage02 (OSCTXT* pctxt, ASN1T_TestMessage02* pvalue);

EXTERN int asn1JsonEnc_TestMessage02 (OSCTXT *pctxt, ASN1T_TestMessage02 *pvalue);

EXTERN int asn1JsonDec_TestMessage02 (OSCTXT *pctxt, ASN1T_TestMessage02 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage02 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage02* pvalue);

EXTERN ASN1T_TestMessage02* new_ASN1T_TestMessage02 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage02 (ASN1T_TestMessage02* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage02 (OSCTXT *pctxt, ASN1T_TestMessage02* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage03_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage03'
*/
struct EXTERN ASN1T_TestMessage03_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage03_regional (OSCTXT* pctxt, ASN1T_TestMessage03_regional* pvalue);

EXTERN int asn1PD_TestMessage03_regional (OSCTXT* pctxt, ASN1T_TestMessage03_regional* pvalue);

EXTERN int XmlEnc_TestMessage03_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage03_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage03_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage03_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage03_regional (OSCTXT *pctxt, ASN1T_TestMessage03_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage03_regional (OSCTXT *pctxt, ASN1T_TestMessage03_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage03_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage03_regional* pvalue);

EXTERN ASN1T_TestMessage03_regional* 
   new_ASN1T_TestMessage03_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage03_regional (ASN1T_TestMessage03_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage03_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage03_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage03                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage03 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage03}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage03}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage03 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage03_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage03 ();
} ;

EXTERN int asn1PE_TestMessage03 (OSCTXT* pctxt, ASN1T_TestMessage03* pvalue);

EXTERN int asn1PD_TestMessage03 (OSCTXT* pctxt, ASN1T_TestMessage03* pvalue);

EXTERN int XmlEnc_TestMessage03 (OSCTXT* pctxt, ASN1T_TestMessage03* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage03 (OSCTXT* pctxt, ASN1T_TestMessage03* pvalue);

EXTERN int asn1JsonEnc_TestMessage03 (OSCTXT *pctxt, ASN1T_TestMessage03 *pvalue);

EXTERN int asn1JsonDec_TestMessage03 (OSCTXT *pctxt, ASN1T_TestMessage03 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage03 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage03* pvalue);

EXTERN ASN1T_TestMessage03* new_ASN1T_TestMessage03 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage03 (ASN1T_TestMessage03* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage03 (OSCTXT *pctxt, ASN1T_TestMessage03* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage04_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage04'
*/
struct EXTERN ASN1T_TestMessage04_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage04_regional (OSCTXT* pctxt, ASN1T_TestMessage04_regional* pvalue);

EXTERN int asn1PD_TestMessage04_regional (OSCTXT* pctxt, ASN1T_TestMessage04_regional* pvalue);

EXTERN int XmlEnc_TestMessage04_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage04_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage04_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage04_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage04_regional (OSCTXT *pctxt, ASN1T_TestMessage04_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage04_regional (OSCTXT *pctxt, ASN1T_TestMessage04_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage04_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage04_regional* pvalue);

EXTERN ASN1T_TestMessage04_regional* 
   new_ASN1T_TestMessage04_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage04_regional (ASN1T_TestMessage04_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage04_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage04_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage04                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage04 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage04}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage04}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage04 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage04_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage04 ();
} ;

EXTERN int asn1PE_TestMessage04 (OSCTXT* pctxt, ASN1T_TestMessage04* pvalue);

EXTERN int asn1PD_TestMessage04 (OSCTXT* pctxt, ASN1T_TestMessage04* pvalue);

EXTERN int XmlEnc_TestMessage04 (OSCTXT* pctxt, ASN1T_TestMessage04* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage04 (OSCTXT* pctxt, ASN1T_TestMessage04* pvalue);

EXTERN int asn1JsonEnc_TestMessage04 (OSCTXT *pctxt, ASN1T_TestMessage04 *pvalue);

EXTERN int asn1JsonDec_TestMessage04 (OSCTXT *pctxt, ASN1T_TestMessage04 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage04 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage04* pvalue);

EXTERN ASN1T_TestMessage04* new_ASN1T_TestMessage04 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage04 (ASN1T_TestMessage04* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage04 (OSCTXT *pctxt, ASN1T_TestMessage04* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage05_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage05'
*/
struct EXTERN ASN1T_TestMessage05_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage05_regional (OSCTXT* pctxt, ASN1T_TestMessage05_regional* pvalue);

EXTERN int asn1PD_TestMessage05_regional (OSCTXT* pctxt, ASN1T_TestMessage05_regional* pvalue);

EXTERN int XmlEnc_TestMessage05_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage05_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage05_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage05_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage05_regional (OSCTXT *pctxt, ASN1T_TestMessage05_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage05_regional (OSCTXT *pctxt, ASN1T_TestMessage05_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage05_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage05_regional* pvalue);

EXTERN ASN1T_TestMessage05_regional* 
   new_ASN1T_TestMessage05_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage05_regional (ASN1T_TestMessage05_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage05_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage05_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage05                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage05 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage05}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage05}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage05 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage05_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage05 ();
} ;

EXTERN int asn1PE_TestMessage05 (OSCTXT* pctxt, ASN1T_TestMessage05* pvalue);

EXTERN int asn1PD_TestMessage05 (OSCTXT* pctxt, ASN1T_TestMessage05* pvalue);

EXTERN int XmlEnc_TestMessage05 (OSCTXT* pctxt, ASN1T_TestMessage05* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage05 (OSCTXT* pctxt, ASN1T_TestMessage05* pvalue);

EXTERN int asn1JsonEnc_TestMessage05 (OSCTXT *pctxt, ASN1T_TestMessage05 *pvalue);

EXTERN int asn1JsonDec_TestMessage05 (OSCTXT *pctxt, ASN1T_TestMessage05 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage05 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage05* pvalue);

EXTERN ASN1T_TestMessage05* new_ASN1T_TestMessage05 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage05 (ASN1T_TestMessage05* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage05 (OSCTXT *pctxt, ASN1T_TestMessage05* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage06_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage06'
*/
struct EXTERN ASN1T_TestMessage06_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage06_regional (OSCTXT* pctxt, ASN1T_TestMessage06_regional* pvalue);

EXTERN int asn1PD_TestMessage06_regional (OSCTXT* pctxt, ASN1T_TestMessage06_regional* pvalue);

EXTERN int XmlEnc_TestMessage06_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage06_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage06_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage06_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage06_regional (OSCTXT *pctxt, ASN1T_TestMessage06_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage06_regional (OSCTXT *pctxt, ASN1T_TestMessage06_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage06_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage06_regional* pvalue);

EXTERN ASN1T_TestMessage06_regional* 
   new_ASN1T_TestMessage06_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage06_regional (ASN1T_TestMessage06_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage06_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage06_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage06                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage06 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage06}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage06}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage06 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage06_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage06 ();
} ;

EXTERN int asn1PE_TestMessage06 (OSCTXT* pctxt, ASN1T_TestMessage06* pvalue);

EXTERN int asn1PD_TestMessage06 (OSCTXT* pctxt, ASN1T_TestMessage06* pvalue);

EXTERN int XmlEnc_TestMessage06 (OSCTXT* pctxt, ASN1T_TestMessage06* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage06 (OSCTXT* pctxt, ASN1T_TestMessage06* pvalue);

EXTERN int asn1JsonEnc_TestMessage06 (OSCTXT *pctxt, ASN1T_TestMessage06 *pvalue);

EXTERN int asn1JsonDec_TestMessage06 (OSCTXT *pctxt, ASN1T_TestMessage06 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage06 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage06* pvalue);

EXTERN ASN1T_TestMessage06* new_ASN1T_TestMessage06 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage06 (ASN1T_TestMessage06* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage06 (OSCTXT *pctxt, ASN1T_TestMessage06* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage07_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage07'
*/
struct EXTERN ASN1T_TestMessage07_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage07_regional (OSCTXT* pctxt, ASN1T_TestMessage07_regional* pvalue);

EXTERN int asn1PD_TestMessage07_regional (OSCTXT* pctxt, ASN1T_TestMessage07_regional* pvalue);

EXTERN int XmlEnc_TestMessage07_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage07_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage07_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage07_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage07_regional (OSCTXT *pctxt, ASN1T_TestMessage07_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage07_regional (OSCTXT *pctxt, ASN1T_TestMessage07_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage07_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage07_regional* pvalue);

EXTERN ASN1T_TestMessage07_regional* 
   new_ASN1T_TestMessage07_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage07_regional (ASN1T_TestMessage07_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage07_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage07_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage07                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage07 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage07}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage07}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage07 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage07_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage07 ();
} ;

EXTERN int asn1PE_TestMessage07 (OSCTXT* pctxt, ASN1T_TestMessage07* pvalue);

EXTERN int asn1PD_TestMessage07 (OSCTXT* pctxt, ASN1T_TestMessage07* pvalue);

EXTERN int XmlEnc_TestMessage07 (OSCTXT* pctxt, ASN1T_TestMessage07* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage07 (OSCTXT* pctxt, ASN1T_TestMessage07* pvalue);

EXTERN int asn1JsonEnc_TestMessage07 (OSCTXT *pctxt, ASN1T_TestMessage07 *pvalue);

EXTERN int asn1JsonDec_TestMessage07 (OSCTXT *pctxt, ASN1T_TestMessage07 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage07 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage07* pvalue);

EXTERN ASN1T_TestMessage07* new_ASN1T_TestMessage07 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage07 (ASN1T_TestMessage07* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage07 (OSCTXT *pctxt, ASN1T_TestMessage07* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage08_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage08'
*/
struct EXTERN ASN1T_TestMessage08_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage08_regional (OSCTXT* pctxt, ASN1T_TestMessage08_regional* pvalue);

EXTERN int asn1PD_TestMessage08_regional (OSCTXT* pctxt, ASN1T_TestMessage08_regional* pvalue);

EXTERN int XmlEnc_TestMessage08_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage08_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage08_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage08_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage08_regional (OSCTXT *pctxt, ASN1T_TestMessage08_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage08_regional (OSCTXT *pctxt, ASN1T_TestMessage08_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage08_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage08_regional* pvalue);

EXTERN ASN1T_TestMessage08_regional* 
   new_ASN1T_TestMessage08_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage08_regional (ASN1T_TestMessage08_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage08_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage08_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage08                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage08 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage08}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage08}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage08 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage08_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage08 ();
} ;

EXTERN int asn1PE_TestMessage08 (OSCTXT* pctxt, ASN1T_TestMessage08* pvalue);

EXTERN int asn1PD_TestMessage08 (OSCTXT* pctxt, ASN1T_TestMessage08* pvalue);

EXTERN int XmlEnc_TestMessage08 (OSCTXT* pctxt, ASN1T_TestMessage08* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage08 (OSCTXT* pctxt, ASN1T_TestMessage08* pvalue);

EXTERN int asn1JsonEnc_TestMessage08 (OSCTXT *pctxt, ASN1T_TestMessage08 *pvalue);

EXTERN int asn1JsonDec_TestMessage08 (OSCTXT *pctxt, ASN1T_TestMessage08 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage08 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage08* pvalue);

EXTERN ASN1T_TestMessage08* new_ASN1T_TestMessage08 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage08 (ASN1T_TestMessage08* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage08 (OSCTXT *pctxt, ASN1T_TestMessage08* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage09_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage09'
*/
struct EXTERN ASN1T_TestMessage09_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage09_regional (OSCTXT* pctxt, ASN1T_TestMessage09_regional* pvalue);

EXTERN int asn1PD_TestMessage09_regional (OSCTXT* pctxt, ASN1T_TestMessage09_regional* pvalue);

EXTERN int XmlEnc_TestMessage09_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage09_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage09_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage09_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage09_regional (OSCTXT *pctxt, ASN1T_TestMessage09_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage09_regional (OSCTXT *pctxt, ASN1T_TestMessage09_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage09_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage09_regional* pvalue);

EXTERN ASN1T_TestMessage09_regional* 
   new_ASN1T_TestMessage09_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage09_regional (ASN1T_TestMessage09_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage09_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage09_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage09                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage09 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage09}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage09}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage09 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage09_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage09 ();
} ;

EXTERN int asn1PE_TestMessage09 (OSCTXT* pctxt, ASN1T_TestMessage09* pvalue);

EXTERN int asn1PD_TestMessage09 (OSCTXT* pctxt, ASN1T_TestMessage09* pvalue);

EXTERN int XmlEnc_TestMessage09 (OSCTXT* pctxt, ASN1T_TestMessage09* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage09 (OSCTXT* pctxt, ASN1T_TestMessage09* pvalue);

EXTERN int asn1JsonEnc_TestMessage09 (OSCTXT *pctxt, ASN1T_TestMessage09 *pvalue);

EXTERN int asn1JsonDec_TestMessage09 (OSCTXT *pctxt, ASN1T_TestMessage09 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage09 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage09* pvalue);

EXTERN ASN1T_TestMessage09* new_ASN1T_TestMessage09 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage09 (ASN1T_TestMessage09* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage09 (OSCTXT *pctxt, ASN1T_TestMessage09* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage10_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage10'
*/
struct EXTERN ASN1T_TestMessage10_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage10_regional (OSCTXT* pctxt, ASN1T_TestMessage10_regional* pvalue);

EXTERN int asn1PD_TestMessage10_regional (OSCTXT* pctxt, ASN1T_TestMessage10_regional* pvalue);

EXTERN int XmlEnc_TestMessage10_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage10_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage10_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage10_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage10_regional (OSCTXT *pctxt, ASN1T_TestMessage10_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage10_regional (OSCTXT *pctxt, ASN1T_TestMessage10_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage10_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage10_regional* pvalue);

EXTERN ASN1T_TestMessage10_regional* 
   new_ASN1T_TestMessage10_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage10_regional (ASN1T_TestMessage10_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage10_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage10_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage10                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage10 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage10}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage10}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage10 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage10_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage10 ();
} ;

EXTERN int asn1PE_TestMessage10 (OSCTXT* pctxt, ASN1T_TestMessage10* pvalue);

EXTERN int asn1PD_TestMessage10 (OSCTXT* pctxt, ASN1T_TestMessage10* pvalue);

EXTERN int XmlEnc_TestMessage10 (OSCTXT* pctxt, ASN1T_TestMessage10* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage10 (OSCTXT* pctxt, ASN1T_TestMessage10* pvalue);

EXTERN int asn1JsonEnc_TestMessage10 (OSCTXT *pctxt, ASN1T_TestMessage10 *pvalue);

EXTERN int asn1JsonDec_TestMessage10 (OSCTXT *pctxt, ASN1T_TestMessage10 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage10 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage10* pvalue);

EXTERN ASN1T_TestMessage10* new_ASN1T_TestMessage10 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage10 (ASN1T_TestMessage10* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage10 (OSCTXT *pctxt, ASN1T_TestMessage10* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage11_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage11'
*/
struct EXTERN ASN1T_TestMessage11_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage11_regional (OSCTXT* pctxt, ASN1T_TestMessage11_regional* pvalue);

EXTERN int asn1PD_TestMessage11_regional (OSCTXT* pctxt, ASN1T_TestMessage11_regional* pvalue);

EXTERN int XmlEnc_TestMessage11_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage11_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage11_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage11_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage11_regional (OSCTXT *pctxt, ASN1T_TestMessage11_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage11_regional (OSCTXT *pctxt, ASN1T_TestMessage11_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage11_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage11_regional* pvalue);

EXTERN ASN1T_TestMessage11_regional* 
   new_ASN1T_TestMessage11_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage11_regional (ASN1T_TestMessage11_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage11_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage11_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage11                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage11 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage11}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage11}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage11 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage11_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage11 ();
} ;

EXTERN int asn1PE_TestMessage11 (OSCTXT* pctxt, ASN1T_TestMessage11* pvalue);

EXTERN int asn1PD_TestMessage11 (OSCTXT* pctxt, ASN1T_TestMessage11* pvalue);

EXTERN int XmlEnc_TestMessage11 (OSCTXT* pctxt, ASN1T_TestMessage11* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage11 (OSCTXT* pctxt, ASN1T_TestMessage11* pvalue);

EXTERN int asn1JsonEnc_TestMessage11 (OSCTXT *pctxt, ASN1T_TestMessage11 *pvalue);

EXTERN int asn1JsonDec_TestMessage11 (OSCTXT *pctxt, ASN1T_TestMessage11 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage11 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage11* pvalue);

EXTERN ASN1T_TestMessage11* new_ASN1T_TestMessage11 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage11 (ASN1T_TestMessage11* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage11 (OSCTXT *pctxt, ASN1T_TestMessage11* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage12_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage12'
*/
struct EXTERN ASN1T_TestMessage12_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage12_regional (OSCTXT* pctxt, ASN1T_TestMessage12_regional* pvalue);

EXTERN int asn1PD_TestMessage12_regional (OSCTXT* pctxt, ASN1T_TestMessage12_regional* pvalue);

EXTERN int XmlEnc_TestMessage12_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage12_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage12_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage12_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage12_regional (OSCTXT *pctxt, ASN1T_TestMessage12_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage12_regional (OSCTXT *pctxt, ASN1T_TestMessage12_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage12_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage12_regional* pvalue);

EXTERN ASN1T_TestMessage12_regional* 
   new_ASN1T_TestMessage12_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage12_regional (ASN1T_TestMessage12_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage12_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage12_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage12                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage12 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage12}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage12}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage12 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage12_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage12 ();
} ;

EXTERN int asn1PE_TestMessage12 (OSCTXT* pctxt, ASN1T_TestMessage12* pvalue);

EXTERN int asn1PD_TestMessage12 (OSCTXT* pctxt, ASN1T_TestMessage12* pvalue);

EXTERN int XmlEnc_TestMessage12 (OSCTXT* pctxt, ASN1T_TestMessage12* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage12 (OSCTXT* pctxt, ASN1T_TestMessage12* pvalue);

EXTERN int asn1JsonEnc_TestMessage12 (OSCTXT *pctxt, ASN1T_TestMessage12 *pvalue);

EXTERN int asn1JsonDec_TestMessage12 (OSCTXT *pctxt, ASN1T_TestMessage12 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage12 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage12* pvalue);

EXTERN ASN1T_TestMessage12* new_ASN1T_TestMessage12 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage12 (ASN1T_TestMessage12* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage12 (OSCTXT *pctxt, ASN1T_TestMessage12* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage13_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage13'
*/
struct EXTERN ASN1T_TestMessage13_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage13_regional (OSCTXT* pctxt, ASN1T_TestMessage13_regional* pvalue);

EXTERN int asn1PD_TestMessage13_regional (OSCTXT* pctxt, ASN1T_TestMessage13_regional* pvalue);

EXTERN int XmlEnc_TestMessage13_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage13_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage13_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage13_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage13_regional (OSCTXT *pctxt, ASN1T_TestMessage13_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage13_regional (OSCTXT *pctxt, ASN1T_TestMessage13_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage13_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage13_regional* pvalue);

EXTERN ASN1T_TestMessage13_regional* 
   new_ASN1T_TestMessage13_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage13_regional (ASN1T_TestMessage13_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage13_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage13_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage13                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage13 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage13}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage13}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage13 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage13_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage13 ();
} ;

EXTERN int asn1PE_TestMessage13 (OSCTXT* pctxt, ASN1T_TestMessage13* pvalue);

EXTERN int asn1PD_TestMessage13 (OSCTXT* pctxt, ASN1T_TestMessage13* pvalue);

EXTERN int XmlEnc_TestMessage13 (OSCTXT* pctxt, ASN1T_TestMessage13* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage13 (OSCTXT* pctxt, ASN1T_TestMessage13* pvalue);

EXTERN int asn1JsonEnc_TestMessage13 (OSCTXT *pctxt, ASN1T_TestMessage13 *pvalue);

EXTERN int asn1JsonDec_TestMessage13 (OSCTXT *pctxt, ASN1T_TestMessage13 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage13 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage13* pvalue);

EXTERN ASN1T_TestMessage13* new_ASN1T_TestMessage13 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage13 (ASN1T_TestMessage13* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage13 (OSCTXT *pctxt, ASN1T_TestMessage13* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage14_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage14'
*/
struct EXTERN ASN1T_TestMessage14_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage14_regional (OSCTXT* pctxt, ASN1T_TestMessage14_regional* pvalue);

EXTERN int asn1PD_TestMessage14_regional (OSCTXT* pctxt, ASN1T_TestMessage14_regional* pvalue);

EXTERN int XmlEnc_TestMessage14_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage14_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage14_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage14_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage14_regional (OSCTXT *pctxt, ASN1T_TestMessage14_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage14_regional (OSCTXT *pctxt, ASN1T_TestMessage14_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage14_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage14_regional* pvalue);

EXTERN ASN1T_TestMessage14_regional* 
   new_ASN1T_TestMessage14_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage14_regional (ASN1T_TestMessage14_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage14_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage14_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage14                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage14 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage14}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage14}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage14 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage14_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage14 ();
} ;

EXTERN int asn1PE_TestMessage14 (OSCTXT* pctxt, ASN1T_TestMessage14* pvalue);

EXTERN int asn1PD_TestMessage14 (OSCTXT* pctxt, ASN1T_TestMessage14* pvalue);

EXTERN int XmlEnc_TestMessage14 (OSCTXT* pctxt, ASN1T_TestMessage14* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage14 (OSCTXT* pctxt, ASN1T_TestMessage14* pvalue);

EXTERN int asn1JsonEnc_TestMessage14 (OSCTXT *pctxt, ASN1T_TestMessage14 *pvalue);

EXTERN int asn1JsonDec_TestMessage14 (OSCTXT *pctxt, ASN1T_TestMessage14 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage14 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage14* pvalue);

EXTERN ASN1T_TestMessage14* new_ASN1T_TestMessage14 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage14 (ASN1T_TestMessage14* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage14 (OSCTXT *pctxt, ASN1T_TestMessage14* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage15_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TestMessage15'
*/
struct EXTERN ASN1T_TestMessage15_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_TestMessage15_regional (OSCTXT* pctxt, ASN1T_TestMessage15_regional* pvalue);

EXTERN int asn1PD_TestMessage15_regional (OSCTXT* pctxt, ASN1T_TestMessage15_regional* pvalue);

EXTERN int XmlEnc_TestMessage15_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage15_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage15_regional (OSCTXT* pctxt, 
   ASN1T_TestMessage15_regional* pvalue);

EXTERN int asn1JsonEnc_TestMessage15_regional (OSCTXT *pctxt, ASN1T_TestMessage15_regional *pvalue);

EXTERN int asn1JsonDec_TestMessage15_regional (OSCTXT *pctxt, ASN1T_TestMessage15_regional *pvalue);

EXTERN int asn1PrtToStrm_TestMessage15_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage15_regional* pvalue);

EXTERN ASN1T_TestMessage15_regional* 
   new_ASN1T_TestMessage15_regional (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage15_regional (ASN1T_TestMessage15_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage15_regional (OSCTXT *pctxt, 
   ASN1T_TestMessage15_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage15                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage15 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-TestMessage15}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-TestMessage15}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TestMessage15 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_Header header;
   ASN1T_TestMessage15_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_TestMessage15 ();
} ;

EXTERN int asn1PE_TestMessage15 (OSCTXT* pctxt, ASN1T_TestMessage15* pvalue);

EXTERN int asn1PD_TestMessage15 (OSCTXT* pctxt, ASN1T_TestMessage15* pvalue);

EXTERN int XmlEnc_TestMessage15 (OSCTXT* pctxt, ASN1T_TestMessage15* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TestMessage15 (OSCTXT* pctxt, ASN1T_TestMessage15* pvalue);

EXTERN int asn1JsonEnc_TestMessage15 (OSCTXT *pctxt, ASN1T_TestMessage15 *pvalue);

EXTERN int asn1JsonDec_TestMessage15 (OSCTXT *pctxt, ASN1T_TestMessage15 *pvalue);

EXTERN int asn1PrtToStrm_TestMessage15 (OSCTXT *pctxt, 
   const char* name, const ASN1T_TestMessage15* pvalue);

EXTERN ASN1T_TestMessage15* new_ASN1T_TestMessage15 (ASN1CType& ccobj);

EXTERN int asn1Init_TestMessage15 (ASN1T_TestMessage15* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TestMessage15 (OSCTXT *pctxt, ASN1T_TestMessage15* pvalue);

/**************************************************************/
/*                                                            */
/*  MessageFrame                                              */
/*                                                            */
/**************************************************************/
/*
 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 
 Start of entries from table Messages...
 This table typically contains message entries.
 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 
MessageFrame ::= SEQUENCE {
   messageId [0] MESSAGE-ID-AND-TYPE.&id ({MessageTypes}),
   value [1] EXPLICIT MESSAGE-ID-AND-TYPE.&Type ({MessageTypes}{@.messageId}),
   ...
}
*/
struct EXTERN ASN1T_MessageFrame : public ASN1TPDU {
   ASN1T_DSRCmsgID messageId;
   struct  {
      /**
       * information object selector
       */
      MessageTypes::TVALUE t;

      /**
       * MessageTypes information objects
       */
      union {
         /**
          * id: basicSafetyMessage
          */
         ASN1T_BasicSafetyMessage *_MessageTypes_basicSafetyMessage;
         /**
          * id: mapData
          */
         ASN1T_MapData *_MessageTypes_mapData;
         /**
          * id: signalPhaseAndTimingMessage
          */
         ASN1T_SPAT *_MessageTypes_signalPhaseAndTimingMessage;
         /**
          * id: commonSafetyRequest
          */
         ASN1T_CommonSafetyRequest *_MessageTypes_commonSafetyRequest;
         /**
          * id: emergencyVehicleAlert
          */
         ASN1T_EmergencyVehicleAlert *_MessageTypes_emergencyVehicleAlert;
         /**
          * id: intersectionCollision
          */
         ASN1T_IntersectionCollision *_MessageTypes_intersectionCollision;
         /**
          * id: nmeaCorrections
          */
         ASN1T_NMEAcorrections *_MessageTypes_nmeaCorrections;
         /**
          * id: probeDataManagement
          */
         ASN1T_ProbeDataManagement *_MessageTypes_probeDataManagement;
         /**
          * id: probeVehicleData
          */
         ASN1T_ProbeVehicleData *_MessageTypes_probeVehicleData;
         /**
          * id: roadSideAlert
          */
         ASN1T_RoadSideAlert *_MessageTypes_roadSideAlert;
         /**
          * id: rtcmCorrections
          */
         ASN1T_RTCMcorrections *_MessageTypes_rtcmCorrections;
         /**
          * id: signalRequestMessage
          */
         ASN1T_SignalRequestMessage *_MessageTypes_signalRequestMessage;
         /**
          * id: signalStatusMessage
          */
         ASN1T_SignalStatusMessage *_MessageTypes_signalStatusMessage;
         /**
          * id: travelerInformation
          */
         ASN1T_TravelerInformation *_MessageTypes_travelerInformation;
         /**
          * id: personalSafetyMessage
          */
         ASN1T_PersonalSafetyMessage *_MessageTypes_personalSafetyMessage;
         /**
          * id: testMessage00
          */
         ASN1T_TestMessage00 *_MessageTypes_testMessage00;
         /**
          * id: testMessage01
          */
         ASN1T_TestMessage01 *_MessageTypes_testMessage01;
         /**
          * id: testMessage02
          */
         ASN1T_TestMessage02 *_MessageTypes_testMessage02;
         /**
          * id: testMessage03
          */
         ASN1T_TestMessage03 *_MessageTypes_testMessage03;
         /**
          * id: testMessage04
          */
         ASN1T_TestMessage04 *_MessageTypes_testMessage04;
         /**
          * id: testMessage05
          */
         ASN1T_TestMessage05 *_MessageTypes_testMessage05;
         /**
          * id: testMessage06
          */
         ASN1T_TestMessage06 *_MessageTypes_testMessage06;
         /**
          * id: testMessage07
          */
         ASN1T_TestMessage07 *_MessageTypes_testMessage07;
         /**
          * id: testMessage08
          */
         ASN1T_TestMessage08 *_MessageTypes_testMessage08;
         /**
          * id: testMessage09
          */
         ASN1T_TestMessage09 *_MessageTypes_testMessage09;
         /**
          * id: testMessage10
          */
         ASN1T_TestMessage10 *_MessageTypes_testMessage10;
         /**
          * id: testMessage11
          */
         ASN1T_TestMessage11 *_MessageTypes_testMessage11;
         /**
          * id: testMessage12
          */
         ASN1T_TestMessage12 *_MessageTypes_testMessage12;
         /**
          * id: testMessage13
          */
         ASN1T_TestMessage13 *_MessageTypes_testMessage13;
         /**
          * id: testMessage14
          */
         ASN1T_TestMessage14 *_MessageTypes_testMessage14;
         /**
          * id: testMessage15
          */
         ASN1T_TestMessage15 *_MessageTypes_testMessage15;

         ASN1TOpenType* extElem1;
      } u;
   } value;
   ASN1TSeqExt extElem1;
   ASN1T_MessageFrame ();
   ~ASN1T_MessageFrame ();
} ;

class EXTERN ASN1C_MessageFrame :
public ASN1CType
{
protected:
   ASN1T_MessageFrame& msgData;
public:
   /**
    * Control class: ASN1C_MessageFrame
    * Data class:    ASN1T_MessageFrame
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_MessageFrame (ASN1T_MessageFrame& data);

   /**
    * Control class: ASN1C_MessageFrame<br/>
    * Data class: ASN1T_MessageFrame<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_MessageFrame (OSRTMessageBufferIF& msgBuf, ASN1T_MessageFrame& data);

   virtual ~ASN1C_MessageFrame () {}

   /**
    * Data class: ASN1T_MessageFrame<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_MessageFrame.
    */
   inline ASN1T_MessageFrame& getData () { return msgData; }

   /**
    * Data class: ASN1T_MessageFrame<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_MessageFrame.
    */
   inline const ASN1T_MessageFrame& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             MessageFrame will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "MessageFrame");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
   void setTC_MessageTypes_basicSafetyMessage(ASN1T_BasicSafetyMessage *pvalue)
      ;
   void setTC_MessageTypes_mapData(ASN1T_MapData *pvalue);
   void setTC_MessageTypes_signalPhaseAndTimingMessage(ASN1T_SPAT *pvalue);
   void setTC_MessageTypes_commonSafetyRequest(ASN1T_CommonSafetyRequest 
      *pvalue);
   void setTC_MessageTypes_emergencyVehicleAlert(ASN1T_EmergencyVehicleAlert 
      *pvalue);
   void setTC_MessageTypes_intersectionCollision(ASN1T_IntersectionCollision 
      *pvalue);
   void setTC_MessageTypes_nmeaCorrections(ASN1T_NMEAcorrections *pvalue);
   void setTC_MessageTypes_probeDataManagement(ASN1T_ProbeDataManagement 
      *pvalue);
   void setTC_MessageTypes_probeVehicleData(ASN1T_ProbeVehicleData *pvalue);
   void setTC_MessageTypes_roadSideAlert(ASN1T_RoadSideAlert *pvalue);
   void setTC_MessageTypes_rtcmCorrections(ASN1T_RTCMcorrections *pvalue);
   void setTC_MessageTypes_signalRequestMessage(ASN1T_SignalRequestMessage 
      *pvalue);
   void setTC_MessageTypes_signalStatusMessage(ASN1T_SignalStatusMessage 
      *pvalue);
   void setTC_MessageTypes_travelerInformation(ASN1T_TravelerInformation 
      *pvalue);
   void setTC_MessageTypes_personalSafetyMessage(ASN1T_PersonalSafetyMessage 
      *pvalue);
   void setTC_MessageTypes_testMessage00(ASN1T_TestMessage00 *pvalue);
   void setTC_MessageTypes_testMessage01(ASN1T_TestMessage01 *pvalue);
   void setTC_MessageTypes_testMessage02(ASN1T_TestMessage02 *pvalue);
   void setTC_MessageTypes_testMessage03(ASN1T_TestMessage03 *pvalue);
   void setTC_MessageTypes_testMessage04(ASN1T_TestMessage04 *pvalue);
   void setTC_MessageTypes_testMessage05(ASN1T_TestMessage05 *pvalue);
   void setTC_MessageTypes_testMessage06(ASN1T_TestMessage06 *pvalue);
   void setTC_MessageTypes_testMessage07(ASN1T_TestMessage07 *pvalue);
   void setTC_MessageTypes_testMessage08(ASN1T_TestMessage08 *pvalue);
   void setTC_MessageTypes_testMessage09(ASN1T_TestMessage09 *pvalue);
   void setTC_MessageTypes_testMessage10(ASN1T_TestMessage10 *pvalue);
   void setTC_MessageTypes_testMessage11(ASN1T_TestMessage11 *pvalue);
   void setTC_MessageTypes_testMessage12(ASN1T_TestMessage12 *pvalue);
   void setTC_MessageTypes_testMessage13(ASN1T_TestMessage13 *pvalue);
   void setTC_MessageTypes_testMessage14(ASN1T_TestMessage14 *pvalue);
   void setTC_MessageTypes_testMessage15(ASN1T_TestMessage15 *pvalue);
private:
   ASN1C_MessageFrame& operator= (const ASN1C_MessageFrame&) {return *this;}
} ;

EXTERN int asn1PE_MessageFrame (OSCTXT* pctxt, ASN1T_MessageFrame* pvalue);

EXTERN int asn1PD_MessageFrame (OSCTXT* pctxt, ASN1T_MessageFrame* pvalue);

EXTERN int XmlEnc_MessageFrame (OSCTXT* pctxt, ASN1T_MessageFrame* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_MessageFrame (OSCTXT* pctxt, ASN1T_MessageFrame* pvalue);

EXTERN int asn1JsonEnc_MessageFrame (OSCTXT *pctxt, ASN1T_MessageFrame *pvalue);

EXTERN int asn1JsonDec_MessageFrame (OSCTXT *pctxt, ASN1T_MessageFrame *pvalue);

EXTERN int asn1PrtToStrm_MessageFrame (OSCTXT *pctxt, 
   const char* name, const ASN1T_MessageFrame* pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_basicSafetyMessage
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_BasicSafetyMessage *pvalue)
   ;

EXTERN void asn1SetTC_MessageFrame_MessageTypes_mapData
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_MapData *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_signalPhaseAndTimingMessage
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_SPAT *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_commonSafetyRequest
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_CommonSafetyRequest *pvalue
   );

EXTERN void asn1SetTC_MessageFrame_MessageTypes_emergencyVehicleAlert
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_EmergencyVehicleAlert 
   *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_intersectionCollision
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_IntersectionCollision 
   *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_nmeaCorrections
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_NMEAcorrections *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_probeDataManagement
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_ProbeDataManagement *pvalue
   );

EXTERN void asn1SetTC_MessageFrame_MessageTypes_probeVehicleData
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_ProbeVehicleData *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_roadSideAlert
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_RoadSideAlert *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_rtcmCorrections
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_RTCMcorrections *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_signalRequestMessage
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_SignalRequestMessage 
   *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_signalStatusMessage
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_SignalStatusMessage *pvalue
   );

EXTERN void asn1SetTC_MessageFrame_MessageTypes_travelerInformation
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TravelerInformation *pvalue
   );

EXTERN void asn1SetTC_MessageFrame_MessageTypes_personalSafetyMessage
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_PersonalSafetyMessage 
   *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage00
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage00 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage01
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage01 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage02
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage02 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage03
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage03 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage04
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage04 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage05
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage05 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage06
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage06 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage07
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage07 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage08
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage08 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage09
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage09 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage10
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage10 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage11
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage11 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage12
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage12 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage13
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage13 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage14
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage14 *pvalue);

EXTERN void asn1SetTC_MessageFrame_MessageTypes_testMessage15
   (OSCTXT* pctxt, ASN1T_MessageFrame* pElem, ASN1T_TestMessage15 *pvalue);

EXTERN ASN1T_MessageFrame* new_ASN1T_MessageFrame (ASN1CType& ccobj);

EXTERN int asn1Init_MessageFrame (ASN1T_MessageFrame* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_MessageFrame (OSCTXT *pctxt, ASN1T_MessageFrame* pvalue);

/**************************************************************/
/*                                                            */
/*  DDate                                                     */
/*                                                            */
/**************************************************************/
/*
DDate ::= SEQUENCE {
   year [0] DYear,
   month [1] DMonth,
   day [2] DDay
}
*/
struct EXTERN ASN1T_DDate : public ASN1TPDU {
   ASN1T_DYear year;
   ASN1T_DMonth month;
   ASN1T_DDay day;
} ;

class EXTERN ASN1C_DDate :
public ASN1CType
{
protected:
   ASN1T_DDate& msgData;
public:
   /**
    * Control class: ASN1C_DDate
    * Data class:    ASN1T_DDate
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_DDate (ASN1T_DDate& data);

   /**
    * Control class: ASN1C_DDate<br/>
    * Data class: ASN1T_DDate<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_DDate (OSRTMessageBufferIF& msgBuf, ASN1T_DDate& data);

   virtual ~ASN1C_DDate () {}

   /**
    * Data class: ASN1T_DDate<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_DDate.
    */
   inline ASN1T_DDate& getData () { return msgData; }

   /**
    * Data class: ASN1T_DDate<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_DDate.
    */
   inline const ASN1T_DDate& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             DDate will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "DDate");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_DDate& operator= (const ASN1C_DDate&) {return *this;}
} ;

EXTERN int asn1PE_DDate (OSCTXT* pctxt, ASN1T_DDate* pvalue);

EXTERN int asn1PD_DDate (OSCTXT* pctxt, ASN1T_DDate* pvalue);

EXTERN int XmlEnc_DDate (OSCTXT* pctxt, ASN1T_DDate* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DDate (OSCTXT* pctxt, ASN1T_DDate* pvalue);

EXTERN int asn1JsonEnc_DDate (OSCTXT *pctxt, ASN1T_DDate *pvalue);

EXTERN int asn1JsonDec_DDate (OSCTXT *pctxt, ASN1T_DDate *pvalue);

EXTERN int asn1PrtToStrm_DDate (OSCTXT *pctxt, 
   const char* name, const ASN1T_DDate* pvalue);

EXTERN ASN1T_DDate* new_ASN1T_DDate (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DFullTime                                                 */
/*                                                            */
/**************************************************************/
/*
DFullTime ::= SEQUENCE {
   year [0] DYear,
   month [1] DMonth,
   day [2] DDay,
   hour [3] DHour,
   minute [4] DMinute
}
*/
struct EXTERN ASN1T_DFullTime : public ASN1TPDU {
   ASN1T_DYear year;
   ASN1T_DMonth month;
   ASN1T_DDay day;
   ASN1T_DHour hour;
   ASN1T_DMinute minute;
} ;

class EXTERN ASN1C_DFullTime :
public ASN1CType
{
protected:
   ASN1T_DFullTime& msgData;
public:
   /**
    * Control class: ASN1C_DFullTime
    * Data class:    ASN1T_DFullTime
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_DFullTime (ASN1T_DFullTime& data);

   /**
    * Control class: ASN1C_DFullTime<br/>
    * Data class: ASN1T_DFullTime<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_DFullTime (OSRTMessageBufferIF& msgBuf, ASN1T_DFullTime& data);

   virtual ~ASN1C_DFullTime () {}

   /**
    * Data class: ASN1T_DFullTime<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_DFullTime.
    */
   inline ASN1T_DFullTime& getData () { return msgData; }

   /**
    * Data class: ASN1T_DFullTime<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_DFullTime.
    */
   inline const ASN1T_DFullTime& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             DFullTime will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "DFullTime");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_DFullTime& operator= (const ASN1C_DFullTime&) {return *this;}
} ;

EXTERN int asn1PE_DFullTime (OSCTXT* pctxt, ASN1T_DFullTime* pvalue);

EXTERN int asn1PD_DFullTime (OSCTXT* pctxt, ASN1T_DFullTime* pvalue);

EXTERN int XmlEnc_DFullTime (OSCTXT* pctxt, ASN1T_DFullTime* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DFullTime (OSCTXT* pctxt, ASN1T_DFullTime* pvalue);

EXTERN int asn1JsonEnc_DFullTime (OSCTXT *pctxt, ASN1T_DFullTime *pvalue);

EXTERN int asn1JsonDec_DFullTime (OSCTXT *pctxt, ASN1T_DFullTime *pvalue);

EXTERN int asn1PrtToStrm_DFullTime (OSCTXT *pctxt, 
   const char* name, const ASN1T_DFullTime* pvalue);

EXTERN ASN1T_DFullTime* new_ASN1T_DFullTime (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DMonthDay                                                 */
/*                                                            */
/**************************************************************/
/*
DMonthDay ::= SEQUENCE {
   month [0] DMonth,
   day [1] DDay
}
*/
struct EXTERN ASN1T_DMonthDay : public ASN1TPDU {
   ASN1T_DMonth month;
   ASN1T_DDay day;
} ;

class EXTERN ASN1C_DMonthDay :
public ASN1CType
{
protected:
   ASN1T_DMonthDay& msgData;
public:
   /**
    * Control class: ASN1C_DMonthDay
    * Data class:    ASN1T_DMonthDay
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_DMonthDay (ASN1T_DMonthDay& data);

   /**
    * Control class: ASN1C_DMonthDay<br/>
    * Data class: ASN1T_DMonthDay<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_DMonthDay (OSRTMessageBufferIF& msgBuf, ASN1T_DMonthDay& data);

   virtual ~ASN1C_DMonthDay () {}

   /**
    * Data class: ASN1T_DMonthDay<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_DMonthDay.
    */
   inline ASN1T_DMonthDay& getData () { return msgData; }

   /**
    * Data class: ASN1T_DMonthDay<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_DMonthDay.
    */
   inline const ASN1T_DMonthDay& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             DMonthDay will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "DMonthDay");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_DMonthDay& operator= (const ASN1C_DMonthDay&) {return *this;}
} ;

EXTERN int asn1PE_DMonthDay (OSCTXT* pctxt, ASN1T_DMonthDay* pvalue);

EXTERN int asn1PD_DMonthDay (OSCTXT* pctxt, ASN1T_DMonthDay* pvalue);

EXTERN int XmlEnc_DMonthDay (OSCTXT* pctxt, ASN1T_DMonthDay* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DMonthDay (OSCTXT* pctxt, ASN1T_DMonthDay* pvalue);

EXTERN int asn1JsonEnc_DMonthDay (OSCTXT *pctxt, ASN1T_DMonthDay *pvalue);

EXTERN int asn1JsonDec_DMonthDay (OSCTXT *pctxt, ASN1T_DMonthDay *pvalue);

EXTERN int asn1PrtToStrm_DMonthDay (OSCTXT *pctxt, 
   const char* name, const ASN1T_DMonthDay* pvalue);

EXTERN ASN1T_DMonthDay* new_ASN1T_DMonthDay (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DTime                                                     */
/*                                                            */
/**************************************************************/
/*
DTime ::= SEQUENCE {
   hour [0] DHour,
   minute [1] DMinute,
   second [2] DSecond,
   offset [3] DOffset OPTIONAL -- time zone
}
*/
struct EXTERN ASN1T_DTime : public ASN1TPDU {
   struct {
      unsigned offsetPresent : 1;
   } m;
   ASN1T_DHour hour;
   ASN1T_DMinute minute;
   ASN1T_DSecond second;
   ASN1T_DOffset offset;
   ASN1T_DTime ();
} ;

class EXTERN ASN1C_DTime :
public ASN1CType
{
protected:
   ASN1T_DTime& msgData;
public:
   /**
    * Control class: ASN1C_DTime
    * Data class:    ASN1T_DTime
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_DTime (ASN1T_DTime& data);

   /**
    * Control class: ASN1C_DTime<br/>
    * Data class: ASN1T_DTime<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_DTime (OSRTMessageBufferIF& msgBuf, ASN1T_DTime& data);

   virtual ~ASN1C_DTime () {}

   /**
    * Data class: ASN1T_DTime<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_DTime.
    */
   inline ASN1T_DTime& getData () { return msgData; }

   /**
    * Data class: ASN1T_DTime<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_DTime.
    */
   inline const ASN1T_DTime& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             DTime will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "DTime");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_DTime& operator= (const ASN1C_DTime&) {return *this;}
} ;

EXTERN int asn1PE_DTime (OSCTXT* pctxt, ASN1T_DTime* pvalue);

EXTERN int asn1PD_DTime (OSCTXT* pctxt, ASN1T_DTime* pvalue);

EXTERN int XmlEnc_DTime (OSCTXT* pctxt, ASN1T_DTime* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DTime (OSCTXT* pctxt, ASN1T_DTime* pvalue);

EXTERN int asn1JsonEnc_DTime (OSCTXT *pctxt, ASN1T_DTime *pvalue);

EXTERN int asn1JsonDec_DTime (OSCTXT *pctxt, ASN1T_DTime *pvalue);

EXTERN int asn1PrtToStrm_DTime (OSCTXT *pctxt, 
   const char* name, const ASN1T_DTime* pvalue);

EXTERN ASN1T_DTime* new_ASN1T_DTime (ASN1CType& ccobj);

EXTERN int asn1Init_DTime (ASN1T_DTime* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  DYearMonth                                                */
/*                                                            */
/**************************************************************/
/*
DYearMonth ::= SEQUENCE {
   year [0] DYear,
   month [1] DMonth
}
*/
struct EXTERN ASN1T_DYearMonth : public ASN1TPDU {
   ASN1T_DYear year;
   ASN1T_DMonth month;
} ;

class EXTERN ASN1C_DYearMonth :
public ASN1CType
{
protected:
   ASN1T_DYearMonth& msgData;
public:
   /**
    * Control class: ASN1C_DYearMonth
    * Data class:    ASN1T_DYearMonth
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_DYearMonth (ASN1T_DYearMonth& data);

   /**
    * Control class: ASN1C_DYearMonth<br/>
    * Data class: ASN1T_DYearMonth<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_DYearMonth (OSRTMessageBufferIF& msgBuf, ASN1T_DYearMonth& data);

   virtual ~ASN1C_DYearMonth () {}

   /**
    * Data class: ASN1T_DYearMonth<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_DYearMonth.
    */
   inline ASN1T_DYearMonth& getData () { return msgData; }

   /**
    * Data class: ASN1T_DYearMonth<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_DYearMonth.
    */
   inline const ASN1T_DYearMonth& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             DYearMonth will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "DYearMonth");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_DYearMonth& operator= (const ASN1C_DYearMonth&) {return *this;}
} ;

EXTERN int asn1PE_DYearMonth (OSCTXT* pctxt, ASN1T_DYearMonth* pvalue);

EXTERN int asn1PD_DYearMonth (OSCTXT* pctxt, ASN1T_DYearMonth* pvalue);

EXTERN int XmlEnc_DYearMonth (OSCTXT* pctxt, ASN1T_DYearMonth* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DYearMonth (OSCTXT* pctxt, ASN1T_DYearMonth* pvalue);

EXTERN int asn1JsonEnc_DYearMonth (OSCTXT *pctxt, ASN1T_DYearMonth *pvalue);

EXTERN int asn1JsonDec_DYearMonth (OSCTXT *pctxt, ASN1T_DYearMonth *pvalue);

EXTERN int asn1PrtToStrm_DYearMonth (OSCTXT *pctxt, 
   const char* name, const ASN1T_DYearMonth* pvalue);

EXTERN ASN1T_DYearMonth* new_ASN1T_DYearMonth (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VerticalOffset_regional                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VerticalOffset'
*/
struct EXTERN ASN1T_VerticalOffset_regional {
   ASN1T_RegionId regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_VerticalOffset_regional (OSCTXT* pctxt, ASN1T_VerticalOffset_regional* pvalue);

EXTERN int asn1PD_VerticalOffset_regional (OSCTXT* pctxt, ASN1T_VerticalOffset_regional* pvalue);

EXTERN int XmlEnc_VerticalOffset_regional (OSCTXT* pctxt, 
   ASN1T_VerticalOffset_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VerticalOffset_regional (OSCTXT* pctxt, 
   ASN1T_VerticalOffset_regional* pvalue);

EXTERN int asn1JsonEnc_VerticalOffset_regional (OSCTXT *pctxt, ASN1T_VerticalOffset_regional *pvalue);

EXTERN int asn1JsonDec_VerticalOffset_regional (OSCTXT *pctxt, ASN1T_VerticalOffset_regional *pvalue);

EXTERN int asn1PrtToStrm_VerticalOffset_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_VerticalOffset_regional* pvalue);

EXTERN ASN1T_VerticalOffset_regional* 
   new_ASN1T_VerticalOffset_regional (ASN1CType& ccobj);

EXTERN int asn1Init_VerticalOffset_regional (ASN1T_VerticalOffset_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VerticalOffset_regional (OSCTXT *pctxt, 
   ASN1T_VerticalOffset_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  VerticalOffset                                            */
/*                                                            */
/**************************************************************/
/*
VerticalOffset ::= CHOICE {
   -- Vertical Offset
   -- All below in steps of 10cm above or below the reference ellipsoid
   offset1 [0] VertOffset-B07, -- with a range of +-   6.3 meters vertical
   offset2 [1] VertOffset-B08, -- with a range of +-  12.7 meters vertical
   offset3 [2] VertOffset-B09, -- with a range of +-  25.5 meters vertical
   offset4 [3] VertOffset-B10, -- with a range of +-  51.1 meters vertical
   offset5 [4] VertOffset-B11, -- with a range of +- 102.3 meters vertical
   offset6 [5] VertOffset-B12, -- with a range of +- 204.7 meters vertical
   elevation [6] Elevation, -- with a range of -409.5 to + 6143.9 meters
   regional [7] SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({REGION.Reg-VerticalOffset}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({REGION.Reg-VerticalOffset}{@regionId})
   }
}
*/
/* Choice tag constants */

#define T_VerticalOffset_offset1        1
#define T_VerticalOffset_offset2        2
#define T_VerticalOffset_offset3        3
#define T_VerticalOffset_offset4        4
#define T_VerticalOffset_offset5        5
#define T_VerticalOffset_offset6        6
#define T_VerticalOffset_elevation      7
#define T_VerticalOffset_regional       8

struct EXTERN ASN1T_VerticalOffset : public ASN1TPDU {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_VertOffset_B07 offset1;
      /* t = 2 */
      ASN1T_VertOffset_B08 offset2;
      /* t = 3 */
      ASN1T_VertOffset_B09 offset3;
      /* t = 4 */
      ASN1T_VertOffset_B10 offset4;
      /* t = 5 */
      ASN1T_VertOffset_B11 offset5;
      /* t = 6 */
      ASN1T_VertOffset_B12 offset6;
      /* t = 7 */
      ASN1T_Elevation elevation;
      /* t = 8 */
      ASN1T_VerticalOffset_regional *regional;
   } u;
   ASN1T_VerticalOffset () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
   ~ASN1T_VerticalOffset ();
} ;

class EXTERN ASN1C_VerticalOffset :
public ASN1CType
{
protected:
   ASN1T_VerticalOffset& msgData;
public:
   /**
    * Control class: ASN1C_VerticalOffset
    * Data class:    ASN1T_VerticalOffset
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VerticalOffset (ASN1T_VerticalOffset& data);

   /**
    * Control class: ASN1C_VerticalOffset<br/>
    * Data class: ASN1T_VerticalOffset<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VerticalOffset (OSRTMessageBufferIF& msgBuf
      , ASN1T_VerticalOffset& data);

   virtual ~ASN1C_VerticalOffset () {}

   /**
    * Data class: ASN1T_VerticalOffset<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_VerticalOffset.
    */
   inline ASN1T_VerticalOffset& getData () { return msgData; }

   /**
    * Data class: ASN1T_VerticalOffset<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_VerticalOffset.
    */
   inline const ASN1T_VerticalOffset& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             VerticalOffset will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "VerticalOffset");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_VerticalOffset& operator= (const ASN1C_VerticalOffset&) {return *this;}
} ;

EXTERN int asn1PE_VerticalOffset (OSCTXT* pctxt, ASN1T_VerticalOffset* pvalue);

EXTERN int asn1PD_VerticalOffset (OSCTXT* pctxt, ASN1T_VerticalOffset* pvalue);

EXTERN int XmlEnc_VerticalOffset (OSCTXT* pctxt, ASN1T_VerticalOffset* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VerticalOffset (OSCTXT* pctxt, ASN1T_VerticalOffset* pvalue)
   ;

EXTERN int asn1JsonEnc_VerticalOffset (OSCTXT *pctxt, ASN1T_VerticalOffset *pvalue);

EXTERN int asn1JsonDec_VerticalOffset (OSCTXT *pctxt, ASN1T_VerticalOffset *pvalue);

EXTERN int asn1PrtToStrm_VerticalOffset (OSCTXT *pctxt, 
   const char* name, const ASN1T_VerticalOffset* pvalue);

EXTERN ASN1T_VerticalOffset* new_ASN1T_VerticalOffset (ASN1CType& ccobj);

EXTERN int asn1Init_VerticalOffset (ASN1T_VerticalOffset* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VerticalOffset (OSCTXT *pctxt, ASN1T_VerticalOffset* pvalue);

/**
 * Global element functions.  These functions encode or decode complete
 * XML documents.  They are generated for XSD global elements and/or
 * ASN.1 type definitions that are either:
 *
 * 1) not referenced by any other types, or
 * 2) explicitly declared to be a PDU using the -pdu command line
 *    option, or
 * 3) explicitly declared to be a PDU using the <isPDU/> 
 *    configuration file element.
 */
/* Value definitions */

#define ASN1V_vehicleSafetyExt 0
#define ASN1V_specialVehicleExt 1
#define ASN1V_supplementalVehicleExt 2
#define ASN1V_unknownVehicleClass 0
#define ASN1V_specialVehicleClass 1
#define ASN1V_passenger_Vehicle_TypeUnknown 10
#define ASN1V_passenger_Vehicle_TypeOther 11
#define ASN1V_lightTruck_Vehicle_TypeUnknown 20
#define ASN1V_lightTruck_Vehicle_TypeOther 21
#define ASN1V_truck_Vehicle_TypeUnknown 25
#define ASN1V_truck_Vehicle_TypeOther 26
#define ASN1V_truck_axleCnt2 27
#define ASN1V_truck_axleCnt3 28
#define ASN1V_truck_axleCnt4 29
#define ASN1V_truck_axleCnt4Trailer 30
#define ASN1V_truck_axleCnt5Trailer 31
#define ASN1V_truck_axleCnt6Trailer 32
#define ASN1V_truck_axleCnt5MultiTrailer 33
#define ASN1V_truck_axleCnt6MultiTrailer 34
#define ASN1V_truck_axleCnt7MultiTrailer 35
#define ASN1V_motorcycle_TypeUnknown 40
#define ASN1V_motorcycle_TypeOther 41
#define ASN1V_motorcycle_Cruiser_Standard 42
#define ASN1V_motorcycle_SportUnclad 43
#define ASN1V_motorcycle_SportTouring 44
#define ASN1V_motorcycle_SuperSport 45
#define ASN1V_motorcycle_Touring 46
#define ASN1V_motorcycle_Trike 47
#define ASN1V_motorcycle_wPassengers 48
#define ASN1V_transit_TypeUnknown 50
#define ASN1V_transit_TypeOther 51
#define ASN1V_transit_BRT 52
#define ASN1V_transit_ExpressBus 53
#define ASN1V_transit_LocalBus 54
#define ASN1V_transit_SchoolBus 55
#define ASN1V_transit_FixedGuideway 56
#define ASN1V_transit_Paratransit 57
#define ASN1V_transit_Paratransit_Ambulance 58
#define ASN1V_emergency_TypeUnknown 60
#define ASN1V_emergency_TypeOther 61
#define ASN1V_emergency_Fire_Light_Vehicle 62
#define ASN1V_emergency_Fire_Heavy_Vehicle 63
#define ASN1V_emergency_Fire_Paramedic_Vehicle 64
#define ASN1V_emergency_Fire_Ambulance_Vehicle 65
#define ASN1V_emergency_Police_Light_Vehicle 66
#define ASN1V_emergency_Police_Heavy_Vehicle 67
#define ASN1V_emergency_Other_Responder 68
#define ASN1V_emergency_Other_Ambulance 69
#define ASN1V_otherTraveler_TypeUnknown 80
#define ASN1V_otherTraveler_TypeOther 81
#define ASN1V_otherTraveler_Pedestrian 82
#define ASN1V_otherTraveler_Visually_Disabled 83
#define ASN1V_otherTraveler_Physically_Disabled 84
#define ASN1V_otherTraveler_Bicycle 85
#define ASN1V_otherTraveler_Vulnerable_Roadworker 86
#define ASN1V_infrastructure_TypeUnknown 90
#define ASN1V_infrastructure_Fixed 91
#define ASN1V_infrastructure_Movable 92
#define ASN1V_equipped_CargoTrailer 93
#define ASN1V_reservedMessageId_D 0
#define ASN1V_alaCarteMessage_D 1
#define ASN1V_basicSafetyMessage_D 2
#define ASN1V_basicSafetyMessageVerbose_D 3
#define ASN1V_commonSafetyRequest_D 4
#define ASN1V_emergencyVehicleAlert_D 5
#define ASN1V_intersectionCollision_D 6
#define ASN1V_mapData_D 7
#define ASN1V_nmeaCorrections_D 8
#define ASN1V_probeDataManagement_D 9
#define ASN1V_probeVehicleData_D 10
#define ASN1V_roadSideAlert_D 11
#define ASN1V_rtcmCorrections_D 12
#define ASN1V_signalPhaseAndTimingMessage_D 13
#define ASN1V_signalRequestMessage_D 14
#define ASN1V_signalStatusMessage_D 15
#define ASN1V_travelerInformation_D 16
#define ASN1V_uperFrame_D 17
#define ASN1V_mapData 18
#define ASN1V_signalPhaseAndTimingMessage 19
#define ASN1V_basicSafetyMessage 20
#define ASN1V_commonSafetyRequest 21
#define ASN1V_emergencyVehicleAlert 22
#define ASN1V_intersectionCollision 23
#define ASN1V_nmeaCorrections 24
#define ASN1V_probeDataManagement 25
#define ASN1V_probeVehicleData 26
#define ASN1V_roadSideAlert 27
#define ASN1V_rtcmCorrections 28
#define ASN1V_signalRequestMessage 29
#define ASN1V_signalStatusMessage 30
#define ASN1V_travelerInformation 31
#define ASN1V_personalSafetyMessage 32
#define ASN1V_testMessage00 240
#define ASN1V_testMessage01 241
#define ASN1V_testMessage02 242
#define ASN1V_testMessage03 243
#define ASN1V_testMessage04 244
#define ASN1V_testMessage05 245
#define ASN1V_testMessage06 246
#define ASN1V_testMessage07 247
#define ASN1V_testMessage08 248
#define ASN1V_testMessage09 249
#define ASN1V_testMessage10 250
#define ASN1V_testMessage11 251
#define ASN1V_testMessage12 252
#define ASN1V_testMessage13 253
#define ASN1V_testMessage14 254
#define ASN1V_testMessage15 255
#define ASN1V_unknownFuel 0
#define ASN1V_gasoline 1
#define ASN1V_ethanol 2
#define ASN1V_diesel 3
#define ASN1V_electric 4
#define ASN1V_hybrid 5
#define ASN1V_hydrogen 6
#define ASN1V_natGasLiquid 7
#define ASN1V_natGasComp 8
#define ASN1V_propane 9
#define ASN1V_noRegion 0
#define ASN1V_addGrpA 1
#define ASN1V_addGrpB 2
#define ASN1V_addGrpC 3

#endif
