/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).
 */
#ifndef EFCDSRCAPPLICATION_H
#define EFCDSRCAPPLICATION_H

#include <stdio.h>
#include <stdlib.h>
#include "rtpersrc/asn1PerCppTypes.h"
#include "rtsrc/asn1CppTypes.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtsrc/asn1type.h"
#include "rtxmlsrc/asn1xml.h"
#include "rtxmlsrc/rtXmlCppMsgBuf.h"
#include "rtsrc/asn1type.h"
#include "rtjsonsrc/asn1json.h"
#include "rtjsonsrc/rtJsonCppMsgBuf.h"

#include "rtsrc/ASN1CBitStr.h"
#include "AVIAEINumberingAndDataStructures.h"
#include "EfcDsrcGeneric.h"

/**
 * Header file for ASN.1 module EfcDsrcApplication
 */
/**************************************************************/
/*                                                            */
/*  Provider                                                  */
/*                                                            */
/**************************************************************/
/*
 Personal account number structure � according to ISO/IEC 7812-1
 Issuer identifier number (�BIN�)
 Major industry identifier (MII, 1 binary coded decimal, BCD)
 0 : reserved for future use by ISO/TC68
 1 : airline sector
 2 : extended airline sector
 3 : travel and tourism sector
 4 : financial banking sector
 5 : financial banking sector
 6 : commerce and banking sector
 7 : petrol industry sector
 8 : telecommunication sector
 9 : reserved for national use
 Issuer identifier (5 BCD in the second edition of ISO/IEC 7812-1)
 Account number (max 12 BCD)
 Control digit (1 BCD)
 Padding bits, set to 1'B, in order to accomplish a
 total length of 10 octets.
Provider ::= SEQUENCE {
   countryCode [0] CountryCode,
   providerIdentifier [1] IssuerIdentifier
}
*/
struct EXTERN ASN1T_Provider {
   ASN1T_CountryCode countryCode;
   ASN1T_IssuerIdentifier providerIdentifier;
} ;

EXTERN int asn1PE_Provider (OSCTXT* pctxt, ASN1T_Provider* pvalue);

EXTERN int asn1PD_Provider (OSCTXT* pctxt, ASN1T_Provider* pvalue);

EXTERN int XmlEnc_Provider (OSCTXT* pctxt, ASN1T_Provider* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Provider (OSCTXT* pctxt, ASN1T_Provider* pvalue);

EXTERN int asn1JsonEnc_Provider (OSCTXT *pctxt, ASN1T_Provider *pvalue);

EXTERN int asn1JsonDec_Provider (OSCTXT *pctxt, ASN1T_Provider *pvalue);

EXTERN int asn1PrtToStrm_Provider (OSCTXT *pctxt, 
   const char* name, const ASN1T_Provider* pvalue);

EXTERN ASN1T_Provider* new_ASN1T_Provider (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  EuroValue                                                 */
/*                                                            */
/**************************************************************/
/*
EuroValue ::= ENUMERATED { noEntry(0), euro-1(1), euro-2(2), euro-3(3), euro-4(4), euro-5(5), euro-6(6), reservedForUse1(7), reservedForUse2(8), reservedForUse3(9), reservedForUse4(10), reservedForUse5(11), reservedForUse6(12), reservedForUse7(13), reservedForUse8(14), eev(15) }
   4 bits, EURO-Classes as defined in EC directive 88/77/EEC, annex 1

*/
struct EXTERN EuroValue {
   enum Root {
      noEntry = 0,
      euro_1 = 1,
      euro_2 = 2,
      euro_3 = 3,
      euro_4 = 4,
      euro_5 = 5,
      euro_6 = 6,
      reservedForUse1 = 7,
      reservedForUse2 = 8,
      reservedForUse3 = 9,
      reservedForUse4 = 10,
      reservedForUse5 = 11,
      reservedForUse6 = 12,
      reservedForUse7 = 13,
      reservedForUse8 = 14,
      eev = 15
   } ;
} ;

typedef OSUINT32 ASN1T_EuroValue;

EXTERN int asn1PE_EuroValue (OSCTXT* pctxt, ASN1T_EuroValue value);

EXTERN int asn1PD_EuroValue (OSCTXT* pctxt, ASN1T_EuroValue* pvalue);

EXTERN int XmlEnc_EuroValue (OSCTXT* pctxt, ASN1T_EuroValue value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EuroValue (OSCTXT* pctxt, ASN1T_EuroValue* pvalue);

EXTERN int asn1JsonEnc_EuroValue (OSCTXT *pctxt, ASN1T_EuroValue *pvalue);

EXTERN int asn1JsonDec_EuroValue (OSCTXT *pctxt, ASN1T_EuroValue *pvalue);

EXTERN int asn1PrtToStrm_EuroValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_EuroValue* pvalue);

EXTERN ASN1T_EuroValue* new_ASN1T_EuroValue (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_EuroValue_ENUMTAB[];
#define ASN1T_EuroValue_ENUMTABSIZE 16

EXTERN const OSUTF8CHAR* ASN1T_EuroValue_ToString (OSINT32 value);

EXTERN int ASN1T_EuroValue_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_EuroValue* pvalue);

EXTERN int ASN1T_EuroValue_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_EuroValue* pvalue);

/**************************************************************/
/*                                                            */
/*  CopValue                                                  */
/*                                                            */
/**************************************************************/
/*
 and in 91/542/EEC, 96/1/EC, 1999/96/EC, 2001/27/EC, regulation No 595/2009
 and for EEV in Section 6.2.1 of Annex I in EC directive 2005/55/EC
 EUR-Class VI as defined in Regulation (EC) No 595/2009
CopValue ::= ENUMERATED { noEntry(0), co2class1(1), co2class2(2), co2class3(3), co2class4(4), co2class5(5), co2class6(6), co2class7(7), reservedforUse(8) }
   4 bits, reserved for carbon dioxide pollution values as defined in

*/
struct EXTERN CopValue {
   enum Root {
      noEntry = 0,
      co2class1 = 1,
      co2class2 = 2,
      co2class3 = 3,
      co2class4 = 4,
      co2class5 = 5,
      co2class6 = 6,
      co2class7 = 7,
      reservedforUse = 8
   } ;
} ;

typedef OSUINT32 ASN1T_CopValue;

EXTERN int asn1PE_CopValue (OSCTXT* pctxt, ASN1T_CopValue value);

EXTERN int asn1PD_CopValue (OSCTXT* pctxt, ASN1T_CopValue* pvalue);

EXTERN int XmlEnc_CopValue (OSCTXT* pctxt, ASN1T_CopValue value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CopValue (OSCTXT* pctxt, ASN1T_CopValue* pvalue);

EXTERN int asn1JsonEnc_CopValue (OSCTXT *pctxt, ASN1T_CopValue *pvalue);

EXTERN int asn1JsonDec_CopValue (OSCTXT *pctxt, ASN1T_CopValue *pvalue);

EXTERN int asn1PrtToStrm_CopValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_CopValue* pvalue);

EXTERN ASN1T_CopValue* new_ASN1T_CopValue (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_CopValue_ENUMTAB[];
#define ASN1T_CopValue_ENUMTABSIZE 9

EXTERN const OSUTF8CHAR* ASN1T_CopValue_ToString (OSINT32 value);

EXTERN int ASN1T_CopValue_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_CopValue* pvalue);

EXTERN int ASN1T_CopValue_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_CopValue* pvalue);

/**************************************************************/
/*                                                            */
/*  EnvironmentalCharacteristics                              */
/*                                                            */
/**************************************************************/
/*
EnvironmentalCharacteristics ::= SEQUENCE {
   euroValue [0] EuroValue,
   copValue [1] CopValue
}
*/
struct EXTERN ASN1T_EnvironmentalCharacteristics {
   ASN1T_EuroValue euroValue;
   ASN1T_CopValue copValue;
} ;

EXTERN int asn1PE_EnvironmentalCharacteristics (OSCTXT* pctxt, ASN1T_EnvironmentalCharacteristics* pvalue);

EXTERN int asn1PD_EnvironmentalCharacteristics (OSCTXT* pctxt, ASN1T_EnvironmentalCharacteristics* pvalue);

EXTERN int XmlEnc_EnvironmentalCharacteristics (OSCTXT* pctxt, 
   ASN1T_EnvironmentalCharacteristics* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EnvironmentalCharacteristics (OSCTXT* pctxt, 
   ASN1T_EnvironmentalCharacteristics* pvalue);

EXTERN int asn1JsonEnc_EnvironmentalCharacteristics (OSCTXT *pctxt, ASN1T_EnvironmentalCharacteristics *pvalue);

EXTERN int asn1JsonDec_EnvironmentalCharacteristics (OSCTXT *pctxt, ASN1T_EnvironmentalCharacteristics *pvalue);

EXTERN int asn1PrtToStrm_EnvironmentalCharacteristics (OSCTXT *pctxt, 
   const char* name, const ASN1T_EnvironmentalCharacteristics* pvalue);

EXTERN ASN1T_EnvironmentalCharacteristics* 
   new_ASN1T_EnvironmentalCharacteristics (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  EngineCharacteristics                                     */
/*                                                            */
/**************************************************************/
/*
 EC directive 2003/127/EC'
EngineCharacteristics ::= INTEGER { noEntry(0), noEngine(1), petrolUnleaded(2), petrolLeaded(3), diesel(4), lPG(5), battery(6), solar(7), hybrid(8), hydrogen(9) } (0..255)
*/
struct EXTERN EngineCharacteristics {
   enum Root {
      noEntry = 0,
      noEngine = 1,
      petrolUnleaded = 2,
      petrolLeaded = 3,
      diesel = 4,
      lPG = 5,
      battery = 6,
      solar = 7,
      hybrid = 8,
      hydrogen = 9
   } ;
} ;

typedef OSUINT8 ASN1T_EngineCharacteristics;

EXTERN int asn1PE_EngineCharacteristics (OSCTXT* pctxt, ASN1T_EngineCharacteristics value);

EXTERN int asn1PD_EngineCharacteristics (OSCTXT* pctxt, ASN1T_EngineCharacteristics* pvalue);

EXTERN int XmlEnc_EngineCharacteristics (OSCTXT* pctxt, 
   ASN1T_EngineCharacteristics value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EngineCharacteristics (OSCTXT* pctxt, 
   ASN1T_EngineCharacteristics* pvalue);

EXTERN int asn1JsonEnc_EngineCharacteristics (OSCTXT *pctxt, ASN1T_EngineCharacteristics *pvalue);

EXTERN int asn1JsonDec_EngineCharacteristics (OSCTXT *pctxt, ASN1T_EngineCharacteristics *pvalue);

EXTERN int asn1PrtToStrm_EngineCharacteristics (OSCTXT *pctxt, 
   const char* name, const ASN1T_EngineCharacteristics* pvalue);

EXTERN ASN1T_EngineCharacteristics* 
   new_ASN1T_EngineCharacteristics (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Int1                                                      */
/*                                                            */
/**************************************************************/
/*
Int1 ::= INTEGER (0..255)
*/
typedef OSUINT8 ASN1T_Int1;

class EXTERN ASN1C_Int1 :
public ASN1CType
{
protected:
   ASN1T_Int1& msgData;
public:
   /**
    * Control class: ASN1C_Int1
    * Data class:    ASN1T_Int1
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_Int1 (ASN1T_Int1& data);

   /**
    * Control class: ASN1C_Int1<br/>
    * Data class: ASN1T_Int1<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_Int1 (OSRTMessageBufferIF& msgBuf, ASN1T_Int1& data);

   virtual ~ASN1C_Int1 () {}

   /**
    * Data class: ASN1T_Int1<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_Int1.
    */
   inline ASN1T_Int1& getData () { return msgData; }

   /**
    * Data class: ASN1T_Int1<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_Int1.
    */
   inline const ASN1T_Int1& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             Int1 will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "Int1");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_Int1& operator= (const ASN1C_Int1&) {return *this;}
} ;

EXTERN int asn1PE_Int1 (OSCTXT* pctxt, ASN1T_Int1 value);

EXTERN int asn1PD_Int1 (OSCTXT* pctxt, ASN1T_Int1* pvalue);

EXTERN int XmlEnc_Int1 (OSCTXT* pctxt, ASN1T_Int1 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Int1 (OSCTXT* pctxt, ASN1T_Int1* pvalue);

EXTERN int asn1JsonEnc_Int1 (OSCTXT *pctxt, ASN1T_Int1 *pvalue);

EXTERN int asn1JsonDec_Int1 (OSCTXT *pctxt, ASN1T_Int1 *pvalue);

EXTERN int asn1PrtToStrm_Int1 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Int1* pvalue);

EXTERN ASN1T_Int1* new_ASN1T_Int1 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleDimensions                                         */
/*                                                            */
/**************************************************************/
/*
VehicleDimensions ::= SEQUENCE {
   vehicleLengthOverall [0] Int1,
   vehicleHeigthOverall [1] Int1,
   vehicleWidthOverall [2] Int1
}
*/
struct EXTERN ASN1T_VehicleDimensions {
   ASN1T_Int1 vehicleLengthOverall;
   ASN1T_Int1 vehicleHeigthOverall;
   ASN1T_Int1 vehicleWidthOverall;
} ;

EXTERN int asn1PE_VehicleDimensions (OSCTXT* pctxt, ASN1T_VehicleDimensions* pvalue);

EXTERN int asn1PD_VehicleDimensions (OSCTXT* pctxt, ASN1T_VehicleDimensions* pvalue);

EXTERN int XmlEnc_VehicleDimensions (OSCTXT* pctxt, 
   ASN1T_VehicleDimensions* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleDimensions (OSCTXT* pctxt, 
   ASN1T_VehicleDimensions* pvalue);

EXTERN int asn1JsonEnc_VehicleDimensions (OSCTXT *pctxt, ASN1T_VehicleDimensions *pvalue);

EXTERN int asn1JsonDec_VehicleDimensions (OSCTXT *pctxt, ASN1T_VehicleDimensions *pvalue);

EXTERN int asn1PrtToStrm_VehicleDimensions (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleDimensions* pvalue);

EXTERN ASN1T_VehicleDimensions* new_ASN1T_VehicleDimensions (ASN1CType& ccobj)
   ;

/**************************************************************/
/*                                                            */
/*  Int2                                                      */
/*                                                            */
/**************************************************************/
/*
Int2 ::= INTEGER (0..65535)
*/
typedef OSUINT16 ASN1T_Int2;

class EXTERN ASN1C_Int2 :
public ASN1CType
{
protected:
   ASN1T_Int2& msgData;
public:
   /**
    * Control class: ASN1C_Int2
    * Data class:    ASN1T_Int2
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_Int2 (ASN1T_Int2& data);

   /**
    * Control class: ASN1C_Int2<br/>
    * Data class: ASN1T_Int2<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_Int2 (OSRTMessageBufferIF& msgBuf, ASN1T_Int2& data);

   virtual ~ASN1C_Int2 () {}

   /**
    * Data class: ASN1T_Int2<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_Int2.
    */
   inline ASN1T_Int2& getData () { return msgData; }

   /**
    * Data class: ASN1T_Int2<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_Int2.
    */
   inline const ASN1T_Int2& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             Int2 will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "Int2");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_Int2& operator= (const ASN1C_Int2&) {return *this;}
} ;

EXTERN int asn1PE_Int2 (OSCTXT* pctxt, ASN1T_Int2 value);

EXTERN int asn1PD_Int2 (OSCTXT* pctxt, ASN1T_Int2* pvalue);

EXTERN int XmlEnc_Int2 (OSCTXT* pctxt, ASN1T_Int2 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Int2 (OSCTXT* pctxt, ASN1T_Int2* pvalue);

EXTERN int asn1JsonEnc_Int2 (OSCTXT *pctxt, ASN1T_Int2 *pvalue);

EXTERN int asn1JsonDec_Int2 (OSCTXT *pctxt, ASN1T_Int2 *pvalue);

EXTERN int asn1PrtToStrm_Int2 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Int2* pvalue);

EXTERN ASN1T_Int2* new_ASN1T_Int2 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleWeightLimits                                       */
/*                                                            */
/**************************************************************/
/*
VehicleWeightLimits ::= SEQUENCE {
   vehicleMaxLadenWeight [0] Int2,
   vehicleTrainMaximumWeight [1] Int2,
   vehicleWeightUnladen [2] Int2
}
*/
struct EXTERN ASN1T_VehicleWeightLimits {
   ASN1T_Int2 vehicleMaxLadenWeight;
   ASN1T_Int2 vehicleTrainMaximumWeight;
   ASN1T_Int2 vehicleWeightUnladen;
} ;

EXTERN int asn1PE_VehicleWeightLimits (OSCTXT* pctxt, ASN1T_VehicleWeightLimits* pvalue);

EXTERN int asn1PD_VehicleWeightLimits (OSCTXT* pctxt, ASN1T_VehicleWeightLimits* pvalue);

EXTERN int XmlEnc_VehicleWeightLimits (OSCTXT* pctxt, 
   ASN1T_VehicleWeightLimits* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleWeightLimits (OSCTXT* pctxt, 
   ASN1T_VehicleWeightLimits* pvalue);

EXTERN int asn1JsonEnc_VehicleWeightLimits (OSCTXT *pctxt, ASN1T_VehicleWeightLimits *pvalue);

EXTERN int asn1JsonDec_VehicleWeightLimits (OSCTXT *pctxt, ASN1T_VehicleWeightLimits *pvalue);

EXTERN int asn1PrtToStrm_VehicleWeightLimits (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleWeightLimits* pvalue);

EXTERN ASN1T_VehicleWeightLimits* 
   new_ASN1T_VehicleWeightLimits (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  AxleWeightLimits                                          */
/*                                                            */
/**************************************************************/
/*
AxleWeightLimits ::= SEQUENCE {
   maxLadenweightOnAxle1 [0] Int2,
   maxLadenweightOnAxle2 [1] Int2,
   maxLadenweightOnAxle3 [2] Int2,
   maxLadenweightOnAxle4 [3] Int2,
   maxLadenweightOnAxle5 [4] Int2
}
*/
struct EXTERN ASN1T_AxleWeightLimits {
   ASN1T_Int2 maxLadenweightOnAxle1;
   ASN1T_Int2 maxLadenweightOnAxle2;
   ASN1T_Int2 maxLadenweightOnAxle3;
   ASN1T_Int2 maxLadenweightOnAxle4;
   ASN1T_Int2 maxLadenweightOnAxle5;
} ;

EXTERN int asn1PE_AxleWeightLimits (OSCTXT* pctxt, ASN1T_AxleWeightLimits* pvalue);

EXTERN int asn1PD_AxleWeightLimits (OSCTXT* pctxt, ASN1T_AxleWeightLimits* pvalue);

EXTERN int XmlEnc_AxleWeightLimits (OSCTXT* pctxt, 
   ASN1T_AxleWeightLimits* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AxleWeightLimits (OSCTXT* pctxt, 
   ASN1T_AxleWeightLimits* pvalue);

EXTERN int asn1JsonEnc_AxleWeightLimits (OSCTXT *pctxt, ASN1T_AxleWeightLimits *pvalue);

EXTERN int asn1JsonDec_AxleWeightLimits (OSCTXT *pctxt, ASN1T_AxleWeightLimits *pvalue);

EXTERN int asn1PrtToStrm_AxleWeightLimits (OSCTXT *pctxt, 
   const char* name, const ASN1T_AxleWeightLimits* pvalue);

EXTERN ASN1T_AxleWeightLimits* new_ASN1T_AxleWeightLimits (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PassengerCapacity                                         */
/*                                                            */
/**************************************************************/
/*
PassengerCapacity ::= SEQUENCE {
   numberOfSeats [0] Int1,
   numberOfStandingPlaces [1] Int1
}
*/
struct EXTERN ASN1T_PassengerCapacity {
   ASN1T_Int1 numberOfSeats;
   ASN1T_Int1 numberOfStandingPlaces;
} ;

EXTERN int asn1PE_PassengerCapacity (OSCTXT* pctxt, ASN1T_PassengerCapacity* pvalue);

EXTERN int asn1PD_PassengerCapacity (OSCTXT* pctxt, ASN1T_PassengerCapacity* pvalue);

EXTERN int XmlEnc_PassengerCapacity (OSCTXT* pctxt, 
   ASN1T_PassengerCapacity* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PassengerCapacity (OSCTXT* pctxt, 
   ASN1T_PassengerCapacity* pvalue);

EXTERN int asn1JsonEnc_PassengerCapacity (OSCTXT *pctxt, ASN1T_PassengerCapacity *pvalue);

EXTERN int asn1JsonDec_PassengerCapacity (OSCTXT *pctxt, ASN1T_PassengerCapacity *pvalue);

EXTERN int asn1PrtToStrm_PassengerCapacity (OSCTXT *pctxt, 
   const char* name, const ASN1T_PassengerCapacity* pvalue);

EXTERN ASN1T_PassengerCapacity* new_ASN1T_PassengerCapacity (ASN1CType& ccobj)
   ;

/**************************************************************/
/*                                                            */
/*  UnitType                                                  */
/*                                                            */
/**************************************************************/
/*
UnitType ::= ENUMERATED { mg-km(0), mg-kWh(1) }
*/
struct EXTERN UnitType {
   enum Root {
      mg_km = 0,
      mg_kWh = 1
   } ;
} ;

typedef OSUINT32 ASN1T_UnitType;

EXTERN int asn1PE_UnitType (OSCTXT* pctxt, ASN1T_UnitType value);

EXTERN int asn1PD_UnitType (OSCTXT* pctxt, ASN1T_UnitType* pvalue);

EXTERN int XmlEnc_UnitType (OSCTXT* pctxt, ASN1T_UnitType value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_UnitType (OSCTXT* pctxt, ASN1T_UnitType* pvalue);

EXTERN int asn1JsonEnc_UnitType (OSCTXT *pctxt, ASN1T_UnitType *pvalue);

EXTERN int asn1JsonDec_UnitType (OSCTXT *pctxt, ASN1T_UnitType *pvalue);

EXTERN int asn1PrtToStrm_UnitType (OSCTXT *pctxt, 
   const char* name, const ASN1T_UnitType* pvalue);

EXTERN ASN1T_UnitType* new_ASN1T_UnitType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_UnitType_ENUMTAB[];
#define ASN1T_UnitType_ENUMTABSIZE 2

EXTERN const OSUTF8CHAR* ASN1T_UnitType_ToString (OSINT32 value);

EXTERN int ASN1T_UnitType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_UnitType* pvalue);

EXTERN int ASN1T_UnitType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_UnitType* pvalue);

/**************************************************************/
/*                                                            */
/*  ExhaustEmissionValues                                     */
/*                                                            */
/**************************************************************/
/*
ExhaustEmissionValues ::= SEQUENCE {
   unitType [0] UnitType,
   emissionCO [1] INTEGER (0..32767),
   emissionHC [2] Int2,
   emissionNOX [3] Int2,
   emissionHCNOX [4] Int2
}
*/
struct EXTERN ASN1T_ExhaustEmissionValues {
   ASN1T_UnitType unitType;
   OSUINT16 emissionCO;
   ASN1T_Int2 emissionHC;
   ASN1T_Int2 emissionNOX;
   ASN1T_Int2 emissionHCNOX;
} ;

EXTERN int asn1PE_ExhaustEmissionValues (OSCTXT* pctxt, ASN1T_ExhaustEmissionValues* pvalue);

EXTERN int asn1PD_ExhaustEmissionValues (OSCTXT* pctxt, ASN1T_ExhaustEmissionValues* pvalue);

EXTERN int XmlEnc_ExhaustEmissionValues (OSCTXT* pctxt, 
   ASN1T_ExhaustEmissionValues* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ExhaustEmissionValues (OSCTXT* pctxt, 
   ASN1T_ExhaustEmissionValues* pvalue);

EXTERN int asn1JsonEnc_ExhaustEmissionValues (OSCTXT *pctxt, ASN1T_ExhaustEmissionValues *pvalue);

EXTERN int asn1JsonDec_ExhaustEmissionValues (OSCTXT *pctxt, ASN1T_ExhaustEmissionValues *pvalue);

EXTERN int asn1PrtToStrm_ExhaustEmissionValues (OSCTXT *pctxt, 
   const char* name, const ASN1T_ExhaustEmissionValues* pvalue);

EXTERN ASN1T_ExhaustEmissionValues* 
   new_ASN1T_ExhaustEmissionValues (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DieselEmissionValues_particulate                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'DieselEmissionValues'
*/
struct EXTERN ASN1T_DieselEmissionValues_particulate {
   ASN1T_UnitType unitType;
   OSUINT16 value;
} ;

EXTERN int asn1PE_DieselEmissionValues_particulate (OSCTXT* pctxt, ASN1T_DieselEmissionValues_particulate* pvalue);

EXTERN int asn1PD_DieselEmissionValues_particulate (OSCTXT* pctxt, ASN1T_DieselEmissionValues_particulate* pvalue);

EXTERN int XmlEnc_DieselEmissionValues_particulate (OSCTXT* pctxt, 
   ASN1T_DieselEmissionValues_particulate* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DieselEmissionValues_particulate (OSCTXT* pctxt, 
   ASN1T_DieselEmissionValues_particulate* pvalue);

EXTERN int asn1JsonEnc_DieselEmissionValues_particulate (OSCTXT *pctxt, ASN1T_DieselEmissionValues_particulate *pvalue);

EXTERN int asn1JsonDec_DieselEmissionValues_particulate (OSCTXT *pctxt, ASN1T_DieselEmissionValues_particulate *pvalue);

EXTERN int asn1PrtToStrm_DieselEmissionValues_particulate (OSCTXT *pctxt, 
   const char* name, const ASN1T_DieselEmissionValues_particulate* pvalue);

EXTERN ASN1T_DieselEmissionValues_particulate* 
   new_ASN1T_DieselEmissionValues_particulate (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DieselEmissionValues                                      */
/*                                                            */
/**************************************************************/
/*
DieselEmissionValues ::= SEQUENCE {
   particulate [0] SEQUENCE {
      unitType [0] UnitType,
      value [1] INTEGER (0..32767)
   },
   absorptionCoeff [1] Int2
}
*/
struct EXTERN ASN1T_DieselEmissionValues {
   ASN1T_DieselEmissionValues_particulate particulate;
   ASN1T_Int2 absorptionCoeff;
} ;

EXTERN int asn1PE_DieselEmissionValues (OSCTXT* pctxt, ASN1T_DieselEmissionValues* pvalue);

EXTERN int asn1PD_DieselEmissionValues (OSCTXT* pctxt, ASN1T_DieselEmissionValues* pvalue);

EXTERN int XmlEnc_DieselEmissionValues (OSCTXT* pctxt, 
   ASN1T_DieselEmissionValues* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DieselEmissionValues (OSCTXT* pctxt, 
   ASN1T_DieselEmissionValues* pvalue);

EXTERN int asn1JsonEnc_DieselEmissionValues (OSCTXT *pctxt, ASN1T_DieselEmissionValues *pvalue);

EXTERN int asn1JsonDec_DieselEmissionValues (OSCTXT *pctxt, ASN1T_DieselEmissionValues *pvalue);

EXTERN int asn1PrtToStrm_DieselEmissionValues (OSCTXT *pctxt, 
   const char* name, const ASN1T_DieselEmissionValues* pvalue);

EXTERN ASN1T_DieselEmissionValues* 
   new_ASN1T_DieselEmissionValues (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SoundLevel                                                */
/*                                                            */
/**************************************************************/
/*
SoundLevel ::= SEQUENCE {
   soundstationary [0] Int1,
   sounddriveby [1] Int1
}
*/
struct EXTERN ASN1T_SoundLevel {
   ASN1T_Int1 soundstationary;
   ASN1T_Int1 sounddriveby;
} ;

EXTERN int asn1PE_SoundLevel (OSCTXT* pctxt, ASN1T_SoundLevel* pvalue);

EXTERN int asn1PD_SoundLevel (OSCTXT* pctxt, ASN1T_SoundLevel* pvalue);

EXTERN int XmlEnc_SoundLevel (OSCTXT* pctxt, ASN1T_SoundLevel* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SoundLevel (OSCTXT* pctxt, ASN1T_SoundLevel* pvalue);

EXTERN int asn1JsonEnc_SoundLevel (OSCTXT *pctxt, ASN1T_SoundLevel *pvalue);

EXTERN int asn1JsonDec_SoundLevel (OSCTXT *pctxt, ASN1T_SoundLevel *pvalue);

EXTERN int asn1PrtToStrm_SoundLevel (OSCTXT *pctxt, 
   const char* name, const ASN1T_SoundLevel* pvalue);

EXTERN ASN1T_SoundLevel* new_ASN1T_SoundLevel (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ActualNumberOfPassengers                                  */
/*                                                            */
/**************************************************************/
/*
 NOTE: The following are the definitions of the action and response
 parameters
ActualNumberOfPassengers ::= Int1
*/
typedef ASN1T_Int1 ASN1T_ActualNumberOfPassengers;

class EXTERN ASN1C_ActualNumberOfPassengers :
   public ASN1C_Int1
{
protected:
public:
   /**
    * Control class: ASN1C_ActualNumberOfPassengers
    * Data class:    ASN1T_ActualNumberOfPassengers
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ActualNumberOfPassengers (ASN1T_ActualNumberOfPassengers& data);

   /**
    * Control class: ASN1C_ActualNumberOfPassengers<br/>
    * Data class: ASN1T_ActualNumberOfPassengers<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ActualNumberOfPassengers (OSRTMessageBufferIF& msgBuf
      , ASN1T_ActualNumberOfPassengers& data);

   virtual ~ASN1C_ActualNumberOfPassengers () {}

   /**
    * Data class: ASN1T_ActualNumberOfPassengers<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ActualNumberOfPassengers.
    */
   inline ASN1T_ActualNumberOfPassengers& getData () { return msgData; }

   /**
    * Data class: ASN1T_ActualNumberOfPassengers<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ActualNumberOfPassengers.
    */
   inline const ASN1T_ActualNumberOfPassengers& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ActualNumberOfPassengers will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ActualNumberOfPassengers");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ActualNumberOfPassengers& operator= (const ASN1C_ActualNumberOfPassengers&) {return *this;}
} ;

EXTERN int asn1PE_ActualNumberOfPassengers (OSCTXT* pctxt, ASN1T_ActualNumberOfPassengers value);

EXTERN int asn1PD_ActualNumberOfPassengers (OSCTXT* pctxt, ASN1T_ActualNumberOfPassengers* pvalue);

EXTERN int XmlEnc_ActualNumberOfPassengers (OSCTXT* pctxt, 
   ASN1T_ActualNumberOfPassengers value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ActualNumberOfPassengers (OSCTXT* pctxt, 
   ASN1T_ActualNumberOfPassengers* pvalue);

EXTERN int asn1JsonEnc_ActualNumberOfPassengers (OSCTXT *pctxt, ASN1T_ActualNumberOfPassengers *pvalue);

EXTERN int asn1JsonDec_ActualNumberOfPassengers (OSCTXT *pctxt, ASN1T_ActualNumberOfPassengers *pvalue);

EXTERN int asn1PrtToStrm_ActualNumberOfPassengers (OSCTXT *pctxt, 
   const char* name, const ASN1T_ActualNumberOfPassengers* pvalue);

EXTERN ASN1T_ActualNumberOfPassengers* 
   new_ASN1T_ActualNumberOfPassengers (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ChannelId                                                 */
/*                                                            */
/**************************************************************/
/*
ChannelId ::= INTEGER { obu(0), sam1(1), sam2(2), icc(3), display(4), buzzer(5), printer(6), serialInterface(7), parallelInterface(8), gPS(9), tachograph(10), privateUse1(11), privateUse2(12), privateUse3(13), privateUse4(14), privateUse5(15), bluetooth(16) } (0..255)
*/
struct EXTERN ChannelId {
   enum Root {
      obu = 0,
      sam1 = 1,
      sam2 = 2,
      icc = 3,
      display = 4,
      buzzer = 5,
      printer = 6,
      serialInterface = 7,
      parallelInterface = 8,
      gPS = 9,
      tachograph = 10,
      privateUse1 = 11,
      privateUse2 = 12,
      privateUse3 = 13,
      privateUse4 = 14,
      privateUse5 = 15,
      bluetooth = 16
   } ;
} ;

typedef OSUINT8 ASN1T_ChannelId;

EXTERN int asn1PE_ChannelId (OSCTXT* pctxt, ASN1T_ChannelId value);

EXTERN int asn1PD_ChannelId (OSCTXT* pctxt, ASN1T_ChannelId* pvalue);

EXTERN int XmlEnc_ChannelId (OSCTXT* pctxt, ASN1T_ChannelId value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ChannelId (OSCTXT* pctxt, ASN1T_ChannelId* pvalue);

EXTERN int asn1JsonEnc_ChannelId (OSCTXT *pctxt, ASN1T_ChannelId *pvalue);

EXTERN int asn1JsonDec_ChannelId (OSCTXT *pctxt, ASN1T_ChannelId *pvalue);

EXTERN int asn1PrtToStrm_ChannelId (OSCTXT *pctxt, 
   const char* name, const ASN1T_ChannelId* pvalue);

EXTERN ASN1T_ChannelId* new_ASN1T_ChannelId (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SetMMIRq                                                  */
/*                                                            */
/**************************************************************/
/*
SetMMIRq ::= INTEGER { ok(0), nok(1), contactOperator(2), noSignalling(255) } (0..255)
*/
struct EXTERN SetMMIRq {
   enum Root {
      ok = 0,
      nok = 1,
      contactOperator = 2,
      noSignalling = 255
   } ;
} ;

typedef OSUINT8 ASN1T_SetMMIRq;

class EXTERN ASN1C_SetMMIRq :
public ASN1CType
{
protected:
   ASN1T_SetMMIRq& msgData;
public:
   /**
    * Control class: ASN1C_SetMMIRq
    * Data class:    ASN1T_SetMMIRq
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SetMMIRq (ASN1T_SetMMIRq& data);

   /**
    * Control class: ASN1C_SetMMIRq<br/>
    * Data class: ASN1T_SetMMIRq<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SetMMIRq (OSRTMessageBufferIF& msgBuf, ASN1T_SetMMIRq& data);

   virtual ~ASN1C_SetMMIRq () {}

   /**
    * Data class: ASN1T_SetMMIRq<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_SetMMIRq.
    */
   inline ASN1T_SetMMIRq& getData () { return msgData; }

   /**
    * Data class: ASN1T_SetMMIRq<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_SetMMIRq.
    */
   inline const ASN1T_SetMMIRq& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             SetMMIRq will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "SetMMIRq");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_SetMMIRq& operator= (const ASN1C_SetMMIRq&) {return *this;}
} ;

EXTERN int asn1PE_SetMMIRq (OSCTXT* pctxt, ASN1T_SetMMIRq value);

EXTERN int asn1PD_SetMMIRq (OSCTXT* pctxt, ASN1T_SetMMIRq* pvalue);

EXTERN int XmlEnc_SetMMIRq (OSCTXT* pctxt, ASN1T_SetMMIRq value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SetMMIRq (OSCTXT* pctxt, ASN1T_SetMMIRq* pvalue);

EXTERN int asn1JsonEnc_SetMMIRq (OSCTXT *pctxt, ASN1T_SetMMIRq *pvalue);

EXTERN int asn1JsonDec_SetMMIRq (OSCTXT *pctxt, ASN1T_SetMMIRq *pvalue);

EXTERN int asn1PrtToStrm_SetMMIRq (OSCTXT *pctxt, 
   const char* name, const ASN1T_SetMMIRq* pvalue);

EXTERN ASN1T_SetMMIRq* new_ASN1T_SetMMIRq (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  CO2EmissionValue                                          */
/*                                                            */
/**************************************************************/
/*
 NOTE: The following are the definitions of EFC attributes
CO2EmissionValue ::= Int2
*/
typedef ASN1T_Int2 ASN1T_CO2EmissionValue;

class EXTERN ASN1C_CO2EmissionValue :
   public ASN1C_Int2
{
protected:
public:
   /**
    * Control class: ASN1C_CO2EmissionValue
    * Data class:    ASN1T_CO2EmissionValue
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_CO2EmissionValue (ASN1T_CO2EmissionValue& data);

   /**
    * Control class: ASN1C_CO2EmissionValue<br/>
    * Data class: ASN1T_CO2EmissionValue<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_CO2EmissionValue (OSRTMessageBufferIF& msgBuf
      , ASN1T_CO2EmissionValue& data);

   virtual ~ASN1C_CO2EmissionValue () {}

   /**
    * Data class: ASN1T_CO2EmissionValue<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_CO2EmissionValue.
    */
   inline ASN1T_CO2EmissionValue& getData () { return msgData; }

   /**
    * Data class: ASN1T_CO2EmissionValue<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_CO2EmissionValue.
    */
   inline const ASN1T_CO2EmissionValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             CO2EmissionValue will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "CO2EmissionValue");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_CO2EmissionValue& operator= (const ASN1C_CO2EmissionValue&) {return *this;}
} ;

EXTERN int asn1PE_CO2EmissionValue (OSCTXT* pctxt, ASN1T_CO2EmissionValue value);

EXTERN int asn1PD_CO2EmissionValue (OSCTXT* pctxt, ASN1T_CO2EmissionValue* pvalue);

EXTERN int XmlEnc_CO2EmissionValue (OSCTXT* pctxt, 
   ASN1T_CO2EmissionValue value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CO2EmissionValue (OSCTXT* pctxt, 
   ASN1T_CO2EmissionValue* pvalue);

EXTERN int asn1JsonEnc_CO2EmissionValue (OSCTXT *pctxt, ASN1T_CO2EmissionValue *pvalue);

EXTERN int asn1JsonDec_CO2EmissionValue (OSCTXT *pctxt, ASN1T_CO2EmissionValue *pvalue);

EXTERN int asn1PrtToStrm_CO2EmissionValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_CO2EmissionValue* pvalue);

EXTERN ASN1T_CO2EmissionValue* new_ASN1T_CO2EmissionValue (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Int4                                                      */
/*                                                            */
/**************************************************************/
/*
Int4 ::= INTEGER (0..4294967295)
*/
typedef OSUINT32 ASN1T_Int4;

class EXTERN ASN1C_Int4 :
public ASN1CType
{
protected:
   ASN1T_Int4& msgData;
public:
   /**
    * Control class: ASN1C_Int4
    * Data class:    ASN1T_Int4
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_Int4 (ASN1T_Int4& data);

   /**
    * Control class: ASN1C_Int4<br/>
    * Data class: ASN1T_Int4<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_Int4 (OSRTMessageBufferIF& msgBuf, ASN1T_Int4& data);

   virtual ~ASN1C_Int4 () {}

   /**
    * Data class: ASN1T_Int4<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_Int4.
    */
   inline ASN1T_Int4& getData () { return msgData; }

   /**
    * Data class: ASN1T_Int4<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_Int4.
    */
   inline const ASN1T_Int4& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             Int4 will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "Int4");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_Int4& operator= (const ASN1C_Int4&) {return *this;}
} ;

EXTERN int asn1PE_Int4 (OSCTXT* pctxt, ASN1T_Int4 value);

EXTERN int asn1PD_Int4 (OSCTXT* pctxt, ASN1T_Int4* pvalue);

EXTERN int XmlEnc_Int4 (OSCTXT* pctxt, ASN1T_Int4 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Int4 (OSCTXT* pctxt, ASN1T_Int4* pvalue);

EXTERN int asn1JsonEnc_Int4 (OSCTXT *pctxt, ASN1T_Int4 *pvalue);

EXTERN int asn1JsonDec_Int4 (OSCTXT *pctxt, ASN1T_Int4 *pvalue);

EXTERN int asn1PrtToStrm_Int4 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Int4* pvalue);

EXTERN ASN1T_Int4* new_ASN1T_Int4 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ContractSerialNumber                                      */
/*                                                            */
/**************************************************************/
/*
ContractSerialNumber ::= Int4
*/
typedef ASN1T_Int4 ASN1T_ContractSerialNumber;

class EXTERN ASN1C_ContractSerialNumber :
   public ASN1C_Int4
{
protected:
public:
   /**
    * Control class: ASN1C_ContractSerialNumber
    * Data class:    ASN1T_ContractSerialNumber
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ContractSerialNumber (ASN1T_ContractSerialNumber& data);

   /**
    * Control class: ASN1C_ContractSerialNumber<br/>
    * Data class: ASN1T_ContractSerialNumber<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ContractSerialNumber (OSRTMessageBufferIF& msgBuf
      , ASN1T_ContractSerialNumber& data);

   virtual ~ASN1C_ContractSerialNumber () {}

   /**
    * Data class: ASN1T_ContractSerialNumber<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ContractSerialNumber.
    */
   inline ASN1T_ContractSerialNumber& getData () { return msgData; }

   /**
    * Data class: ASN1T_ContractSerialNumber<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ContractSerialNumber.
    */
   inline const ASN1T_ContractSerialNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ContractSerialNumber will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ContractSerialNumber");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ContractSerialNumber& operator= (const ASN1C_ContractSerialNumber&) {return *this;}
} ;

EXTERN int asn1PE_ContractSerialNumber (OSCTXT* pctxt, ASN1T_ContractSerialNumber value);

EXTERN int asn1PD_ContractSerialNumber (OSCTXT* pctxt, ASN1T_ContractSerialNumber* pvalue);

EXTERN int XmlEnc_ContractSerialNumber (OSCTXT* pctxt, 
   ASN1T_ContractSerialNumber value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ContractSerialNumber (OSCTXT* pctxt, 
   ASN1T_ContractSerialNumber* pvalue);

EXTERN int asn1JsonEnc_ContractSerialNumber (OSCTXT *pctxt, ASN1T_ContractSerialNumber *pvalue);

EXTERN int asn1JsonDec_ContractSerialNumber (OSCTXT *pctxt, ASN1T_ContractSerialNumber *pvalue);

EXTERN int asn1PrtToStrm_ContractSerialNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_ContractSerialNumber* pvalue);

EXTERN ASN1T_ContractSerialNumber* 
   new_ASN1T_ContractSerialNumber (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ContractAuthenticator                                     */
/*                                                            */
/**************************************************************/
/*
ContractAuthenticator ::= OCTET STRING
*/
typedef ASN1TDynOctStr64 ASN1T_ContractAuthenticator;

class EXTERN ASN1C_ContractAuthenticator :
public ASN1CType
{
protected:
   ASN1T_ContractAuthenticator& msgData;
public:
   /**
    * Control class: ASN1C_ContractAuthenticator
    * Data class:    ASN1T_ContractAuthenticator
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ContractAuthenticator (ASN1T_ContractAuthenticator& data);

   /**
    * Control class: ASN1C_ContractAuthenticator<br/>
    * Data class: ASN1T_ContractAuthenticator<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ContractAuthenticator (OSRTMessageBufferIF& msgBuf
      , ASN1T_ContractAuthenticator& data);

   virtual ~ASN1C_ContractAuthenticator () {}

   /**
    * Data class: ASN1T_ContractAuthenticator<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ContractAuthenticator.
    */
   inline ASN1T_ContractAuthenticator& getData () { return msgData; }

   /**
    * Data class: ASN1T_ContractAuthenticator<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ContractAuthenticator.
    */
   inline const ASN1T_ContractAuthenticator& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ContractAuthenticator will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ContractAuthenticator");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ContractAuthenticator& operator= (const ASN1C_ContractAuthenticator&) {return *this;}
} ;

EXTERN int asn1PE_ContractAuthenticator (OSCTXT* pctxt, ASN1T_ContractAuthenticator value);

EXTERN int asn1PD_ContractAuthenticator (OSCTXT* pctxt, ASN1T_ContractAuthenticator* pvalue);

EXTERN int XmlEnc_ContractAuthenticator (OSCTXT* pctxt, 
   ASN1T_ContractAuthenticator* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ContractAuthenticator (OSCTXT* pctxt, 
   ASN1T_ContractAuthenticator* pvalue);

EXTERN int asn1JsonEnc_ContractAuthenticator (OSCTXT *pctxt, ASN1T_ContractAuthenticator *pvalue);

EXTERN int asn1JsonDec_ContractAuthenticator (OSCTXT *pctxt, ASN1T_ContractAuthenticator *pvalue);

EXTERN int asn1PrtToStrm_ContractAuthenticator (OSCTXT *pctxt, 
   const char* name, const ASN1T_ContractAuthenticator* pvalue);

EXTERN ASN1T_ContractAuthenticator* 
   new_ASN1T_ContractAuthenticator (ASN1CType& ccobj);

EXTERN int asn1Init_ContractAuthenticator (ASN1T_ContractAuthenticator* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ContractAuthenticator (OSCTXT *pctxt, 
   ASN1T_ContractAuthenticator* pvalue);

/**************************************************************/
/*                                                            */
/*  LPN_alphabetIndicator                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'LPN'
*/
struct EXTERN LPN_alphabetIndicator {
   enum Root {
      latinAlphabetNo1 = 1,
      latinAlphabetNo2 = 2,
      latinAlphabetNo3 = 3,
      latinAlphabetNo4 = 4,
      latinCyrillicAlphabet = 5,
      latinArabicAlphabet = 6,
      latinGreekAlphabet = 7,
      latinHebrewAlphabet = 8,
      latinAlphabetNo5 = 9,
      latinAlphabetNo6 = 10,
      twoOctetBMP = 11,
      fourOctetCanonical = 12,
      reservedForUse1 = 13,
      reservedForUse2 = 14,
      reservedForUse3 = 15,
      reservedForUse4 = 16,
      reservedForUse5 = 17,
      reservedForUse6 = 18,
      reservedForUse7 = 19,
      reservedForUse8 = 20,
      reservedForUse9 = 21,
      reservedForUse10 = 22,
      reservedForUse11 = 23,
      reservedForUse12 = 24,
      reservedForUse13 = 25,
      reservedForUse14 = 26,
      reservedForUse15 = 27,
      reservedForUse16 = 28,
      reservedForUse17 = 29,
      reservedForUse18 = 30,
      reservedForUse19 = 31,
      reservedForUse20 = 32,
      reservedForUse21 = 33
   } ;
} ;

typedef OSUINT32 ASN1T_LPN_alphabetIndicator;

EXTERN int asn1PE_LPN_alphabetIndicator (OSCTXT* pctxt, ASN1T_LPN_alphabetIndicator value);

EXTERN int asn1PD_LPN_alphabetIndicator (OSCTXT* pctxt, ASN1T_LPN_alphabetIndicator* pvalue);

EXTERN int XmlEnc_LPN_alphabetIndicator (OSCTXT* pctxt, 
   ASN1T_LPN_alphabetIndicator value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LPN_alphabetIndicator (OSCTXT* pctxt, 
   ASN1T_LPN_alphabetIndicator* pvalue);

EXTERN int asn1JsonEnc_LPN_alphabetIndicator (OSCTXT *pctxt, ASN1T_LPN_alphabetIndicator *pvalue);

EXTERN int asn1JsonDec_LPN_alphabetIndicator (OSCTXT *pctxt, ASN1T_LPN_alphabetIndicator *pvalue);

EXTERN int asn1PrtToStrm_LPN_alphabetIndicator (OSCTXT *pctxt, 
   const char* name, const ASN1T_LPN_alphabetIndicator* pvalue);

EXTERN ASN1T_LPN_alphabetIndicator* 
   new_ASN1T_LPN_alphabetIndicator (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_LPN_alphabetIndicator_ENUMTAB[];
#define ASN1T_LPN_alphabetIndicator_ENUMTABSIZE 33

EXTERN const OSUTF8CHAR* ASN1T_LPN_alphabetIndicator_ToString (OSINT32 value);

EXTERN int ASN1T_LPN_alphabetIndicator_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_LPN_alphabetIndicator* pvalue);

EXTERN int ASN1T_LPN_alphabetIndicator_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_LPN_alphabetIndicator* pvalue);

/**************************************************************/
/*                                                            */
/*  LPN                                                       */
/*                                                            */
/**************************************************************/
/*
LPN ::= SEQUENCE {
   countryCode [0] CountryCode,
   alphabetIndicator [1] ENUMERATED { latinAlphabetNo1(1), latinAlphabetNo2(2), latinAlphabetNo3(3), latinAlphabetNo4(4), latinCyrillicAlphabet(5), latinArabicAlphabet(6), latinGreekAlphabet(7), latinHebrewAlphabet(8), latinAlphabetNo5(9), latinAlphabetNo6(10), twoOctetBMP(11), fourOctetCanonical(12), reservedForUse1(13), reservedForUse2(14), reservedForUse3(15), reservedForUse4(16), reservedForUse5(17), reservedForUse6(18), reservedForUse7(19), reservedForUse8(20), reservedForUse9(21), reservedForUse10(22), reservedForUse11(23), reservedForUse12(24), reservedForUse13(25), reservedForUse14(26), reservedForUse15(27), reservedForUse16(28), reservedForUse17(29), reservedForUse18(30), reservedForUse19(31), reservedForUse20(32), reservedForUse21(33) },
--refer to Annex E for conversion from LatinAlphabetNo 2
--and 5 to Latin AlphabetNo1
   licencePlateNumber [2] OCTET STRING
}
*/
struct EXTERN ASN1T_LPN : public ASN1TPDU {
   ASN1T_CountryCode countryCode;
   ASN1T_LPN_alphabetIndicator alphabetIndicator;
   ASN1TDynOctStr64 licencePlateNumber;
   ASN1T_LPN ();
   ~ASN1T_LPN ();
} ;

class EXTERN ASN1C_LPN :
public ASN1CType
{
protected:
   ASN1T_LPN& msgData;
public:
   /**
    * Control class: ASN1C_LPN
    * Data class:    ASN1T_LPN
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_LPN (ASN1T_LPN& data);

   /**
    * Control class: ASN1C_LPN<br/>
    * Data class: ASN1T_LPN<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_LPN (OSRTMessageBufferIF& msgBuf, ASN1T_LPN& data);

   virtual ~ASN1C_LPN () {}

   /**
    * Data class: ASN1T_LPN<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_LPN.
    */
   inline ASN1T_LPN& getData () { return msgData; }

   /**
    * Data class: ASN1T_LPN<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_LPN.
    */
   inline const ASN1T_LPN& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             LPN will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "LPN");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_LPN& operator= (const ASN1C_LPN&) {return *this;}
} ;

EXTERN int asn1PE_LPN (OSCTXT* pctxt, ASN1T_LPN* pvalue);

EXTERN int asn1PD_LPN (OSCTXT* pctxt, ASN1T_LPN* pvalue);

EXTERN int XmlEnc_LPN (OSCTXT* pctxt, ASN1T_LPN* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_LPN (OSCTXT* pctxt, ASN1T_LPN* pvalue);

EXTERN int asn1JsonEnc_LPN (OSCTXT *pctxt, ASN1T_LPN *pvalue);

EXTERN int asn1JsonDec_LPN (OSCTXT *pctxt, ASN1T_LPN *pvalue);

EXTERN int asn1PrtToStrm_LPN (OSCTXT *pctxt, 
   const char* name, const ASN1T_LPN* pvalue);

EXTERN ASN1T_LPN* new_ASN1T_LPN (ASN1CType& ccobj);

EXTERN int asn1Init_LPN (ASN1T_LPN* pvalue, OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_LPN (OSCTXT *pctxt, ASN1T_LPN* pvalue);

/**************************************************************/
/*                                                            */
/*  ContractVehicle                                           */
/*                                                            */
/**************************************************************/
/*
ContractVehicle ::= LPN
*/
typedef ASN1T_LPN ASN1T_ContractVehicle;

class EXTERN ASN1C_ContractVehicle :
   public ASN1C_LPN
{
protected:
public:
   /**
    * Control class: ASN1C_ContractVehicle
    * Data class:    ASN1T_ContractVehicle
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ContractVehicle (ASN1T_ContractVehicle& data);

   /**
    * Control class: ASN1C_ContractVehicle<br/>
    * Data class: ASN1T_ContractVehicle<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ContractVehicle (OSRTMessageBufferIF& msgBuf
      , ASN1T_ContractVehicle& data);

   virtual ~ASN1C_ContractVehicle () {}

   /**
    * Data class: ASN1T_ContractVehicle<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ContractVehicle.
    */
   inline ASN1T_ContractVehicle& getData () { return msgData; }

   /**
    * Data class: ASN1T_ContractVehicle<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ContractVehicle.
    */
   inline const ASN1T_ContractVehicle& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ContractVehicle will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ContractVehicle");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ContractVehicle& operator= (const ASN1C_ContractVehicle&) {return *this;}
} ;

EXTERN int asn1PE_ContractVehicle (OSCTXT* pctxt, ASN1T_ContractVehicle* pvalue);

EXTERN int asn1PD_ContractVehicle (OSCTXT* pctxt, ASN1T_ContractVehicle* pvalue);

EXTERN int XmlEnc_ContractVehicle (OSCTXT* pctxt, 
   ASN1T_ContractVehicle* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ContractVehicle (OSCTXT* pctxt, ASN1T_ContractVehicle* pvalue
   );

EXTERN int asn1JsonEnc_ContractVehicle (OSCTXT *pctxt, ASN1T_ContractVehicle *pvalue);

EXTERN int asn1JsonDec_ContractVehicle (OSCTXT *pctxt, ASN1T_ContractVehicle *pvalue);

EXTERN int asn1PrtToStrm_ContractVehicle (OSCTXT *pctxt, 
   const char* name, const ASN1T_ContractVehicle* pvalue);

EXTERN ASN1T_ContractVehicle* new_ASN1T_ContractVehicle (ASN1CType& ccobj);

EXTERN int asn1Init_ContractVehicle (ASN1T_ContractVehicle* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ContractVehicle (OSCTXT *pctxt, ASN1T_ContractVehicle* pvalue);

/**************************************************************/
/*                                                            */
/*  DescriptiveCharacteristics                                */
/*                                                            */
/**************************************************************/
/*
 The value "{year 1990, month 0, day 0}" is a 16-bit all-zero
 encoding, and is used to represent "no date".
DescriptiveCharacteristics ::= INTEGER { noEntry(0), vehicleShape1(1), vehicleShape2(2), vehicleShape3(3), vehicleShape4(4), vehicleShape5(5), vehicleShape6(6), vehicleShape7(7), vehicleShape8(8), vehicleShape9(9), vehicleShape10(10), vehicleShape11(11), vehicleShape12(12), vehicleShape13(13), vehicleShape14(14), vehicleShape15(15), vehicleShape16(16), vehicleShape17(17), vehicleShape18(18), vehicleShape19(19), vehicleShape20(20), vehicleShape21(21), vehicleShape22(22), vehicleShape23(23), vehicleShape24(24), vehicleShape25(25), vehicleShape26(26), vehicleShape27(27), vehicleShape28(28), vehicleShape29(29), vehicleShape30(30), vehicleShape31(31), vehicleShape32(32), vehicleShape33(33), vehicleShape34(34), vehicleShape35(35), vehicleShape36(36), vehicleShape37(37), vehicleShape38(38), vehicleShape39(39), vehicleShape40(40), vehicleShape41(41), vehicleShape42(42), vehicleShape43(43), vehicleShape44(44), vehicleShape45(45), vehicleShape46(46), vehicleShape47(47), vehicleShape48(48), vehicleShape49(49), vehicleShape50(50) } (0..255)
*/
struct EXTERN DescriptiveCharacteristics {
   enum Root {
      noEntry = 0,
      vehicleShape1 = 1,
      vehicleShape2 = 2,
      vehicleShape3 = 3,
      vehicleShape4 = 4,
      vehicleShape5 = 5,
      vehicleShape6 = 6,
      vehicleShape7 = 7,
      vehicleShape8 = 8,
      vehicleShape9 = 9,
      vehicleShape10 = 10,
      vehicleShape11 = 11,
      vehicleShape12 = 12,
      vehicleShape13 = 13,
      vehicleShape14 = 14,
      vehicleShape15 = 15,
      vehicleShape16 = 16,
      vehicleShape17 = 17,
      vehicleShape18 = 18,
      vehicleShape19 = 19,
      vehicleShape20 = 20,
      vehicleShape21 = 21,
      vehicleShape22 = 22,
      vehicleShape23 = 23,
      vehicleShape24 = 24,
      vehicleShape25 = 25,
      vehicleShape26 = 26,
      vehicleShape27 = 27,
      vehicleShape28 = 28,
      vehicleShape29 = 29,
      vehicleShape30 = 30,
      vehicleShape31 = 31,
      vehicleShape32 = 32,
      vehicleShape33 = 33,
      vehicleShape34 = 34,
      vehicleShape35 = 35,
      vehicleShape36 = 36,
      vehicleShape37 = 37,
      vehicleShape38 = 38,
      vehicleShape39 = 39,
      vehicleShape40 = 40,
      vehicleShape41 = 41,
      vehicleShape42 = 42,
      vehicleShape43 = 43,
      vehicleShape44 = 44,
      vehicleShape45 = 45,
      vehicleShape46 = 46,
      vehicleShape47 = 47,
      vehicleShape48 = 48,
      vehicleShape49 = 49,
      vehicleShape50 = 50
   } ;
} ;

typedef OSUINT8 ASN1T_DescriptiveCharacteristics;

EXTERN int asn1PE_DescriptiveCharacteristics (OSCTXT* pctxt, ASN1T_DescriptiveCharacteristics value);

EXTERN int asn1PD_DescriptiveCharacteristics (OSCTXT* pctxt, ASN1T_DescriptiveCharacteristics* pvalue);

EXTERN int XmlEnc_DescriptiveCharacteristics (OSCTXT* pctxt, 
   ASN1T_DescriptiveCharacteristics value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DescriptiveCharacteristics (OSCTXT* pctxt, 
   ASN1T_DescriptiveCharacteristics* pvalue);

EXTERN int asn1JsonEnc_DescriptiveCharacteristics (OSCTXT *pctxt, ASN1T_DescriptiveCharacteristics *pvalue);

EXTERN int asn1JsonDec_DescriptiveCharacteristics (OSCTXT *pctxt, ASN1T_DescriptiveCharacteristics *pvalue);

EXTERN int asn1PrtToStrm_DescriptiveCharacteristics (OSCTXT *pctxt, 
   const char* name, const ASN1T_DescriptiveCharacteristics* pvalue);

EXTERN ASN1T_DescriptiveCharacteristics* 
   new_ASN1T_DescriptiveCharacteristics (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  EquipmentOBUId                                            */
/*                                                            */
/**************************************************************/
/*
EquipmentOBUId ::= OCTET STRING
*/
typedef ASN1TDynOctStr64 ASN1T_EquipmentOBUId;

class EXTERN ASN1C_EquipmentOBUId :
public ASN1CType
{
protected:
   ASN1T_EquipmentOBUId& msgData;
public:
   /**
    * Control class: ASN1C_EquipmentOBUId
    * Data class:    ASN1T_EquipmentOBUId
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_EquipmentOBUId (ASN1T_EquipmentOBUId& data);

   /**
    * Control class: ASN1C_EquipmentOBUId<br/>
    * Data class: ASN1T_EquipmentOBUId<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_EquipmentOBUId (OSRTMessageBufferIF& msgBuf
      , ASN1T_EquipmentOBUId& data);

   virtual ~ASN1C_EquipmentOBUId () {}

   /**
    * Data class: ASN1T_EquipmentOBUId<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_EquipmentOBUId.
    */
   inline ASN1T_EquipmentOBUId& getData () { return msgData; }

   /**
    * Data class: ASN1T_EquipmentOBUId<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_EquipmentOBUId.
    */
   inline const ASN1T_EquipmentOBUId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             EquipmentOBUId will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "EquipmentOBUId");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_EquipmentOBUId& operator= (const ASN1C_EquipmentOBUId&) {return *this;}
} ;

EXTERN int asn1PE_EquipmentOBUId (OSCTXT* pctxt, ASN1T_EquipmentOBUId value);

EXTERN int asn1PD_EquipmentOBUId (OSCTXT* pctxt, ASN1T_EquipmentOBUId* pvalue);

EXTERN int XmlEnc_EquipmentOBUId (OSCTXT* pctxt, ASN1T_EquipmentOBUId* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EquipmentOBUId (OSCTXT* pctxt, ASN1T_EquipmentOBUId* pvalue)
   ;

EXTERN int asn1JsonEnc_EquipmentOBUId (OSCTXT *pctxt, ASN1T_EquipmentOBUId *pvalue);

EXTERN int asn1JsonDec_EquipmentOBUId (OSCTXT *pctxt, ASN1T_EquipmentOBUId *pvalue);

EXTERN int asn1PrtToStrm_EquipmentOBUId (OSCTXT *pctxt, 
   const char* name, const ASN1T_EquipmentOBUId* pvalue);

EXTERN ASN1T_EquipmentOBUId* new_ASN1T_EquipmentOBUId (ASN1CType& ccobj);

EXTERN int asn1Init_EquipmentOBUId (ASN1T_EquipmentOBUId* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_EquipmentOBUId (OSCTXT *pctxt, ASN1T_EquipmentOBUId* pvalue);

/**************************************************************/
/*                                                            */
/*  EquipmentStatus                                           */
/*                                                            */
/**************************************************************/
/*
EquipmentStatus ::= BIT STRING  (SIZE (16))
*/
typedef ASN1TBitStr32 ASN1T_EquipmentStatus;

class EXTERN ASN1C_EquipmentStatus :
public ASN1CBitStr
{
protected:
   ASN1T_EquipmentStatus& msgData;
public:
   /**
    * Control class: ASN1C_EquipmentStatus
    * Data class:    ASN1T_EquipmentStatus
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_EquipmentStatus (ASN1T_EquipmentStatus& data);

   /**
    * Control class: ASN1C_EquipmentStatus<br/>
    * Data class: ASN1T_EquipmentStatus<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_EquipmentStatus (OSRTMessageBufferIF& msgBuf
      , ASN1T_EquipmentStatus& data);

   virtual ~ASN1C_EquipmentStatus () {}

   /**
    * Data class: ASN1T_EquipmentStatus<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_EquipmentStatus.
    */
   inline ASN1T_EquipmentStatus& getData () { return msgData; }

   /**
    * Data class: ASN1T_EquipmentStatus<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_EquipmentStatus.
    */
   inline const ASN1T_EquipmentStatus& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             EquipmentStatus will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "EquipmentStatus");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_EquipmentStatus& operator= (const ASN1C_EquipmentStatus&) {return *this;}
} ;

EXTERN int asn1PE_EquipmentStatus (OSCTXT* pctxt, ASN1T_EquipmentStatus value);

EXTERN int asn1PD_EquipmentStatus (OSCTXT* pctxt, ASN1T_EquipmentStatus* pvalue);

EXTERN int XmlEnc_EquipmentStatus (OSCTXT* pctxt, 
   ASN1T_EquipmentStatus* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EquipmentStatus (OSCTXT* pctxt, ASN1T_EquipmentStatus* pvalue
   );

EXTERN int asn1JsonEnc_EquipmentStatus (OSCTXT *pctxt, ASN1T_EquipmentStatus *pvalue);

EXTERN int asn1JsonDec_EquipmentStatus (OSCTXT *pctxt, ASN1T_EquipmentStatus *pvalue);

EXTERN int asn1PrtToStrm_EquipmentStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_EquipmentStatus* pvalue);

EXTERN ASN1T_EquipmentStatus* new_ASN1T_EquipmentStatus (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  FutureCharacteristics                                     */
/*                                                            */
/**************************************************************/
/*
FutureCharacteristics ::= INTEGER { noEntry(0), airSuspension(1) } (0..255)
*/
struct EXTERN FutureCharacteristics {
   enum Root {
      noEntry = 0,
      airSuspension = 1
   } ;
} ;

typedef OSUINT8 ASN1T_FutureCharacteristics;

EXTERN int asn1PE_FutureCharacteristics (OSCTXT* pctxt, ASN1T_FutureCharacteristics value);

EXTERN int asn1PD_FutureCharacteristics (OSCTXT* pctxt, ASN1T_FutureCharacteristics* pvalue);

EXTERN int XmlEnc_FutureCharacteristics (OSCTXT* pctxt, 
   ASN1T_FutureCharacteristics value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_FutureCharacteristics (OSCTXT* pctxt, 
   ASN1T_FutureCharacteristics* pvalue);

EXTERN int asn1JsonEnc_FutureCharacteristics (OSCTXT *pctxt, ASN1T_FutureCharacteristics *pvalue);

EXTERN int asn1JsonDec_FutureCharacteristics (OSCTXT *pctxt, ASN1T_FutureCharacteristics *pvalue);

EXTERN int asn1PrtToStrm_FutureCharacteristics (OSCTXT *pctxt, 
   const char* name, const ASN1T_FutureCharacteristics* pvalue);

EXTERN ASN1T_FutureCharacteristics* 
   new_ASN1T_FutureCharacteristics (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ICC_Id                                                    */
/*                                                            */
/**************************************************************/
/*
ICC-Id ::= OCTET STRING
*/
typedef ASN1TDynOctStr64 ASN1T_ICC_Id;

class EXTERN ASN1C_ICC_Id :
public ASN1CType
{
protected:
   ASN1T_ICC_Id& msgData;
public:
   /**
    * Control class: ASN1C_ICC_Id
    * Data class:    ASN1T_ICC_Id
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ICC_Id (ASN1T_ICC_Id& data);

   /**
    * Control class: ASN1C_ICC_Id<br/>
    * Data class: ASN1T_ICC_Id<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ICC_Id (OSRTMessageBufferIF& msgBuf, ASN1T_ICC_Id& data);

   virtual ~ASN1C_ICC_Id () {}

   /**
    * Data class: ASN1T_ICC_Id<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ICC_Id.
    */
   inline ASN1T_ICC_Id& getData () { return msgData; }

   /**
    * Data class: ASN1T_ICC_Id<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ICC_Id.
    */
   inline const ASN1T_ICC_Id& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ICC_Id will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ICC_Id");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ICC_Id& operator= (const ASN1C_ICC_Id&) {return *this;}
} ;

EXTERN int asn1PE_ICC_Id (OSCTXT* pctxt, ASN1T_ICC_Id value);

EXTERN int asn1PD_ICC_Id (OSCTXT* pctxt, ASN1T_ICC_Id* pvalue);

EXTERN int XmlEnc_ICC_Id (OSCTXT* pctxt, ASN1T_ICC_Id* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ICC_Id (OSCTXT* pctxt, ASN1T_ICC_Id* pvalue);

EXTERN int asn1JsonEnc_ICC_Id (OSCTXT *pctxt, ASN1T_ICC_Id *pvalue);

EXTERN int asn1JsonDec_ICC_Id (OSCTXT *pctxt, ASN1T_ICC_Id *pvalue);

EXTERN int asn1PrtToStrm_ICC_Id (OSCTXT *pctxt, 
   const char* name, const ASN1T_ICC_Id* pvalue);

EXTERN ASN1T_ICC_Id* new_ASN1T_ICC_Id (ASN1CType& ccobj);

EXTERN int asn1Init_ICC_Id (ASN1T_ICC_Id* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ICC_Id (OSCTXT *pctxt, ASN1T_ICC_Id* pvalue);

/**************************************************************/
/*                                                            */
/*  Int3                                                      */
/*                                                            */
/**************************************************************/
/*
Int3 ::= INTEGER (0..16777215)
*/
typedef OSUINT32 ASN1T_Int3;

class EXTERN ASN1C_Int3 :
public ASN1CType
{
protected:
   ASN1T_Int3& msgData;
public:
   /**
    * Control class: ASN1C_Int3
    * Data class:    ASN1T_Int3
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_Int3 (ASN1T_Int3& data);

   /**
    * Control class: ASN1C_Int3<br/>
    * Data class: ASN1T_Int3<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_Int3 (OSRTMessageBufferIF& msgBuf, ASN1T_Int3& data);

   virtual ~ASN1C_Int3 () {}

   /**
    * Data class: ASN1T_Int3<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_Int3.
    */
   inline ASN1T_Int3& getData () { return msgData; }

   /**
    * Data class: ASN1T_Int3<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_Int3.
    */
   inline const ASN1T_Int3& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             Int3 will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "Int3");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_Int3& operator= (const ASN1C_Int3&) {return *this;}
} ;

EXTERN int asn1PE_Int3 (OSCTXT* pctxt, ASN1T_Int3 value);

EXTERN int asn1PD_Int3 (OSCTXT* pctxt, ASN1T_Int3* pvalue);

EXTERN int XmlEnc_Int3 (OSCTXT* pctxt, ASN1T_Int3 value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Int3 (OSCTXT* pctxt, ASN1T_Int3* pvalue);

EXTERN int asn1JsonEnc_Int3 (OSCTXT *pctxt, ASN1T_Int3 *pvalue);

EXTERN int asn1JsonDec_Int3 (OSCTXT *pctxt, ASN1T_Int3 *pvalue);

EXTERN int asn1PrtToStrm_Int3 (OSCTXT *pctxt, 
   const char* name, const ASN1T_Int3* pvalue);

EXTERN ASN1T_Int3* new_ASN1T_Int3 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SignedValue                                               */
/*                                                            */
/**************************************************************/
/*
SignedValue ::= CHOICE {
   positive [0] INTEGER (0..8388607),
   negative [1] INTEGER (-8388608..-1)
}
*/
/* Choice tag constants */

#define T_SignedValue_positive          1
#define T_SignedValue_negative          2

struct EXTERN ASN1T_SignedValue : public ASN1TPDU {
   OSINT32 t;
   union {
      /* t = 1 */
      OSUINT32 positive;
      /* t = 2 */
      OSINT32 negative;
   } u;
   ASN1T_SignedValue () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

class EXTERN ASN1C_SignedValue :
public ASN1CType
{
protected:
   ASN1T_SignedValue& msgData;
public:
   /**
    * Control class: ASN1C_SignedValue
    * Data class:    ASN1T_SignedValue
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignedValue (ASN1T_SignedValue& data);

   /**
    * Control class: ASN1C_SignedValue<br/>
    * Data class: ASN1T_SignedValue<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignedValue (OSRTMessageBufferIF& msgBuf, ASN1T_SignedValue& data);

   virtual ~ASN1C_SignedValue () {}

   /**
    * Data class: ASN1T_SignedValue<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_SignedValue.
    */
   inline ASN1T_SignedValue& getData () { return msgData; }

   /**
    * Data class: ASN1T_SignedValue<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_SignedValue.
    */
   inline const ASN1T_SignedValue& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             SignedValue will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "SignedValue");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_SignedValue& operator= (const ASN1C_SignedValue&) {return *this;}
} ;

EXTERN int asn1PE_SignedValue (OSCTXT* pctxt, ASN1T_SignedValue* pvalue);

EXTERN int asn1PD_SignedValue (OSCTXT* pctxt, ASN1T_SignedValue* pvalue);

EXTERN int XmlEnc_SignedValue (OSCTXT* pctxt, ASN1T_SignedValue* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignedValue (OSCTXT* pctxt, ASN1T_SignedValue* pvalue);

EXTERN int asn1JsonEnc_SignedValue (OSCTXT *pctxt, ASN1T_SignedValue *pvalue);

EXTERN int asn1JsonDec_SignedValue (OSCTXT *pctxt, ASN1T_SignedValue *pvalue);

EXTERN int asn1PrtToStrm_SignedValue (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignedValue* pvalue);

EXTERN ASN1T_SignedValue* new_ASN1T_SignedValue (ASN1CType& ccobj);

EXTERN int asn1Init_SignedValue (ASN1T_SignedValue* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  PaymentMeansBalance                                       */
/*                                                            */
/**************************************************************/
/*
PaymentMeansBalance ::= SignedValue
*/
typedef ASN1T_SignedValue ASN1T_PaymentMeansBalance;

class EXTERN ASN1C_PaymentMeansBalance :
   public ASN1C_SignedValue
{
protected:
public:
   /**
    * Control class: ASN1C_PaymentMeansBalance
    * Data class:    ASN1T_PaymentMeansBalance
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PaymentMeansBalance (ASN1T_PaymentMeansBalance& data);

   /**
    * Control class: ASN1C_PaymentMeansBalance<br/>
    * Data class: ASN1T_PaymentMeansBalance<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PaymentMeansBalance (OSRTMessageBufferIF& msgBuf
      , ASN1T_PaymentMeansBalance& data);

   virtual ~ASN1C_PaymentMeansBalance () {}

   /**
    * Data class: ASN1T_PaymentMeansBalance<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_PaymentMeansBalance.
    */
   inline ASN1T_PaymentMeansBalance& getData () { return msgData; }

   /**
    * Data class: ASN1T_PaymentMeansBalance<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_PaymentMeansBalance.
    */
   inline const ASN1T_PaymentMeansBalance& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             PaymentMeansBalance will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "PaymentMeansBalance");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_PaymentMeansBalance& operator= (const ASN1C_PaymentMeansBalance&) {return *this;}
} ;

EXTERN int asn1PE_PaymentMeansBalance (OSCTXT* pctxt, ASN1T_PaymentMeansBalance* pvalue);

EXTERN int asn1PD_PaymentMeansBalance (OSCTXT* pctxt, ASN1T_PaymentMeansBalance* pvalue);

EXTERN int XmlEnc_PaymentMeansBalance (OSCTXT* pctxt, 
   ASN1T_PaymentMeansBalance* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PaymentMeansBalance (OSCTXT* pctxt, 
   ASN1T_PaymentMeansBalance* pvalue);

EXTERN int asn1JsonEnc_PaymentMeansBalance (OSCTXT *pctxt, ASN1T_PaymentMeansBalance *pvalue);

EXTERN int asn1JsonDec_PaymentMeansBalance (OSCTXT *pctxt, ASN1T_PaymentMeansBalance *pvalue);

EXTERN int asn1PrtToStrm_PaymentMeansBalance (OSCTXT *pctxt, 
   const char* name, const ASN1T_PaymentMeansBalance* pvalue);

EXTERN ASN1T_PaymentMeansBalance* 
   new_ASN1T_PaymentMeansBalance (ASN1CType& ccobj);

EXTERN int asn1Init_PaymentMeansBalance (ASN1T_PaymentMeansBalance* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  PayUnit                                                   */
/*                                                            */
/**************************************************************/
/*
PayUnit ::= OCTET STRING (SIZE (2))
*/
struct EXTERN ASN1T_PayUnit {
   OSOCTET data[2];
   // ctors
   ASN1T_PayUnit () {}
   ASN1T_PayUnit (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, 2);
   }
   ASN1T_PayUnit (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
   }
   // assignment operators
   ASN1T_PayUnit& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
      return *this;
   }
} ;

class EXTERN ASN1C_PayUnit :
public ASN1CType
{
protected:
   ASN1T_PayUnit& msgData;
public:
   /**
    * Control class: ASN1C_PayUnit
    * Data class:    ASN1T_PayUnit
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PayUnit (ASN1T_PayUnit& data);

   /**
    * Control class: ASN1C_PayUnit<br/>
    * Data class: ASN1T_PayUnit<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PayUnit (OSRTMessageBufferIF& msgBuf, ASN1T_PayUnit& data);

   virtual ~ASN1C_PayUnit () {}

   /**
    * Data class: ASN1T_PayUnit<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_PayUnit.
    */
   inline ASN1T_PayUnit& getData () { return msgData; }

   /**
    * Data class: ASN1T_PayUnit<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_PayUnit.
    */
   inline const ASN1T_PayUnit& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             PayUnit will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "PayUnit");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_PayUnit& operator= (const ASN1C_PayUnit&) {return *this;}
} ;

EXTERN int asn1PE_PayUnit (OSCTXT* pctxt, ASN1T_PayUnit* pvalue);

EXTERN int asn1PD_PayUnit (OSCTXT* pctxt, ASN1T_PayUnit* pvalue);

EXTERN int XmlEnc_PayUnit (OSCTXT* pctxt, ASN1T_PayUnit* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PayUnit (OSCTXT* pctxt, ASN1T_PayUnit* pvalue);

EXTERN int asn1JsonEnc_PayUnit (OSCTXT *pctxt, ASN1T_PayUnit *pvalue);

EXTERN int asn1JsonDec_PayUnit (OSCTXT *pctxt, ASN1T_PayUnit *pvalue);

EXTERN int asn1PrtToStrm_PayUnit (OSCTXT *pctxt, 
   const char* name, const ASN1T_PayUnit* pvalue);

EXTERN ASN1T_PayUnit* new_ASN1T_PayUnit (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PaymentMeansUnit                                          */
/*                                                            */
/**************************************************************/
/*
 corresponds to a �3 octets Signed Integer�, associated with the following
 examples of line codes:
 -8'388'608 : 80 00 00'H
 -1 : FF FF FF'H
 0 : 00 00 00'H
 1 : 00 00 01�H
 8'388'607 : 7F FF FF'H
PaymentMeansUnit ::= PayUnit
*/
typedef ASN1T_PayUnit ASN1T_PaymentMeansUnit;

class EXTERN ASN1C_PaymentMeansUnit :
   public ASN1C_PayUnit
{
protected:
public:
   /**
    * Control class: ASN1C_PaymentMeansUnit
    * Data class:    ASN1T_PaymentMeansUnit
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PaymentMeansUnit (ASN1T_PaymentMeansUnit& data);

   /**
    * Control class: ASN1C_PaymentMeansUnit<br/>
    * Data class: ASN1T_PaymentMeansUnit<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PaymentMeansUnit (OSRTMessageBufferIF& msgBuf
      , ASN1T_PaymentMeansUnit& data);

   virtual ~ASN1C_PaymentMeansUnit () {}

   /**
    * Data class: ASN1T_PaymentMeansUnit<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_PaymentMeansUnit.
    */
   inline ASN1T_PaymentMeansUnit& getData () { return msgData; }

   /**
    * Data class: ASN1T_PaymentMeansUnit<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_PaymentMeansUnit.
    */
   inline const ASN1T_PaymentMeansUnit& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             PaymentMeansUnit will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "PaymentMeansUnit");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_PaymentMeansUnit& operator= (const ASN1C_PaymentMeansUnit&) {return *this;}
} ;

EXTERN int asn1PE_PaymentMeansUnit (OSCTXT* pctxt, ASN1T_PaymentMeansUnit* pvalue);

EXTERN int asn1PD_PaymentMeansUnit (OSCTXT* pctxt, ASN1T_PaymentMeansUnit* pvalue);

EXTERN int XmlEnc_PaymentMeansUnit (OSCTXT* pctxt, 
   ASN1T_PaymentMeansUnit* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PaymentMeansUnit (OSCTXT* pctxt, 
   ASN1T_PaymentMeansUnit* pvalue);

EXTERN int asn1JsonEnc_PaymentMeansUnit (OSCTXT *pctxt, ASN1T_PaymentMeansUnit *pvalue);

EXTERN int asn1JsonDec_PaymentMeansUnit (OSCTXT *pctxt, ASN1T_PaymentMeansUnit *pvalue);

EXTERN int asn1PrtToStrm_PaymentMeansUnit (OSCTXT *pctxt, 
   const char* name, const ASN1T_PaymentMeansUnit* pvalue);

EXTERN ASN1T_PaymentMeansUnit* new_ASN1T_PaymentMeansUnit (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PaymentSecurityData                                       */
/*                                                            */
/**************************************************************/
/*
PaymentSecurityData ::= OCTET STRING
*/
typedef ASN1TDynOctStr64 ASN1T_PaymentSecurityData;

class EXTERN ASN1C_PaymentSecurityData :
public ASN1CType
{
protected:
   ASN1T_PaymentSecurityData& msgData;
public:
   /**
    * Control class: ASN1C_PaymentSecurityData
    * Data class:    ASN1T_PaymentSecurityData
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PaymentSecurityData (ASN1T_PaymentSecurityData& data);

   /**
    * Control class: ASN1C_PaymentSecurityData<br/>
    * Data class: ASN1T_PaymentSecurityData<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PaymentSecurityData (OSRTMessageBufferIF& msgBuf
      , ASN1T_PaymentSecurityData& data);

   virtual ~ASN1C_PaymentSecurityData () {}

   /**
    * Data class: ASN1T_PaymentSecurityData<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_PaymentSecurityData.
    */
   inline ASN1T_PaymentSecurityData& getData () { return msgData; }

   /**
    * Data class: ASN1T_PaymentSecurityData<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_PaymentSecurityData.
    */
   inline const ASN1T_PaymentSecurityData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             PaymentSecurityData will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "PaymentSecurityData");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_PaymentSecurityData& operator= (const ASN1C_PaymentSecurityData&) {return *this;}
} ;

EXTERN int asn1PE_PaymentSecurityData (OSCTXT* pctxt, ASN1T_PaymentSecurityData value);

EXTERN int asn1PD_PaymentSecurityData (OSCTXT* pctxt, ASN1T_PaymentSecurityData* pvalue);

EXTERN int XmlEnc_PaymentSecurityData (OSCTXT* pctxt, 
   ASN1T_PaymentSecurityData* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PaymentSecurityData (OSCTXT* pctxt, 
   ASN1T_PaymentSecurityData* pvalue);

EXTERN int asn1JsonEnc_PaymentSecurityData (OSCTXT *pctxt, ASN1T_PaymentSecurityData *pvalue);

EXTERN int asn1JsonDec_PaymentSecurityData (OSCTXT *pctxt, ASN1T_PaymentSecurityData *pvalue);

EXTERN int asn1PrtToStrm_PaymentSecurityData (OSCTXT *pctxt, 
   const char* name, const ASN1T_PaymentSecurityData* pvalue);

EXTERN ASN1T_PaymentSecurityData* 
   new_ASN1T_PaymentSecurityData (ASN1CType& ccobj);

EXTERN int asn1Init_PaymentSecurityData (ASN1T_PaymentSecurityData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_PaymentSecurityData (OSCTXT *pctxt, 
   ASN1T_PaymentSecurityData* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalAccountNumber                                     */
/*                                                            */
/**************************************************************/
/*
 The unique designation of a Currency as defined in ISO 4217
 using the ISO numeric binary coded decimal representation.
 The code can also express a company specific token or a
 "charging unit code" as used in the freight.unit in which
 the fee is expressed.
 Value Assignment :
 '0xxx'H Currency in main units
 '1xxx'H Currency in minor units of 10 :1 ('dime')
 '2xxx'H Currency in minor units of 100 :1 ('cents')
 '3xxx'H Currency in minor units of 1000 :1
 '4xxx'H Currency in 'major' units / 10
 (e.g. 10 Belgian Francs)
 '5xxx'H Currency in 'major' units / 100
 (e.g. 100 Italian Lire)
 '6xxx'H Currency in 'major' units / 1000
 '7xxx'H Currency in 'major' units / 10000
 '8xxx'H Currency in 'major' units / 100000
 where xxx is the BCD representation of "Currency"
 as defined in ISO 4217
 '9xxx'H Tokens
 where xxx is Purse Provider specific coding.
 'Axxx'H Charging Unit Codes,
 denoting quantification of the service provided
 (e.g. man-hours)
PersonalAccountNumber ::= OCTET STRING (SIZE (10))
*/
struct EXTERN ASN1T_PersonalAccountNumber {
   OSOCTET data[10];
   // ctors
   ASN1T_PersonalAccountNumber () {}
   ASN1T_PersonalAccountNumber (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, 10);
   }
   ASN1T_PersonalAccountNumber (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
   }
   // assignment operators
   ASN1T_PersonalAccountNumber& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
      return *this;
   }
} ;

EXTERN int asn1PE_PersonalAccountNumber (OSCTXT* pctxt, ASN1T_PersonalAccountNumber* pvalue);

EXTERN int asn1PD_PersonalAccountNumber (OSCTXT* pctxt, ASN1T_PersonalAccountNumber* pvalue);

EXTERN int XmlEnc_PersonalAccountNumber (OSCTXT* pctxt, 
   ASN1T_PersonalAccountNumber* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PersonalAccountNumber (OSCTXT* pctxt, 
   ASN1T_PersonalAccountNumber* pvalue);

EXTERN int asn1JsonEnc_PersonalAccountNumber (OSCTXT *pctxt, ASN1T_PersonalAccountNumber *pvalue);

EXTERN int asn1JsonDec_PersonalAccountNumber (OSCTXT *pctxt, ASN1T_PersonalAccountNumber *pvalue);

EXTERN int asn1PrtToStrm_PersonalAccountNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_PersonalAccountNumber* pvalue);

EXTERN ASN1T_PersonalAccountNumber* 
   new_ASN1T_PersonalAccountNumber (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DateCompact                                               */
/*                                                            */
/**************************************************************/
/*
DateCompact ::= SEQUENCE {
   year [0] INTEGER (1990..2117),
   month [1] INTEGER (0..12), -- Value zero shall not be used
--except with 1990 - see below.
   day [2] INTEGER (0..31) -- Value zero shall not be used
}
*/
struct EXTERN ASN1T_DateCompact {
   OSUINT16 year;
   OSUINT8 month;
   OSUINT8 day;
} ;

EXTERN int asn1PE_DateCompact (OSCTXT* pctxt, ASN1T_DateCompact* pvalue);

EXTERN int asn1PD_DateCompact (OSCTXT* pctxt, ASN1T_DateCompact* pvalue);

EXTERN int XmlEnc_DateCompact (OSCTXT* pctxt, ASN1T_DateCompact* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DateCompact (OSCTXT* pctxt, ASN1T_DateCompact* pvalue);

EXTERN int asn1JsonEnc_DateCompact (OSCTXT *pctxt, ASN1T_DateCompact *pvalue);

EXTERN int asn1JsonDec_DateCompact (OSCTXT *pctxt, ASN1T_DateCompact *pvalue);

EXTERN int asn1PrtToStrm_DateCompact (OSCTXT *pctxt, 
   const char* name, const ASN1T_DateCompact* pvalue);

EXTERN ASN1T_DateCompact* new_ASN1T_DateCompact (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DateAndTime_timeCompact                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'DateAndTime'
*/
struct EXTERN ASN1T_DateAndTime_timeCompact {
   OSUINT8 hours;
   OSUINT8 mins;
   OSUINT8 double_secs;
} ;

EXTERN int asn1PE_DateAndTime_timeCompact (OSCTXT* pctxt, ASN1T_DateAndTime_timeCompact* pvalue);

EXTERN int asn1PD_DateAndTime_timeCompact (OSCTXT* pctxt, ASN1T_DateAndTime_timeCompact* pvalue);

EXTERN int XmlEnc_DateAndTime_timeCompact (OSCTXT* pctxt, 
   ASN1T_DateAndTime_timeCompact* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DateAndTime_timeCompact (OSCTXT* pctxt, 
   ASN1T_DateAndTime_timeCompact* pvalue);

EXTERN int asn1JsonEnc_DateAndTime_timeCompact (OSCTXT *pctxt, ASN1T_DateAndTime_timeCompact *pvalue);

EXTERN int asn1JsonDec_DateAndTime_timeCompact (OSCTXT *pctxt, ASN1T_DateAndTime_timeCompact *pvalue);

EXTERN int asn1PrtToStrm_DateAndTime_timeCompact (OSCTXT *pctxt, 
   const char* name, const ASN1T_DateAndTime_timeCompact* pvalue);

EXTERN ASN1T_DateAndTime_timeCompact* 
   new_ASN1T_DateAndTime_timeCompact (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DateAndTime                                               */
/*                                                            */
/**************************************************************/
/*
DateAndTime ::= SEQUENCE {
   timeDate [0] DateCompact,
   timeCompact [1] SEQUENCE {
                 -- expresses time of the day in hours, min, and sec
      hours [0] INTEGER (0..23), -- number of hours after midnight
      mins [1] INTEGER (0..59), -- number of minutes after the hour
      double-secs [2] INTEGER (0..30) -- number of two-seconds after the minute
   }
}
*/
struct EXTERN ASN1T_DateAndTime {
   ASN1T_DateCompact timeDate;
   ASN1T_DateAndTime_timeCompact timeCompact;
} ;

EXTERN int asn1PE_DateAndTime (OSCTXT* pctxt, ASN1T_DateAndTime* pvalue);

EXTERN int asn1PD_DateAndTime (OSCTXT* pctxt, ASN1T_DateAndTime* pvalue);

EXTERN int XmlEnc_DateAndTime (OSCTXT* pctxt, ASN1T_DateAndTime* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DateAndTime (OSCTXT* pctxt, ASN1T_DateAndTime* pvalue);

EXTERN int asn1JsonEnc_DateAndTime (OSCTXT *pctxt, ASN1T_DateAndTime *pvalue);

EXTERN int asn1JsonDec_DateAndTime (OSCTXT *pctxt, ASN1T_DateAndTime *pvalue);

EXTERN int asn1PrtToStrm_DateAndTime (OSCTXT *pctxt, 
   const char* name, const ASN1T_DateAndTime* pvalue);

EXTERN ASN1T_DateAndTime* new_ASN1T_DateAndTime (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SessionLocation                                           */
/*                                                            */
/**************************************************************/
/*
SessionLocation ::= SEQUENCE {
   ascendingKilometrage [0] BOOLEAN, -- travel direction indicator
   laneCodeNumber [1] INTEGER (0..127) -- lane code number
}
*/
struct EXTERN ASN1T_SessionLocation {
   OSBOOL ascendingKilometrage;
   OSUINT8 laneCodeNumber;
} ;

EXTERN int asn1PE_SessionLocation (OSCTXT* pctxt, ASN1T_SessionLocation* pvalue);

EXTERN int asn1PD_SessionLocation (OSCTXT* pctxt, ASN1T_SessionLocation* pvalue);

EXTERN int XmlEnc_SessionLocation (OSCTXT* pctxt, 
   ASN1T_SessionLocation* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SessionLocation (OSCTXT* pctxt, ASN1T_SessionLocation* pvalue
   );

EXTERN int asn1JsonEnc_SessionLocation (OSCTXT *pctxt, ASN1T_SessionLocation *pvalue);

EXTERN int asn1JsonDec_SessionLocation (OSCTXT *pctxt, ASN1T_SessionLocation *pvalue);

EXTERN int asn1PrtToStrm_SessionLocation (OSCTXT *pctxt, 
   const char* name, const ASN1T_SessionLocation* pvalue);

EXTERN ASN1T_SessionLocation* new_ASN1T_SessionLocation (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ResultOp                                                  */
/*                                                            */
/**************************************************************/
/*
 A code designating whether a card transaction was completed successfully
 or not. Value Assignment : Hexadecimal
 Most significant 4 bits: 0 OK :
 '0x'H OK
 Most significant 4 bits > 0 Not OK :
 '1x'H Not OK, not specified further
 '2x'H Not OK, Abnormal (First or Previous) Event
 '3x'H Not OK, Contract not accepted
 '4x'H Not OK, Account or Purse not accepted
 'x0'H not specified further
 'x1'H Balance close to zero
 'x2'H Balance now negative
 'x3'H Balance Overflow
 'x4'H Provider not accepted
 'x5'H Authentication failure
 x6'H Vehicle Class incorrect
ResultOp ::= INTEGER { correctTransaction(0), obeStatusNotAccepted(1), equipmentStatusNotAccepted(2), contractNotInWhiteList(3), contractIdentifierInBlackList(4), contractIdentifierNotCorrect(5), expiredContract(6), contractRestrictionsNotFulfilled(7), claimedVehicleCharacteristicsNotValid(8), vehicleClassAuthenticationFailed(9), entryVehicleClassDifferentFromExitVehicleClass(10), entryReceiptMissing(11), entryReceiptNotValid(12), entryTollStationNotValid(13), equipmentNotCertified(14), timeDifference(15), accessCredentialsNotAccepted(16), contractAuthenticatorNotAccepted(17), receiptAuthenticatorNotAccepted(18), claimedVehicleCharacteristicsMissing(19), paymentMeansNotAccepted(20), paymentAuthenticatorNotAccepted(21), paymentMeansInBlackList(22), paymentMeansNotCorrect(23), expiredPaymentMeans(24), paymentMeansRestrictionsNotFulfilled(25) } (0..255)
*/
struct EXTERN ResultOp {
   enum Root {
      correctTransaction = 0,
      obeStatusNotAccepted = 1,
      equipmentStatusNotAccepted = 2,
      contractNotInWhiteList = 3,
      contractIdentifierInBlackList = 4,
      contractIdentifierNotCorrect = 5,
      expiredContract = 6,
      contractRestrictionsNotFulfilled = 7,
      claimedVehicleCharacteristicsNotValid = 8,
      vehicleClassAuthenticationFailed = 9,
      entryVehicleClassDifferentFromExitVehicleClass = 10,
      entryReceiptMissing = 11,
      entryReceiptNotValid = 12,
      entryTollStationNotValid = 13,
      equipmentNotCertified = 14,
      timeDifference = 15,
      accessCredentialsNotAccepted = 16,
      contractAuthenticatorNotAccepted = 17,
      receiptAuthenticatorNotAccepted = 18,
      claimedVehicleCharacteristicsMissing = 19,
      paymentMeansNotAccepted = 20,
      paymentAuthenticatorNotAccepted = 21,
      paymentMeansInBlackList = 22,
      paymentMeansNotCorrect = 23,
      expiredPaymentMeans = 24,
      paymentMeansRestrictionsNotFulfilled = 25
   } ;
} ;

typedef OSUINT8 ASN1T_ResultOp;

EXTERN int asn1PE_ResultOp (OSCTXT* pctxt, ASN1T_ResultOp value);

EXTERN int asn1PD_ResultOp (OSCTXT* pctxt, ASN1T_ResultOp* pvalue);

EXTERN int XmlEnc_ResultOp (OSCTXT* pctxt, ASN1T_ResultOp value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ResultOp (OSCTXT* pctxt, ASN1T_ResultOp* pvalue);

EXTERN int asn1JsonEnc_ResultOp (OSCTXT *pctxt, ASN1T_ResultOp *pvalue);

EXTERN int asn1JsonDec_ResultOp (OSCTXT *pctxt, ASN1T_ResultOp *pvalue);

EXTERN int asn1PrtToStrm_ResultOp (OSCTXT *pctxt, 
   const char* name, const ASN1T_ResultOp* pvalue);

EXTERN ASN1T_ResultOp* new_ASN1T_ResultOp (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PaymentFee                                                */
/*                                                            */
/**************************************************************/
/*
PaymentFee ::= SEQUENCE {
--The fee (toll, charge or fare) which is requested by the
--service provider for the service provided or to be provided.
   paymentFeeAmount [0] Int2,
--paymentFeeAmount is the value of the fee being charged for the
--service. If no unit (payment fee unit) is specified, then
--it is known by default.
   paymentFeeUnit [1] PayUnit
}
*/
struct EXTERN ASN1T_PaymentFee {
   ASN1T_Int2 paymentFeeAmount;
   ASN1T_PayUnit paymentFeeUnit;
} ;

EXTERN int asn1PE_PaymentFee (OSCTXT* pctxt, ASN1T_PaymentFee* pvalue);

EXTERN int asn1PD_PaymentFee (OSCTXT* pctxt, ASN1T_PaymentFee* pvalue);

EXTERN int XmlEnc_PaymentFee (OSCTXT* pctxt, ASN1T_PaymentFee* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PaymentFee (OSCTXT* pctxt, ASN1T_PaymentFee* pvalue);

EXTERN int asn1JsonEnc_PaymentFee (OSCTXT *pctxt, ASN1T_PaymentFee *pvalue);

EXTERN int asn1JsonDec_PaymentFee (OSCTXT *pctxt, ASN1T_PaymentFee *pvalue);

EXTERN int asn1PrtToStrm_PaymentFee (OSCTXT *pctxt, 
   const char* name, const ASN1T_PaymentFee* pvalue);

EXTERN ASN1T_PaymentFee* new_ASN1T_PaymentFee (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ReceiptData                                               */
/*                                                            */
/**************************************************************/
/*
ReceiptData ::= SEQUENCE {
   sessionTime [0] DateAndTime,
   sessionServiceProvider [1] Provider,
   locationOfStation [2] Int2,
   sessionLocation [3] SessionLocation,
   sessionType [4] Int1,
   sessionResult [5] ResultOp,
   sessionTariffClass [6] Int1,
   sessionClaimedClass [7] Int1,
   sessionFee [8] PaymentFee,
   sessionContractProvider [9] Provider,
   sessionTypeOfContract [10] OCTET STRING (SIZE (2)),
   sessionContextVersion [11] INTEGER (0..127, ...),
   receiptDataAuthenticator [12] OCTET STRING (SIZE (4))
}
*/
struct EXTERN ASN1T_ReceiptData : public ASN1TPDU {
   ASN1T_DateAndTime sessionTime;
   ASN1T_Provider sessionServiceProvider;
   ASN1T_Int2 locationOfStation;
   ASN1T_SessionLocation sessionLocation;
   ASN1T_Int1 sessionType;
   ASN1T_ResultOp sessionResult;
   ASN1T_Int1 sessionTariffClass;
   ASN1T_Int1 sessionClaimedClass;
   ASN1T_PaymentFee sessionFee;
   ASN1T_Provider sessionContractProvider;
   OSOCTET sessionTypeOfContract[2];
   OSUINT32 sessionContextVersion;
   OSOCTET receiptDataAuthenticator[4];
} ;

class EXTERN ASN1C_ReceiptData :
public ASN1CType
{
protected:
   ASN1T_ReceiptData& msgData;
public:
   /**
    * Control class: ASN1C_ReceiptData
    * Data class:    ASN1T_ReceiptData
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ReceiptData (ASN1T_ReceiptData& data);

   /**
    * Control class: ASN1C_ReceiptData<br/>
    * Data class: ASN1T_ReceiptData<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ReceiptData (OSRTMessageBufferIF& msgBuf, ASN1T_ReceiptData& data);

   virtual ~ASN1C_ReceiptData () {}

   /**
    * Data class: ASN1T_ReceiptData<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ReceiptData.
    */
   inline ASN1T_ReceiptData& getData () { return msgData; }

   /**
    * Data class: ASN1T_ReceiptData<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ReceiptData.
    */
   inline const ASN1T_ReceiptData& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ReceiptData will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ReceiptData");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ReceiptData& operator= (const ASN1C_ReceiptData&) {return *this;}
} ;

EXTERN int asn1PE_ReceiptData (OSCTXT* pctxt, ASN1T_ReceiptData* pvalue);

EXTERN int asn1PD_ReceiptData (OSCTXT* pctxt, ASN1T_ReceiptData* pvalue);

EXTERN int XmlEnc_ReceiptData (OSCTXT* pctxt, ASN1T_ReceiptData* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ReceiptData (OSCTXT* pctxt, ASN1T_ReceiptData* pvalue);

EXTERN int asn1JsonEnc_ReceiptData (OSCTXT *pctxt, ASN1T_ReceiptData *pvalue);

EXTERN int asn1JsonDec_ReceiptData (OSCTXT *pctxt, ASN1T_ReceiptData *pvalue);

EXTERN int asn1PrtToStrm_ReceiptData (OSCTXT *pctxt, 
   const char* name, const ASN1T_ReceiptData* pvalue);

EXTERN ASN1T_ReceiptData* new_ASN1T_ReceiptData (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ReceiptData1                                              */
/*                                                            */
/**************************************************************/
/*
ReceiptData1 ::= ReceiptData
*/
typedef ASN1T_ReceiptData ASN1T_ReceiptData1;

class EXTERN ASN1C_ReceiptData1 :
   public ASN1C_ReceiptData
{
protected:
public:
   /**
    * Control class: ASN1C_ReceiptData1
    * Data class:    ASN1T_ReceiptData1
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ReceiptData1 (ASN1T_ReceiptData1& data);

   /**
    * Control class: ASN1C_ReceiptData1<br/>
    * Data class: ASN1T_ReceiptData1<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ReceiptData1 (OSRTMessageBufferIF& msgBuf, ASN1T_ReceiptData1& data);

   virtual ~ASN1C_ReceiptData1 () {}

   /**
    * Data class: ASN1T_ReceiptData1<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ReceiptData1.
    */
   inline ASN1T_ReceiptData1& getData () { return msgData; }

   /**
    * Data class: ASN1T_ReceiptData1<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ReceiptData1.
    */
   inline const ASN1T_ReceiptData1& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ReceiptData1 will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ReceiptData1");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ReceiptData1& operator= (const ASN1C_ReceiptData1&) {return *this;}
} ;

EXTERN int asn1PE_ReceiptData1 (OSCTXT* pctxt, ASN1T_ReceiptData1* pvalue);

EXTERN int asn1PD_ReceiptData1 (OSCTXT* pctxt, ASN1T_ReceiptData1* pvalue);

EXTERN int XmlEnc_ReceiptData1 (OSCTXT* pctxt, ASN1T_ReceiptData1* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ReceiptData1 (OSCTXT* pctxt, ASN1T_ReceiptData1* pvalue);

EXTERN int asn1JsonEnc_ReceiptData1 (OSCTXT *pctxt, ASN1T_ReceiptData1 *pvalue);

EXTERN int asn1JsonDec_ReceiptData1 (OSCTXT *pctxt, ASN1T_ReceiptData1 *pvalue);

EXTERN int asn1PrtToStrm_ReceiptData1 (OSCTXT *pctxt, 
   const char* name, const ASN1T_ReceiptData1* pvalue);

EXTERN ASN1T_ReceiptData1* new_ASN1T_ReceiptData1 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ReceiptData2                                              */
/*                                                            */
/**************************************************************/
/*
ReceiptData2 ::= ReceiptData
*/
typedef ASN1T_ReceiptData ASN1T_ReceiptData2;

class EXTERN ASN1C_ReceiptData2 :
   public ASN1C_ReceiptData
{
protected:
public:
   /**
    * Control class: ASN1C_ReceiptData2
    * Data class:    ASN1T_ReceiptData2
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ReceiptData2 (ASN1T_ReceiptData2& data);

   /**
    * Control class: ASN1C_ReceiptData2<br/>
    * Data class: ASN1T_ReceiptData2<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ReceiptData2 (OSRTMessageBufferIF& msgBuf, ASN1T_ReceiptData2& data);

   virtual ~ASN1C_ReceiptData2 () {}

   /**
    * Data class: ASN1T_ReceiptData2<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ReceiptData2.
    */
   inline ASN1T_ReceiptData2& getData () { return msgData; }

   /**
    * Data class: ASN1T_ReceiptData2<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ReceiptData2.
    */
   inline const ASN1T_ReceiptData2& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ReceiptData2 will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ReceiptData2");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ReceiptData2& operator= (const ASN1C_ReceiptData2&) {return *this;}
} ;

EXTERN int asn1PE_ReceiptData2 (OSCTXT* pctxt, ASN1T_ReceiptData2* pvalue);

EXTERN int asn1PD_ReceiptData2 (OSCTXT* pctxt, ASN1T_ReceiptData2* pvalue);

EXTERN int XmlEnc_ReceiptData2 (OSCTXT* pctxt, ASN1T_ReceiptData2* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ReceiptData2 (OSCTXT* pctxt, ASN1T_ReceiptData2* pvalue);

EXTERN int asn1JsonEnc_ReceiptData2 (OSCTXT *pctxt, ASN1T_ReceiptData2 *pvalue);

EXTERN int asn1JsonDec_ReceiptData2 (OSCTXT *pctxt, ASN1T_ReceiptData2 *pvalue);

EXTERN int asn1PrtToStrm_ReceiptData2 (OSCTXT *pctxt, 
   const char* name, const ASN1T_ReceiptData2* pvalue);

EXTERN ASN1T_ReceiptData2* new_ASN1T_ReceiptData2 (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ReceiptDistance                                           */
/*                                                            */
/**************************************************************/
/*
ReceiptDistance ::= Int3
*/
typedef ASN1T_Int3 ASN1T_ReceiptDistance;

class EXTERN ASN1C_ReceiptDistance :
   public ASN1C_Int3
{
protected:
public:
   /**
    * Control class: ASN1C_ReceiptDistance
    * Data class:    ASN1T_ReceiptDistance
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ReceiptDistance (ASN1T_ReceiptDistance& data);

   /**
    * Control class: ASN1C_ReceiptDistance<br/>
    * Data class: ASN1T_ReceiptDistance<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ReceiptDistance (OSRTMessageBufferIF& msgBuf
      , ASN1T_ReceiptDistance& data);

   virtual ~ASN1C_ReceiptDistance () {}

   /**
    * Data class: ASN1T_ReceiptDistance<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ReceiptDistance.
    */
   inline ASN1T_ReceiptDistance& getData () { return msgData; }

   /**
    * Data class: ASN1T_ReceiptDistance<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ReceiptDistance.
    */
   inline const ASN1T_ReceiptDistance& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ReceiptDistance will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ReceiptDistance");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ReceiptDistance& operator= (const ASN1C_ReceiptDistance&) {return *this;}
} ;

EXTERN int asn1PE_ReceiptDistance (OSCTXT* pctxt, ASN1T_ReceiptDistance value);

EXTERN int asn1PD_ReceiptDistance (OSCTXT* pctxt, ASN1T_ReceiptDistance* pvalue);

EXTERN int XmlEnc_ReceiptDistance (OSCTXT* pctxt, ASN1T_ReceiptDistance value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ReceiptDistance (OSCTXT* pctxt, ASN1T_ReceiptDistance* pvalue
   );

EXTERN int asn1JsonEnc_ReceiptDistance (OSCTXT *pctxt, ASN1T_ReceiptDistance *pvalue);

EXTERN int asn1JsonDec_ReceiptDistance (OSCTXT *pctxt, ASN1T_ReceiptDistance *pvalue);

EXTERN int asn1PrtToStrm_ReceiptDistance (OSCTXT *pctxt, 
   const char* name, const ASN1T_ReceiptDistance* pvalue);

EXTERN ASN1T_ReceiptDistance* new_ASN1T_ReceiptDistance (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ReceiptICC_Id                                             */
/*                                                            */
/**************************************************************/
/*
ReceiptICC-Id ::= ICC-Id
*/
typedef ASN1T_ICC_Id ASN1T_ReceiptICC_Id;

class EXTERN ASN1C_ReceiptICC_Id :
   public ASN1C_ICC_Id
{
protected:
public:
   /**
    * Control class: ASN1C_ReceiptICC_Id
    * Data class:    ASN1T_ReceiptICC_Id
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ReceiptICC_Id (ASN1T_ReceiptICC_Id& data);

   /**
    * Control class: ASN1C_ReceiptICC_Id<br/>
    * Data class: ASN1T_ReceiptICC_Id<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ReceiptICC_Id (OSRTMessageBufferIF& msgBuf, ASN1T_ReceiptICC_Id& data);

   virtual ~ASN1C_ReceiptICC_Id () {}

   /**
    * Data class: ASN1T_ReceiptICC_Id<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ReceiptICC_Id.
    */
   inline ASN1T_ReceiptICC_Id& getData () { return msgData; }

   /**
    * Data class: ASN1T_ReceiptICC_Id<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ReceiptICC_Id.
    */
   inline const ASN1T_ReceiptICC_Id& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ReceiptICC_Id will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ReceiptICC_Id");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ReceiptICC_Id& operator= (const ASN1C_ReceiptICC_Id&) {return *this;}
} ;

EXTERN int asn1PE_ReceiptICC_Id (OSCTXT* pctxt, ASN1T_ReceiptICC_Id value);

EXTERN int asn1PD_ReceiptICC_Id (OSCTXT* pctxt, ASN1T_ReceiptICC_Id* pvalue);

EXTERN int XmlEnc_ReceiptICC_Id (OSCTXT* pctxt, ASN1T_ReceiptICC_Id* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ReceiptICC_Id (OSCTXT* pctxt, ASN1T_ReceiptICC_Id* pvalue);

EXTERN int asn1JsonEnc_ReceiptICC_Id (OSCTXT *pctxt, ASN1T_ReceiptICC_Id *pvalue);

EXTERN int asn1JsonDec_ReceiptICC_Id (OSCTXT *pctxt, ASN1T_ReceiptICC_Id *pvalue);

EXTERN int asn1PrtToStrm_ReceiptICC_Id (OSCTXT *pctxt, 
   const char* name, const ASN1T_ReceiptICC_Id* pvalue);

EXTERN ASN1T_ReceiptICC_Id* new_ASN1T_ReceiptICC_Id (ASN1CType& ccobj);

EXTERN int asn1Init_ReceiptICC_Id (ASN1T_ReceiptICC_Id* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ReceiptICC_Id (OSCTXT *pctxt, ASN1T_ReceiptICC_Id* pvalue);

/**************************************************************/
/*                                                            */
/*  ReceiptOBUId                                              */
/*                                                            */
/**************************************************************/
/*
ReceiptOBUId ::= OCTET STRING
*/
typedef ASN1TDynOctStr64 ASN1T_ReceiptOBUId;

class EXTERN ASN1C_ReceiptOBUId :
public ASN1CType
{
protected:
   ASN1T_ReceiptOBUId& msgData;
public:
   /**
    * Control class: ASN1C_ReceiptOBUId
    * Data class:    ASN1T_ReceiptOBUId
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ReceiptOBUId (ASN1T_ReceiptOBUId& data);

   /**
    * Control class: ASN1C_ReceiptOBUId<br/>
    * Data class: ASN1T_ReceiptOBUId<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ReceiptOBUId (OSRTMessageBufferIF& msgBuf, ASN1T_ReceiptOBUId& data);

   virtual ~ASN1C_ReceiptOBUId () {}

   /**
    * Data class: ASN1T_ReceiptOBUId<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ReceiptOBUId.
    */
   inline ASN1T_ReceiptOBUId& getData () { return msgData; }

   /**
    * Data class: ASN1T_ReceiptOBUId<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ReceiptOBUId.
    */
   inline const ASN1T_ReceiptOBUId& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ReceiptOBUId will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ReceiptOBUId");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ReceiptOBUId& operator= (const ASN1C_ReceiptOBUId&) {return *this;}
} ;

EXTERN int asn1PE_ReceiptOBUId (OSCTXT* pctxt, ASN1T_ReceiptOBUId value);

EXTERN int asn1PD_ReceiptOBUId (OSCTXT* pctxt, ASN1T_ReceiptOBUId* pvalue);

EXTERN int XmlEnc_ReceiptOBUId (OSCTXT* pctxt, ASN1T_ReceiptOBUId* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ReceiptOBUId (OSCTXT* pctxt, ASN1T_ReceiptOBUId* pvalue);

EXTERN int asn1JsonEnc_ReceiptOBUId (OSCTXT *pctxt, ASN1T_ReceiptOBUId *pvalue);

EXTERN int asn1JsonDec_ReceiptOBUId (OSCTXT *pctxt, ASN1T_ReceiptOBUId *pvalue);

EXTERN int asn1PrtToStrm_ReceiptOBUId (OSCTXT *pctxt, 
   const char* name, const ASN1T_ReceiptOBUId* pvalue);

EXTERN ASN1T_ReceiptOBUId* new_ASN1T_ReceiptOBUId (ASN1CType& ccobj);

EXTERN int asn1Init_ReceiptOBUId (ASN1T_ReceiptOBUId* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ReceiptOBUId (OSCTXT *pctxt, ASN1T_ReceiptOBUId* pvalue);

/**************************************************************/
/*                                                            */
/*  ReceiptServiceSerialNumber                                */
/*                                                            */
/**************************************************************/
/*
ReceiptServiceSerialNumber ::= Int3
*/
typedef ASN1T_Int3 ASN1T_ReceiptServiceSerialNumber;

class EXTERN ASN1C_ReceiptServiceSerialNumber :
   public ASN1C_Int3
{
protected:
public:
   /**
    * Control class: ASN1C_ReceiptServiceSerialNumber
    * Data class:    ASN1T_ReceiptServiceSerialNumber
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ReceiptServiceSerialNumber (ASN1T_ReceiptServiceSerialNumber& data);

   /**
    * Control class: ASN1C_ReceiptServiceSerialNumber<br/>
    * Data class: ASN1T_ReceiptServiceSerialNumber<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ReceiptServiceSerialNumber (OSRTMessageBufferIF& msgBuf
      , ASN1T_ReceiptServiceSerialNumber& data);

   virtual ~ASN1C_ReceiptServiceSerialNumber () {}

   /**
    * Data class: ASN1T_ReceiptServiceSerialNumber<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ReceiptServiceSerialNumber.
    */
   inline ASN1T_ReceiptServiceSerialNumber& getData () { return msgData; }

   /**
    * Data class: ASN1T_ReceiptServiceSerialNumber<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ReceiptServiceSerialNumber.
    */
   inline const ASN1T_ReceiptServiceSerialNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ReceiptServiceSerialNumber will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ReceiptServiceSerialNumber");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ReceiptServiceSerialNumber& operator= (const ASN1C_ReceiptServiceSerialNumber&) {return *this;}
} ;

EXTERN int asn1PE_ReceiptServiceSerialNumber (OSCTXT* pctxt, ASN1T_ReceiptServiceSerialNumber value);

EXTERN int asn1PD_ReceiptServiceSerialNumber (OSCTXT* pctxt, ASN1T_ReceiptServiceSerialNumber* pvalue);

EXTERN int XmlEnc_ReceiptServiceSerialNumber (OSCTXT* pctxt, 
   ASN1T_ReceiptServiceSerialNumber value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ReceiptServiceSerialNumber (OSCTXT* pctxt, 
   ASN1T_ReceiptServiceSerialNumber* pvalue);

EXTERN int asn1JsonEnc_ReceiptServiceSerialNumber (OSCTXT *pctxt, ASN1T_ReceiptServiceSerialNumber *pvalue);

EXTERN int asn1JsonDec_ReceiptServiceSerialNumber (OSCTXT *pctxt, ASN1T_ReceiptServiceSerialNumber *pvalue);

EXTERN int asn1PrtToStrm_ReceiptServiceSerialNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_ReceiptServiceSerialNumber* pvalue);

EXTERN ASN1T_ReceiptServiceSerialNumber* 
   new_ASN1T_ReceiptServiceSerialNumber (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ReceiptAuthenticator                                      */
/*                                                            */
/**************************************************************/
/*
ReceiptAuthenticator ::= OCTET STRING
*/
typedef ASN1TDynOctStr64 ASN1T_ReceiptAuthenticator;

class EXTERN ASN1C_ReceiptAuthenticator :
public ASN1CType
{
protected:
   ASN1T_ReceiptAuthenticator& msgData;
public:
   /**
    * Control class: ASN1C_ReceiptAuthenticator
    * Data class:    ASN1T_ReceiptAuthenticator
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ReceiptAuthenticator (ASN1T_ReceiptAuthenticator& data);

   /**
    * Control class: ASN1C_ReceiptAuthenticator<br/>
    * Data class: ASN1T_ReceiptAuthenticator<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ReceiptAuthenticator (OSRTMessageBufferIF& msgBuf
      , ASN1T_ReceiptAuthenticator& data);

   virtual ~ASN1C_ReceiptAuthenticator () {}

   /**
    * Data class: ASN1T_ReceiptAuthenticator<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ReceiptAuthenticator.
    */
   inline ASN1T_ReceiptAuthenticator& getData () { return msgData; }

   /**
    * Data class: ASN1T_ReceiptAuthenticator<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ReceiptAuthenticator.
    */
   inline const ASN1T_ReceiptAuthenticator& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ReceiptAuthenticator will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ReceiptAuthenticator");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ReceiptAuthenticator& operator= (const ASN1C_ReceiptAuthenticator&) {return *this;}
} ;

EXTERN int asn1PE_ReceiptAuthenticator (OSCTXT* pctxt, ASN1T_ReceiptAuthenticator value);

EXTERN int asn1PD_ReceiptAuthenticator (OSCTXT* pctxt, ASN1T_ReceiptAuthenticator* pvalue);

EXTERN int XmlEnc_ReceiptAuthenticator (OSCTXT* pctxt, 
   ASN1T_ReceiptAuthenticator* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ReceiptAuthenticator (OSCTXT* pctxt, 
   ASN1T_ReceiptAuthenticator* pvalue);

EXTERN int asn1JsonEnc_ReceiptAuthenticator (OSCTXT *pctxt, ASN1T_ReceiptAuthenticator *pvalue);

EXTERN int asn1JsonDec_ReceiptAuthenticator (OSCTXT *pctxt, ASN1T_ReceiptAuthenticator *pvalue);

EXTERN int asn1PrtToStrm_ReceiptAuthenticator (OSCTXT *pctxt, 
   const char* name, const ASN1T_ReceiptAuthenticator* pvalue);

EXTERN ASN1T_ReceiptAuthenticator* 
   new_ASN1T_ReceiptAuthenticator (ASN1CType& ccobj);

EXTERN int asn1Init_ReceiptAuthenticator (ASN1T_ReceiptAuthenticator* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ReceiptAuthenticator (OSCTXT *pctxt, 
   ASN1T_ReceiptAuthenticator* pvalue);

/**************************************************************/
/*                                                            */
/*  ReceiptText                                               */
/*                                                            */
/**************************************************************/
/*
ReceiptText ::= OCTET STRING
*/
typedef ASN1TDynOctStr64 ASN1T_ReceiptText;

class EXTERN ASN1C_ReceiptText :
public ASN1CType
{
protected:
   ASN1T_ReceiptText& msgData;
public:
   /**
    * Control class: ASN1C_ReceiptText
    * Data class:    ASN1T_ReceiptText
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ReceiptText (ASN1T_ReceiptText& data);

   /**
    * Control class: ASN1C_ReceiptText<br/>
    * Data class: ASN1T_ReceiptText<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ReceiptText (OSRTMessageBufferIF& msgBuf, ASN1T_ReceiptText& data);

   virtual ~ASN1C_ReceiptText () {}

   /**
    * Data class: ASN1T_ReceiptText<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ReceiptText.
    */
   inline ASN1T_ReceiptText& getData () { return msgData; }

   /**
    * Data class: ASN1T_ReceiptText<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ReceiptText.
    */
   inline const ASN1T_ReceiptText& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ReceiptText will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ReceiptText");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ReceiptText& operator= (const ASN1C_ReceiptText&) {return *this;}
} ;

EXTERN int asn1PE_ReceiptText (OSCTXT* pctxt, ASN1T_ReceiptText value);

EXTERN int asn1PD_ReceiptText (OSCTXT* pctxt, ASN1T_ReceiptText* pvalue);

EXTERN int XmlEnc_ReceiptText (OSCTXT* pctxt, ASN1T_ReceiptText* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ReceiptText (OSCTXT* pctxt, ASN1T_ReceiptText* pvalue);

EXTERN int asn1JsonEnc_ReceiptText (OSCTXT *pctxt, ASN1T_ReceiptText *pvalue);

EXTERN int asn1JsonDec_ReceiptText (OSCTXT *pctxt, ASN1T_ReceiptText *pvalue);

EXTERN int asn1PrtToStrm_ReceiptText (OSCTXT *pctxt, 
   const char* name, const ASN1T_ReceiptText* pvalue);

EXTERN ASN1T_ReceiptText* new_ASN1T_ReceiptText (ASN1CType& ccobj);

EXTERN int asn1Init_ReceiptText (ASN1T_ReceiptText* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ReceiptText (OSCTXT *pctxt, ASN1T_ReceiptText* pvalue);

/**************************************************************/
/*                                                            */
/*  ResultFin                                                 */
/*                                                            */
/**************************************************************/
/*
ResultFin ::= OCTET STRING (SIZE (1))
*/
struct EXTERN ASN1T_ResultFin {
   OSOCTET data[1];
   // ctors
   ASN1T_ResultFin () {}
   ASN1T_ResultFin (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, 1);
   }
   ASN1T_ResultFin (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
   }
   // assignment operators
   ASN1T_ResultFin& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         OSCRTLSAFEMEMCPY (data, sizeof(data), cstring, sizeof(data));
      }
      return *this;
   }
} ;

EXTERN int asn1PE_ResultFin (OSCTXT* pctxt, ASN1T_ResultFin* pvalue);

EXTERN int asn1PD_ResultFin (OSCTXT* pctxt, ASN1T_ResultFin* pvalue);

EXTERN int XmlEnc_ResultFin (OSCTXT* pctxt, ASN1T_ResultFin* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ResultFin (OSCTXT* pctxt, ASN1T_ResultFin* pvalue);

EXTERN int asn1JsonEnc_ResultFin (OSCTXT *pctxt, ASN1T_ResultFin *pvalue);

EXTERN int asn1JsonDec_ResultFin (OSCTXT *pctxt, ASN1T_ResultFin *pvalue);

EXTERN int asn1PrtToStrm_ResultFin (OSCTXT *pctxt, 
   const char* name, const ASN1T_ResultFin* pvalue);

EXTERN ASN1T_ResultFin* new_ASN1T_ResultFin (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  StationType                                               */
/*                                                            */
/**************************************************************/
/*
StationType ::= ENUMERATED { unspecified(0), closedEntryWithPayment(1), closedEntryWithoutPayment(2), closedTransit(3), closedExit(4), closedCredit(5), mixed(6), passage(7), checkpoint(8), reload(9), reservedForFutureCENUse1(10), reservedForFutureCENUse2(11), reservedForFutureCENUse3(12), reservedForFutureCENUse4(13), privateUse5(14), privateUse6(15) }
*/
struct EXTERN StationType {
   enum Root {
      unspecified = 0,
      closedEntryWithPayment = 1,
      closedEntryWithoutPayment = 2,
      closedTransit = 3,
      closedExit = 4,
      closedCredit = 5,
      mixed = 6,
      passage = 7,
      checkpoint = 8,
      reload = 9,
      reservedForFutureCENUse1 = 10,
      reservedForFutureCENUse2 = 11,
      reservedForFutureCENUse3 = 12,
      reservedForFutureCENUse4 = 13,
      privateUse5 = 14,
      privateUse6 = 15
   } ;
} ;

typedef OSUINT32 ASN1T_StationType;

EXTERN int asn1PE_StationType (OSCTXT* pctxt, ASN1T_StationType value);

EXTERN int asn1PD_StationType (OSCTXT* pctxt, ASN1T_StationType* pvalue);

EXTERN int XmlEnc_StationType (OSCTXT* pctxt, ASN1T_StationType value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_StationType (OSCTXT* pctxt, ASN1T_StationType* pvalue);

EXTERN int asn1JsonEnc_StationType (OSCTXT *pctxt, ASN1T_StationType *pvalue);

EXTERN int asn1JsonDec_StationType (OSCTXT *pctxt, ASN1T_StationType *pvalue);

EXTERN int asn1PrtToStrm_StationType (OSCTXT *pctxt, 
   const char* name, const ASN1T_StationType* pvalue);

EXTERN ASN1T_StationType* new_ASN1T_StationType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_StationType_ENUMTAB[];
#define ASN1T_StationType_ENUMTABSIZE 16

EXTERN const OSUTF8CHAR* ASN1T_StationType_ToString (OSINT32 value);

EXTERN int ASN1T_StationType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_StationType* pvalue);

EXTERN int ASN1T_StationType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_StationType* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerLicencePlateNumber                                 */
/*                                                            */
/**************************************************************/
/*
TrailerLicencePlateNumber ::= LPN
*/
typedef ASN1T_LPN ASN1T_TrailerLicencePlateNumber;

class EXTERN ASN1C_TrailerLicencePlateNumber :
   public ASN1C_LPN
{
protected:
public:
   /**
    * Control class: ASN1C_TrailerLicencePlateNumber
    * Data class:    ASN1T_TrailerLicencePlateNumber
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TrailerLicencePlateNumber (ASN1T_TrailerLicencePlateNumber& data);

   /**
    * Control class: ASN1C_TrailerLicencePlateNumber<br/>
    * Data class: ASN1T_TrailerLicencePlateNumber<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TrailerLicencePlateNumber (OSRTMessageBufferIF& msgBuf
      , ASN1T_TrailerLicencePlateNumber& data);

   virtual ~ASN1C_TrailerLicencePlateNumber () {}

   /**
    * Data class: ASN1T_TrailerLicencePlateNumber<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_TrailerLicencePlateNumber.
    */
   inline ASN1T_TrailerLicencePlateNumber& getData () { return msgData; }

   /**
    * Data class: ASN1T_TrailerLicencePlateNumber<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_TrailerLicencePlateNumber.
    */
   inline const ASN1T_TrailerLicencePlateNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             TrailerLicencePlateNumber will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "TrailerLicencePlateNumber");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_TrailerLicencePlateNumber& operator= (const ASN1C_TrailerLicencePlateNumber&) {return *this;}
} ;

EXTERN int asn1PE_TrailerLicencePlateNumber (OSCTXT* pctxt, ASN1T_TrailerLicencePlateNumber* pvalue);

EXTERN int asn1PD_TrailerLicencePlateNumber (OSCTXT* pctxt, ASN1T_TrailerLicencePlateNumber* pvalue);

EXTERN int XmlEnc_TrailerLicencePlateNumber (OSCTXT* pctxt, 
   ASN1T_TrailerLicencePlateNumber* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerLicencePlateNumber (OSCTXT* pctxt, 
   ASN1T_TrailerLicencePlateNumber* pvalue);

EXTERN int asn1JsonEnc_TrailerLicencePlateNumber (OSCTXT *pctxt, ASN1T_TrailerLicencePlateNumber *pvalue);

EXTERN int asn1JsonDec_TrailerLicencePlateNumber (OSCTXT *pctxt, ASN1T_TrailerLicencePlateNumber *pvalue);

EXTERN int asn1PrtToStrm_TrailerLicencePlateNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerLicencePlateNumber* pvalue);

EXTERN ASN1T_TrailerLicencePlateNumber* 
   new_ASN1T_TrailerLicencePlateNumber (ASN1CType& ccobj);

EXTERN int asn1Init_TrailerLicencePlateNumber (
   ASN1T_TrailerLicencePlateNumber* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TrailerLicencePlateNumber (OSCTXT *pctxt, 
   ASN1T_TrailerLicencePlateNumber* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleAuthenticator                                      */
/*                                                            */
/**************************************************************/
/*
VehicleAuthenticator ::= OCTET STRING
*/
typedef ASN1TDynOctStr64 ASN1T_VehicleAuthenticator;

class EXTERN ASN1C_VehicleAuthenticator :
public ASN1CType
{
protected:
   ASN1T_VehicleAuthenticator& msgData;
public:
   /**
    * Control class: ASN1C_VehicleAuthenticator
    * Data class:    ASN1T_VehicleAuthenticator
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VehicleAuthenticator (ASN1T_VehicleAuthenticator& data);

   /**
    * Control class: ASN1C_VehicleAuthenticator<br/>
    * Data class: ASN1T_VehicleAuthenticator<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VehicleAuthenticator (OSRTMessageBufferIF& msgBuf
      , ASN1T_VehicleAuthenticator& data);

   virtual ~ASN1C_VehicleAuthenticator () {}

   /**
    * Data class: ASN1T_VehicleAuthenticator<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_VehicleAuthenticator.
    */
   inline ASN1T_VehicleAuthenticator& getData () { return msgData; }

   /**
    * Data class: ASN1T_VehicleAuthenticator<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_VehicleAuthenticator.
    */
   inline const ASN1T_VehicleAuthenticator& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             VehicleAuthenticator will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "VehicleAuthenticator");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_VehicleAuthenticator& operator= (const ASN1C_VehicleAuthenticator&) {return *this;}
} ;

EXTERN int asn1PE_VehicleAuthenticator (OSCTXT* pctxt, ASN1T_VehicleAuthenticator value);

EXTERN int asn1PD_VehicleAuthenticator (OSCTXT* pctxt, ASN1T_VehicleAuthenticator* pvalue);

EXTERN int XmlEnc_VehicleAuthenticator (OSCTXT* pctxt, 
   ASN1T_VehicleAuthenticator* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleAuthenticator (OSCTXT* pctxt, 
   ASN1T_VehicleAuthenticator* pvalue);

EXTERN int asn1JsonEnc_VehicleAuthenticator (OSCTXT *pctxt, ASN1T_VehicleAuthenticator *pvalue);

EXTERN int asn1JsonDec_VehicleAuthenticator (OSCTXT *pctxt, ASN1T_VehicleAuthenticator *pvalue);

EXTERN int asn1PrtToStrm_VehicleAuthenticator (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleAuthenticator* pvalue);

EXTERN ASN1T_VehicleAuthenticator* 
   new_ASN1T_VehicleAuthenticator (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleAuthenticator (ASN1T_VehicleAuthenticator* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleAuthenticator (OSCTXT *pctxt, 
   ASN1T_VehicleAuthenticator* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerAxles                                              */
/*                                                            */
/**************************************************************/
/*
TrailerAxles ::= INTEGER (0..7)
                                 number of axles of the trailer when available

*/
typedef OSUINT8 ASN1T_TrailerAxles;

EXTERN int asn1PE_TrailerAxles (OSCTXT* pctxt, ASN1T_TrailerAxles value);

EXTERN int asn1PD_TrailerAxles (OSCTXT* pctxt, ASN1T_TrailerAxles* pvalue);

EXTERN int XmlEnc_TrailerAxles (OSCTXT* pctxt, ASN1T_TrailerAxles value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerAxles (OSCTXT* pctxt, ASN1T_TrailerAxles* pvalue);

EXTERN int asn1JsonEnc_TrailerAxles (OSCTXT *pctxt, ASN1T_TrailerAxles *pvalue);

EXTERN int asn1JsonDec_TrailerAxles (OSCTXT *pctxt, ASN1T_TrailerAxles *pvalue);

EXTERN int asn1PrtToStrm_TrailerAxles (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerAxles* pvalue);

EXTERN ASN1T_TrailerAxles* new_ASN1T_TrailerAxles (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TractorAxles                                              */
/*                                                            */
/**************************************************************/
/*
TractorAxles ::= INTEGER (0..7)
                                 number of axles of the tractor

*/
typedef OSUINT8 ASN1T_TractorAxles;

EXTERN int asn1PE_TractorAxles (OSCTXT* pctxt, ASN1T_TractorAxles value);

EXTERN int asn1PD_TractorAxles (OSCTXT* pctxt, ASN1T_TractorAxles* pvalue);

EXTERN int XmlEnc_TractorAxles (OSCTXT* pctxt, ASN1T_TractorAxles value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TractorAxles (OSCTXT* pctxt, ASN1T_TractorAxles* pvalue);

EXTERN int asn1JsonEnc_TractorAxles (OSCTXT *pctxt, ASN1T_TractorAxles *pvalue);

EXTERN int asn1JsonDec_TractorAxles (OSCTXT *pctxt, ASN1T_TractorAxles *pvalue);

EXTERN int asn1PrtToStrm_TractorAxles (OSCTXT *pctxt, 
   const char* name, const ASN1T_TractorAxles* pvalue);

EXTERN ASN1T_TractorAxles* new_ASN1T_TractorAxles (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleClass                                              */
/*                                                            */
/**************************************************************/
/*
VehicleClass ::= Int1
*/
typedef ASN1T_Int1 ASN1T_VehicleClass;

class EXTERN ASN1C_VehicleClass :
   public ASN1C_Int1
{
protected:
public:
   /**
    * Control class: ASN1C_VehicleClass
    * Data class:    ASN1T_VehicleClass
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VehicleClass (ASN1T_VehicleClass& data);

   /**
    * Control class: ASN1C_VehicleClass<br/>
    * Data class: ASN1T_VehicleClass<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VehicleClass (OSRTMessageBufferIF& msgBuf, ASN1T_VehicleClass& data);

   virtual ~ASN1C_VehicleClass () {}

   /**
    * Data class: ASN1T_VehicleClass<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_VehicleClass.
    */
   inline ASN1T_VehicleClass& getData () { return msgData; }

   /**
    * Data class: ASN1T_VehicleClass<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_VehicleClass.
    */
   inline const ASN1T_VehicleClass& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             VehicleClass will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "VehicleClass");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_VehicleClass& operator= (const ASN1C_VehicleClass&) {return *this;}
} ;

EXTERN int asn1PE_VehicleClass (OSCTXT* pctxt, ASN1T_VehicleClass value);

EXTERN int asn1PD_VehicleClass (OSCTXT* pctxt, ASN1T_VehicleClass* pvalue);

EXTERN int XmlEnc_VehicleClass (OSCTXT* pctxt, ASN1T_VehicleClass value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleClass (OSCTXT* pctxt, ASN1T_VehicleClass* pvalue);

EXTERN int asn1JsonEnc_VehicleClass (OSCTXT *pctxt, ASN1T_VehicleClass *pvalue);

EXTERN int asn1JsonDec_VehicleClass (OSCTXT *pctxt, ASN1T_VehicleClass *pvalue);

EXTERN int asn1PrtToStrm_VehicleClass (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleClass* pvalue);

EXTERN ASN1T_VehicleClass* new_ASN1T_VehicleClass (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleLicencePlateNumber                                 */
/*                                                            */
/**************************************************************/
/*
VehicleLicencePlateNumber ::= LPN
*/
typedef ASN1T_LPN ASN1T_VehicleLicencePlateNumber;

class EXTERN ASN1C_VehicleLicencePlateNumber :
   public ASN1C_LPN
{
protected:
public:
   /**
    * Control class: ASN1C_VehicleLicencePlateNumber
    * Data class:    ASN1T_VehicleLicencePlateNumber
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VehicleLicencePlateNumber (ASN1T_VehicleLicencePlateNumber& data);

   /**
    * Control class: ASN1C_VehicleLicencePlateNumber<br/>
    * Data class: ASN1T_VehicleLicencePlateNumber<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VehicleLicencePlateNumber (OSRTMessageBufferIF& msgBuf
      , ASN1T_VehicleLicencePlateNumber& data);

   virtual ~ASN1C_VehicleLicencePlateNumber () {}

   /**
    * Data class: ASN1T_VehicleLicencePlateNumber<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_VehicleLicencePlateNumber.
    */
   inline ASN1T_VehicleLicencePlateNumber& getData () { return msgData; }

   /**
    * Data class: ASN1T_VehicleLicencePlateNumber<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_VehicleLicencePlateNumber.
    */
   inline const ASN1T_VehicleLicencePlateNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             VehicleLicencePlateNumber will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "VehicleLicencePlateNumber");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_VehicleLicencePlateNumber& operator= (const ASN1C_VehicleLicencePlateNumber&) {return *this;}
} ;

EXTERN int asn1PE_VehicleLicencePlateNumber (OSCTXT* pctxt, ASN1T_VehicleLicencePlateNumber* pvalue);

EXTERN int asn1PD_VehicleLicencePlateNumber (OSCTXT* pctxt, ASN1T_VehicleLicencePlateNumber* pvalue);

EXTERN int XmlEnc_VehicleLicencePlateNumber (OSCTXT* pctxt, 
   ASN1T_VehicleLicencePlateNumber* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleLicencePlateNumber (OSCTXT* pctxt, 
   ASN1T_VehicleLicencePlateNumber* pvalue);

EXTERN int asn1JsonEnc_VehicleLicencePlateNumber (OSCTXT *pctxt, ASN1T_VehicleLicencePlateNumber *pvalue);

EXTERN int asn1JsonDec_VehicleLicencePlateNumber (OSCTXT *pctxt, ASN1T_VehicleLicencePlateNumber *pvalue);

EXTERN int asn1PrtToStrm_VehicleLicencePlateNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleLicencePlateNumber* pvalue);

EXTERN ASN1T_VehicleLicencePlateNumber* 
   new_ASN1T_VehicleLicencePlateNumber (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleLicencePlateNumber (
   ASN1T_VehicleLicencePlateNumber* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleLicencePlateNumber (OSCTXT *pctxt, 
   ASN1T_VehicleLicencePlateNumber* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleIdentificationNumber                               */
/*                                                            */
/**************************************************************/
/*
VehicleIdentificationNumber ::= CS5
*/
typedef ASN1T_CS5 ASN1T_VehicleIdentificationNumber;

class EXTERN ASN1C_VehicleIdentificationNumber :
   public ASN1C_CS5
{
protected:
public:
   /**
    * Control class: ASN1C_VehicleIdentificationNumber
    * Data class:    ASN1T_VehicleIdentificationNumber
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VehicleIdentificationNumber (ASN1T_VehicleIdentificationNumber& data);

   /**
    * Control class: ASN1C_VehicleIdentificationNumber<br/>
    * Data class: ASN1T_VehicleIdentificationNumber<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VehicleIdentificationNumber (OSRTMessageBufferIF& msgBuf
      , ASN1T_VehicleIdentificationNumber& data);

   virtual ~ASN1C_VehicleIdentificationNumber () {}

   /**
    * Data class: ASN1T_VehicleIdentificationNumber<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_VehicleIdentificationNumber.
    */
   inline ASN1T_VehicleIdentificationNumber& getData () { return msgData; }

   /**
    * Data class: ASN1T_VehicleIdentificationNumber<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_VehicleIdentificationNumber.
    */
   inline const ASN1T_VehicleIdentificationNumber& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             VehicleIdentificationNumber will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "VehicleIdentificationNumber");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_VehicleIdentificationNumber& operator= (const ASN1C_VehicleIdentificationNumber&) {return *this;}
} ;

EXTERN int asn1PE_VehicleIdentificationNumber (OSCTXT* pctxt, ASN1T_VehicleIdentificationNumber* pvalue);

EXTERN int asn1PD_VehicleIdentificationNumber (OSCTXT* pctxt, ASN1T_VehicleIdentificationNumber* pvalue);

EXTERN int XmlEnc_VehicleIdentificationNumber (OSCTXT* pctxt, 
   ASN1T_VehicleIdentificationNumber* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleIdentificationNumber (OSCTXT* pctxt, 
   ASN1T_VehicleIdentificationNumber* pvalue);

EXTERN int asn1JsonEnc_VehicleIdentificationNumber (OSCTXT *pctxt, ASN1T_VehicleIdentificationNumber *pvalue);

EXTERN int asn1JsonDec_VehicleIdentificationNumber (OSCTXT *pctxt, ASN1T_VehicleIdentificationNumber *pvalue);

EXTERN int asn1PrtToStrm_VehicleIdentificationNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleIdentificationNumber* pvalue);

EXTERN ASN1T_VehicleIdentificationNumber* 
   new_ASN1T_VehicleIdentificationNumber (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleIdentificationNumber (
   ASN1T_VehicleIdentificationNumber* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleIdentificationNumber (OSCTXT *pctxt, 
   ASN1T_VehicleIdentificationNumber* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleTotalDistance                                      */
/*                                                            */
/**************************************************************/
/*
VehicleTotalDistance ::= Int4
*/
typedef ASN1T_Int4 ASN1T_VehicleTotalDistance;

class EXTERN ASN1C_VehicleTotalDistance :
   public ASN1C_Int4
{
protected:
public:
   /**
    * Control class: ASN1C_VehicleTotalDistance
    * Data class:    ASN1T_VehicleTotalDistance
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VehicleTotalDistance (ASN1T_VehicleTotalDistance& data);

   /**
    * Control class: ASN1C_VehicleTotalDistance<br/>
    * Data class: ASN1T_VehicleTotalDistance<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VehicleTotalDistance (OSRTMessageBufferIF& msgBuf
      , ASN1T_VehicleTotalDistance& data);

   virtual ~ASN1C_VehicleTotalDistance () {}

   /**
    * Data class: ASN1T_VehicleTotalDistance<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_VehicleTotalDistance.
    */
   inline ASN1T_VehicleTotalDistance& getData () { return msgData; }

   /**
    * Data class: ASN1T_VehicleTotalDistance<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_VehicleTotalDistance.
    */
   inline const ASN1T_VehicleTotalDistance& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             VehicleTotalDistance will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "VehicleTotalDistance");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_VehicleTotalDistance& operator= (const ASN1C_VehicleTotalDistance&) {return *this;}
} ;

EXTERN int asn1PE_VehicleTotalDistance (OSCTXT* pctxt, ASN1T_VehicleTotalDistance value);

EXTERN int asn1PD_VehicleTotalDistance (OSCTXT* pctxt, ASN1T_VehicleTotalDistance* pvalue);

EXTERN int XmlEnc_VehicleTotalDistance (OSCTXT* pctxt, 
   ASN1T_VehicleTotalDistance value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleTotalDistance (OSCTXT* pctxt, 
   ASN1T_VehicleTotalDistance* pvalue);

EXTERN int asn1JsonEnc_VehicleTotalDistance (OSCTXT *pctxt, ASN1T_VehicleTotalDistance *pvalue);

EXTERN int asn1JsonDec_VehicleTotalDistance (OSCTXT *pctxt, ASN1T_VehicleTotalDistance *pvalue);

EXTERN int asn1PrtToStrm_VehicleTotalDistance (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleTotalDistance* pvalue);

EXTERN ASN1T_VehicleTotalDistance* 
   new_ASN1T_VehicleTotalDistance (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleWeightLaden                                        */
/*                                                            */
/**************************************************************/
/*
VehicleWeightLaden ::= Int2
*/
typedef ASN1T_Int2 ASN1T_VehicleWeightLaden;

class EXTERN ASN1C_VehicleWeightLaden :
   public ASN1C_Int2
{
protected:
public:
   /**
    * Control class: ASN1C_VehicleWeightLaden
    * Data class:    ASN1T_VehicleWeightLaden
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VehicleWeightLaden (ASN1T_VehicleWeightLaden& data);

   /**
    * Control class: ASN1C_VehicleWeightLaden<br/>
    * Data class: ASN1T_VehicleWeightLaden<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VehicleWeightLaden (OSRTMessageBufferIF& msgBuf
      , ASN1T_VehicleWeightLaden& data);

   virtual ~ASN1C_VehicleWeightLaden () {}

   /**
    * Data class: ASN1T_VehicleWeightLaden<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_VehicleWeightLaden.
    */
   inline ASN1T_VehicleWeightLaden& getData () { return msgData; }

   /**
    * Data class: ASN1T_VehicleWeightLaden<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_VehicleWeightLaden.
    */
   inline const ASN1T_VehicleWeightLaden& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             VehicleWeightLaden will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "VehicleWeightLaden");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_VehicleWeightLaden& operator= (const ASN1C_VehicleWeightLaden&) {return *this;}
} ;

EXTERN int asn1PE_VehicleWeightLaden (OSCTXT* pctxt, ASN1T_VehicleWeightLaden value);

EXTERN int asn1PD_VehicleWeightLaden (OSCTXT* pctxt, ASN1T_VehicleWeightLaden* pvalue);

EXTERN int XmlEnc_VehicleWeightLaden (OSCTXT* pctxt, 
   ASN1T_VehicleWeightLaden value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleWeightLaden (OSCTXT* pctxt, 
   ASN1T_VehicleWeightLaden* pvalue);

EXTERN int asn1JsonEnc_VehicleWeightLaden (OSCTXT *pctxt, ASN1T_VehicleWeightLaden *pvalue);

EXTERN int asn1JsonDec_VehicleWeightLaden (OSCTXT *pctxt, ASN1T_VehicleWeightLaden *pvalue);

EXTERN int asn1PrtToStrm_VehicleWeightLaden (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleWeightLaden* pvalue);

EXTERN ASN1T_VehicleWeightLaden* 
   new_ASN1T_VehicleWeightLaden (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleCurrentMaxTrainWeight                              */
/*                                                            */
/**************************************************************/
/*
VehicleCurrentMaxTrainWeight ::= Int2
*/
typedef ASN1T_Int2 ASN1T_VehicleCurrentMaxTrainWeight;

class EXTERN ASN1C_VehicleCurrentMaxTrainWeight :
   public ASN1C_Int2
{
protected:
public:
   /**
    * Control class: ASN1C_VehicleCurrentMaxTrainWeight
    * Data class:    ASN1T_VehicleCurrentMaxTrainWeight
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VehicleCurrentMaxTrainWeight
       (ASN1T_VehicleCurrentMaxTrainWeight& data);

   /**
    * Control class: ASN1C_VehicleCurrentMaxTrainWeight<br/>
    * Data class: ASN1T_VehicleCurrentMaxTrainWeight<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VehicleCurrentMaxTrainWeight (OSRTMessageBufferIF& msgBuf
      , ASN1T_VehicleCurrentMaxTrainWeight& data);

   virtual ~ASN1C_VehicleCurrentMaxTrainWeight () {}

   /**
    * Data class: ASN1T_VehicleCurrentMaxTrainWeight<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_VehicleCurrentMaxTrainWeight.
    */
   inline ASN1T_VehicleCurrentMaxTrainWeight& getData () { return msgData; }

   /**
    * Data class: ASN1T_VehicleCurrentMaxTrainWeight<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_VehicleCurrentMaxTrainWeight.
    */
   inline const ASN1T_VehicleCurrentMaxTrainWeight& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             VehicleCurrentMaxTrainWeight will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "VehicleCurrentMaxTrainWeight");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_VehicleCurrentMaxTrainWeight& operator= (const ASN1C_VehicleCurrentMaxTrainWeight&) {return *this;}
} ;

EXTERN int asn1PE_VehicleCurrentMaxTrainWeight (OSCTXT* pctxt, ASN1T_VehicleCurrentMaxTrainWeight value);

EXTERN int asn1PD_VehicleCurrentMaxTrainWeight (OSCTXT* pctxt, ASN1T_VehicleCurrentMaxTrainWeight* pvalue);

EXTERN int XmlEnc_VehicleCurrentMaxTrainWeight (OSCTXT* pctxt, 
   ASN1T_VehicleCurrentMaxTrainWeight value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleCurrentMaxTrainWeight (OSCTXT* pctxt, 
   ASN1T_VehicleCurrentMaxTrainWeight* pvalue);

EXTERN int asn1JsonEnc_VehicleCurrentMaxTrainWeight (OSCTXT *pctxt, ASN1T_VehicleCurrentMaxTrainWeight *pvalue);

EXTERN int asn1JsonDec_VehicleCurrentMaxTrainWeight (OSCTXT *pctxt, ASN1T_VehicleCurrentMaxTrainWeight *pvalue);

EXTERN int asn1PrtToStrm_VehicleCurrentMaxTrainWeight (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleCurrentMaxTrainWeight* pvalue);

EXTERN ASN1T_VehicleCurrentMaxTrainWeight* 
   new_ASN1T_VehicleCurrentMaxTrainWeight (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TrailerDetails_trailerType                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TrailerDetails'
*/
struct EXTERN TrailerDetails_trailerType {
   enum Root {
      notPresent = 0,
      trailer = 1,
      semitrailer = 2
   } ;
} ;

typedef OSUINT8 ASN1T_TrailerDetails_trailerType;

EXTERN int asn1PE_TrailerDetails_trailerType (OSCTXT* pctxt, ASN1T_TrailerDetails_trailerType value);

EXTERN int asn1PD_TrailerDetails_trailerType (OSCTXT* pctxt, ASN1T_TrailerDetails_trailerType* pvalue);

EXTERN int XmlEnc_TrailerDetails_trailerType (OSCTXT* pctxt, 
   ASN1T_TrailerDetails_trailerType value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerDetails_trailerType (OSCTXT* pctxt, 
   ASN1T_TrailerDetails_trailerType* pvalue);

EXTERN int asn1JsonEnc_TrailerDetails_trailerType (OSCTXT *pctxt, ASN1T_TrailerDetails_trailerType *pvalue);

EXTERN int asn1JsonDec_TrailerDetails_trailerType (OSCTXT *pctxt, ASN1T_TrailerDetails_trailerType *pvalue);

EXTERN int asn1PrtToStrm_TrailerDetails_trailerType (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerDetails_trailerType* pvalue);

EXTERN ASN1T_TrailerDetails_trailerType* 
   new_ASN1T_TrailerDetails_trailerType (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleAxles_vehicleAxlesNumber_tyreType                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleAxles'
*/
struct EXTERN VehicleAxles_vehicleAxlesNumber_tyreType {
   enum Root {
      notSpecified = 0,
      singleTyre = 1,
      dualTyres = 2,
      reservedForUse = 3
   } ;
} ;

typedef OSUINT32 ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType;

EXTERN int asn1PE_VehicleAxles_vehicleAxlesNumber_tyreType (OSCTXT* pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType value);

EXTERN int asn1PD_VehicleAxles_vehicleAxlesNumber_tyreType (OSCTXT* pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType* pvalue);

EXTERN int XmlEnc_VehicleAxles_vehicleAxlesNumber_tyreType (OSCTXT* pctxt, 
   ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleAxles_vehicleAxlesNumber_tyreType (OSCTXT* pctxt, 
   ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType* pvalue);

EXTERN int asn1JsonEnc_VehicleAxles_vehicleAxlesNumber_tyreType (OSCTXT *pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType *pvalue);

EXTERN int asn1JsonDec_VehicleAxles_vehicleAxlesNumber_tyreType (OSCTXT *pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType *pvalue);

EXTERN int asn1PrtToStrm_VehicleAxles_vehicleAxlesNumber_tyreType (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType* pvalue);

EXTERN ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType* 
   new_ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType_ENUMTAB[];
#define ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType_ToString (OSINT32 value);

EXTERN 
   int ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, 
      ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType* pvalue);

EXTERN 
   int ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType* pvalue);

/**************************************************************/
/*                                                            */
/*  AddRq                                                     */
/*                                                            */
/**************************************************************/
/*
AddRq ::= SEQUENCE {
   attributeId [0] INTEGER (0..127, ...),
   value [1] INTEGER
}
*/
struct EXTERN ASN1T_AddRq : public ASN1TPDU {
   OSUINT32 attributeId;
   OSINT64 value;
} ;

class EXTERN ASN1C_AddRq :
public ASN1CType
{
protected:
   ASN1T_AddRq& msgData;
public:
   /**
    * Control class: ASN1C_AddRq
    * Data class:    ASN1T_AddRq
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_AddRq (ASN1T_AddRq& data);

   /**
    * Control class: ASN1C_AddRq<br/>
    * Data class: ASN1T_AddRq<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_AddRq (OSRTMessageBufferIF& msgBuf, ASN1T_AddRq& data);

   virtual ~ASN1C_AddRq () {}

   /**
    * Data class: ASN1T_AddRq<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_AddRq.
    */
   inline ASN1T_AddRq& getData () { return msgData; }

   /**
    * Data class: ASN1T_AddRq<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_AddRq.
    */
   inline const ASN1T_AddRq& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             AddRq will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "AddRq");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_AddRq& operator= (const ASN1C_AddRq&) {return *this;}
} ;

EXTERN int asn1PE_AddRq (OSCTXT* pctxt, ASN1T_AddRq* pvalue);

EXTERN int asn1PD_AddRq (OSCTXT* pctxt, ASN1T_AddRq* pvalue);

EXTERN int XmlEnc_AddRq (OSCTXT* pctxt, ASN1T_AddRq* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AddRq (OSCTXT* pctxt, ASN1T_AddRq* pvalue);

EXTERN int asn1JsonEnc_AddRq (OSCTXT *pctxt, ASN1T_AddRq *pvalue);

EXTERN int asn1JsonDec_AddRq (OSCTXT *pctxt, ASN1T_AddRq *pvalue);

EXTERN int asn1PrtToStrm_AddRq (OSCTXT *pctxt, 
   const char* name, const ASN1T_AddRq* pvalue);

EXTERN ASN1T_AddRq* new_ASN1T_AddRq (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ChannelRq                                                 */
/*                                                            */
/**************************************************************/
/*
ChannelRq ::= SEQUENCE {
   channelId [0] ChannelId,
   apdu [1] OCTET STRING
}
*/
struct EXTERN ASN1T_ChannelRq : public ASN1TPDU {
   ASN1T_ChannelId channelId;
   ASN1TDynOctStr64 apdu;
   ASN1T_ChannelRq ();
   ~ASN1T_ChannelRq ();
} ;

class EXTERN ASN1C_ChannelRq :
public ASN1CType
{
protected:
   ASN1T_ChannelRq& msgData;
public:
   /**
    * Control class: ASN1C_ChannelRq
    * Data class:    ASN1T_ChannelRq
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ChannelRq (ASN1T_ChannelRq& data);

   /**
    * Control class: ASN1C_ChannelRq<br/>
    * Data class: ASN1T_ChannelRq<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ChannelRq (OSRTMessageBufferIF& msgBuf, ASN1T_ChannelRq& data);

   virtual ~ASN1C_ChannelRq () {}

   /**
    * Data class: ASN1T_ChannelRq<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ChannelRq.
    */
   inline ASN1T_ChannelRq& getData () { return msgData; }

   /**
    * Data class: ASN1T_ChannelRq<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ChannelRq.
    */
   inline const ASN1T_ChannelRq& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ChannelRq will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ChannelRq");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ChannelRq& operator= (const ASN1C_ChannelRq&) {return *this;}
} ;

EXTERN int asn1PE_ChannelRq (OSCTXT* pctxt, ASN1T_ChannelRq* pvalue);

EXTERN int asn1PD_ChannelRq (OSCTXT* pctxt, ASN1T_ChannelRq* pvalue);

EXTERN int XmlEnc_ChannelRq (OSCTXT* pctxt, ASN1T_ChannelRq* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ChannelRq (OSCTXT* pctxt, ASN1T_ChannelRq* pvalue);

EXTERN int asn1JsonEnc_ChannelRq (OSCTXT *pctxt, ASN1T_ChannelRq *pvalue);

EXTERN int asn1JsonDec_ChannelRq (OSCTXT *pctxt, ASN1T_ChannelRq *pvalue);

EXTERN int asn1PrtToStrm_ChannelRq (OSCTXT *pctxt, 
   const char* name, const ASN1T_ChannelRq* pvalue);

EXTERN ASN1T_ChannelRq* new_ASN1T_ChannelRq (ASN1CType& ccobj);

EXTERN int asn1Init_ChannelRq (ASN1T_ChannelRq* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ChannelRq (OSCTXT *pctxt, ASN1T_ChannelRq* pvalue);

/**************************************************************/
/*                                                            */
/*  ChannelRs                                                 */
/*                                                            */
/**************************************************************/
/*
ChannelRs ::= SEQUENCE {
   channelId [0] ChannelId,
   apdu [1] OCTET STRING
}
*/
struct EXTERN ASN1T_ChannelRs : public ASN1TPDU {
   ASN1T_ChannelId channelId;
   ASN1TDynOctStr64 apdu;
   ASN1T_ChannelRs ();
   ~ASN1T_ChannelRs ();
} ;

class EXTERN ASN1C_ChannelRs :
public ASN1CType
{
protected:
   ASN1T_ChannelRs& msgData;
public:
   /**
    * Control class: ASN1C_ChannelRs
    * Data class:    ASN1T_ChannelRs
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ChannelRs (ASN1T_ChannelRs& data);

   /**
    * Control class: ASN1C_ChannelRs<br/>
    * Data class: ASN1T_ChannelRs<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ChannelRs (OSRTMessageBufferIF& msgBuf, ASN1T_ChannelRs& data);

   virtual ~ASN1C_ChannelRs () {}

   /**
    * Data class: ASN1T_ChannelRs<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ChannelRs.
    */
   inline ASN1T_ChannelRs& getData () { return msgData; }

   /**
    * Data class: ASN1T_ChannelRs<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ChannelRs.
    */
   inline const ASN1T_ChannelRs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ChannelRs will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ChannelRs");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ChannelRs& operator= (const ASN1C_ChannelRs&) {return *this;}
} ;

EXTERN int asn1PE_ChannelRs (OSCTXT* pctxt, ASN1T_ChannelRs* pvalue);

EXTERN int asn1PD_ChannelRs (OSCTXT* pctxt, ASN1T_ChannelRs* pvalue);

EXTERN int XmlEnc_ChannelRs (OSCTXT* pctxt, ASN1T_ChannelRs* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ChannelRs (OSCTXT* pctxt, ASN1T_ChannelRs* pvalue);

EXTERN int asn1JsonEnc_ChannelRs (OSCTXT *pctxt, ASN1T_ChannelRs *pvalue);

EXTERN int asn1JsonDec_ChannelRs (OSCTXT *pctxt, ASN1T_ChannelRs *pvalue);

EXTERN int asn1PrtToStrm_ChannelRs (OSCTXT *pctxt, 
   const char* name, const ASN1T_ChannelRs* pvalue);

EXTERN ASN1T_ChannelRs* new_ASN1T_ChannelRs (ASN1CType& ccobj);

EXTERN int asn1Init_ChannelRs (ASN1T_ChannelRs* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ChannelRs (OSCTXT *pctxt, ASN1T_ChannelRs* pvalue);

/**************************************************************/
/*                                                            */
/*  CopyRq                                                    */
/*                                                            */
/**************************************************************/
/*
CopyRq ::= SEQUENCE {
   destinationEID [0] INTEGER (0..127, ...),
   attributeIdList [1] AttributeIdList
}
*/
struct EXTERN ASN1T_CopyRq : public ASN1TPDU {
   OSUINT32 destinationEID;
   ASN1T_AttributeIdList attributeIdList;
   ASN1T_CopyRq ();
   ~ASN1T_CopyRq ();
} ;

class EXTERN ASN1C_CopyRq :
public ASN1CType
{
protected:
   ASN1T_CopyRq& msgData;
public:
   /**
    * Control class: ASN1C_CopyRq
    * Data class:    ASN1T_CopyRq
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_CopyRq (ASN1T_CopyRq& data);

   /**
    * Control class: ASN1C_CopyRq<br/>
    * Data class: ASN1T_CopyRq<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_CopyRq (OSRTMessageBufferIF& msgBuf, ASN1T_CopyRq& data);

   virtual ~ASN1C_CopyRq () {}

   /**
    * Data class: ASN1T_CopyRq<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_CopyRq.
    */
   inline ASN1T_CopyRq& getData () { return msgData; }

   /**
    * Data class: ASN1T_CopyRq<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_CopyRq.
    */
   inline const ASN1T_CopyRq& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             CopyRq will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "CopyRq");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_CopyRq& operator= (const ASN1C_CopyRq&) {return *this;}
} ;

EXTERN int asn1PE_CopyRq (OSCTXT* pctxt, ASN1T_CopyRq* pvalue);

EXTERN int asn1PD_CopyRq (OSCTXT* pctxt, ASN1T_CopyRq* pvalue);

EXTERN int XmlEnc_CopyRq (OSCTXT* pctxt, ASN1T_CopyRq* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CopyRq (OSCTXT* pctxt, ASN1T_CopyRq* pvalue);

EXTERN int asn1JsonEnc_CopyRq (OSCTXT *pctxt, ASN1T_CopyRq *pvalue);

EXTERN int asn1JsonDec_CopyRq (OSCTXT *pctxt, ASN1T_CopyRq *pvalue);

EXTERN int asn1PrtToStrm_CopyRq (OSCTXT *pctxt, 
   const char* name, const ASN1T_CopyRq* pvalue);

EXTERN ASN1T_CopyRq* new_ASN1T_CopyRq (ASN1CType& ccobj);

EXTERN int asn1Init_CopyRq (ASN1T_CopyRq* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_CopyRq (OSCTXT *pctxt, ASN1T_CopyRq* pvalue);

/**************************************************************/
/*                                                            */
/*  CreditRq                                                  */
/*                                                            */
/**************************************************************/
/*
CreditRq ::= SEQUENCE {
   refund [0] PaymentFee,
   nonce [1] OCTET STRING,
   key [2] INTEGER (0..255)
}
*/
struct EXTERN ASN1T_CreditRq : public ASN1TPDU {
   ASN1T_PaymentFee refund;
   ASN1TDynOctStr64 nonce;
   OSUINT8 key;
   ASN1T_CreditRq ();
   ~ASN1T_CreditRq ();
} ;

class EXTERN ASN1C_CreditRq :
public ASN1CType
{
protected:
   ASN1T_CreditRq& msgData;
public:
   /**
    * Control class: ASN1C_CreditRq
    * Data class:    ASN1T_CreditRq
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_CreditRq (ASN1T_CreditRq& data);

   /**
    * Control class: ASN1C_CreditRq<br/>
    * Data class: ASN1T_CreditRq<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_CreditRq (OSRTMessageBufferIF& msgBuf, ASN1T_CreditRq& data);

   virtual ~ASN1C_CreditRq () {}

   /**
    * Data class: ASN1T_CreditRq<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_CreditRq.
    */
   inline ASN1T_CreditRq& getData () { return msgData; }

   /**
    * Data class: ASN1T_CreditRq<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_CreditRq.
    */
   inline const ASN1T_CreditRq& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             CreditRq will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "CreditRq");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_CreditRq& operator= (const ASN1C_CreditRq&) {return *this;}
} ;

EXTERN int asn1PE_CreditRq (OSCTXT* pctxt, ASN1T_CreditRq* pvalue);

EXTERN int asn1PD_CreditRq (OSCTXT* pctxt, ASN1T_CreditRq* pvalue);

EXTERN int XmlEnc_CreditRq (OSCTXT* pctxt, ASN1T_CreditRq* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CreditRq (OSCTXT* pctxt, ASN1T_CreditRq* pvalue);

EXTERN int asn1JsonEnc_CreditRq (OSCTXT *pctxt, ASN1T_CreditRq *pvalue);

EXTERN int asn1JsonDec_CreditRq (OSCTXT *pctxt, ASN1T_CreditRq *pvalue);

EXTERN int asn1PrtToStrm_CreditRq (OSCTXT *pctxt, 
   const char* name, const ASN1T_CreditRq* pvalue);

EXTERN ASN1T_CreditRq* new_ASN1T_CreditRq (ASN1CType& ccobj);

EXTERN int asn1Init_CreditRq (ASN1T_CreditRq* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_CreditRq (OSCTXT *pctxt, ASN1T_CreditRq* pvalue);

/**************************************************************/
/*                                                            */
/*  CreditRs                                                  */
/*                                                            */
/**************************************************************/
/*
CreditRs ::= SEQUENCE {
   creditResult [0] ResultFin,
   creditAuthenticator [1] OCTET STRING
}
*/
struct EXTERN ASN1T_CreditRs : public ASN1TPDU {
   ASN1T_ResultFin creditResult;
   ASN1TDynOctStr64 creditAuthenticator;
   ASN1T_CreditRs ();
   ~ASN1T_CreditRs ();
} ;

class EXTERN ASN1C_CreditRs :
public ASN1CType
{
protected:
   ASN1T_CreditRs& msgData;
public:
   /**
    * Control class: ASN1C_CreditRs
    * Data class:    ASN1T_CreditRs
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_CreditRs (ASN1T_CreditRs& data);

   /**
    * Control class: ASN1C_CreditRs<br/>
    * Data class: ASN1T_CreditRs<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_CreditRs (OSRTMessageBufferIF& msgBuf, ASN1T_CreditRs& data);

   virtual ~ASN1C_CreditRs () {}

   /**
    * Data class: ASN1T_CreditRs<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_CreditRs.
    */
   inline ASN1T_CreditRs& getData () { return msgData; }

   /**
    * Data class: ASN1T_CreditRs<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_CreditRs.
    */
   inline const ASN1T_CreditRs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             CreditRs will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "CreditRs");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_CreditRs& operator= (const ASN1C_CreditRs&) {return *this;}
} ;

EXTERN int asn1PE_CreditRs (OSCTXT* pctxt, ASN1T_CreditRs* pvalue);

EXTERN int asn1PD_CreditRs (OSCTXT* pctxt, ASN1T_CreditRs* pvalue);

EXTERN int XmlEnc_CreditRs (OSCTXT* pctxt, ASN1T_CreditRs* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CreditRs (OSCTXT* pctxt, ASN1T_CreditRs* pvalue);

EXTERN int asn1JsonEnc_CreditRs (OSCTXT *pctxt, ASN1T_CreditRs *pvalue);

EXTERN int asn1JsonDec_CreditRs (OSCTXT *pctxt, ASN1T_CreditRs *pvalue);

EXTERN int asn1PrtToStrm_CreditRs (OSCTXT *pctxt, 
   const char* name, const ASN1T_CreditRs* pvalue);

EXTERN ASN1T_CreditRs* new_ASN1T_CreditRs (ASN1CType& ccobj);

EXTERN int asn1Init_CreditRs (ASN1T_CreditRs* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_CreditRs (OSCTXT *pctxt, ASN1T_CreditRs* pvalue);

/**************************************************************/
/*                                                            */
/*  DebitRq                                                   */
/*                                                            */
/**************************************************************/
/*
DebitRq ::= SEQUENCE {
   debitPaymentFee [0] PaymentFee,
   nonce [1] OCTET STRING,
   keyRef [2] INTEGER (0..255)
}
*/
struct EXTERN ASN1T_DebitRq : public ASN1TPDU {
   ASN1T_PaymentFee debitPaymentFee;
   ASN1TDynOctStr64 nonce;
   OSUINT8 keyRef;
   ASN1T_DebitRq ();
   ~ASN1T_DebitRq ();
} ;

class EXTERN ASN1C_DebitRq :
public ASN1CType
{
protected:
   ASN1T_DebitRq& msgData;
public:
   /**
    * Control class: ASN1C_DebitRq
    * Data class:    ASN1T_DebitRq
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_DebitRq (ASN1T_DebitRq& data);

   /**
    * Control class: ASN1C_DebitRq<br/>
    * Data class: ASN1T_DebitRq<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_DebitRq (OSRTMessageBufferIF& msgBuf, ASN1T_DebitRq& data);

   virtual ~ASN1C_DebitRq () {}

   /**
    * Data class: ASN1T_DebitRq<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_DebitRq.
    */
   inline ASN1T_DebitRq& getData () { return msgData; }

   /**
    * Data class: ASN1T_DebitRq<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_DebitRq.
    */
   inline const ASN1T_DebitRq& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             DebitRq will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "DebitRq");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_DebitRq& operator= (const ASN1C_DebitRq&) {return *this;}
} ;

EXTERN int asn1PE_DebitRq (OSCTXT* pctxt, ASN1T_DebitRq* pvalue);

EXTERN int asn1PD_DebitRq (OSCTXT* pctxt, ASN1T_DebitRq* pvalue);

EXTERN int XmlEnc_DebitRq (OSCTXT* pctxt, ASN1T_DebitRq* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DebitRq (OSCTXT* pctxt, ASN1T_DebitRq* pvalue);

EXTERN int asn1JsonEnc_DebitRq (OSCTXT *pctxt, ASN1T_DebitRq *pvalue);

EXTERN int asn1JsonDec_DebitRq (OSCTXT *pctxt, ASN1T_DebitRq *pvalue);

EXTERN int asn1PrtToStrm_DebitRq (OSCTXT *pctxt, 
   const char* name, const ASN1T_DebitRq* pvalue);

EXTERN ASN1T_DebitRq* new_ASN1T_DebitRq (ASN1CType& ccobj);

EXTERN int asn1Init_DebitRq (ASN1T_DebitRq* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_DebitRq (OSCTXT *pctxt, ASN1T_DebitRq* pvalue);

/**************************************************************/
/*                                                            */
/*  DebitRs                                                   */
/*                                                            */
/**************************************************************/
/*
DebitRs ::= SEQUENCE {
   debitResult [0] ResultFin,
   debitAuthenticator [1] OCTET STRING
}
*/
struct EXTERN ASN1T_DebitRs : public ASN1TPDU {
   ASN1T_ResultFin debitResult;
   ASN1TDynOctStr64 debitAuthenticator;
   ASN1T_DebitRs ();
   ~ASN1T_DebitRs ();
} ;

class EXTERN ASN1C_DebitRs :
public ASN1CType
{
protected:
   ASN1T_DebitRs& msgData;
public:
   /**
    * Control class: ASN1C_DebitRs
    * Data class:    ASN1T_DebitRs
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_DebitRs (ASN1T_DebitRs& data);

   /**
    * Control class: ASN1C_DebitRs<br/>
    * Data class: ASN1T_DebitRs<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_DebitRs (OSRTMessageBufferIF& msgBuf, ASN1T_DebitRs& data);

   virtual ~ASN1C_DebitRs () {}

   /**
    * Data class: ASN1T_DebitRs<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_DebitRs.
    */
   inline ASN1T_DebitRs& getData () { return msgData; }

   /**
    * Data class: ASN1T_DebitRs<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_DebitRs.
    */
   inline const ASN1T_DebitRs& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             DebitRs will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "DebitRs");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_DebitRs& operator= (const ASN1C_DebitRs&) {return *this;}
} ;

EXTERN int asn1PE_DebitRs (OSCTXT* pctxt, ASN1T_DebitRs* pvalue);

EXTERN int asn1PD_DebitRs (OSCTXT* pctxt, ASN1T_DebitRs* pvalue);

EXTERN int XmlEnc_DebitRs (OSCTXT* pctxt, ASN1T_DebitRs* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DebitRs (OSCTXT* pctxt, ASN1T_DebitRs* pvalue);

EXTERN int asn1JsonEnc_DebitRs (OSCTXT *pctxt, ASN1T_DebitRs *pvalue);

EXTERN int asn1JsonDec_DebitRs (OSCTXT *pctxt, ASN1T_DebitRs *pvalue);

EXTERN int asn1PrtToStrm_DebitRs (OSCTXT *pctxt, 
   const char* name, const ASN1T_DebitRs* pvalue);

EXTERN ASN1T_DebitRs* new_ASN1T_DebitRs (ASN1CType& ccobj);

EXTERN int asn1Init_DebitRs (ASN1T_DebitRs* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_DebitRs (OSCTXT *pctxt, ASN1T_DebitRs* pvalue);

/**************************************************************/
/*                                                            */
/*  GetInstanceRq                                             */
/*                                                            */
/**************************************************************/
/*
GetInstanceRq ::= SEQUENCE {
   posOfFirstInstance [0] INTEGER (0..255), -- position of first instance to be retrieved
   posOfLastInstance [1] INTEGER (0..255), -- position last instance to be retrieved
   attributeIdList [2] AttributeIdList -- Ids of attributes to be retrieved
}
*/
struct EXTERN ASN1T_GetInstanceRq : public ASN1TPDU {
   OSUINT8 posOfFirstInstance;
   OSUINT8 posOfLastInstance;
   ASN1T_AttributeIdList attributeIdList;
   ASN1T_GetInstanceRq ();
   ~ASN1T_GetInstanceRq ();
} ;

class EXTERN ASN1C_GetInstanceRq :
public ASN1CType
{
protected:
   ASN1T_GetInstanceRq& msgData;
public:
   /**
    * Control class: ASN1C_GetInstanceRq
    * Data class:    ASN1T_GetInstanceRq
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_GetInstanceRq (ASN1T_GetInstanceRq& data);

   /**
    * Control class: ASN1C_GetInstanceRq<br/>
    * Data class: ASN1T_GetInstanceRq<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_GetInstanceRq (OSRTMessageBufferIF& msgBuf, ASN1T_GetInstanceRq& data);

   virtual ~ASN1C_GetInstanceRq () {}

   /**
    * Data class: ASN1T_GetInstanceRq<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_GetInstanceRq.
    */
   inline ASN1T_GetInstanceRq& getData () { return msgData; }

   /**
    * Data class: ASN1T_GetInstanceRq<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_GetInstanceRq.
    */
   inline const ASN1T_GetInstanceRq& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             GetInstanceRq will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "GetInstanceRq");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_GetInstanceRq& operator= (const ASN1C_GetInstanceRq&) {return *this;}
} ;

EXTERN int asn1PE_GetInstanceRq (OSCTXT* pctxt, ASN1T_GetInstanceRq* pvalue);

EXTERN int asn1PD_GetInstanceRq (OSCTXT* pctxt, ASN1T_GetInstanceRq* pvalue);

EXTERN int XmlEnc_GetInstanceRq (OSCTXT* pctxt, ASN1T_GetInstanceRq* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GetInstanceRq (OSCTXT* pctxt, ASN1T_GetInstanceRq* pvalue);

EXTERN int asn1JsonEnc_GetInstanceRq (OSCTXT *pctxt, ASN1T_GetInstanceRq *pvalue);

EXTERN int asn1JsonDec_GetInstanceRq (OSCTXT *pctxt, ASN1T_GetInstanceRq *pvalue);

EXTERN int asn1PrtToStrm_GetInstanceRq (OSCTXT *pctxt, 
   const char* name, const ASN1T_GetInstanceRq* pvalue);

EXTERN ASN1T_GetInstanceRq* new_ASN1T_GetInstanceRq (ASN1CType& ccobj);

EXTERN int asn1Init_GetInstanceRq (ASN1T_GetInstanceRq* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GetInstanceRq (OSCTXT *pctxt, ASN1T_GetInstanceRq* pvalue);

/**************************************************************/
/*                                                            */
/*  GetStampedRq                                              */
/*                                                            */
/**************************************************************/
/*
GetStampedRq ::= SEQUENCE {
   attributeIdList [0] AttributeIdList,
   nonce [1] OCTET STRING, -- e.g. a random number
   keyRef [2] INTEGER (0..255)
}
*/
struct EXTERN ASN1T_GetStampedRq : public ASN1TPDU {
   ASN1T_AttributeIdList attributeIdList;
   ASN1TDynOctStr64 nonce;
   OSUINT8 keyRef;
   ASN1T_GetStampedRq ();
   ~ASN1T_GetStampedRq ();
} ;

class EXTERN ASN1C_GetStampedRq :
public ASN1CType
{
protected:
   ASN1T_GetStampedRq& msgData;
public:
   /**
    * Control class: ASN1C_GetStampedRq
    * Data class:    ASN1T_GetStampedRq
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_GetStampedRq (ASN1T_GetStampedRq& data);

   /**
    * Control class: ASN1C_GetStampedRq<br/>
    * Data class: ASN1T_GetStampedRq<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_GetStampedRq (OSRTMessageBufferIF& msgBuf, ASN1T_GetStampedRq& data);

   virtual ~ASN1C_GetStampedRq () {}

   /**
    * Data class: ASN1T_GetStampedRq<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_GetStampedRq.
    */
   inline ASN1T_GetStampedRq& getData () { return msgData; }

   /**
    * Data class: ASN1T_GetStampedRq<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_GetStampedRq.
    */
   inline const ASN1T_GetStampedRq& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             GetStampedRq will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "GetStampedRq");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_GetStampedRq& operator= (const ASN1C_GetStampedRq&) {return *this;}
} ;

EXTERN int asn1PE_GetStampedRq (OSCTXT* pctxt, ASN1T_GetStampedRq* pvalue);

EXTERN int asn1PD_GetStampedRq (OSCTXT* pctxt, ASN1T_GetStampedRq* pvalue);

EXTERN int XmlEnc_GetStampedRq (OSCTXT* pctxt, ASN1T_GetStampedRq* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_GetStampedRq (OSCTXT* pctxt, ASN1T_GetStampedRq* pvalue);

EXTERN int asn1JsonEnc_GetStampedRq (OSCTXT *pctxt, ASN1T_GetStampedRq *pvalue);

EXTERN int asn1JsonDec_GetStampedRq (OSCTXT *pctxt, ASN1T_GetStampedRq *pvalue);

EXTERN int asn1PrtToStrm_GetStampedRq (OSCTXT *pctxt, 
   const char* name, const ASN1T_GetStampedRq* pvalue);

EXTERN ASN1T_GetStampedRq* new_ASN1T_GetStampedRq (ASN1CType& ccobj);

EXTERN int asn1Init_GetStampedRq (ASN1T_GetStampedRq* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_GetStampedRq (OSCTXT *pctxt, ASN1T_GetStampedRq* pvalue);

/**************************************************************/
/*                                                            */
/*  SubRq                                                     */
/*                                                            */
/**************************************************************/
/*
SubRq ::= SEQUENCE {
   attributeId [0] INTEGER (0..127, ...),
   value [1] INTEGER
}
*/
struct EXTERN ASN1T_SubRq : public ASN1TPDU {
   OSUINT32 attributeId;
   OSINT64 value;
} ;

class EXTERN ASN1C_SubRq :
public ASN1CType
{
protected:
   ASN1T_SubRq& msgData;
public:
   /**
    * Control class: ASN1C_SubRq
    * Data class:    ASN1T_SubRq
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SubRq (ASN1T_SubRq& data);

   /**
    * Control class: ASN1C_SubRq<br/>
    * Data class: ASN1T_SubRq<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SubRq (OSRTMessageBufferIF& msgBuf, ASN1T_SubRq& data);

   virtual ~ASN1C_SubRq () {}

   /**
    * Data class: ASN1T_SubRq<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_SubRq.
    */
   inline ASN1T_SubRq& getData () { return msgData; }

   /**
    * Data class: ASN1T_SubRq<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_SubRq.
    */
   inline const ASN1T_SubRq& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             SubRq will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "SubRq");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_SubRq& operator= (const ASN1C_SubRq&) {return *this;}
} ;

EXTERN int asn1PE_SubRq (OSCTXT* pctxt, ASN1T_SubRq* pvalue);

EXTERN int asn1PD_SubRq (OSCTXT* pctxt, ASN1T_SubRq* pvalue);

EXTERN int XmlEnc_SubRq (OSCTXT* pctxt, ASN1T_SubRq* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SubRq (OSCTXT* pctxt, ASN1T_SubRq* pvalue);

EXTERN int asn1JsonEnc_SubRq (OSCTXT *pctxt, ASN1T_SubRq *pvalue);

EXTERN int asn1JsonDec_SubRq (OSCTXT *pctxt, ASN1T_SubRq *pvalue);

EXTERN int asn1PrtToStrm_SubRq (OSCTXT *pctxt, 
   const char* name, const ASN1T_SubRq* pvalue);

EXTERN ASN1T_SubRq* new_ASN1T_SubRq (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ContractValidity                                          */
/*                                                            */
/**************************************************************/
/*
ContractValidity ::= SEQUENCE {
   contractRestrictions [0] OCTET STRING (SIZE (4)),
   contractExpiryDate [1] DateCompact
}
   intended to support ISO/TR 1998 implemented systems

*/
struct EXTERN ASN1T_ContractValidity : public ASN1TPDU {
   OSOCTET contractRestrictions[4];
   ASN1T_DateCompact contractExpiryDate;
} ;

class EXTERN ASN1C_ContractValidity :
public ASN1CType
{
protected:
   ASN1T_ContractValidity& msgData;
public:
   /**
    * Control class: ASN1C_ContractValidity
    * Data class:    ASN1T_ContractValidity
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ContractValidity (ASN1T_ContractValidity& data);

   /**
    * Control class: ASN1C_ContractValidity<br/>
    * Data class: ASN1T_ContractValidity<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ContractValidity (OSRTMessageBufferIF& msgBuf
      , ASN1T_ContractValidity& data);

   virtual ~ASN1C_ContractValidity () {}

   /**
    * Data class: ASN1T_ContractValidity<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ContractValidity.
    */
   inline ASN1T_ContractValidity& getData () { return msgData; }

   /**
    * Data class: ASN1T_ContractValidity<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ContractValidity.
    */
   inline const ASN1T_ContractValidity& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ContractValidity will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ContractValidity");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ContractValidity& operator= (const ASN1C_ContractValidity&) {return *this;}
} ;

EXTERN int asn1PE_ContractValidity (OSCTXT* pctxt, ASN1T_ContractValidity* pvalue);

EXTERN int asn1PD_ContractValidity (OSCTXT* pctxt, ASN1T_ContractValidity* pvalue);

EXTERN int XmlEnc_ContractValidity (OSCTXT* pctxt, 
   ASN1T_ContractValidity* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ContractValidity (OSCTXT* pctxt, 
   ASN1T_ContractValidity* pvalue);

EXTERN int asn1JsonEnc_ContractValidity (OSCTXT *pctxt, ASN1T_ContractValidity *pvalue);

EXTERN int asn1JsonDec_ContractValidity (OSCTXT *pctxt, ASN1T_ContractValidity *pvalue);

EXTERN int asn1PrtToStrm_ContractValidity (OSCTXT *pctxt, 
   const char* name, const ASN1T_ContractValidity* pvalue);

EXTERN ASN1T_ContractValidity* new_ASN1T_ContractValidity (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DriverCharacteristics                                     */
/*                                                            */
/**************************************************************/
/*
DriverCharacteristics ::= SEQUENCE {
   driverClass [0] Int1,
   tripPurpose [1] Int1
}
*/
struct EXTERN ASN1T_DriverCharacteristics : public ASN1TPDU {
   ASN1T_Int1 driverClass;
   ASN1T_Int1 tripPurpose;
} ;

class EXTERN ASN1C_DriverCharacteristics :
public ASN1CType
{
protected:
   ASN1T_DriverCharacteristics& msgData;
public:
   /**
    * Control class: ASN1C_DriverCharacteristics
    * Data class:    ASN1T_DriverCharacteristics
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_DriverCharacteristics (ASN1T_DriverCharacteristics& data);

   /**
    * Control class: ASN1C_DriverCharacteristics<br/>
    * Data class: ASN1T_DriverCharacteristics<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_DriverCharacteristics (OSRTMessageBufferIF& msgBuf
      , ASN1T_DriverCharacteristics& data);

   virtual ~ASN1C_DriverCharacteristics () {}

   /**
    * Data class: ASN1T_DriverCharacteristics<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_DriverCharacteristics.
    */
   inline ASN1T_DriverCharacteristics& getData () { return msgData; }

   /**
    * Data class: ASN1T_DriverCharacteristics<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_DriverCharacteristics.
    */
   inline const ASN1T_DriverCharacteristics& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             DriverCharacteristics will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "DriverCharacteristics");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_DriverCharacteristics& operator= (const ASN1C_DriverCharacteristics&) {return *this;}
} ;

EXTERN int asn1PE_DriverCharacteristics (OSCTXT* pctxt, ASN1T_DriverCharacteristics* pvalue);

EXTERN int asn1PD_DriverCharacteristics (OSCTXT* pctxt, ASN1T_DriverCharacteristics* pvalue);

EXTERN int XmlEnc_DriverCharacteristics (OSCTXT* pctxt, 
   ASN1T_DriverCharacteristics* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DriverCharacteristics (OSCTXT* pctxt, 
   ASN1T_DriverCharacteristics* pvalue);

EXTERN int asn1JsonEnc_DriverCharacteristics (OSCTXT *pctxt, ASN1T_DriverCharacteristics *pvalue);

EXTERN int asn1JsonDec_DriverCharacteristics (OSCTXT *pctxt, ASN1T_DriverCharacteristics *pvalue);

EXTERN int asn1PrtToStrm_DriverCharacteristics (OSCTXT *pctxt, 
   const char* name, const ASN1T_DriverCharacteristics* pvalue);

EXTERN ASN1T_DriverCharacteristics* 
   new_ASN1T_DriverCharacteristics (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  EFC_ContextMark                                           */
/*                                                            */
/**************************************************************/
/*
EFC-ContextMark ::= SEQUENCE {
   contractProvider [0] Provider,
   typeOfContract [1] OCTET STRING (SIZE (2)),
   contextVersion [2] INTEGER (0..127, ...)
}
*/
struct EXTERN ASN1T_EFC_ContextMark : public ASN1TPDU {
   ASN1T_Provider contractProvider;
   OSOCTET typeOfContract[2];
   OSUINT32 contextVersion;
} ;

class EXTERN ASN1C_EFC_ContextMark :
public ASN1CType
{
protected:
   ASN1T_EFC_ContextMark& msgData;
public:
   /**
    * Control class: ASN1C_EFC_ContextMark
    * Data class:    ASN1T_EFC_ContextMark
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_EFC_ContextMark (ASN1T_EFC_ContextMark& data);

   /**
    * Control class: ASN1C_EFC_ContextMark<br/>
    * Data class: ASN1T_EFC_ContextMark<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_EFC_ContextMark (OSRTMessageBufferIF& msgBuf
      , ASN1T_EFC_ContextMark& data);

   virtual ~ASN1C_EFC_ContextMark () {}

   /**
    * Data class: ASN1T_EFC_ContextMark<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_EFC_ContextMark.
    */
   inline ASN1T_EFC_ContextMark& getData () { return msgData; }

   /**
    * Data class: ASN1T_EFC_ContextMark<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_EFC_ContextMark.
    */
   inline const ASN1T_EFC_ContextMark& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             EFC_ContextMark will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "EFC_ContextMark");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_EFC_ContextMark& operator= (const ASN1C_EFC_ContextMark&) {return *this;}
} ;

EXTERN int asn1PE_EFC_ContextMark (OSCTXT* pctxt, ASN1T_EFC_ContextMark* pvalue);

EXTERN int asn1PD_EFC_ContextMark (OSCTXT* pctxt, ASN1T_EFC_ContextMark* pvalue);

EXTERN int XmlEnc_EFC_ContextMark (OSCTXT* pctxt, 
   ASN1T_EFC_ContextMark* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_EFC_ContextMark (OSCTXT* pctxt, ASN1T_EFC_ContextMark* pvalue
   );

EXTERN int asn1JsonEnc_EFC_ContextMark (OSCTXT *pctxt, ASN1T_EFC_ContextMark *pvalue);

EXTERN int asn1JsonDec_EFC_ContextMark (OSCTXT *pctxt, ASN1T_EFC_ContextMark *pvalue);

EXTERN int asn1PrtToStrm_EFC_ContextMark (OSCTXT *pctxt, 
   const char* name, const ASN1T_EFC_ContextMark* pvalue);

EXTERN ASN1T_EFC_ContextMark* new_ASN1T_EFC_ContextMark (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  Engine                                                    */
/*                                                            */
/**************************************************************/
/*
Engine ::= SEQUENCE {
   engineCapacity [0] Int2,
   enginePower [1] Int2
}
*/
struct EXTERN ASN1T_Engine : public ASN1TPDU {
   ASN1T_Int2 engineCapacity;
   ASN1T_Int2 enginePower;
} ;

class EXTERN ASN1C_Engine :
public ASN1CType
{
protected:
   ASN1T_Engine& msgData;
public:
   /**
    * Control class: ASN1C_Engine
    * Data class:    ASN1T_Engine
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_Engine (ASN1T_Engine& data);

   /**
    * Control class: ASN1C_Engine<br/>
    * Data class: ASN1T_Engine<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_Engine (OSRTMessageBufferIF& msgBuf, ASN1T_Engine& data);

   virtual ~ASN1C_Engine () {}

   /**
    * Data class: ASN1T_Engine<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_Engine.
    */
   inline ASN1T_Engine& getData () { return msgData; }

   /**
    * Data class: ASN1T_Engine<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_Engine.
    */
   inline const ASN1T_Engine& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             Engine will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "Engine");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_Engine& operator= (const ASN1C_Engine&) {return *this;}
} ;

EXTERN int asn1PE_Engine (OSCTXT* pctxt, ASN1T_Engine* pvalue);

EXTERN int asn1PD_Engine (OSCTXT* pctxt, ASN1T_Engine* pvalue);

EXTERN int XmlEnc_Engine (OSCTXT* pctxt, ASN1T_Engine* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Engine (OSCTXT* pctxt, ASN1T_Engine* pvalue);

EXTERN int asn1JsonEnc_Engine (OSCTXT *pctxt, ASN1T_Engine *pvalue);

EXTERN int asn1JsonDec_Engine (OSCTXT *pctxt, ASN1T_Engine *pvalue);

EXTERN int asn1PrtToStrm_Engine (OSCTXT *pctxt, 
   const char* name, const ASN1T_Engine* pvalue);

EXTERN ASN1T_Engine* new_ASN1T_Engine (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PaymentMeans                                              */
/*                                                            */
/**************************************************************/
/*
PaymentMeans ::= SEQUENCE {
   personalAccountNumber [0] PersonalAccountNumber,
   paymentMeansExpiryDate [1] DateCompact,
   pamentMeansUsageControl [2] OCTET STRING (SIZE (2))
}
*/
struct EXTERN ASN1T_PaymentMeans : public ASN1TPDU {
   ASN1T_PersonalAccountNumber personalAccountNumber;
   ASN1T_DateCompact paymentMeansExpiryDate;
   OSOCTET pamentMeansUsageControl[2];
} ;

class EXTERN ASN1C_PaymentMeans :
public ASN1CType
{
protected:
   ASN1T_PaymentMeans& msgData;
public:
   /**
    * Control class: ASN1C_PaymentMeans
    * Data class:    ASN1T_PaymentMeans
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_PaymentMeans (ASN1T_PaymentMeans& data);

   /**
    * Control class: ASN1C_PaymentMeans<br/>
    * Data class: ASN1T_PaymentMeans<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_PaymentMeans (OSRTMessageBufferIF& msgBuf, ASN1T_PaymentMeans& data);

   virtual ~ASN1C_PaymentMeans () {}

   /**
    * Data class: ASN1T_PaymentMeans<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_PaymentMeans.
    */
   inline ASN1T_PaymentMeans& getData () { return msgData; }

   /**
    * Data class: ASN1T_PaymentMeans<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_PaymentMeans.
    */
   inline const ASN1T_PaymentMeans& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             PaymentMeans will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "PaymentMeans");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_PaymentMeans& operator= (const ASN1C_PaymentMeans&) {return *this;}
} ;

EXTERN int asn1PE_PaymentMeans (OSCTXT* pctxt, ASN1T_PaymentMeans* pvalue);

EXTERN int asn1PD_PaymentMeans (OSCTXT* pctxt, ASN1T_PaymentMeans* pvalue);

EXTERN int XmlEnc_PaymentMeans (OSCTXT* pctxt, ASN1T_PaymentMeans* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PaymentMeans (OSCTXT* pctxt, ASN1T_PaymentMeans* pvalue);

EXTERN int asn1JsonEnc_PaymentMeans (OSCTXT *pctxt, ASN1T_PaymentMeans *pvalue);

EXTERN int asn1JsonDec_PaymentMeans (OSCTXT *pctxt, ASN1T_PaymentMeans *pvalue);

EXTERN int asn1PrtToStrm_PaymentMeans (OSCTXT *pctxt, 
   const char* name, const ASN1T_PaymentMeans* pvalue);

EXTERN ASN1T_PaymentMeans* new_ASN1T_PaymentMeans (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  PurseBalance                                              */
/*                                                            */
/**************************************************************/
/*
PurseBalance ::= SEQUENCE {
--The balance on the (electronic) purse, consisting of
--the value and the unit in which it is expressed.
   purseValue [0] EXPLICIT SignedValue,
--The size of a balance expressed in a currency.
--This may be positive or negative.
   purseUnit [1] PayUnit
}
*/
struct EXTERN ASN1T_PurseBalance {
   ASN1T_SignedValue purseValue;
   ASN1T_PayUnit purseUnit;
} ;

EXTERN int asn1PE_PurseBalance (OSCTXT* pctxt, ASN1T_PurseBalance* pvalue);

EXTERN int asn1PD_PurseBalance (OSCTXT* pctxt, ASN1T_PurseBalance* pvalue);

EXTERN int XmlEnc_PurseBalance (OSCTXT* pctxt, ASN1T_PurseBalance* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PurseBalance (OSCTXT* pctxt, ASN1T_PurseBalance* pvalue);

EXTERN int asn1JsonEnc_PurseBalance (OSCTXT *pctxt, ASN1T_PurseBalance *pvalue);

EXTERN int asn1JsonDec_PurseBalance (OSCTXT *pctxt, ASN1T_PurseBalance *pvalue);

EXTERN int asn1PrtToStrm_PurseBalance (OSCTXT *pctxt, 
   const char* name, const ASN1T_PurseBalance* pvalue);

EXTERN ASN1T_PurseBalance* new_ASN1T_PurseBalance (ASN1CType& ccobj);

EXTERN int asn1Init_PurseBalance (ASN1T_PurseBalance* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  ReceiptContract                                           */
/*                                                            */
/**************************************************************/
/*
ReceiptContract ::= SEQUENCE {
   sessionContractProvider [0] Provider,
   sessionTypeOfContract [1] OCTET STRING (SIZE (2)),
   sessionContractSerialNumber [2] Int4
}
*/
struct EXTERN ASN1T_ReceiptContract : public ASN1TPDU {
   ASN1T_Provider sessionContractProvider;
   OSOCTET sessionTypeOfContract[2];
   ASN1T_Int4 sessionContractSerialNumber;
} ;

class EXTERN ASN1C_ReceiptContract :
public ASN1CType
{
protected:
   ASN1T_ReceiptContract& msgData;
public:
   /**
    * Control class: ASN1C_ReceiptContract
    * Data class:    ASN1T_ReceiptContract
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ReceiptContract (ASN1T_ReceiptContract& data);

   /**
    * Control class: ASN1C_ReceiptContract<br/>
    * Data class: ASN1T_ReceiptContract<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ReceiptContract (OSRTMessageBufferIF& msgBuf
      , ASN1T_ReceiptContract& data);

   virtual ~ASN1C_ReceiptContract () {}

   /**
    * Data class: ASN1T_ReceiptContract<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ReceiptContract.
    */
   inline ASN1T_ReceiptContract& getData () { return msgData; }

   /**
    * Data class: ASN1T_ReceiptContract<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ReceiptContract.
    */
   inline const ASN1T_ReceiptContract& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ReceiptContract will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ReceiptContract");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ReceiptContract& operator= (const ASN1C_ReceiptContract&) {return *this;}
} ;

EXTERN int asn1PE_ReceiptContract (OSCTXT* pctxt, ASN1T_ReceiptContract* pvalue);

EXTERN int asn1PD_ReceiptContract (OSCTXT* pctxt, ASN1T_ReceiptContract* pvalue);

EXTERN int XmlEnc_ReceiptContract (OSCTXT* pctxt, 
   ASN1T_ReceiptContract* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ReceiptContract (OSCTXT* pctxt, ASN1T_ReceiptContract* pvalue
   );

EXTERN int asn1JsonEnc_ReceiptContract (OSCTXT *pctxt, ASN1T_ReceiptContract *pvalue);

EXTERN int asn1JsonDec_ReceiptContract (OSCTXT *pctxt, ASN1T_ReceiptContract *pvalue);

EXTERN int asn1PrtToStrm_ReceiptContract (OSCTXT *pctxt, 
   const char* name, const ASN1T_ReceiptContract* pvalue);

EXTERN ASN1T_ReceiptContract* new_ASN1T_ReceiptContract (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ReceiptFinancialPart                                      */
/*                                                            */
/**************************************************************/
/*
ReceiptFinancialPart ::= SEQUENCE {
   personalAccountNumber [0] PersonalAccountNumber,
   sessionPaymentFee [1] PaymentFee,
   sessionCurrentBalance [2] PurseBalance,
   receiptFinancialSerialNumber [3] Int4
}
*/
struct EXTERN ASN1T_ReceiptFinancialPart : public ASN1TPDU {
   ASN1T_PersonalAccountNumber personalAccountNumber;
   ASN1T_PaymentFee sessionPaymentFee;
   ASN1T_PurseBalance sessionCurrentBalance;
   ASN1T_Int4 receiptFinancialSerialNumber;
} ;

class EXTERN ASN1C_ReceiptFinancialPart :
public ASN1CType
{
protected:
   ASN1T_ReceiptFinancialPart& msgData;
public:
   /**
    * Control class: ASN1C_ReceiptFinancialPart
    * Data class:    ASN1T_ReceiptFinancialPart
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ReceiptFinancialPart (ASN1T_ReceiptFinancialPart& data);

   /**
    * Control class: ASN1C_ReceiptFinancialPart<br/>
    * Data class: ASN1T_ReceiptFinancialPart<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ReceiptFinancialPart (OSRTMessageBufferIF& msgBuf
      , ASN1T_ReceiptFinancialPart& data);

   virtual ~ASN1C_ReceiptFinancialPart () {}

   /**
    * Data class: ASN1T_ReceiptFinancialPart<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ReceiptFinancialPart.
    */
   inline ASN1T_ReceiptFinancialPart& getData () { return msgData; }

   /**
    * Data class: ASN1T_ReceiptFinancialPart<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ReceiptFinancialPart.
    */
   inline const ASN1T_ReceiptFinancialPart& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ReceiptFinancialPart will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ReceiptFinancialPart");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ReceiptFinancialPart& operator= (const ASN1C_ReceiptFinancialPart&) {return *this;}
} ;

EXTERN int asn1PE_ReceiptFinancialPart (OSCTXT* pctxt, ASN1T_ReceiptFinancialPart* pvalue);

EXTERN int asn1PD_ReceiptFinancialPart (OSCTXT* pctxt, ASN1T_ReceiptFinancialPart* pvalue);

EXTERN int XmlEnc_ReceiptFinancialPart (OSCTXT* pctxt, 
   ASN1T_ReceiptFinancialPart* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ReceiptFinancialPart (OSCTXT* pctxt, 
   ASN1T_ReceiptFinancialPart* pvalue);

EXTERN int asn1JsonEnc_ReceiptFinancialPart (OSCTXT *pctxt, ASN1T_ReceiptFinancialPart *pvalue);

EXTERN int asn1JsonDec_ReceiptFinancialPart (OSCTXT *pctxt, ASN1T_ReceiptFinancialPart *pvalue);

EXTERN int asn1PrtToStrm_ReceiptFinancialPart (OSCTXT *pctxt, 
   const char* name, const ASN1T_ReceiptFinancialPart* pvalue);

EXTERN ASN1T_ReceiptFinancialPart* 
   new_ASN1T_ReceiptFinancialPart (ASN1CType& ccobj);

EXTERN int asn1Init_ReceiptFinancialPart (ASN1T_ReceiptFinancialPart* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  ReceiptServicePart                                        */
/*                                                            */
/**************************************************************/
/*
ReceiptServicePart ::= SEQUENCE {
   sessionTime [0] DateAndTime,
   sessionServiceProvider [1] Provider,
   stationLocation [2] INTEGER (0..1048575),
   sessionLocation [3] BIT STRING  (SIZE (8)),
   typeOfSession [4] StationType,
   sessionResultOperational [5] ResultOp,
   sessionResultFinancial [6] ResultFin
}
*/
struct EXTERN ASN1T_ReceiptServicePart : public ASN1TPDU {
   ASN1T_DateAndTime sessionTime;
   ASN1T_Provider sessionServiceProvider;
   OSUINT32 stationLocation;
   ASN1TBitStr32 sessionLocation;
   ASN1T_StationType typeOfSession;
   ASN1T_ResultOp sessionResultOperational;
   ASN1T_ResultFin sessionResultFinancial;
} ;

class EXTERN ASN1C_ReceiptServicePart :
public ASN1CType
{
protected:
   ASN1T_ReceiptServicePart& msgData;
public:
   /**
    * Control class: ASN1C_ReceiptServicePart
    * Data class:    ASN1T_ReceiptServicePart
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ReceiptServicePart (ASN1T_ReceiptServicePart& data);

   /**
    * Control class: ASN1C_ReceiptServicePart<br/>
    * Data class: ASN1T_ReceiptServicePart<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ReceiptServicePart (OSRTMessageBufferIF& msgBuf
      , ASN1T_ReceiptServicePart& data);

   virtual ~ASN1C_ReceiptServicePart () {}

   /**
    * Data class: ASN1T_ReceiptServicePart<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ReceiptServicePart.
    */
   inline ASN1T_ReceiptServicePart& getData () { return msgData; }

   /**
    * Data class: ASN1T_ReceiptServicePart<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ReceiptServicePart.
    */
   inline const ASN1T_ReceiptServicePart& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ReceiptServicePart will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ReceiptServicePart");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ReceiptServicePart& operator= (const ASN1C_ReceiptServicePart&) {return *this;}
} ;

EXTERN int asn1PE_ReceiptServicePart (OSCTXT* pctxt, ASN1T_ReceiptServicePart* pvalue);

EXTERN int asn1PD_ReceiptServicePart (OSCTXT* pctxt, ASN1T_ReceiptServicePart* pvalue);

EXTERN int XmlEnc_ReceiptServicePart (OSCTXT* pctxt, 
   ASN1T_ReceiptServicePart* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ReceiptServicePart (OSCTXT* pctxt, 
   ASN1T_ReceiptServicePart* pvalue);

EXTERN int asn1JsonEnc_ReceiptServicePart (OSCTXT *pctxt, ASN1T_ReceiptServicePart *pvalue);

EXTERN int asn1JsonDec_ReceiptServicePart (OSCTXT *pctxt, ASN1T_ReceiptServicePart *pvalue);

EXTERN int asn1PrtToStrm_ReceiptServicePart (OSCTXT *pctxt, 
   const char* name, const ASN1T_ReceiptServicePart* pvalue);

EXTERN ASN1T_ReceiptServicePart* 
   new_ASN1T_ReceiptServicePart (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SessionClass                                              */
/*                                                            */
/**************************************************************/
/*
SessionClass ::= SEQUENCE {
   sessionTariffClass [0] Int1,
   sessionClaimedClass [1] Int1
}
*/
struct EXTERN ASN1T_SessionClass : public ASN1TPDU {
   ASN1T_Int1 sessionTariffClass;
   ASN1T_Int1 sessionClaimedClass;
} ;

class EXTERN ASN1C_SessionClass :
public ASN1CType
{
protected:
   ASN1T_SessionClass& msgData;
public:
   /**
    * Control class: ASN1C_SessionClass
    * Data class:    ASN1T_SessionClass
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SessionClass (ASN1T_SessionClass& data);

   /**
    * Control class: ASN1C_SessionClass<br/>
    * Data class: ASN1T_SessionClass<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SessionClass (OSRTMessageBufferIF& msgBuf, ASN1T_SessionClass& data);

   virtual ~ASN1C_SessionClass () {}

   /**
    * Data class: ASN1T_SessionClass<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_SessionClass.
    */
   inline ASN1T_SessionClass& getData () { return msgData; }

   /**
    * Data class: ASN1T_SessionClass<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_SessionClass.
    */
   inline const ASN1T_SessionClass& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             SessionClass will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "SessionClass");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_SessionClass& operator= (const ASN1C_SessionClass&) {return *this;}
} ;

EXTERN int asn1PE_SessionClass (OSCTXT* pctxt, ASN1T_SessionClass* pvalue);

EXTERN int asn1PD_SessionClass (OSCTXT* pctxt, ASN1T_SessionClass* pvalue);

EXTERN int XmlEnc_SessionClass (OSCTXT* pctxt, ASN1T_SessionClass* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SessionClass (OSCTXT* pctxt, ASN1T_SessionClass* pvalue);

EXTERN int asn1JsonEnc_SessionClass (OSCTXT *pctxt, ASN1T_SessionClass *pvalue);

EXTERN int asn1JsonDec_SessionClass (OSCTXT *pctxt, ASN1T_SessionClass *pvalue);

EXTERN int asn1PrtToStrm_SessionClass (OSCTXT *pctxt, 
   const char* name, const ASN1T_SessionClass* pvalue);

EXTERN ASN1T_SessionClass* new_ASN1T_SessionClass (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TrailerDetails                                            */
/*                                                            */
/**************************************************************/
/*
TrailerDetails ::= SEQUENCE {
   trailerType [0] INTEGER { notPresent(0), trailer(1), semitrailer(2) } (0..31),
   trailerAxles [1] TrailerAxles
}
*/
struct EXTERN ASN1T_TrailerDetails {
   ASN1T_TrailerDetails_trailerType trailerType;
   ASN1T_TrailerAxles trailerAxles;
} ;

EXTERN int asn1PE_TrailerDetails (OSCTXT* pctxt, ASN1T_TrailerDetails* pvalue);

EXTERN int asn1PD_TrailerDetails (OSCTXT* pctxt, ASN1T_TrailerDetails* pvalue);

EXTERN int XmlEnc_TrailerDetails (OSCTXT* pctxt, ASN1T_TrailerDetails* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerDetails (OSCTXT* pctxt, ASN1T_TrailerDetails* pvalue)
   ;

EXTERN int asn1JsonEnc_TrailerDetails (OSCTXT *pctxt, ASN1T_TrailerDetails *pvalue);

EXTERN int asn1JsonDec_TrailerDetails (OSCTXT *pctxt, ASN1T_TrailerDetails *pvalue);

EXTERN int asn1PrtToStrm_TrailerDetails (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerDetails* pvalue);

EXTERN ASN1T_TrailerDetails* new_ASN1T_TrailerDetails (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TrailerCharacteristics                                    */
/*                                                            */
/**************************************************************/
/*
TrailerCharacteristics ::= SEQUENCE {
   trailerDetails [0] TrailerDetails,
   trailerMaxLadenWeight [1] Int2,
   trailerWeightUnladen [2] Int2
}
*/
struct EXTERN ASN1T_TrailerCharacteristics : public ASN1TPDU {
   ASN1T_TrailerDetails trailerDetails;
   ASN1T_Int2 trailerMaxLadenWeight;
   ASN1T_Int2 trailerWeightUnladen;
} ;

class EXTERN ASN1C_TrailerCharacteristics :
public ASN1CType
{
protected:
   ASN1T_TrailerCharacteristics& msgData;
public:
   /**
    * Control class: ASN1C_TrailerCharacteristics
    * Data class:    ASN1T_TrailerCharacteristics
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TrailerCharacteristics (ASN1T_TrailerCharacteristics& data);

   /**
    * Control class: ASN1C_TrailerCharacteristics<br/>
    * Data class: ASN1T_TrailerCharacteristics<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TrailerCharacteristics (OSRTMessageBufferIF& msgBuf
      , ASN1T_TrailerCharacteristics& data);

   virtual ~ASN1C_TrailerCharacteristics () {}

   /**
    * Data class: ASN1T_TrailerCharacteristics<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_TrailerCharacteristics.
    */
   inline ASN1T_TrailerCharacteristics& getData () { return msgData; }

   /**
    * Data class: ASN1T_TrailerCharacteristics<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_TrailerCharacteristics.
    */
   inline const ASN1T_TrailerCharacteristics& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             TrailerCharacteristics will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "TrailerCharacteristics");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_TrailerCharacteristics& operator= (const ASN1C_TrailerCharacteristics&) {return *this;}
} ;

EXTERN int asn1PE_TrailerCharacteristics (OSCTXT* pctxt, ASN1T_TrailerCharacteristics* pvalue);

EXTERN int asn1PD_TrailerCharacteristics (OSCTXT* pctxt, ASN1T_TrailerCharacteristics* pvalue);

EXTERN int XmlEnc_TrailerCharacteristics (OSCTXT* pctxt, 
   ASN1T_TrailerCharacteristics* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TrailerCharacteristics (OSCTXT* pctxt, 
   ASN1T_TrailerCharacteristics* pvalue);

EXTERN int asn1JsonEnc_TrailerCharacteristics (OSCTXT *pctxt, ASN1T_TrailerCharacteristics *pvalue);

EXTERN int asn1JsonDec_TrailerCharacteristics (OSCTXT *pctxt, ASN1T_TrailerCharacteristics *pvalue);

EXTERN int asn1PrtToStrm_TrailerCharacteristics (OSCTXT *pctxt, 
   const char* name, const ASN1T_TrailerCharacteristics* pvalue);

EXTERN ASN1T_TrailerCharacteristics* 
   new_ASN1T_TrailerCharacteristics (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ValidityOfContract                                        */
/*                                                            */
/**************************************************************/
/*
ValidityOfContract ::= SEQUENCE {
   issuerRestrictions [0] OCTET STRING (SIZE (2)),
   contractExpiryDate [1] DateCompact
}
*/
struct EXTERN ASN1T_ValidityOfContract : public ASN1TPDU {
   OSOCTET issuerRestrictions[2];
   ASN1T_DateCompact contractExpiryDate;
} ;

class EXTERN ASN1C_ValidityOfContract :
public ASN1CType
{
protected:
   ASN1T_ValidityOfContract& msgData;
public:
   /**
    * Control class: ASN1C_ValidityOfContract
    * Data class:    ASN1T_ValidityOfContract
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ValidityOfContract (ASN1T_ValidityOfContract& data);

   /**
    * Control class: ASN1C_ValidityOfContract<br/>
    * Data class: ASN1T_ValidityOfContract<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ValidityOfContract (OSRTMessageBufferIF& msgBuf
      , ASN1T_ValidityOfContract& data);

   virtual ~ASN1C_ValidityOfContract () {}

   /**
    * Data class: ASN1T_ValidityOfContract<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_ValidityOfContract.
    */
   inline ASN1T_ValidityOfContract& getData () { return msgData; }

   /**
    * Data class: ASN1T_ValidityOfContract<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_ValidityOfContract.
    */
   inline const ASN1T_ValidityOfContract& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             ValidityOfContract will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "ValidityOfContract");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_ValidityOfContract& operator= (const ASN1C_ValidityOfContract&) {return *this;}
} ;

EXTERN int asn1PE_ValidityOfContract (OSCTXT* pctxt, ASN1T_ValidityOfContract* pvalue);

EXTERN int asn1PD_ValidityOfContract (OSCTXT* pctxt, ASN1T_ValidityOfContract* pvalue);

EXTERN int XmlEnc_ValidityOfContract (OSCTXT* pctxt, 
   ASN1T_ValidityOfContract* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ValidityOfContract (OSCTXT* pctxt, 
   ASN1T_ValidityOfContract* pvalue);

EXTERN int asn1JsonEnc_ValidityOfContract (OSCTXT *pctxt, ASN1T_ValidityOfContract *pvalue);

EXTERN int asn1JsonDec_ValidityOfContract (OSCTXT *pctxt, ASN1T_ValidityOfContract *pvalue);

EXTERN int asn1PrtToStrm_ValidityOfContract (OSCTXT *pctxt, 
   const char* name, const ASN1T_ValidityOfContract* pvalue);

EXTERN ASN1T_ValidityOfContract* 
   new_ASN1T_ValidityOfContract (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleAxles_vehicleAxlesNumber_numberOfAxles             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleAxles'
*/
struct EXTERN ASN1T_VehicleAxles_vehicleAxlesNumber_numberOfAxles {
   ASN1T_TrailerAxles trailerAxles;
   ASN1T_TractorAxles tractorAxles;
} ;

EXTERN int asn1PE_VehicleAxles_vehicleAxlesNumber_numberOfAxles (OSCTXT* pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber_numberOfAxles* pvalue);

EXTERN int asn1PD_VehicleAxles_vehicleAxlesNumber_numberOfAxles (OSCTXT* pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber_numberOfAxles* pvalue);

EXTERN int XmlEnc_VehicleAxles_vehicleAxlesNumber_numberOfAxles 
   (OSCTXT* pctxt, 
   ASN1T_VehicleAxles_vehicleAxlesNumber_numberOfAxles* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleAxles_vehicleAxlesNumber_numberOfAxles 
   (OSCTXT* pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber_numberOfAxles* pvalue)
   ;

EXTERN int asn1JsonEnc_VehicleAxles_vehicleAxlesNumber_numberOfAxles (OSCTXT *pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber_numberOfAxles *pvalue);

EXTERN int asn1JsonDec_VehicleAxles_vehicleAxlesNumber_numberOfAxles (OSCTXT *pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber_numberOfAxles *pvalue);

EXTERN int asn1PrtToStrm_VehicleAxles_vehicleAxlesNumber_numberOfAxles (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleAxles_vehicleAxlesNumber_numberOfAxles* pvalue);

EXTERN ASN1T_VehicleAxles_vehicleAxlesNumber_numberOfAxles* 
   new_ASN1T_VehicleAxles_vehicleAxlesNumber_numberOfAxles (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleAxles_vehicleAxlesNumber                           */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleAxles'
*/
struct EXTERN ASN1T_VehicleAxles_vehicleAxlesNumber {
   ASN1T_VehicleAxles_vehicleAxlesNumber_tyreType tyreType;
   ASN1T_VehicleAxles_vehicleAxlesNumber_numberOfAxles numberOfAxles;
} ;

EXTERN int asn1PE_VehicleAxles_vehicleAxlesNumber (OSCTXT* pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber* pvalue);

EXTERN int asn1PD_VehicleAxles_vehicleAxlesNumber (OSCTXT* pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber* pvalue);

EXTERN int XmlEnc_VehicleAxles_vehicleAxlesNumber (OSCTXT* pctxt, 
   ASN1T_VehicleAxles_vehicleAxlesNumber* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleAxles_vehicleAxlesNumber (OSCTXT* pctxt, 
   ASN1T_VehicleAxles_vehicleAxlesNumber* pvalue);

EXTERN int asn1JsonEnc_VehicleAxles_vehicleAxlesNumber (OSCTXT *pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber *pvalue);

EXTERN int asn1JsonDec_VehicleAxles_vehicleAxlesNumber (OSCTXT *pctxt, ASN1T_VehicleAxles_vehicleAxlesNumber *pvalue);

EXTERN int asn1PrtToStrm_VehicleAxles_vehicleAxlesNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleAxles_vehicleAxlesNumber* pvalue);

EXTERN ASN1T_VehicleAxles_vehicleAxlesNumber* 
   new_ASN1T_VehicleAxles_vehicleAxlesNumber (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleAxles                                              */
/*                                                            */
/**************************************************************/
/*
VehicleAxles ::= SEQUENCE {
   vehicleFirstAxleHeight [0] Int1,
   vehicleAxlesNumber [1] SEQUENCE {
      tyreType [0] ENUMERATED { notSpecified(0), singleTyre(1), dualTyres(2), reservedForUse(3) },
      numberOfAxles [1] SEQUENCE {
         trailerAxles [0] TrailerAxles,
         tractorAxles [1] TractorAxles
      }
   }
}
*/
struct EXTERN ASN1T_VehicleAxles : public ASN1TPDU {
   ASN1T_Int1 vehicleFirstAxleHeight;
   ASN1T_VehicleAxles_vehicleAxlesNumber vehicleAxlesNumber;
} ;

class EXTERN ASN1C_VehicleAxles :
public ASN1CType
{
protected:
   ASN1T_VehicleAxles& msgData;
public:
   /**
    * Control class: ASN1C_VehicleAxles
    * Data class:    ASN1T_VehicleAxles
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VehicleAxles (ASN1T_VehicleAxles& data);

   /**
    * Control class: ASN1C_VehicleAxles<br/>
    * Data class: ASN1T_VehicleAxles<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VehicleAxles (OSRTMessageBufferIF& msgBuf, ASN1T_VehicleAxles& data);

   virtual ~ASN1C_VehicleAxles () {}

   /**
    * Data class: ASN1T_VehicleAxles<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_VehicleAxles.
    */
   inline ASN1T_VehicleAxles& getData () { return msgData; }

   /**
    * Data class: ASN1T_VehicleAxles<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_VehicleAxles.
    */
   inline const ASN1T_VehicleAxles& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             VehicleAxles will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "VehicleAxles");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_VehicleAxles& operator= (const ASN1C_VehicleAxles&) {return *this;}
} ;

EXTERN int asn1PE_VehicleAxles (OSCTXT* pctxt, ASN1T_VehicleAxles* pvalue);

EXTERN int asn1PD_VehicleAxles (OSCTXT* pctxt, ASN1T_VehicleAxles* pvalue);

EXTERN int XmlEnc_VehicleAxles (OSCTXT* pctxt, ASN1T_VehicleAxles* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleAxles (OSCTXT* pctxt, ASN1T_VehicleAxles* pvalue);

EXTERN int asn1JsonEnc_VehicleAxles (OSCTXT *pctxt, ASN1T_VehicleAxles *pvalue);

EXTERN int asn1JsonDec_VehicleAxles (OSCTXT *pctxt, ASN1T_VehicleAxles *pvalue);

EXTERN int asn1PrtToStrm_VehicleAxles (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleAxles* pvalue);

EXTERN ASN1T_VehicleAxles* new_ASN1T_VehicleAxles (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleSpecificCharacteristics                            */
/*                                                            */
/**************************************************************/
/*
VehicleSpecificCharacteristics ::= SEQUENCE {
   environmentalCharacteristics [0] EnvironmentalCharacteristics,
   engineCharacteristics [1] EngineCharacteristics,
   descriptiveCharacteristics [2] DescriptiveCharacteristics,
   futureCharacteristics [3] FutureCharacteristics
}
*/
struct EXTERN ASN1T_VehicleSpecificCharacteristics : public ASN1TPDU {
   ASN1T_EnvironmentalCharacteristics environmentalCharacteristics;
   ASN1T_EngineCharacteristics engineCharacteristics;
   ASN1T_DescriptiveCharacteristics descriptiveCharacteristics;
   ASN1T_FutureCharacteristics futureCharacteristics;
} ;

class EXTERN ASN1C_VehicleSpecificCharacteristics :
public ASN1CType
{
protected:
   ASN1T_VehicleSpecificCharacteristics& msgData;
public:
   /**
    * Control class: ASN1C_VehicleSpecificCharacteristics
    * Data class:    ASN1T_VehicleSpecificCharacteristics
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_VehicleSpecificCharacteristics
       (ASN1T_VehicleSpecificCharacteristics& data);

   /**
    * Control class: ASN1C_VehicleSpecificCharacteristics<br/>
    * Data class: ASN1T_VehicleSpecificCharacteristics<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_VehicleSpecificCharacteristics (OSRTMessageBufferIF& msgBuf
      , ASN1T_VehicleSpecificCharacteristics& data);

   virtual ~ASN1C_VehicleSpecificCharacteristics () {}

   /**
    * Data class: ASN1T_VehicleSpecificCharacteristics<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_VehicleSpecificCharacteristics.
    */
   inline ASN1T_VehicleSpecificCharacteristics& getData () { return msgData; }

   /**
    * Data class: ASN1T_VehicleSpecificCharacteristics<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_VehicleSpecificCharacteristics.
    */
   inline const ASN1T_VehicleSpecificCharacteristics& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             VehicleSpecificCharacteristics will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "VehicleSpecificCharacteristics");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_VehicleSpecificCharacteristics& operator= (const ASN1C_VehicleSpecificCharacteristics&) {return *this;}
} ;

EXTERN int asn1PE_VehicleSpecificCharacteristics (OSCTXT* pctxt, ASN1T_VehicleSpecificCharacteristics* pvalue);

EXTERN int asn1PD_VehicleSpecificCharacteristics (OSCTXT* pctxt, ASN1T_VehicleSpecificCharacteristics* pvalue);

EXTERN int XmlEnc_VehicleSpecificCharacteristics (OSCTXT* pctxt, 
   ASN1T_VehicleSpecificCharacteristics* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleSpecificCharacteristics (OSCTXT* pctxt, 
   ASN1T_VehicleSpecificCharacteristics* pvalue);

EXTERN int asn1JsonEnc_VehicleSpecificCharacteristics (OSCTXT *pctxt, ASN1T_VehicleSpecificCharacteristics *pvalue);

EXTERN int asn1JsonDec_VehicleSpecificCharacteristics (OSCTXT *pctxt, ASN1T_VehicleSpecificCharacteristics *pvalue);

EXTERN int asn1PrtToStrm_VehicleSpecificCharacteristics (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleSpecificCharacteristics* pvalue);

EXTERN ASN1T_VehicleSpecificCharacteristics* 
   new_ASN1T_VehicleSpecificCharacteristics (ASN1CType& ccobj);

/**
 * Global element functions.  These functions encode or decode complete
 * XML documents.  They are generated for XSD global elements and/or
 * ASN.1 type definitions that are either:
 *
 * 1) not referenced by any other types, or
 * 2) explicitly declared to be a PDU using the -pdu command line
 *    option, or
 * 3) explicitly declared to be a PDU using the <isPDU/> 
 *    configuration file element.
 */
#endif
