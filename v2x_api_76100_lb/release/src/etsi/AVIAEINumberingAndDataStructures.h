/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).
 */
#ifndef AVIAEINUMBERINGANDDATASTRUCTURES_H
#define AVIAEINUMBERINGANDDATASTRUCTURES_H

#include <stdio.h>
#include <stdlib.h>
#include "rtpersrc/asn1PerCppTypes.h"
#include "rtsrc/asn1CppTypes.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtsrc/asn1type.h"
#include "rtxmlsrc/asn1xml.h"
#include "rtxmlsrc/rtXmlCppMsgBuf.h"
#include "rtsrc/asn1type.h"
#include "rtjsonsrc/asn1json.h"
#include "rtjsonsrc/rtJsonCppMsgBuf.h"

#include "rtsrc/ASN1CBitStr.h"

/**
 * Header file for ASN.1 module AVIAEINumberingAndDataStructures
 */
/**************************************************************/
/*                                                            */
/*  CountryCode                                               */
/*                                                            */
/**************************************************************/
/*
CountryCode ::= BIT STRING  (SIZE (10))
*/
typedef ASN1TBitStr32 ASN1T_CountryCode;

class EXTERN ASN1C_CountryCode :
public ASN1CBitStr
{
protected:
   ASN1T_CountryCode& msgData;
public:
   /**
    * Control class: ASN1C_CountryCode
    * Data class:    ASN1T_CountryCode
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_CountryCode (ASN1T_CountryCode& data);

   /**
    * Control class: ASN1C_CountryCode<br/>
    * Data class: ASN1T_CountryCode<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_CountryCode (OSRTMessageBufferIF& msgBuf, ASN1T_CountryCode& data);

   virtual ~ASN1C_CountryCode () {}

private:
   ASN1C_CountryCode& operator= (const ASN1C_CountryCode&) {return *this;}
} ;

EXTERN int asn1PE_CountryCode (OSCTXT* pctxt, ASN1T_CountryCode value);

EXTERN int asn1PD_CountryCode (OSCTXT* pctxt, ASN1T_CountryCode* pvalue);

EXTERN int XmlEnc_CountryCode (OSCTXT* pctxt, ASN1T_CountryCode* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CountryCode (OSCTXT* pctxt, ASN1T_CountryCode* pvalue);

EXTERN int asn1JsonEnc_CountryCode (OSCTXT *pctxt, ASN1T_CountryCode *pvalue);

EXTERN int asn1JsonDec_CountryCode (OSCTXT *pctxt, ASN1T_CountryCode *pvalue);

EXTERN int asn1PrtToStrm_CountryCode (OSCTXT *pctxt, 
   const char* name, const ASN1T_CountryCode* pvalue);

EXTERN ASN1T_CountryCode* new_ASN1T_CountryCode (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  IssuerIdentifier                                          */
/*                                                            */
/**************************************************************/
/*
IssuerIdentifier ::= INTEGER (0..16383)
*/
typedef OSUINT16 ASN1T_IssuerIdentifier;

EXTERN int asn1PE_IssuerIdentifier (OSCTXT* pctxt, ASN1T_IssuerIdentifier value);

EXTERN int asn1PD_IssuerIdentifier (OSCTXT* pctxt, ASN1T_IssuerIdentifier* pvalue);

EXTERN int XmlEnc_IssuerIdentifier (OSCTXT* pctxt, 
   ASN1T_IssuerIdentifier value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IssuerIdentifier (OSCTXT* pctxt, 
   ASN1T_IssuerIdentifier* pvalue);

EXTERN int asn1JsonEnc_IssuerIdentifier (OSCTXT *pctxt, ASN1T_IssuerIdentifier *pvalue);

EXTERN int asn1JsonDec_IssuerIdentifier (OSCTXT *pctxt, ASN1T_IssuerIdentifier *pvalue);

EXTERN int asn1PrtToStrm_IssuerIdentifier (OSCTXT *pctxt, 
   const char* name, const ASN1T_IssuerIdentifier* pvalue);

EXTERN ASN1T_IssuerIdentifier* new_ASN1T_IssuerIdentifier (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  CS5                                                       */
/*                                                            */
/**************************************************************/
/*
CS5 ::= SEQUENCE {
   vin [0] VisibleString, -- 17 characters VIN
   fill [1] BIT STRING  (SIZE (9)) -- set to '000000000'
}
*/
struct EXTERN ASN1T_CS5 : public ASN1TPDU {
   const char* vin;
   ASN1TBitStr32 fill;
   ASN1T_CS5 ();
   ~ASN1T_CS5 ();
} ;

class EXTERN ASN1C_CS5 :
public ASN1CType
{
protected:
   ASN1T_CS5& msgData;
public:
   /**
    * Control class: ASN1C_CS5
    * Data class:    ASN1T_CS5
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_CS5 (ASN1T_CS5& data);

   /**
    * Control class: ASN1C_CS5<br/>
    * Data class: ASN1T_CS5<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_CS5 (OSRTMessageBufferIF& msgBuf, ASN1T_CS5& data);

   virtual ~ASN1C_CS5 () {}

   /**
    * Data class: ASN1T_CS5<br/>
    *
    * Gets a mutable instance of the data class.
    *
    * @return Reference to a mutable instance of data class ASN1T_CS5.
    */
   inline ASN1T_CS5& getData () { return msgData; }

   /**
    * Data class: ASN1T_CS5<br/>
    * Gets a non-mutable instance of the data class.
    *
    * @return Reference to a non-mutable instance of data class ASN1T_CS5.
    */
   inline const ASN1T_CS5& getData () const { return msgData; }

   // standard encode/decode methods (defined in ASN1CType base class):
   // int Encode ();
   // int Decode ();

   // stream encode/decode methods:
   /**
    * Encodes into a specified encode buffer.
    *
    * @param msgBuf Reference to an encode buffer.
    * @return A status value (0 indicates success).
    */
   int EncodeTo (OSRTMessageBufferIF& msgBuf);

   /**
    * Decodes from a specified decode buffer.
    *
    * @param msgBuf Reference to a decode buffer.
    * @return A status value (0 indicates success).
    */
   int DecodeFrom (OSRTMessageBufferIF& msgBuf, OSBOOL free = FALSE);

   /**
    * Frees the memory associated with the instance.
    */
   virtual void MemFree ();

   /**
    * Writes the contents of the object to a user-defined stream using
    * a user-defined print callback function.  See the documentation for
    * the setPrintStream() method.
    *
    * @param name A name for the object's contents.  If not specified,
    *             CS5 will be used for the name.
    * @return Always returns 0.
    */
   int toStream (const char* name = "CS5");
   /**
    * Declares a print stream handler function.
    *
    * @param strmCallback Pointer to a function defined according to the
    *                     rtxPrintCallback signature.
    * @return A status value (0 indicates success).
    */
   int setPrintStream (rtxPrintCallback strmCallback, void* pStrmInfo);
private:
   ASN1C_CS5& operator= (const ASN1C_CS5&) {return *this;}
} ;

EXTERN int asn1PE_CS5 (OSCTXT* pctxt, ASN1T_CS5* pvalue);

EXTERN int asn1PD_CS5 (OSCTXT* pctxt, ASN1T_CS5* pvalue);

EXTERN int XmlEnc_CS5 (OSCTXT* pctxt, ASN1T_CS5* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CS5 (OSCTXT* pctxt, ASN1T_CS5* pvalue);

EXTERN int asn1JsonEnc_CS5 (OSCTXT *pctxt, ASN1T_CS5 *pvalue);

EXTERN int asn1JsonDec_CS5 (OSCTXT *pctxt, ASN1T_CS5 *pvalue);

EXTERN int asn1PrtToStrm_CS5 (OSCTXT *pctxt, 
   const char* name, const ASN1T_CS5* pvalue);

EXTERN ASN1T_CS5* new_ASN1T_CS5 (ASN1CType& ccobj);

EXTERN int asn1Init_CS5 (ASN1T_CS5* pvalue, OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_CS5 (OSCTXT *pctxt, ASN1T_CS5* pvalue);

/**
 * Global element functions.  These functions encode or decode complete
 * XML documents.  They are generated for XSD global elements and/or
 * ASN.1 type definitions that are either:
 *
 * 1) not referenced by any other types, or
 * 2) explicitly declared to be a PDU using the -pdu command line
 *    option, or
 * 3) explicitly declared to be a PDU using the <isPDU/> 
 *    configuration file element.
 */
#endif
