/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).
 */
#ifndef SIGNALREQUESTMESSAGE_H
#define SIGNALREQUESTMESSAGE_H

#include <stdio.h>
#include <stdlib.h>
#include "rtpersrc/asn1PerCppTypes.h"
#include "rtsrc/asn1CppTypes.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtsrc/asn1type.h"
#include "rtxmlsrc/asn1xml.h"
#include "rtxmlsrc/rtXmlCppMsgBuf.h"
#include "rtsrc/asn1type.h"
#include "rtjsonsrc/asn1json.h"
#include "rtjsonsrc/rtJsonCppMsgBuf.h"

#include "rtsrc/ASN1CSeqOfList.h"
#include "rtsrc/ASN1CBitStr.h"

/**
 * Header file for ASN.1 module SignalRequestMessage
 */
/**************************************************************/
/*                                                            */
/*  PriorityRequestType                                       */
/*                                                            */
/**************************************************************/
/*
PriorityRequestType ::= ENUMERATED { priorityRequestTypeReserved(0), priorityRequest(1), priorityRequestUpdate(2), priorityCancellation(3), ... }
*/
struct EXTERN PriorityRequestType {
   enum Root {
      priorityRequestTypeReserved = 0,
      priorityRequest = 1,
      priorityRequestUpdate = 2,
      priorityCancellation = 3
   } ;
} ;

typedef OSUINT32 ASN1T_PriorityRequestType;

EXTERN int asn1PE_PriorityRequestType (OSCTXT* pctxt, ASN1T_PriorityRequestType value);

EXTERN int asn1PD_PriorityRequestType (OSCTXT* pctxt, ASN1T_PriorityRequestType* pvalue);

EXTERN int XmlEnc_PriorityRequestType (OSCTXT* pctxt, 
   ASN1T_PriorityRequestType value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_PriorityRequestType (OSCTXT* pctxt, 
   ASN1T_PriorityRequestType* pvalue);

EXTERN int asn1JsonEnc_PriorityRequestType (OSCTXT *pctxt, ASN1T_PriorityRequestType *pvalue);

EXTERN int asn1JsonDec_PriorityRequestType (OSCTXT *pctxt, ASN1T_PriorityRequestType *pvalue);

EXTERN int asn1PrtToStrm_PriorityRequestType (OSCTXT *pctxt, 
   const char* name, const ASN1T_PriorityRequestType* pvalue);

EXTERN ASN1T_PriorityRequestType* 
   new_ASN1T_PriorityRequestType (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_PriorityRequestType_ENUMTAB[];
#define ASN1T_PriorityRequestType_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_PriorityRequestType_ToString (OSINT32 value);

EXTERN int ASN1T_PriorityRequestType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_PriorityRequestType* pvalue);

EXTERN int ASN1T_PriorityRequestType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_PriorityRequestType* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  SignalRequest_regional_element                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequest'
*/
struct EXTERN ASN1T_SignalRequest_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SignalRequest_regional_element (OSCTXT* pctxt, ASN1T_SignalRequest_regional_element* pvalue);

EXTERN int asn1PD_SignalRequest_regional_element (OSCTXT* pctxt, ASN1T_SignalRequest_regional_element* pvalue);

EXTERN int XmlEnc_SignalRequest_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalRequest_regional_element* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequest_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalRequest_regional_element* pvalue);

EXTERN int asn1JsonEnc_SignalRequest_regional_element (OSCTXT *pctxt, ASN1T_SignalRequest_regional_element *pvalue);

EXTERN int asn1JsonDec_SignalRequest_regional_element (OSCTXT *pctxt, ASN1T_SignalRequest_regional_element *pvalue);

EXTERN int asn1PrtToStrm_SignalRequest_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequest_regional_element* pvalue);

EXTERN ASN1T_SignalRequest_regional_element* 
   new_ASN1T_SignalRequest_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequest_regional_element (
   ASN1T_SignalRequest_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequest_regional_element (OSCTXT *pctxt, 
   ASN1T_SignalRequest_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequest_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequest'
*/
/* List of ASN1T_SignalRequest_regional_element */
typedef ASN1TSeqOfList ASN1T_SignalRequest_regional;

class EXTERN ASN1C_SignalRequest_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalRequest_regional& msgData;
public:
   /**
    * Control class: ASN1C_SignalRequest_regional
    * Data class:    ASN1T_SignalRequest_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalRequest_regional (ASN1T_SignalRequest_regional& data);

   /**
    * Control class: ASN1C_SignalRequest_regional<br/>
    * Data class: ASN1T_SignalRequest_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalRequest_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalRequest_regional& data);

   /**
    * Control class: ASN1C_SignalRequest_regional<br/>
    * Data class: ASN1T_SignalRequest_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalRequest_regional (ASN1CType& ccobj
      , ASN1T_SignalRequest_regional& data);

   virtual ~ASN1C_SignalRequest_regional () {}

   /**
    * Data class: ASN1T_SignalRequest_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalRequest_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalRequest_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalRequest_regional_element* NewElement ();

   /**
    * Data class: ASN1T_SignalRequest_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalRequest_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_SignalRequest_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, ASN1T_SignalRequest_regional* pmatches);

private:
   ASN1C_SignalRequest_regional& operator= (const ASN1C_SignalRequest_regional&) {return *this;}
} ;

EXTERN int asn1PE_SignalRequest_regional (OSCTXT* pctxt, ASN1T_SignalRequest_regional* pvalue);

EXTERN int asn1PD_SignalRequest_regional (OSCTXT* pctxt, ASN1T_SignalRequest_regional* pvalue);

EXTERN int XmlEnc_SignalRequest_regional (OSCTXT* pctxt, 
   ASN1T_SignalRequest_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequest_regional (OSCTXT* pctxt, 
   ASN1T_SignalRequest_regional* pvalue);

EXTERN int asn1JsonEnc_SignalRequest_regional (OSCTXT *pctxt, ASN1T_SignalRequest_regional *pvalue);

EXTERN int asn1JsonDec_SignalRequest_regional (OSCTXT *pctxt, ASN1T_SignalRequest_regional *pvalue);

EXTERN int asn1PrtToStrm_SignalRequest_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequest_regional* pvalue);

EXTERN int asn1Init_SignalRequest_regional (ASN1T_SignalRequest_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequest_regional (OSCTXT *pctxt, 
   ASN1T_SignalRequest_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequest                                             */
/*                                                            */
/**************************************************************/
/*
SignalRequest ::= SEQUENCE {
   -- the unique ID of the target intersection 
   id [0] IntersectionReferenceID,
   -- The unique requestID used by the requestor
   requestID [1] RequestID,
   -- The type of request or cancel for priority or preempt use
   -- when a prior request is canceled, only the requestID is needed
   requestType [2] PriorityRequestType,
   -- In typical use either an approach or a lane number would
   -- be given, this indicates the requested 
   -- path through the intersection to the degree it is known.
   inBoundLane [3] EXPLICIT IntersectionAccessPoint,
                 -- desired entry approach or lane
   outBoundLane [4] EXPLICIT IntersectionAccessPoint OPTIONAL,
                 -- desired exit approach or lane
                 -- the values zero is used to indicate 
                 -- intent to stop within the intersection
   regional [5] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-SignalRequest}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-SignalRequest}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SignalRequest {
   struct {
      unsigned outBoundLanePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   struct ASN1T_IntersectionReferenceID *id;
   OSUINT8 requestID;
   ASN1T_PriorityRequestType requestType;
   struct ASN1T_IntersectionAccessPoint *inBoundLane;
   struct ASN1T_IntersectionAccessPoint *outBoundLane;
   ASN1T_SignalRequest_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_SignalRequest ();
} ;

EXTERN int asn1PE_SignalRequest (OSCTXT* pctxt, ASN1T_SignalRequest* pvalue);

EXTERN int asn1PD_SignalRequest (OSCTXT* pctxt, ASN1T_SignalRequest* pvalue);

EXTERN int XmlEnc_SignalRequest (OSCTXT* pctxt, ASN1T_SignalRequest* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequest (OSCTXT* pctxt, ASN1T_SignalRequest* pvalue);

EXTERN int asn1JsonEnc_SignalRequest (OSCTXT *pctxt, ASN1T_SignalRequest *pvalue);

EXTERN int asn1JsonDec_SignalRequest (OSCTXT *pctxt, ASN1T_SignalRequest *pvalue);

EXTERN int asn1PrtToStrm_SignalRequest (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequest* pvalue);

EXTERN ASN1T_SignalRequest* new_ASN1T_SignalRequest (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequest (ASN1T_SignalRequest* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequest (OSCTXT *pctxt, ASN1T_SignalRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestPackage_regional_element                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequestPackage'
*/
struct EXTERN ASN1T_SignalRequestPackage_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SignalRequestPackage_regional_element (OSCTXT* pctxt, ASN1T_SignalRequestPackage_regional_element* pvalue);

EXTERN int asn1PD_SignalRequestPackage_regional_element (OSCTXT* pctxt, ASN1T_SignalRequestPackage_regional_element* pvalue);

EXTERN int XmlEnc_SignalRequestPackage_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalRequestPackage_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestPackage_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalRequestPackage_regional_element* pvalue);

EXTERN int asn1JsonEnc_SignalRequestPackage_regional_element (OSCTXT *pctxt, ASN1T_SignalRequestPackage_regional_element *pvalue);

EXTERN int asn1JsonDec_SignalRequestPackage_regional_element (OSCTXT *pctxt, ASN1T_SignalRequestPackage_regional_element *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestPackage_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestPackage_regional_element* pvalue);

EXTERN ASN1T_SignalRequestPackage_regional_element* 
   new_ASN1T_SignalRequestPackage_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequestPackage_regional_element (
   ASN1T_SignalRequestPackage_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestPackage_regional_element (OSCTXT *pctxt, 
   ASN1T_SignalRequestPackage_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestPackage_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequestPackage'
*/
/* List of ASN1T_SignalRequestPackage_regional_element */
typedef ASN1TSeqOfList ASN1T_SignalRequestPackage_regional;

class EXTERN ASN1C_SignalRequestPackage_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalRequestPackage_regional& msgData;
public:
   /**
    * Control class: ASN1C_SignalRequestPackage_regional
    * Data class:    ASN1T_SignalRequestPackage_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalRequestPackage_regional
       (ASN1T_SignalRequestPackage_regional& data);

   /**
    * Control class: ASN1C_SignalRequestPackage_regional<br/>
    * Data class: ASN1T_SignalRequestPackage_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalRequestPackage_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalRequestPackage_regional& data);

   /**
    * Control class: ASN1C_SignalRequestPackage_regional<br/>
    * Data class: ASN1T_SignalRequestPackage_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalRequestPackage_regional (ASN1CType& ccobj
      , ASN1T_SignalRequestPackage_regional& data);

   virtual ~ASN1C_SignalRequestPackage_regional () {}

   /**
    * Data class: ASN1T_SignalRequestPackage_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalRequestPackage_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalRequestPackage_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalRequestPackage_regional_element* NewElement ();

   /**
    * Data class: ASN1T_SignalRequestPackage_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalRequestPackage_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_SignalRequestPackage_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_SignalRequestPackage_regional* pmatches);

private:
   ASN1C_SignalRequestPackage_regional& operator= (const ASN1C_SignalRequestPackage_regional&) {return *this;}
} ;

EXTERN int asn1PE_SignalRequestPackage_regional (OSCTXT* pctxt, ASN1T_SignalRequestPackage_regional* pvalue);

EXTERN int asn1PD_SignalRequestPackage_regional (OSCTXT* pctxt, ASN1T_SignalRequestPackage_regional* pvalue);

EXTERN int XmlEnc_SignalRequestPackage_regional (OSCTXT* pctxt, 
   ASN1T_SignalRequestPackage_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestPackage_regional (OSCTXT* pctxt, 
   ASN1T_SignalRequestPackage_regional* pvalue);

EXTERN int asn1JsonEnc_SignalRequestPackage_regional (OSCTXT *pctxt, ASN1T_SignalRequestPackage_regional *pvalue);

EXTERN int asn1JsonDec_SignalRequestPackage_regional (OSCTXT *pctxt, ASN1T_SignalRequestPackage_regional *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestPackage_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestPackage_regional* pvalue);

EXTERN int asn1Init_SignalRequestPackage_regional (
   ASN1T_SignalRequestPackage_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestPackage_regional (OSCTXT *pctxt, 
   ASN1T_SignalRequestPackage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestPackage                                      */
/*                                                            */
/**************************************************************/
/*
SignalRequestPackage ::= SEQUENCE {
   request [0] SignalRequest,
                  -- The specific request to the intersection
                  -- contains IntersectionID, request type,
                  -- requested action (approach/lane request)
   -- The Estimated Time of Arrival (ETA) when the service is requested
   minute [1] MinuteOfTheYear OPTIONAL,
   second [2] DSecond OPTIONAL,
   duration [3] DSecond OPTIONAL,
                  -- The duration value is used to provide a short interval that
                  -- extends the ETA so that the requesting vehicle can arrive at 
                  -- the point of service with uncertainty or with some desired
                  -- duration of service. This concept can be used to avoid needing 
                  -- to frequently update the request.
                  -- The requester must update the ETA and duration values if the
                  -- period of services extends beyond the duration time.  
                  -- It should be assumed that if the vehicle does not clear the
                  -- intersection when the duration is reached, the request will 
                  -- be cancelled and the intersection will revert to 
                  -- normal operation.
   regional [4] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-SignalRequestPackage}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-SignalRequestPackage}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SignalRequestPackage {
   struct {
      unsigned minutePresent : 1;
      unsigned secondPresent : 1;
      unsigned durationPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ASN1T_SignalRequest request;
   OSUINT32 minute;
   OSUINT16 second;
   OSUINT16 duration;
   ASN1T_SignalRequestPackage_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_SignalRequestPackage ();
} ;

EXTERN int asn1PE_SignalRequestPackage (OSCTXT* pctxt, ASN1T_SignalRequestPackage* pvalue);

EXTERN int asn1PD_SignalRequestPackage (OSCTXT* pctxt, ASN1T_SignalRequestPackage* pvalue);

EXTERN int XmlEnc_SignalRequestPackage (OSCTXT* pctxt, 
   ASN1T_SignalRequestPackage* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestPackage (OSCTXT* pctxt, 
   ASN1T_SignalRequestPackage* pvalue);

EXTERN int asn1JsonEnc_SignalRequestPackage (OSCTXT *pctxt, ASN1T_SignalRequestPackage *pvalue);

EXTERN int asn1JsonDec_SignalRequestPackage (OSCTXT *pctxt, ASN1T_SignalRequestPackage *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestPackage (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestPackage* pvalue);

EXTERN ASN1T_SignalRequestPackage* 
   new_ASN1T_SignalRequestPackage (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequestPackage (ASN1T_SignalRequestPackage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestPackage (OSCTXT *pctxt, 
   ASN1T_SignalRequestPackage* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestList                                         */
/*                                                            */
/**************************************************************/
/*
SignalRequestList ::= SEQUENCE (SIZE (1..32)) OF SignalRequestPackage
*/
/* List of ASN1T_SignalRequestPackage */
typedef ASN1TSeqOfList ASN1T_SignalRequestList;

class EXTERN ASN1C_SignalRequestList :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalRequestList& msgData;
public:
   /**
    * Control class: ASN1C_SignalRequestList
    * Data class:    ASN1T_SignalRequestList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalRequestList (ASN1T_SignalRequestList& data);

   /**
    * Control class: ASN1C_SignalRequestList<br/>
    * Data class: ASN1T_SignalRequestList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalRequestList (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalRequestList& data);

   /**
    * Control class: ASN1C_SignalRequestList<br/>
    * Data class: ASN1T_SignalRequestList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalRequestList (ASN1CType& ccobj, ASN1T_SignalRequestList& data);

   virtual ~ASN1C_SignalRequestList () {}

   /**
    * Data class: ASN1T_SignalRequestPackage<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalRequestPackage* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalRequestPackage.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalRequestPackage* NewElement ();

   /**
    * Data class: ASN1T_SignalRequestPackage.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalRequestPackage* AppendNewElement ();

private:
   ASN1C_SignalRequestList& operator= (const ASN1C_SignalRequestList&) {return *this;}
} ;

EXTERN int asn1PE_SignalRequestList (OSCTXT* pctxt, ASN1T_SignalRequestList* pvalue);

EXTERN int asn1PD_SignalRequestList (OSCTXT* pctxt, ASN1T_SignalRequestList* pvalue);

EXTERN int XmlEnc_SignalRequestList (OSCTXT* pctxt, 
   ASN1T_SignalRequestList* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestList (OSCTXT* pctxt, 
   ASN1T_SignalRequestList* pvalue);

EXTERN int asn1JsonEnc_SignalRequestList (OSCTXT *pctxt, ASN1T_SignalRequestList *pvalue);

EXTERN int asn1JsonDec_SignalRequestList (OSCTXT *pctxt, ASN1T_SignalRequestList *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestList (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestList* pvalue);

EXTERN int asn1Init_SignalRequestList (ASN1T_SignalRequestList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestList (OSCTXT *pctxt, 
   ASN1T_SignalRequestList* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorPositionVector                                   */
/*                                                            */
/**************************************************************/
/*
RequestorPositionVector ::= SEQUENCE {
   position [0] Position3D,
   heading [1] Angle OPTIONAL,
   speed [2] TransmissionAndSpeed OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_RequestorPositionVector {
   struct {
      unsigned headingPresent : 1;
      unsigned speedPresent : 1;
   } m;
   struct ASN1T_Position3D *position;
   OSUINT16 heading;
   struct ASN1T_TransmissionAndSpeed *speed;
   ASN1TSeqExt extElem1;
   ASN1T_RequestorPositionVector ();
} ;

EXTERN int asn1PE_RequestorPositionVector (OSCTXT* pctxt, ASN1T_RequestorPositionVector* pvalue);

EXTERN int asn1PD_RequestorPositionVector (OSCTXT* pctxt, ASN1T_RequestorPositionVector* pvalue);

EXTERN int XmlEnc_RequestorPositionVector (OSCTXT* pctxt, 
   ASN1T_RequestorPositionVector* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestorPositionVector (OSCTXT* pctxt, 
   ASN1T_RequestorPositionVector* pvalue);

EXTERN int asn1JsonEnc_RequestorPositionVector (OSCTXT *pctxt, ASN1T_RequestorPositionVector *pvalue);

EXTERN int asn1JsonDec_RequestorPositionVector (OSCTXT *pctxt, ASN1T_RequestorPositionVector *pvalue);

EXTERN int asn1PrtToStrm_RequestorPositionVector (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestorPositionVector* pvalue);

EXTERN ASN1T_RequestorPositionVector* 
   new_ASN1T_RequestorPositionVector (ASN1CType& ccobj);

EXTERN int asn1Init_RequestorPositionVector (ASN1T_RequestorPositionVector* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RequestorPositionVector (OSCTXT *pctxt, 
   ASN1T_RequestorPositionVector* pvalue);

/**************************************************************/
/*                                                            */
/*  TransitVehicleStatus                                      */
/*                                                            */
/**************************************************************/
/*
TransitVehicleStatus ::= BIT STRING  { loading(0), anADAuse(1), aBikeLoad(2), doorOpen(3), charging(4), atStopLine(5) } (SIZE (8))
*/
struct EXTERN ASN1T_TransitVehicleStatus {
   OSOCTET data[1];
   // ctors
   ASN1T_TransitVehicleStatus ()  {}
   ASN1T_TransitVehicleStatus (const OSOCTET* _data) {
      OSCRTLSAFEMEMCPY (data, 1, _data, 1);
   }
} ;

class EXTERN ASN1C_TransitVehicleStatus :
public ASN1CBitStr
{
protected:
   ASN1T_TransitVehicleStatus& msgData;
public:
   // named bits
   enum { loading = 0, anADAuse = 1, aBikeLoad = 2, doorOpen = 3, charging = 4, atStopLine = 5 };

   /**
    * Control class: ASN1C_TransitVehicleStatus
    * Data class:    ASN1T_TransitVehicleStatus
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TransitVehicleStatus (ASN1T_TransitVehicleStatus& data);

   /**
    * Control class: ASN1C_TransitVehicleStatus<br/>
    * Data class: ASN1T_TransitVehicleStatus<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TransitVehicleStatus (OSRTMessageBufferIF& msgBuf
      , ASN1T_TransitVehicleStatus& data);

   virtual ~ASN1C_TransitVehicleStatus () {}

private:
   ASN1C_TransitVehicleStatus& operator= (const ASN1C_TransitVehicleStatus&) {return *this;}
} ;

EXTERN int asn1PE_TransitVehicleStatus (OSCTXT* pctxt, ASN1T_TransitVehicleStatus* pvalue);

EXTERN int asn1PD_TransitVehicleStatus (OSCTXT* pctxt, ASN1T_TransitVehicleStatus* pvalue);

EXTERN int XmlEnc_TransitVehicleStatus (OSCTXT* pctxt, 
   ASN1T_TransitVehicleStatus* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TransitVehicleStatus (OSCTXT* pctxt, 
   ASN1T_TransitVehicleStatus* pvalue);

EXTERN int asn1JsonEnc_TransitVehicleStatus (OSCTXT *pctxt, ASN1T_TransitVehicleStatus *pvalue);

EXTERN int asn1JsonDec_TransitVehicleStatus (OSCTXT *pctxt, ASN1T_TransitVehicleStatus *pvalue);

EXTERN int asn1PrtToStrm_TransitVehicleStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_TransitVehicleStatus* pvalue);

extern EXTERN struct OSBitMapItem g_ASN1T_TransitVehicleStatus_NAMEDBITTAB[7];

EXTERN ASN1T_TransitVehicleStatus* 
   new_ASN1T_TransitVehicleStatus (ASN1CType& ccobj);

EXTERN int asn1Init_TransitVehicleStatus (ASN1T_TransitVehicleStatus* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  TransitVehicleOccupancy                                   */
/*                                                            */
/**************************************************************/
/*
TransitVehicleOccupancy ::= ENUMERATED { occupancyUnknown(0), occupancyEmpty(1), occupancyVeryLow(2), occupancyLow(3), occupancyMed(4), occupancyHigh(5), occupancyNearlyFull(6), occupancyFull(7) }
*/
struct EXTERN TransitVehicleOccupancy {
   enum Root {
      occupancyUnknown = 0,
      occupancyEmpty = 1,
      occupancyVeryLow = 2,
      occupancyLow = 3,
      occupancyMed = 4,
      occupancyHigh = 5,
      occupancyNearlyFull = 6,
      occupancyFull = 7
   } ;
} ;

typedef OSUINT32 ASN1T_TransitVehicleOccupancy;

EXTERN int asn1PE_TransitVehicleOccupancy (OSCTXT* pctxt, ASN1T_TransitVehicleOccupancy value);

EXTERN int asn1PD_TransitVehicleOccupancy (OSCTXT* pctxt, ASN1T_TransitVehicleOccupancy* pvalue);

EXTERN int XmlEnc_TransitVehicleOccupancy (OSCTXT* pctxt, 
   ASN1T_TransitVehicleOccupancy value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TransitVehicleOccupancy (OSCTXT* pctxt, 
   ASN1T_TransitVehicleOccupancy* pvalue);

EXTERN int asn1JsonEnc_TransitVehicleOccupancy (OSCTXT *pctxt, ASN1T_TransitVehicleOccupancy *pvalue);

EXTERN int asn1JsonDec_TransitVehicleOccupancy (OSCTXT *pctxt, ASN1T_TransitVehicleOccupancy *pvalue);

EXTERN int asn1PrtToStrm_TransitVehicleOccupancy (OSCTXT *pctxt, 
   const char* name, const ASN1T_TransitVehicleOccupancy* pvalue);

EXTERN ASN1T_TransitVehicleOccupancy* 
   new_ASN1T_TransitVehicleOccupancy (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_TransitVehicleOccupancy_ENUMTAB[];
#define ASN1T_TransitVehicleOccupancy_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_TransitVehicleOccupancy_ToString (OSINT32 value);

EXTERN int ASN1T_TransitVehicleOccupancy_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_TransitVehicleOccupancy* pvalue);

EXTERN int ASN1T_TransitVehicleOccupancy_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_TransitVehicleOccupancy* pvalue);

/**************************************************************/
/*                                                            */
/*  DeltaTime                                                 */
/*                                                            */
/**************************************************************/
/*
DeltaTime ::= INTEGER (-122..121)
    Supporting a range of +/- 20 minute in steps of 10 seconds
    the value of -121 shall be used when more than -20 minutes
    the value of +120 shall be used when more than +20 minutes
    the value -122 shall be used when the value is unavailable

*/
typedef OSINT8 ASN1T_DeltaTime;

EXTERN int asn1PE_DeltaTime (OSCTXT* pctxt, ASN1T_DeltaTime value);

EXTERN int asn1PD_DeltaTime (OSCTXT* pctxt, ASN1T_DeltaTime* pvalue);

EXTERN int XmlEnc_DeltaTime (OSCTXT* pctxt, ASN1T_DeltaTime value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DeltaTime (OSCTXT* pctxt, ASN1T_DeltaTime* pvalue);

EXTERN int asn1JsonEnc_DeltaTime (OSCTXT *pctxt, ASN1T_DeltaTime *pvalue);

EXTERN int asn1JsonDec_DeltaTime (OSCTXT *pctxt, ASN1T_DeltaTime *pvalue);

EXTERN int asn1PrtToStrm_DeltaTime (OSCTXT *pctxt, 
   const char* name, const ASN1T_DeltaTime* pvalue);

EXTERN ASN1T_DeltaTime* new_ASN1T_DeltaTime (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  RequestorDescription_regional_element                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RequestorDescription'
*/
struct EXTERN ASN1T_RequestorDescription_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_RequestorDescription_regional_element (OSCTXT* pctxt, ASN1T_RequestorDescription_regional_element* pvalue);

EXTERN int asn1PD_RequestorDescription_regional_element (OSCTXT* pctxt, ASN1T_RequestorDescription_regional_element* pvalue);

EXTERN int XmlEnc_RequestorDescription_regional_element (OSCTXT* pctxt, 
   ASN1T_RequestorDescription_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestorDescription_regional_element (OSCTXT* pctxt, 
   ASN1T_RequestorDescription_regional_element* pvalue);

EXTERN int asn1JsonEnc_RequestorDescription_regional_element (OSCTXT *pctxt, ASN1T_RequestorDescription_regional_element *pvalue);

EXTERN int asn1JsonDec_RequestorDescription_regional_element (OSCTXT *pctxt, ASN1T_RequestorDescription_regional_element *pvalue);

EXTERN int asn1PrtToStrm_RequestorDescription_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestorDescription_regional_element* pvalue);

EXTERN ASN1T_RequestorDescription_regional_element* 
   new_ASN1T_RequestorDescription_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_RequestorDescription_regional_element (
   ASN1T_RequestorDescription_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RequestorDescription_regional_element (OSCTXT *pctxt, 
   ASN1T_RequestorDescription_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorDescription_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RequestorDescription'
*/
/* List of ASN1T_RequestorDescription_regional_element */
typedef ASN1TSeqOfList ASN1T_RequestorDescription_regional;

class EXTERN ASN1C_RequestorDescription_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_RequestorDescription_regional& msgData;
public:
   /**
    * Control class: ASN1C_RequestorDescription_regional
    * Data class:    ASN1T_RequestorDescription_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_RequestorDescription_regional
       (ASN1T_RequestorDescription_regional& data);

   /**
    * Control class: ASN1C_RequestorDescription_regional<br/>
    * Data class: ASN1T_RequestorDescription_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_RequestorDescription_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_RequestorDescription_regional& data);

   /**
    * Control class: ASN1C_RequestorDescription_regional<br/>
    * Data class: ASN1T_RequestorDescription_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_RequestorDescription_regional (ASN1CType& ccobj
      , ASN1T_RequestorDescription_regional& data);

   virtual ~ASN1C_RequestorDescription_regional () {}

   /**
    * Data class: ASN1T_RequestorDescription_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_RequestorDescription_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_RequestorDescription_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_RequestorDescription_regional_element* NewElement ();

   /**
    * Data class: ASN1T_RequestorDescription_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_RequestorDescription_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_RequestorDescription_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_RequestorDescription_regional* pmatches);

private:
   ASN1C_RequestorDescription_regional& operator= (const ASN1C_RequestorDescription_regional&) {return *this;}
} ;

EXTERN int asn1PE_RequestorDescription_regional (OSCTXT* pctxt, ASN1T_RequestorDescription_regional* pvalue);

EXTERN int asn1PD_RequestorDescription_regional (OSCTXT* pctxt, ASN1T_RequestorDescription_regional* pvalue);

EXTERN int XmlEnc_RequestorDescription_regional (OSCTXT* pctxt, 
   ASN1T_RequestorDescription_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestorDescription_regional (OSCTXT* pctxt, 
   ASN1T_RequestorDescription_regional* pvalue);

EXTERN int asn1JsonEnc_RequestorDescription_regional (OSCTXT *pctxt, ASN1T_RequestorDescription_regional *pvalue);

EXTERN int asn1JsonDec_RequestorDescription_regional (OSCTXT *pctxt, ASN1T_RequestorDescription_regional *pvalue);

EXTERN int asn1PrtToStrm_RequestorDescription_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestorDescription_regional* pvalue);

EXTERN int asn1Init_RequestorDescription_regional (
   ASN1T_RequestorDescription_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RequestorDescription_regional (OSCTXT *pctxt, 
   ASN1T_RequestorDescription_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorDescription                                      */
/*                                                            */
/**************************************************************/
/*
RequestorDescription ::= SEQUENCE {
   id [0] EXPLICIT VehicleID,
                     -- The ID used in the BSM or CAM of the requestor
                     -- This ID is presumed not to change 
                     -- during the exchange
   type [1] RequestorType OPTIONAL,
                     -- Information regarding all type and class data
                     -- about the requesting vehicle 
   position [2] RequestorPositionVector OPTIONAL,
                     -- The location of the requesting vehicle
   name [3] DescriptiveName OPTIONAL,
                     -- A human readable name for debugging use
   -- Support for Transit requests
   routeName [4] DescriptiveName OPTIONAL,
                     -- A string for transit operations use
   transitStatus [5] TransitVehicleStatus OPTIONAL,
                     -- current vehicle state (loading, etc.)
   transitOccupancy [6] TransitVehicleOccupancy OPTIONAL,
                     -- current vehicle occupancy 
   transitSchedule [7] DeltaTime OPTIONAL,
                     -- current vehicle schedule adherence 
   regional [8] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-RequestorDescription}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-RequestorDescription}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_RequestorDescription {
   struct {
      unsigned typePresent : 1;
      unsigned positionPresent : 1;
      unsigned namePresent : 1;
      unsigned routeNamePresent : 1;
      unsigned transitStatusPresent : 1;
      unsigned transitOccupancyPresent : 1;
      unsigned transitSchedulePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   struct ASN1T_VehicleID *id;
   struct ASN1T_RequestorType *type;
   ASN1T_RequestorPositionVector position;
   const char* name;
   const char* routeName;
   ASN1T_TransitVehicleStatus transitStatus;
   ASN1T_TransitVehicleOccupancy transitOccupancy;
   ASN1T_DeltaTime transitSchedule;
   ASN1T_RequestorDescription_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_RequestorDescription ();
} ;

EXTERN int asn1PE_RequestorDescription (OSCTXT* pctxt, ASN1T_RequestorDescription* pvalue);

EXTERN int asn1PD_RequestorDescription (OSCTXT* pctxt, ASN1T_RequestorDescription* pvalue);

EXTERN int XmlEnc_RequestorDescription (OSCTXT* pctxt, 
   ASN1T_RequestorDescription* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RequestorDescription (OSCTXT* pctxt, 
   ASN1T_RequestorDescription* pvalue);

EXTERN int asn1JsonEnc_RequestorDescription (OSCTXT *pctxt, ASN1T_RequestorDescription *pvalue);

EXTERN int asn1JsonDec_RequestorDescription (OSCTXT *pctxt, ASN1T_RequestorDescription *pvalue);

EXTERN int asn1PrtToStrm_RequestorDescription (OSCTXT *pctxt, 
   const char* name, const ASN1T_RequestorDescription* pvalue);

EXTERN ASN1T_RequestorDescription* 
   new_ASN1T_RequestorDescription (ASN1CType& ccobj);

EXTERN int asn1Init_RequestorDescription (ASN1T_RequestorDescription* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_RequestorDescription (OSCTXT *pctxt, 
   ASN1T_RequestorDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestMessage_regional_element                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequestMessage'
*/
struct EXTERN ASN1T_SignalRequestMessage_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_SignalRequestMessage_regional_element (OSCTXT* pctxt, ASN1T_SignalRequestMessage_regional_element* pvalue);

EXTERN int asn1PD_SignalRequestMessage_regional_element (OSCTXT* pctxt, ASN1T_SignalRequestMessage_regional_element* pvalue);

EXTERN int XmlEnc_SignalRequestMessage_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalRequestMessage_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestMessage_regional_element (OSCTXT* pctxt, 
   ASN1T_SignalRequestMessage_regional_element* pvalue);

EXTERN int asn1JsonEnc_SignalRequestMessage_regional_element (OSCTXT *pctxt, ASN1T_SignalRequestMessage_regional_element *pvalue);

EXTERN int asn1JsonDec_SignalRequestMessage_regional_element (OSCTXT *pctxt, ASN1T_SignalRequestMessage_regional_element *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestMessage_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestMessage_regional_element* pvalue);

EXTERN ASN1T_SignalRequestMessage_regional_element* 
   new_ASN1T_SignalRequestMessage_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequestMessage_regional_element (
   ASN1T_SignalRequestMessage_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestMessage_regional_element (OSCTXT *pctxt, 
   ASN1T_SignalRequestMessage_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestMessage_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequestMessage'
*/
/* List of ASN1T_SignalRequestMessage_regional_element */
typedef ASN1TSeqOfList ASN1T_SignalRequestMessage_regional;

class EXTERN ASN1C_SignalRequestMessage_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_SignalRequestMessage_regional& msgData;
public:
   /**
    * Control class: ASN1C_SignalRequestMessage_regional
    * Data class:    ASN1T_SignalRequestMessage_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_SignalRequestMessage_regional
       (ASN1T_SignalRequestMessage_regional& data);

   /**
    * Control class: ASN1C_SignalRequestMessage_regional<br/>
    * Data class: ASN1T_SignalRequestMessage_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_SignalRequestMessage_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_SignalRequestMessage_regional& data);

   /**
    * Control class: ASN1C_SignalRequestMessage_regional<br/>
    * Data class: ASN1T_SignalRequestMessage_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_SignalRequestMessage_regional (ASN1CType& ccobj
      , ASN1T_SignalRequestMessage_regional& data);

   virtual ~ASN1C_SignalRequestMessage_regional () {}

   /**
    * Data class: ASN1T_SignalRequestMessage_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_SignalRequestMessage_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_SignalRequestMessage_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_SignalRequestMessage_regional_element* NewElement ();

   /**
    * Data class: ASN1T_SignalRequestMessage_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_SignalRequestMessage_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_SignalRequestMessage_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_SignalRequestMessage_regional* pmatches);

private:
   ASN1C_SignalRequestMessage_regional& operator= (const ASN1C_SignalRequestMessage_regional&) {return *this;}
} ;

EXTERN int asn1PE_SignalRequestMessage_regional (OSCTXT* pctxt, ASN1T_SignalRequestMessage_regional* pvalue);

EXTERN int asn1PD_SignalRequestMessage_regional (OSCTXT* pctxt, ASN1T_SignalRequestMessage_regional* pvalue);

EXTERN int XmlEnc_SignalRequestMessage_regional (OSCTXT* pctxt, 
   ASN1T_SignalRequestMessage_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestMessage_regional (OSCTXT* pctxt, 
   ASN1T_SignalRequestMessage_regional* pvalue);

EXTERN int asn1JsonEnc_SignalRequestMessage_regional (OSCTXT *pctxt, ASN1T_SignalRequestMessage_regional *pvalue);

EXTERN int asn1JsonDec_SignalRequestMessage_regional (OSCTXT *pctxt, ASN1T_SignalRequestMessage_regional *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestMessage_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestMessage_regional* pvalue);

EXTERN int asn1Init_SignalRequestMessage_regional (
   ASN1T_SignalRequestMessage_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestMessage_regional (OSCTXT *pctxt, 
   ASN1T_SignalRequestMessage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestMessage                                      */
/*                                                            */
/**************************************************************/
/*
SignalRequestMessage ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   second [1] DSecond,
   sequenceNumber [2] MsgCount OPTIONAL,
   requests [3] SignalRequestList OPTIONAL,
                   -- Request Data for one or more signalized 
                   -- intersections that support SRM dialogs
   requestor [4] RequestorDescription,
                   -- Requesting Device and other User Data
                   -- contains vehicle ID (if from a vehicle)
                   -- as well as type data and current position
                   -- and may contain additional transit data
   regional [5] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-SignalRequestMessage}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-SignalRequestMessage}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_SignalRequestMessage {
   struct {
      unsigned timeStampPresent : 1;
      unsigned sequenceNumberPresent : 1;
      unsigned requestsPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   OSUINT32 timeStamp;
   OSUINT16 second;
   OSUINT8 sequenceNumber;
   ASN1T_SignalRequestList requests;
   ASN1T_RequestorDescription requestor;
   ASN1T_SignalRequestMessage_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_SignalRequestMessage ();
} ;

EXTERN int asn1PE_SignalRequestMessage (OSCTXT* pctxt, ASN1T_SignalRequestMessage* pvalue);

EXTERN int asn1PD_SignalRequestMessage (OSCTXT* pctxt, ASN1T_SignalRequestMessage* pvalue);

EXTERN int XmlEnc_SignalRequestMessage (OSCTXT* pctxt, 
   ASN1T_SignalRequestMessage* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SignalRequestMessage (OSCTXT* pctxt, 
   ASN1T_SignalRequestMessage* pvalue);

EXTERN int asn1JsonEnc_SignalRequestMessage (OSCTXT *pctxt, ASN1T_SignalRequestMessage *pvalue);

EXTERN int asn1JsonDec_SignalRequestMessage (OSCTXT *pctxt, ASN1T_SignalRequestMessage *pvalue);

EXTERN int asn1PrtToStrm_SignalRequestMessage (OSCTXT *pctxt, 
   const char* name, const ASN1T_SignalRequestMessage* pvalue);

EXTERN ASN1T_SignalRequestMessage* 
   new_ASN1T_SignalRequestMessage (ASN1CType& ccobj);

EXTERN int asn1Init_SignalRequestMessage (ASN1T_SignalRequestMessage* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_SignalRequestMessage (OSCTXT *pctxt, 
   ASN1T_SignalRequestMessage* pvalue);

#endif
