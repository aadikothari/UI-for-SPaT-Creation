/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).
 */
#ifndef PROBEVEHICLEDATA_H
#define PROBEVEHICLEDATA_H

#include <stdio.h>
#include <stdlib.h>
#include "rtpersrc/asn1PerCppTypes.h"
#include "rtsrc/asn1CppTypes.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtsrc/asn1type.h"
#include "rtxmlsrc/asn1xml.h"
#include "rtxmlsrc/rtXmlCppMsgBuf.h"
#include "rtsrc/asn1type.h"
#include "rtjsonsrc/asn1json.h"
#include "rtjsonsrc/rtJsonCppMsgBuf.h"

#include "rtsrc/ASN1CSeqOfList.h"
#include "NTCIP.h"
#include "ITIS.h"

/**
 * Header file for ASN.1 module ProbeVehicleData
 */
/**************************************************************/
/*                                                            */
/*  ProbeSegmentNumber                                        */
/*                                                            */
/**************************************************************/
/*
ProbeSegmentNumber ::= INTEGER (0..32767)
    value determined by local device 
    as per standard

*/
typedef OSUINT16 ASN1T_ProbeSegmentNumber;

EXTERN int asn1PE_ProbeSegmentNumber (OSCTXT* pctxt, ASN1T_ProbeSegmentNumber value);

EXTERN int asn1PD_ProbeSegmentNumber (OSCTXT* pctxt, ASN1T_ProbeSegmentNumber* pvalue);

EXTERN int XmlEnc_ProbeSegmentNumber (OSCTXT* pctxt, 
   ASN1T_ProbeSegmentNumber value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeSegmentNumber (OSCTXT* pctxt, 
   ASN1T_ProbeSegmentNumber* pvalue);

EXTERN int asn1JsonEnc_ProbeSegmentNumber (OSCTXT *pctxt, ASN1T_ProbeSegmentNumber *pvalue);

EXTERN int asn1JsonDec_ProbeSegmentNumber (OSCTXT *pctxt, ASN1T_ProbeSegmentNumber *pvalue);

EXTERN int asn1PrtToStrm_ProbeSegmentNumber (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeSegmentNumber* pvalue);

EXTERN ASN1T_ProbeSegmentNumber* 
   new_ASN1T_ProbeSegmentNumber (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VINstring                                                 */
/*                                                            */
/**************************************************************/
/*
VINstring ::= OCTET STRING (SIZE (1..17))
    A legal VIN or a shorter value 
    to provide an ident of the vehicle
    If a VIN is sent, then IA5 encoding 
    shall be used

*/
struct EXTERN ASN1T_VINstring {
   OSUINT8 numocts;
   OSOCTET data[17];
   // ctors
   ASN1T_VINstring () : numocts(0) {}
   ASN1T_VINstring (OSUINT8 _numocts, const OSOCTET* _data) :
      numocts (_numocts) {
      OSCRTLSAFEMEMCPY (data, sizeof(data), _data, numocts);
   }
   ASN1T_VINstring (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT8)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
   }
   // assignment operators
   ASN1T_VINstring& operator= (const char* cstring) {
      if (!OS_ISEMPTY (cstring)) {
         numocts = (OSUINT8)(OSRTMIN ((OSCRTLSTRLEN(cstring)+1), sizeof(data)));
         OSCRTLSAFEMEMCPY (data, numocts, cstring, numocts);
      }
      else numocts = 0;
      return *this;
   }
} ;

EXTERN int asn1PE_VINstring (OSCTXT* pctxt, ASN1T_VINstring* pvalue);

EXTERN int asn1PD_VINstring (OSCTXT* pctxt, ASN1T_VINstring* pvalue);

EXTERN int XmlEnc_VINstring (OSCTXT* pctxt, ASN1T_VINstring* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VINstring (OSCTXT* pctxt, ASN1T_VINstring* pvalue);

EXTERN int asn1JsonEnc_VINstring (OSCTXT *pctxt, ASN1T_VINstring *pvalue);

EXTERN int asn1JsonDec_VINstring (OSCTXT *pctxt, ASN1T_VINstring *pvalue);

EXTERN int asn1PrtToStrm_VINstring (OSCTXT *pctxt, 
   const char* name, const ASN1T_VINstring* pvalue);

EXTERN ASN1T_VINstring* new_ASN1T_VINstring (ASN1CType& ccobj);

EXTERN int asn1Init_VINstring (ASN1T_VINstring* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  VehicleIdent_vehicleClass                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleIdent'
*/
/* Choice tag constants */

#define T_VehicleIdent_vehicleClass_vGroup 1
#define T_VehicleIdent_vehicleClass_rGroup 2
#define T_VehicleIdent_vehicleClass_rEquip 3

struct EXTERN ASN1T_VehicleIdent_vehicleClass {
   OSINT32 t;
   union {
      /* t = 1 */
      ASN1T_VehicleGroupAffected vGroup;
      /* t = 2 */
      ASN1T_ResponderGroupAffected rGroup;
      /* t = 3 */
      ASN1T_IncidentResponseEquipment rEquip;
   } u;
   ASN1T_VehicleIdent_vehicleClass () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_VehicleIdent_vehicleClass (OSCTXT* pctxt, ASN1T_VehicleIdent_vehicleClass* pvalue);

EXTERN int asn1PD_VehicleIdent_vehicleClass (OSCTXT* pctxt, ASN1T_VehicleIdent_vehicleClass* pvalue);

EXTERN int XmlEnc_VehicleIdent_vehicleClass (OSCTXT* pctxt, 
   ASN1T_VehicleIdent_vehicleClass* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleIdent_vehicleClass (OSCTXT* pctxt, 
   ASN1T_VehicleIdent_vehicleClass* pvalue);

EXTERN int asn1JsonEnc_VehicleIdent_vehicleClass (OSCTXT *pctxt, ASN1T_VehicleIdent_vehicleClass *pvalue);

EXTERN int asn1JsonDec_VehicleIdent_vehicleClass (OSCTXT *pctxt, ASN1T_VehicleIdent_vehicleClass *pvalue);

EXTERN int asn1PrtToStrm_VehicleIdent_vehicleClass (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleIdent_vehicleClass* pvalue);

EXTERN ASN1T_VehicleIdent_vehicleClass* 
   new_ASN1T_VehicleIdent_vehicleClass (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleIdent_vehicleClass (
   ASN1T_VehicleIdent_vehicleClass* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  VehicleIdent                                              */
/*                                                            */
/**************************************************************/
/*
VehicleIdent ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
                  -- a human readable name for debugging use
   vin [1] VINstring OPTIONAL,
                  -- vehicle VIN value
   ownerCode [2] IA5String (SIZE (1..32)) OPTIONAL,
                  -- vehicle owner code 
   id [3] EXPLICIT VehicleID OPTIONAL,
                  -- same value used in the BSM
   vehicleType [4] VehicleType OPTIONAL,
   vehicleClass [5] EXPLICIT CHOICE {
      vGroup [0] VehicleGroupAffected,
      rGroup [1] ResponderGroupAffected,
      rEquip [2] IncidentResponseEquipment
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_VehicleIdent {
   struct {
      unsigned namePresent : 1;
      unsigned vinPresent : 1;
      unsigned ownerCodePresent : 1;
      unsigned idPresent : 1;
      unsigned vehicleTypePresent : 1;
      unsigned vehicleClassPresent : 1;
   } m;
   const char* name;
   ASN1T_VINstring vin;
   const char* ownerCode;
   struct ASN1T_VehicleID *id;
   OSUINT32 vehicleType;
   ASN1T_VehicleIdent_vehicleClass vehicleClass;
   ASN1TSeqExt extElem1;
   ASN1T_VehicleIdent ();
} ;

EXTERN int asn1PE_VehicleIdent (OSCTXT* pctxt, ASN1T_VehicleIdent* pvalue);

EXTERN int asn1PD_VehicleIdent (OSCTXT* pctxt, ASN1T_VehicleIdent* pvalue);

EXTERN int XmlEnc_VehicleIdent (OSCTXT* pctxt, ASN1T_VehicleIdent* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleIdent (OSCTXT* pctxt, ASN1T_VehicleIdent* pvalue);

EXTERN int asn1JsonEnc_VehicleIdent (OSCTXT *pctxt, ASN1T_VehicleIdent *pvalue);

EXTERN int asn1JsonDec_VehicleIdent (OSCTXT *pctxt, ASN1T_VehicleIdent *pvalue);

EXTERN int asn1PrtToStrm_VehicleIdent (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleIdent* pvalue);

EXTERN ASN1T_VehicleIdent* new_ASN1T_VehicleIdent (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleIdent (ASN1T_VehicleIdent* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleIdent (OSCTXT *pctxt, ASN1T_VehicleIdent* pvalue);

/**************************************************************/
/*                                                            */
/*  BrakeAppliedPressure                                      */
/*                                                            */
/**************************************************************/
/*
BrakeAppliedPressure ::= ENUMERATED { unavailable(0), minPressure(1), bkLvl-2(2), bkLvl-3(3), bkLvl-4(4), bkLvl-5(5), bkLvl-6(6), bkLvl-7(7), bkLvl-8(8), bkLvl-9(9), bkLvl-10(10), bkLvl-11(11), bkLvl-12(12), bkLvl-13(13), bkLvl-14(14), maxPressure(15) }
       Encoded as a 4 bit value

*/
struct EXTERN BrakeAppliedPressure {
   enum Root {
      unavailable = 0,
      minPressure = 1,
      bkLvl_2 = 2,
      bkLvl_3 = 3,
      bkLvl_4 = 4,
      bkLvl_5 = 5,
      bkLvl_6 = 6,
      bkLvl_7 = 7,
      bkLvl_8 = 8,
      bkLvl_9 = 9,
      bkLvl_10 = 10,
      bkLvl_11 = 11,
      bkLvl_12 = 12,
      bkLvl_13 = 13,
      bkLvl_14 = 14,
      maxPressure = 15
   } ;
} ;

typedef OSUINT32 ASN1T_BrakeAppliedPressure;

EXTERN int asn1PE_BrakeAppliedPressure (OSCTXT* pctxt, ASN1T_BrakeAppliedPressure value);

EXTERN int asn1PD_BrakeAppliedPressure (OSCTXT* pctxt, ASN1T_BrakeAppliedPressure* pvalue);

EXTERN int XmlEnc_BrakeAppliedPressure (OSCTXT* pctxt, 
   ASN1T_BrakeAppliedPressure value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_BrakeAppliedPressure (OSCTXT* pctxt, 
   ASN1T_BrakeAppliedPressure* pvalue);

EXTERN int asn1JsonEnc_BrakeAppliedPressure (OSCTXT *pctxt, ASN1T_BrakeAppliedPressure *pvalue);

EXTERN int asn1JsonDec_BrakeAppliedPressure (OSCTXT *pctxt, ASN1T_BrakeAppliedPressure *pvalue);

EXTERN int asn1PrtToStrm_BrakeAppliedPressure (OSCTXT *pctxt, 
   const char* name, const ASN1T_BrakeAppliedPressure* pvalue);

EXTERN ASN1T_BrakeAppliedPressure* 
   new_ASN1T_BrakeAppliedPressure (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_BrakeAppliedPressure_ENUMTAB[];
#define ASN1T_BrakeAppliedPressure_ENUMTABSIZE 16

EXTERN const OSUTF8CHAR* ASN1T_BrakeAppliedPressure_ToString (OSINT32 value);

EXTERN int ASN1T_BrakeAppliedPressure_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_BrakeAppliedPressure* pvalue);

EXTERN int ASN1T_BrakeAppliedPressure_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_BrakeAppliedPressure* pvalue);

/**************************************************************/
/*                                                            */
/*  SunSensor                                                 */
/*                                                            */
/**************************************************************/
/*
SunSensor ::= INTEGER (0..1000)
    units of watts / m2

*/
typedef OSUINT16 ASN1T_SunSensor;

EXTERN int asn1PE_SunSensor (OSCTXT* pctxt, ASN1T_SunSensor value);

EXTERN int asn1PD_SunSensor (OSCTXT* pctxt, ASN1T_SunSensor* pvalue);

EXTERN int XmlEnc_SunSensor (OSCTXT* pctxt, ASN1T_SunSensor value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SunSensor (OSCTXT* pctxt, ASN1T_SunSensor* pvalue);

EXTERN int asn1JsonEnc_SunSensor (OSCTXT *pctxt, ASN1T_SunSensor *pvalue);

EXTERN int asn1JsonDec_SunSensor (OSCTXT *pctxt, ASN1T_SunSensor *pvalue);

EXTERN int asn1PrtToStrm_SunSensor (OSCTXT *pctxt, 
   const char* name, const ASN1T_SunSensor* pvalue);

EXTERN ASN1T_SunSensor* new_ASN1T_SunSensor (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  RainSensor                                                */
/*                                                            */
/**************************************************************/
/*
RainSensor ::= ENUMERATED { none(0), lightMist(1), heavyMist(2), lightRainOrDrizzle(3), rain(4), moderateRain(5), heavyRain(6), heavyDownpour(7) }
*/
struct EXTERN RainSensor {
   enum Root {
      none = 0,
      lightMist = 1,
      heavyMist = 2,
      lightRainOrDrizzle = 3,
      rain = 4,
      moderateRain = 5,
      heavyRain = 6,
      heavyDownpour = 7
   } ;
} ;

typedef OSUINT32 ASN1T_RainSensor;

EXTERN int asn1PE_RainSensor (OSCTXT* pctxt, ASN1T_RainSensor value);

EXTERN int asn1PD_RainSensor (OSCTXT* pctxt, ASN1T_RainSensor* pvalue);

EXTERN int XmlEnc_RainSensor (OSCTXT* pctxt, ASN1T_RainSensor value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_RainSensor (OSCTXT* pctxt, ASN1T_RainSensor* pvalue);

EXTERN int asn1JsonEnc_RainSensor (OSCTXT *pctxt, ASN1T_RainSensor *pvalue);

EXTERN int asn1JsonDec_RainSensor (OSCTXT *pctxt, ASN1T_RainSensor *pvalue);

EXTERN int asn1PrtToStrm_RainSensor (OSCTXT *pctxt, 
   const char* name, const ASN1T_RainSensor* pvalue);

EXTERN ASN1T_RainSensor* new_ASN1T_RainSensor (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_RainSensor_ENUMTAB[];
#define ASN1T_RainSensor_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_RainSensor_ToString (OSINT32 value);

EXTERN int ASN1T_RainSensor_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_RainSensor* pvalue);

EXTERN int ASN1T_RainSensor_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_RainSensor* pvalue);

/**************************************************************/
/*                                                            */
/*  SteeringWheelAngleConfidence                              */
/*                                                            */
/**************************************************************/
/*
SteeringWheelAngleConfidence ::= ENUMERATED { unavailable(0), prec2deg(1), prec1deg(2), prec0-02deg(3) }
*/
struct EXTERN SteeringWheelAngleConfidence {
   enum Root {
      unavailable = 0,
      prec2deg = 1,
      prec1deg = 2,
      prec0_02deg = 3
   } ;
} ;

typedef OSUINT32 ASN1T_SteeringWheelAngleConfidence;

EXTERN int asn1PE_SteeringWheelAngleConfidence (OSCTXT* pctxt, ASN1T_SteeringWheelAngleConfidence value);

EXTERN int asn1PD_SteeringWheelAngleConfidence (OSCTXT* pctxt, ASN1T_SteeringWheelAngleConfidence* pvalue);

EXTERN int XmlEnc_SteeringWheelAngleConfidence (OSCTXT* pctxt, 
   ASN1T_SteeringWheelAngleConfidence value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SteeringWheelAngleConfidence (OSCTXT* pctxt, 
   ASN1T_SteeringWheelAngleConfidence* pvalue);

EXTERN int asn1JsonEnc_SteeringWheelAngleConfidence (OSCTXT *pctxt, ASN1T_SteeringWheelAngleConfidence *pvalue);

EXTERN int asn1JsonDec_SteeringWheelAngleConfidence (OSCTXT *pctxt, ASN1T_SteeringWheelAngleConfidence *pvalue);

EXTERN int asn1PrtToStrm_SteeringWheelAngleConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_SteeringWheelAngleConfidence* pvalue);

EXTERN ASN1T_SteeringWheelAngleConfidence* 
   new_ASN1T_SteeringWheelAngleConfidence (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_SteeringWheelAngleConfidence_ENUMTAB[];
#define ASN1T_SteeringWheelAngleConfidence_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_SteeringWheelAngleConfidence_ToString (OSINT32 value);

EXTERN int ASN1T_SteeringWheelAngleConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_SteeringWheelAngleConfidence* pvalue);

EXTERN int ASN1T_SteeringWheelAngleConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_SteeringWheelAngleConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  SteeringWheelAngleRateOfChange                            */
/*                                                            */
/**************************************************************/
/*
SteeringWheelAngleRateOfChange ::= INTEGER (-127..127)
    LSB is 3 degrees per second

*/
typedef OSINT8 ASN1T_SteeringWheelAngleRateOfChange;

EXTERN int asn1PE_SteeringWheelAngleRateOfChange (OSCTXT* pctxt, ASN1T_SteeringWheelAngleRateOfChange value);

EXTERN int asn1PD_SteeringWheelAngleRateOfChange (OSCTXT* pctxt, ASN1T_SteeringWheelAngleRateOfChange* pvalue);

EXTERN int XmlEnc_SteeringWheelAngleRateOfChange (OSCTXT* pctxt, 
   ASN1T_SteeringWheelAngleRateOfChange value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SteeringWheelAngleRateOfChange (OSCTXT* pctxt, 
   ASN1T_SteeringWheelAngleRateOfChange* pvalue);

EXTERN int asn1JsonEnc_SteeringWheelAngleRateOfChange (OSCTXT *pctxt, ASN1T_SteeringWheelAngleRateOfChange *pvalue);

EXTERN int asn1JsonDec_SteeringWheelAngleRateOfChange (OSCTXT *pctxt, ASN1T_SteeringWheelAngleRateOfChange *pvalue);

EXTERN int asn1PrtToStrm_SteeringWheelAngleRateOfChange (OSCTXT *pctxt, 
   const char* name, const ASN1T_SteeringWheelAngleRateOfChange* pvalue);

EXTERN ASN1T_SteeringWheelAngleRateOfChange* 
   new_ASN1T_SteeringWheelAngleRateOfChange (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DrivingWheelAngle                                         */
/*                                                            */
/**************************************************************/
/*
DrivingWheelAngle ::= INTEGER (-128..127)
    LSB units of 0.3333 degrees.  
    a range of 42.33 degrees each way

*/
typedef OSINT8 ASN1T_DrivingWheelAngle;

EXTERN int asn1PE_DrivingWheelAngle (OSCTXT* pctxt, ASN1T_DrivingWheelAngle value);

EXTERN int asn1PD_DrivingWheelAngle (OSCTXT* pctxt, ASN1T_DrivingWheelAngle* pvalue);

EXTERN int XmlEnc_DrivingWheelAngle (OSCTXT* pctxt, 
   ASN1T_DrivingWheelAngle value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DrivingWheelAngle (OSCTXT* pctxt, 
   ASN1T_DrivingWheelAngle* pvalue);

EXTERN int asn1JsonEnc_DrivingWheelAngle (OSCTXT *pctxt, ASN1T_DrivingWheelAngle *pvalue);

EXTERN int asn1JsonDec_DrivingWheelAngle (OSCTXT *pctxt, ASN1T_DrivingWheelAngle *pvalue);

EXTERN int asn1PrtToStrm_DrivingWheelAngle (OSCTXT *pctxt, 
   const char* name, const ASN1T_DrivingWheelAngle* pvalue);

EXTERN ASN1T_DrivingWheelAngle* new_ASN1T_DrivingWheelAngle (ASN1CType& ccobj)
   ;

/**************************************************************/
/*                                                            */
/*  VehicleStatus_steering                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
struct EXTERN ASN1T_VehicleStatus_steering {
   struct {
      unsigned confidencePresent : 1;
      unsigned ratePresent : 1;
      unsigned wheelsPresent : 1;
   } m;
   OSINT8 angle;
   ASN1T_SteeringWheelAngleConfidence confidence;
   ASN1T_SteeringWheelAngleRateOfChange rate;
   ASN1T_DrivingWheelAngle wheels;
   ASN1T_VehicleStatus_steering ();
} ;

EXTERN int asn1PE_VehicleStatus_steering (OSCTXT* pctxt, ASN1T_VehicleStatus_steering* pvalue);

EXTERN int asn1PD_VehicleStatus_steering (OSCTXT* pctxt, ASN1T_VehicleStatus_steering* pvalue);

EXTERN int XmlEnc_VehicleStatus_steering (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_steering* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatus_steering (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_steering* pvalue);

EXTERN int asn1JsonEnc_VehicleStatus_steering (OSCTXT *pctxt, ASN1T_VehicleStatus_steering *pvalue);

EXTERN int asn1JsonDec_VehicleStatus_steering (OSCTXT *pctxt, ASN1T_VehicleStatus_steering *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_steering (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatus_steering* pvalue);

EXTERN ASN1T_VehicleStatus_steering* 
   new_ASN1T_VehicleStatus_steering (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleStatus_steering (ASN1T_VehicleStatus_steering* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  YawRateConfidence                                         */
/*                                                            */
/**************************************************************/
/*
YawRateConfidence ::= ENUMERATED { unavailable(0), degSec-100-00(1), degSec-010-00(2), degSec-005-00(3), degSec-001-00(4), degSec-000-10(5), degSec-000-05(6), degSec-000-01(7) }
    Encoded as a 3 bit value

*/
struct EXTERN YawRateConfidence {
   enum Root {
      unavailable = 0,
      degSec_100_00 = 1,
      degSec_010_00 = 2,
      degSec_005_00 = 3,
      degSec_001_00 = 4,
      degSec_000_10 = 5,
      degSec_000_05 = 6,
      degSec_000_01 = 7
   } ;
} ;

typedef OSUINT32 ASN1T_YawRateConfidence;

EXTERN int asn1PE_YawRateConfidence (OSCTXT* pctxt, ASN1T_YawRateConfidence value);

EXTERN int asn1PD_YawRateConfidence (OSCTXT* pctxt, ASN1T_YawRateConfidence* pvalue);

EXTERN int XmlEnc_YawRateConfidence (OSCTXT* pctxt, 
   ASN1T_YawRateConfidence value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_YawRateConfidence (OSCTXT* pctxt, 
   ASN1T_YawRateConfidence* pvalue);

EXTERN int asn1JsonEnc_YawRateConfidence (OSCTXT *pctxt, ASN1T_YawRateConfidence *pvalue);

EXTERN int asn1JsonDec_YawRateConfidence (OSCTXT *pctxt, ASN1T_YawRateConfidence *pvalue);

EXTERN int asn1PrtToStrm_YawRateConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_YawRateConfidence* pvalue);

EXTERN ASN1T_YawRateConfidence* new_ASN1T_YawRateConfidence (ASN1CType& ccobj)
   ;

EXTERN extern const OSEnumItem ASN1T_YawRateConfidence_ENUMTAB[];
#define ASN1T_YawRateConfidence_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_YawRateConfidence_ToString (OSINT32 value);

EXTERN int ASN1T_YawRateConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_YawRateConfidence* pvalue);

EXTERN int ASN1T_YawRateConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_YawRateConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  AccelerationConfidence                                    */
/*                                                            */
/**************************************************************/
/*
AccelerationConfidence ::= ENUMERATED { unavailable(0), accl-100-00(1), accl-010-00(2), accl-005-00(3), accl-001-00(4), accl-000-10(5), accl-000-05(6), accl-000-01(7) }
      Encoded as a 3 bit value  

*/
struct EXTERN AccelerationConfidence {
   enum Root {
      unavailable = 0,
      accl_100_00 = 1,
      accl_010_00 = 2,
      accl_005_00 = 3,
      accl_001_00 = 4,
      accl_000_10 = 5,
      accl_000_05 = 6,
      accl_000_01 = 7
   } ;
} ;

typedef OSUINT32 ASN1T_AccelerationConfidence;

EXTERN int asn1PE_AccelerationConfidence (OSCTXT* pctxt, ASN1T_AccelerationConfidence value);

EXTERN int asn1PD_AccelerationConfidence (OSCTXT* pctxt, ASN1T_AccelerationConfidence* pvalue);

EXTERN int XmlEnc_AccelerationConfidence (OSCTXT* pctxt, 
   ASN1T_AccelerationConfidence value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AccelerationConfidence (OSCTXT* pctxt, 
   ASN1T_AccelerationConfidence* pvalue);

EXTERN int asn1JsonEnc_AccelerationConfidence (OSCTXT *pctxt, ASN1T_AccelerationConfidence *pvalue);

EXTERN int asn1JsonDec_AccelerationConfidence (OSCTXT *pctxt, ASN1T_AccelerationConfidence *pvalue);

EXTERN int asn1PrtToStrm_AccelerationConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_AccelerationConfidence* pvalue);

EXTERN ASN1T_AccelerationConfidence* 
   new_ASN1T_AccelerationConfidence (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_AccelerationConfidence_ENUMTAB[];
#define ASN1T_AccelerationConfidence_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_AccelerationConfidence_ToString (OSINT32 value);

EXTERN int ASN1T_AccelerationConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_AccelerationConfidence* pvalue);

EXTERN int ASN1T_AccelerationConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_AccelerationConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  AccelSteerYawRateConfidence                               */
/*                                                            */
/**************************************************************/
/*
AccelSteerYawRateConfidence ::= SEQUENCE {
   yawRate [0] YawRateConfidence,
   acceleration [1] AccelerationConfidence,
   steeringWheelAngle [2] SteeringWheelAngleConfidence
}
*/
struct EXTERN ASN1T_AccelSteerYawRateConfidence {
   ASN1T_YawRateConfidence yawRate;
   ASN1T_AccelerationConfidence acceleration;
   ASN1T_SteeringWheelAngleConfidence steeringWheelAngle;
} ;

EXTERN int asn1PE_AccelSteerYawRateConfidence (OSCTXT* pctxt, ASN1T_AccelSteerYawRateConfidence* pvalue);

EXTERN int asn1PD_AccelSteerYawRateConfidence (OSCTXT* pctxt, ASN1T_AccelSteerYawRateConfidence* pvalue);

EXTERN int XmlEnc_AccelSteerYawRateConfidence (OSCTXT* pctxt, 
   ASN1T_AccelSteerYawRateConfidence* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AccelSteerYawRateConfidence (OSCTXT* pctxt, 
   ASN1T_AccelSteerYawRateConfidence* pvalue);

EXTERN int asn1JsonEnc_AccelSteerYawRateConfidence (OSCTXT *pctxt, ASN1T_AccelSteerYawRateConfidence *pvalue);

EXTERN int asn1JsonDec_AccelSteerYawRateConfidence (OSCTXT *pctxt, ASN1T_AccelSteerYawRateConfidence *pvalue);

EXTERN int asn1PrtToStrm_AccelSteerYawRateConfidence (OSCTXT *pctxt, 
   const char* name, const ASN1T_AccelSteerYawRateConfidence* pvalue);

EXTERN ASN1T_AccelSteerYawRateConfidence* 
   new_ASN1T_AccelSteerYawRateConfidence (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  ConfidenceSet                                             */
/*                                                            */
/**************************************************************/
/*
ConfidenceSet ::= SEQUENCE {
   accelConfidence [0] AccelSteerYawRateConfidence OPTIONAL,
   speedConfidence [1] SpeedandHeadingandThrottleConfidence OPTIONAL,
   timeConfidence [2] TimeConfidence OPTIONAL,
   posConfidence [3] PositionConfidenceSet OPTIONAL,
   steerConfidence [4] SteeringWheelAngleConfidence OPTIONAL,
   headingConfidence [5] HeadingConfidence OPTIONAL,
   throttleConfidence [6] ThrottleConfidence OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_ConfidenceSet {
   struct {
      unsigned accelConfidencePresent : 1;
      unsigned speedConfidencePresent : 1;
      unsigned timeConfidencePresent : 1;
      unsigned posConfidencePresent : 1;
      unsigned steerConfidencePresent : 1;
      unsigned headingConfidencePresent : 1;
      unsigned throttleConfidencePresent : 1;
   } m;
   ASN1T_AccelSteerYawRateConfidence accelConfidence;
   struct ASN1T_SpeedandHeadingandThrottleConfidence *speedConfidence;
   OSUINT32 timeConfidence;
   struct ASN1T_PositionConfidenceSet *posConfidence;
   ASN1T_SteeringWheelAngleConfidence steerConfidence;
   OSUINT32 headingConfidence;
   OSUINT32 throttleConfidence;
   ASN1TSeqExt extElem1;
   ASN1T_ConfidenceSet ();
} ;

EXTERN int asn1PE_ConfidenceSet (OSCTXT* pctxt, ASN1T_ConfidenceSet* pvalue);

EXTERN int asn1PD_ConfidenceSet (OSCTXT* pctxt, ASN1T_ConfidenceSet* pvalue);

EXTERN int XmlEnc_ConfidenceSet (OSCTXT* pctxt, ASN1T_ConfidenceSet* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ConfidenceSet (OSCTXT* pctxt, ASN1T_ConfidenceSet* pvalue);

EXTERN int asn1JsonEnc_ConfidenceSet (OSCTXT *pctxt, ASN1T_ConfidenceSet *pvalue);

EXTERN int asn1JsonDec_ConfidenceSet (OSCTXT *pctxt, ASN1T_ConfidenceSet *pvalue);

EXTERN int asn1PrtToStrm_ConfidenceSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_ConfidenceSet* pvalue);

EXTERN ASN1T_ConfidenceSet* new_ASN1T_ConfidenceSet (ASN1CType& ccobj);

EXTERN int asn1Init_ConfidenceSet (ASN1T_ConfidenceSet* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ConfidenceSet (OSCTXT *pctxt, ASN1T_ConfidenceSet* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_accelSets                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
struct EXTERN ASN1T_VehicleStatus_accelSets {
   struct {
      unsigned accel4wayPresent : 1;
      unsigned vertAccelThresPresent : 1;
      unsigned yawRateConPresent : 1;
      unsigned hozAccelConPresent : 1;
      unsigned confidenceSetPresent : 1;
   } m;
   struct ASN1T_AccelerationSet4Way *accel4way;
   struct ASN1T_VerticalAccelerationThreshold *vertAccelThres;
   ASN1T_YawRateConfidence yawRateCon;
   ASN1T_AccelerationConfidence hozAccelCon;
   ASN1T_ConfidenceSet confidenceSet;
   ASN1T_VehicleStatus_accelSets ();
} ;

EXTERN int asn1PE_VehicleStatus_accelSets (OSCTXT* pctxt, ASN1T_VehicleStatus_accelSets* pvalue);

EXTERN int asn1PD_VehicleStatus_accelSets (OSCTXT* pctxt, ASN1T_VehicleStatus_accelSets* pvalue);

EXTERN int XmlEnc_VehicleStatus_accelSets (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_accelSets* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatus_accelSets (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_accelSets* pvalue);

EXTERN int asn1JsonEnc_VehicleStatus_accelSets (OSCTXT *pctxt, ASN1T_VehicleStatus_accelSets *pvalue);

EXTERN int asn1JsonDec_VehicleStatus_accelSets (OSCTXT *pctxt, ASN1T_VehicleStatus_accelSets *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_accelSets (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatus_accelSets* pvalue);

EXTERN ASN1T_VehicleStatus_accelSets* 
   new_ASN1T_VehicleStatus_accelSets (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleStatus_accelSets (ASN1T_VehicleStatus_accelSets* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleStatus_accelSets (OSCTXT *pctxt, 
   ASN1T_VehicleStatus_accelSets* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_object                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
struct EXTERN ASN1T_VehicleStatus_object {
   OSUINT16 obDist;
   OSUINT16 obDirect;
   struct ASN1T_DDateTime *dateTime;
   ASN1T_VehicleStatus_object ();
} ;

EXTERN int asn1PE_VehicleStatus_object (OSCTXT* pctxt, ASN1T_VehicleStatus_object* pvalue);

EXTERN int asn1PD_VehicleStatus_object (OSCTXT* pctxt, ASN1T_VehicleStatus_object* pvalue);

EXTERN int XmlEnc_VehicleStatus_object (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_object* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatus_object (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_object* pvalue);

EXTERN int asn1JsonEnc_VehicleStatus_object (OSCTXT *pctxt, ASN1T_VehicleStatus_object *pvalue);

EXTERN int asn1JsonDec_VehicleStatus_object (OSCTXT *pctxt, ASN1T_VehicleStatus_object *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_object (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatus_object* pvalue);

EXTERN ASN1T_VehicleStatus_object* 
   new_ASN1T_VehicleStatus_object (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleStatus_object (ASN1T_VehicleStatus_object* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  ThrottlePosition                                          */
/*                                                            */
/**************************************************************/
/*
ThrottlePosition ::= INTEGER (0..200)
                                       LSB units are 0.5 percent

*/
typedef OSUINT8 ASN1T_ThrottlePosition;

EXTERN int asn1PE_ThrottlePosition (OSCTXT* pctxt, ASN1T_ThrottlePosition value);

EXTERN int asn1PD_ThrottlePosition (OSCTXT* pctxt, ASN1T_ThrottlePosition* pvalue);

EXTERN int XmlEnc_ThrottlePosition (OSCTXT* pctxt, 
   ASN1T_ThrottlePosition value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ThrottlePosition (OSCTXT* pctxt, 
   ASN1T_ThrottlePosition* pvalue);

EXTERN int asn1JsonEnc_ThrottlePosition (OSCTXT *pctxt, ASN1T_ThrottlePosition *pvalue);

EXTERN int asn1JsonDec_ThrottlePosition (OSCTXT *pctxt, ASN1T_ThrottlePosition *pvalue);

EXTERN int asn1PrtToStrm_ThrottlePosition (OSCTXT *pctxt, 
   const char* name, const ASN1T_ThrottlePosition* pvalue);

EXTERN ASN1T_ThrottlePosition* new_ASN1T_ThrottlePosition (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_vehicleData                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
struct EXTERN ASN1T_VehicleStatus_vehicleData {
   OSUINT8 height;
   struct ASN1T_BumperHeights *bumpers;
   OSUINT8 mass;
   OSUINT16 trailerWeight;
   OSUINT32 type;
   ASN1T_VehicleStatus_vehicleData ();
} ;

EXTERN int asn1PE_VehicleStatus_vehicleData (OSCTXT* pctxt, ASN1T_VehicleStatus_vehicleData* pvalue);

EXTERN int asn1PD_VehicleStatus_vehicleData (OSCTXT* pctxt, ASN1T_VehicleStatus_vehicleData* pvalue);

EXTERN int XmlEnc_VehicleStatus_vehicleData (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_vehicleData* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatus_vehicleData (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_vehicleData* pvalue);

EXTERN int asn1JsonEnc_VehicleStatus_vehicleData (OSCTXT *pctxt, ASN1T_VehicleStatus_vehicleData *pvalue);

EXTERN int asn1JsonDec_VehicleStatus_vehicleData (OSCTXT *pctxt, ASN1T_VehicleStatus_vehicleData *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_vehicleData (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatus_vehicleData* pvalue);

EXTERN ASN1T_VehicleStatus_vehicleData* 
   new_ASN1T_VehicleStatus_vehicleData (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleStatus_vehicleData (
   ASN1T_VehicleStatus_vehicleData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  TireLocation                                              */
/*                                                            */
/**************************************************************/
/*
TireLocation ::= INTEGER (0..255)
*/
typedef OSUINT8 ASN1T_TireLocation;

EXTERN int asn1PE_TireLocation (OSCTXT* pctxt, ASN1T_TireLocation value);

EXTERN int asn1PD_TireLocation (OSCTXT* pctxt, ASN1T_TireLocation* pvalue);

EXTERN int XmlEnc_TireLocation (OSCTXT* pctxt, ASN1T_TireLocation value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TireLocation (OSCTXT* pctxt, ASN1T_TireLocation* pvalue);

EXTERN int asn1JsonEnc_TireLocation (OSCTXT *pctxt, ASN1T_TireLocation *pvalue);

EXTERN int asn1JsonDec_TireLocation (OSCTXT *pctxt, ASN1T_TireLocation *pvalue);

EXTERN int asn1PrtToStrm_TireLocation (OSCTXT *pctxt, 
   const char* name, const ASN1T_TireLocation* pvalue);

EXTERN ASN1T_TireLocation* new_ASN1T_TireLocation (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TirePressure                                              */
/*                                                            */
/**************************************************************/
/*
TirePressure ::= INTEGER (0..250)
*/
typedef OSUINT8 ASN1T_TirePressure;

EXTERN int asn1PE_TirePressure (OSCTXT* pctxt, ASN1T_TirePressure value);

EXTERN int asn1PD_TirePressure (OSCTXT* pctxt, ASN1T_TirePressure* pvalue);

EXTERN int XmlEnc_TirePressure (OSCTXT* pctxt, ASN1T_TirePressure value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TirePressure (OSCTXT* pctxt, ASN1T_TirePressure* pvalue);

EXTERN int asn1JsonEnc_TirePressure (OSCTXT *pctxt, ASN1T_TirePressure *pvalue);

EXTERN int asn1JsonDec_TirePressure (OSCTXT *pctxt, ASN1T_TirePressure *pvalue);

EXTERN int asn1PrtToStrm_TirePressure (OSCTXT *pctxt, 
   const char* name, const ASN1T_TirePressure* pvalue);

EXTERN ASN1T_TirePressure* new_ASN1T_TirePressure (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TireTemp                                                  */
/*                                                            */
/**************************************************************/
/*
TireTemp ::= INTEGER (-8736..55519)
*/
typedef OSINT32 ASN1T_TireTemp;

EXTERN int asn1PE_TireTemp (OSCTXT* pctxt, ASN1T_TireTemp value);

EXTERN int asn1PD_TireTemp (OSCTXT* pctxt, ASN1T_TireTemp* pvalue);

EXTERN int XmlEnc_TireTemp (OSCTXT* pctxt, ASN1T_TireTemp value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TireTemp (OSCTXT* pctxt, ASN1T_TireTemp* pvalue);

EXTERN int asn1JsonEnc_TireTemp (OSCTXT *pctxt, ASN1T_TireTemp *pvalue);

EXTERN int asn1JsonDec_TireTemp (OSCTXT *pctxt, ASN1T_TireTemp *pvalue);

EXTERN int asn1PrtToStrm_TireTemp (OSCTXT *pctxt, 
   const char* name, const ASN1T_TireTemp* pvalue);

EXTERN ASN1T_TireTemp* new_ASN1T_TireTemp (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  WheelSensorStatus                                         */
/*                                                            */
/**************************************************************/
/*
WheelSensorStatus ::= ENUMERATED { off(0), on(1), notDefined(2), notSupported(3) }
*/
struct EXTERN WheelSensorStatus {
   enum Root {
      off = 0,
      on = 1,
      notDefined = 2,
      notSupported = 3
   } ;
} ;

typedef OSUINT32 ASN1T_WheelSensorStatus;

EXTERN int asn1PE_WheelSensorStatus (OSCTXT* pctxt, ASN1T_WheelSensorStatus value);

EXTERN int asn1PD_WheelSensorStatus (OSCTXT* pctxt, ASN1T_WheelSensorStatus* pvalue);

EXTERN int XmlEnc_WheelSensorStatus (OSCTXT* pctxt, 
   ASN1T_WheelSensorStatus value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WheelSensorStatus (OSCTXT* pctxt, 
   ASN1T_WheelSensorStatus* pvalue);

EXTERN int asn1JsonEnc_WheelSensorStatus (OSCTXT *pctxt, ASN1T_WheelSensorStatus *pvalue);

EXTERN int asn1JsonDec_WheelSensorStatus (OSCTXT *pctxt, ASN1T_WheelSensorStatus *pvalue);

EXTERN int asn1PrtToStrm_WheelSensorStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_WheelSensorStatus* pvalue);

EXTERN ASN1T_WheelSensorStatus* new_ASN1T_WheelSensorStatus (ASN1CType& ccobj)
   ;

EXTERN extern const OSEnumItem ASN1T_WheelSensorStatus_ENUMTAB[];
#define ASN1T_WheelSensorStatus_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_WheelSensorStatus_ToString (OSINT32 value);

EXTERN int ASN1T_WheelSensorStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_WheelSensorStatus* pvalue);

EXTERN int ASN1T_WheelSensorStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_WheelSensorStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  WheelEndElectFault                                        */
/*                                                            */
/**************************************************************/
/*
WheelEndElectFault ::= ENUMERATED { isOk(0), isNotDefined(1), isError(2), isNotSupported(3) }
*/
struct EXTERN WheelEndElectFault {
   enum Root {
      isOk = 0,
      isNotDefined = 1,
      isError = 2,
      isNotSupported = 3
   } ;
} ;

typedef OSUINT32 ASN1T_WheelEndElectFault;

EXTERN int asn1PE_WheelEndElectFault (OSCTXT* pctxt, ASN1T_WheelEndElectFault value);

EXTERN int asn1PD_WheelEndElectFault (OSCTXT* pctxt, ASN1T_WheelEndElectFault* pvalue);

EXTERN int XmlEnc_WheelEndElectFault (OSCTXT* pctxt, 
   ASN1T_WheelEndElectFault value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_WheelEndElectFault (OSCTXT* pctxt, 
   ASN1T_WheelEndElectFault* pvalue);

EXTERN int asn1JsonEnc_WheelEndElectFault (OSCTXT *pctxt, ASN1T_WheelEndElectFault *pvalue);

EXTERN int asn1JsonDec_WheelEndElectFault (OSCTXT *pctxt, ASN1T_WheelEndElectFault *pvalue);

EXTERN int asn1PrtToStrm_WheelEndElectFault (OSCTXT *pctxt, 
   const char* name, const ASN1T_WheelEndElectFault* pvalue);

EXTERN ASN1T_WheelEndElectFault* 
   new_ASN1T_WheelEndElectFault (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_WheelEndElectFault_ENUMTAB[];
#define ASN1T_WheelEndElectFault_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* ASN1T_WheelEndElectFault_ToString (OSINT32 value);

EXTERN int ASN1T_WheelEndElectFault_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_WheelEndElectFault* pvalue);

EXTERN int ASN1T_WheelEndElectFault_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ASN1T_WheelEndElectFault* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  TireLeakageRate                                           */
/*                                                            */
/**************************************************************/
/*
TireLeakageRate ::= INTEGER (0..64255)
*/
typedef OSUINT16 ASN1T_TireLeakageRate;

EXTERN int asn1PE_TireLeakageRate (OSCTXT* pctxt, ASN1T_TireLeakageRate value);

EXTERN int asn1PD_TireLeakageRate (OSCTXT* pctxt, ASN1T_TireLeakageRate* pvalue);

EXTERN int XmlEnc_TireLeakageRate (OSCTXT* pctxt, ASN1T_TireLeakageRate value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TireLeakageRate (OSCTXT* pctxt, ASN1T_TireLeakageRate* pvalue
   );

EXTERN int asn1JsonEnc_TireLeakageRate (OSCTXT *pctxt, ASN1T_TireLeakageRate *pvalue);

EXTERN int asn1JsonDec_TireLeakageRate (OSCTXT *pctxt, ASN1T_TireLeakageRate *pvalue);

EXTERN int asn1PrtToStrm_TireLeakageRate (OSCTXT *pctxt, 
   const char* name, const ASN1T_TireLeakageRate* pvalue);

EXTERN ASN1T_TireLeakageRate* new_ASN1T_TireLeakageRate (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  TirePressureThresholdDetection                            */
/*                                                            */
/**************************************************************/
/*
TirePressureThresholdDetection ::= ENUMERATED { noData(0), overPressure(1), noWarningPressure(2), underPressure(3), extremeUnderPressure(4), undefined(5), errorIndicator(6), notAvailable(7) }
       Encoded as a 3 bit value

*/
struct EXTERN TirePressureThresholdDetection {
   enum Root {
      noData = 0,
      overPressure = 1,
      noWarningPressure = 2,
      underPressure = 3,
      extremeUnderPressure = 4,
      undefined = 5,
      errorIndicator = 6,
      notAvailable = 7
   } ;
} ;

typedef OSUINT32 ASN1T_TirePressureThresholdDetection;

EXTERN int asn1PE_TirePressureThresholdDetection (OSCTXT* pctxt, ASN1T_TirePressureThresholdDetection value);

EXTERN int asn1PD_TirePressureThresholdDetection (OSCTXT* pctxt, ASN1T_TirePressureThresholdDetection* pvalue);

EXTERN int XmlEnc_TirePressureThresholdDetection (OSCTXT* pctxt, 
   ASN1T_TirePressureThresholdDetection value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TirePressureThresholdDetection (OSCTXT* pctxt, 
   ASN1T_TirePressureThresholdDetection* pvalue);

EXTERN int asn1JsonEnc_TirePressureThresholdDetection (OSCTXT *pctxt, ASN1T_TirePressureThresholdDetection *pvalue);

EXTERN int asn1JsonDec_TirePressureThresholdDetection (OSCTXT *pctxt, ASN1T_TirePressureThresholdDetection *pvalue);

EXTERN int asn1PrtToStrm_TirePressureThresholdDetection (OSCTXT *pctxt, 
   const char* name, const ASN1T_TirePressureThresholdDetection* pvalue);

EXTERN ASN1T_TirePressureThresholdDetection* 
   new_ASN1T_TirePressureThresholdDetection (ASN1CType& ccobj);

EXTERN extern const OSEnumItem ASN1T_TirePressureThresholdDetection_ENUMTAB[];
#define ASN1T_TirePressureThresholdDetection_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* ASN1T_TirePressureThresholdDetection_ToString (OSINT32 value);

EXTERN int ASN1T_TirePressureThresholdDetection_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ASN1T_TirePressureThresholdDetection* pvalue);

EXTERN int ASN1T_TirePressureThresholdDetection_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      ASN1T_TirePressureThresholdDetection* pvalue);

/**************************************************************/
/*                                                            */
/*  TireData                                                  */
/*                                                            */
/**************************************************************/
/*
TireData ::= SEQUENCE {
   location [0] TireLocation OPTIONAL,
   pressure [1] TirePressure OPTIONAL,
   temp [2] TireTemp OPTIONAL,
   wheelSensorStatus [3] WheelSensorStatus OPTIONAL,
   wheelEndElectFault [4] WheelEndElectFault OPTIONAL,
   leakageRate [5] TireLeakageRate OPTIONAL,
   detection [6] TirePressureThresholdDetection OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_TireData {
   struct {
      unsigned locationPresent : 1;
      unsigned pressurePresent : 1;
      unsigned tempPresent : 1;
      unsigned wheelSensorStatusPresent : 1;
      unsigned wheelEndElectFaultPresent : 1;
      unsigned leakageRatePresent : 1;
      unsigned detectionPresent : 1;
   } m;
   ASN1T_TireLocation location;
   ASN1T_TirePressure pressure;
   ASN1T_TireTemp temp;
   ASN1T_WheelSensorStatus wheelSensorStatus;
   ASN1T_WheelEndElectFault wheelEndElectFault;
   ASN1T_TireLeakageRate leakageRate;
   ASN1T_TirePressureThresholdDetection detection;
   ASN1TSeqExt extElem1;
   ASN1T_TireData ();
} ;

EXTERN int asn1PE_TireData (OSCTXT* pctxt, ASN1T_TireData* pvalue);

EXTERN int asn1PD_TireData (OSCTXT* pctxt, ASN1T_TireData* pvalue);

EXTERN int XmlEnc_TireData (OSCTXT* pctxt, ASN1T_TireData* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TireData (OSCTXT* pctxt, ASN1T_TireData* pvalue);

EXTERN int asn1JsonEnc_TireData (OSCTXT *pctxt, ASN1T_TireData *pvalue);

EXTERN int asn1JsonDec_TireData (OSCTXT *pctxt, ASN1T_TireData *pvalue);

EXTERN int asn1PrtToStrm_TireData (OSCTXT *pctxt, 
   const char* name, const ASN1T_TireData* pvalue);

EXTERN ASN1T_TireData* new_ASN1T_TireData (ASN1CType& ccobj);

EXTERN int asn1Init_TireData (ASN1T_TireData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TireData (OSCTXT *pctxt, ASN1T_TireData* pvalue);

/**************************************************************/
/*                                                            */
/*  TireDataList                                              */
/*                                                            */
/**************************************************************/
/*
TireDataList ::= SEQUENCE (SIZE (1..16)) OF TireData
*/
/* List of ASN1T_TireData */
typedef ASN1TSeqOfList ASN1T_TireDataList;

class EXTERN ASN1C_TireDataList :
public ASN1CSeqOfList
{
protected:
   ASN1T_TireDataList& msgData;
public:
   /**
    * Control class: ASN1C_TireDataList
    * Data class:    ASN1T_TireDataList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_TireDataList (ASN1T_TireDataList& data);

   /**
    * Control class: ASN1C_TireDataList<br/>
    * Data class: ASN1T_TireDataList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_TireDataList (OSRTMessageBufferIF& msgBuf, ASN1T_TireDataList& data);

   /**
    * Control class: ASN1C_TireDataList<br/>
    * Data class: ASN1T_TireDataList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_TireDataList (ASN1CType& ccobj, ASN1T_TireDataList& data);

   virtual ~ASN1C_TireDataList () {}

   /**
    * Data class: ASN1T_TireData<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_TireData* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_TireData.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_TireData* NewElement ();

   /**
    * Data class: ASN1T_TireData.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_TireData* AppendNewElement ();

private:
   ASN1C_TireDataList& operator= (const ASN1C_TireDataList&) {return *this;}
} ;

EXTERN int asn1PE_TireDataList (OSCTXT* pctxt, ASN1T_TireDataList* pvalue);

EXTERN int asn1PD_TireDataList (OSCTXT* pctxt, ASN1T_TireDataList* pvalue);

EXTERN int XmlEnc_TireDataList (OSCTXT* pctxt, ASN1T_TireDataList* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TireDataList (OSCTXT* pctxt, ASN1T_TireDataList* pvalue);

EXTERN int asn1JsonEnc_TireDataList (OSCTXT *pctxt, ASN1T_TireDataList *pvalue);

EXTERN int asn1JsonDec_TireDataList (OSCTXT *pctxt, ASN1T_TireDataList *pvalue);

EXTERN int asn1PrtToStrm_TireDataList (OSCTXT *pctxt, 
   const char* name, const ASN1T_TireDataList* pvalue);

EXTERN int asn1Init_TireDataList (ASN1T_TireDataList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_TireDataList (OSCTXT *pctxt, ASN1T_TireDataList* pvalue);

/**************************************************************/
/*                                                            */
/*  AxleLocation                                              */
/*                                                            */
/**************************************************************/
/*
AxleLocation ::= INTEGER (0..255)
*/
typedef OSUINT8 ASN1T_AxleLocation;

EXTERN int asn1PE_AxleLocation (OSCTXT* pctxt, ASN1T_AxleLocation value);

EXTERN int asn1PD_AxleLocation (OSCTXT* pctxt, ASN1T_AxleLocation* pvalue);

EXTERN int XmlEnc_AxleLocation (OSCTXT* pctxt, ASN1T_AxleLocation value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AxleLocation (OSCTXT* pctxt, ASN1T_AxleLocation* pvalue);

EXTERN int asn1JsonEnc_AxleLocation (OSCTXT *pctxt, ASN1T_AxleLocation *pvalue);

EXTERN int asn1JsonDec_AxleLocation (OSCTXT *pctxt, ASN1T_AxleLocation *pvalue);

EXTERN int asn1PrtToStrm_AxleLocation (OSCTXT *pctxt, 
   const char* name, const ASN1T_AxleLocation* pvalue);

EXTERN ASN1T_AxleLocation* new_ASN1T_AxleLocation (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  AxleWeight                                                */
/*                                                            */
/**************************************************************/
/*
AxleWeight ::= INTEGER (0..64255)
*/
typedef OSUINT16 ASN1T_AxleWeight;

EXTERN int asn1PE_AxleWeight (OSCTXT* pctxt, ASN1T_AxleWeight value);

EXTERN int asn1PD_AxleWeight (OSCTXT* pctxt, ASN1T_AxleWeight* pvalue);

EXTERN int XmlEnc_AxleWeight (OSCTXT* pctxt, ASN1T_AxleWeight value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AxleWeight (OSCTXT* pctxt, ASN1T_AxleWeight* pvalue);

EXTERN int asn1JsonEnc_AxleWeight (OSCTXT *pctxt, ASN1T_AxleWeight *pvalue);

EXTERN int asn1JsonDec_AxleWeight (OSCTXT *pctxt, ASN1T_AxleWeight *pvalue);

EXTERN int asn1PrtToStrm_AxleWeight (OSCTXT *pctxt, 
   const char* name, const ASN1T_AxleWeight* pvalue);

EXTERN ASN1T_AxleWeight* new_ASN1T_AxleWeight (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  AxleWeightSet                                             */
/*                                                            */
/**************************************************************/
/*
AxleWeightSet ::= SEQUENCE {
   location [0] AxleLocation OPTIONAL,
   weight [1] AxleWeight OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_AxleWeightSet {
   struct {
      unsigned locationPresent : 1;
      unsigned weightPresent : 1;
   } m;
   ASN1T_AxleLocation location;
   ASN1T_AxleWeight weight;
   ASN1TSeqExt extElem1;
   ASN1T_AxleWeightSet ();
} ;

EXTERN int asn1PE_AxleWeightSet (OSCTXT* pctxt, ASN1T_AxleWeightSet* pvalue);

EXTERN int asn1PD_AxleWeightSet (OSCTXT* pctxt, ASN1T_AxleWeightSet* pvalue);

EXTERN int XmlEnc_AxleWeightSet (OSCTXT* pctxt, ASN1T_AxleWeightSet* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AxleWeightSet (OSCTXT* pctxt, ASN1T_AxleWeightSet* pvalue);

EXTERN int asn1JsonEnc_AxleWeightSet (OSCTXT *pctxt, ASN1T_AxleWeightSet *pvalue);

EXTERN int asn1JsonDec_AxleWeightSet (OSCTXT *pctxt, ASN1T_AxleWeightSet *pvalue);

EXTERN int asn1PrtToStrm_AxleWeightSet (OSCTXT *pctxt, 
   const char* name, const ASN1T_AxleWeightSet* pvalue);

EXTERN ASN1T_AxleWeightSet* new_ASN1T_AxleWeightSet (ASN1CType& ccobj);

EXTERN int asn1Init_AxleWeightSet (ASN1T_AxleWeightSet* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_AxleWeightSet (OSCTXT *pctxt, ASN1T_AxleWeightSet* pvalue);

/**************************************************************/
/*                                                            */
/*  AxleWeightList                                            */
/*                                                            */
/**************************************************************/
/*
AxleWeightList ::= SEQUENCE (SIZE (1..16)) OF AxleWeightSet
*/
/* List of ASN1T_AxleWeightSet */
typedef ASN1TSeqOfList ASN1T_AxleWeightList;

class EXTERN ASN1C_AxleWeightList :
public ASN1CSeqOfList
{
protected:
   ASN1T_AxleWeightList& msgData;
public:
   /**
    * Control class: ASN1C_AxleWeightList
    * Data class:    ASN1T_AxleWeightList
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_AxleWeightList (ASN1T_AxleWeightList& data);

   /**
    * Control class: ASN1C_AxleWeightList<br/>
    * Data class: ASN1T_AxleWeightList<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_AxleWeightList (OSRTMessageBufferIF& msgBuf
      , ASN1T_AxleWeightList& data);

   /**
    * Control class: ASN1C_AxleWeightList<br/>
    * Data class: ASN1T_AxleWeightList<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_AxleWeightList (ASN1CType& ccobj, ASN1T_AxleWeightList& data);

   virtual ~ASN1C_AxleWeightList () {}

   /**
    * Data class: ASN1T_AxleWeightSet<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_AxleWeightSet* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_AxleWeightSet.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_AxleWeightSet* NewElement ();

   /**
    * Data class: ASN1T_AxleWeightSet.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_AxleWeightSet* AppendNewElement ();

private:
   ASN1C_AxleWeightList& operator= (const ASN1C_AxleWeightList&) {return *this;}
} ;

EXTERN int asn1PE_AxleWeightList (OSCTXT* pctxt, ASN1T_AxleWeightList* pvalue);

EXTERN int asn1PD_AxleWeightList (OSCTXT* pctxt, ASN1T_AxleWeightList* pvalue);

EXTERN int XmlEnc_AxleWeightList (OSCTXT* pctxt, ASN1T_AxleWeightList* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AxleWeightList (OSCTXT* pctxt, ASN1T_AxleWeightList* pvalue)
   ;

EXTERN int asn1JsonEnc_AxleWeightList (OSCTXT *pctxt, ASN1T_AxleWeightList *pvalue);

EXTERN int asn1JsonDec_AxleWeightList (OSCTXT *pctxt, ASN1T_AxleWeightList *pvalue);

EXTERN int asn1PrtToStrm_AxleWeightList (OSCTXT *pctxt, 
   const char* name, const ASN1T_AxleWeightList* pvalue);

EXTERN int asn1Init_AxleWeightList (ASN1T_AxleWeightList* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_AxleWeightList (OSCTXT *pctxt, ASN1T_AxleWeightList* pvalue);

/**************************************************************/
/*                                                            */
/*  CargoWeight                                               */
/*                                                            */
/**************************************************************/
/*
CargoWeight ::= INTEGER (0..64255)
*/
typedef OSUINT16 ASN1T_CargoWeight;

EXTERN int asn1PE_CargoWeight (OSCTXT* pctxt, ASN1T_CargoWeight value);

EXTERN int asn1PD_CargoWeight (OSCTXT* pctxt, ASN1T_CargoWeight* pvalue);

EXTERN int XmlEnc_CargoWeight (OSCTXT* pctxt, ASN1T_CargoWeight value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_CargoWeight (OSCTXT* pctxt, ASN1T_CargoWeight* pvalue);

EXTERN int asn1JsonEnc_CargoWeight (OSCTXT *pctxt, ASN1T_CargoWeight *pvalue);

EXTERN int asn1JsonDec_CargoWeight (OSCTXT *pctxt, ASN1T_CargoWeight *pvalue);

EXTERN int asn1PrtToStrm_CargoWeight (OSCTXT *pctxt, 
   const char* name, const ASN1T_CargoWeight* pvalue);

EXTERN ASN1T_CargoWeight* new_ASN1T_CargoWeight (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SteeringAxleTemperature                                   */
/*                                                            */
/**************************************************************/
/*
SteeringAxleTemperature ::= INTEGER (-40..210)
*/
typedef OSINT16 ASN1T_SteeringAxleTemperature;

EXTERN int asn1PE_SteeringAxleTemperature (OSCTXT* pctxt, ASN1T_SteeringAxleTemperature value);

EXTERN int asn1PD_SteeringAxleTemperature (OSCTXT* pctxt, ASN1T_SteeringAxleTemperature* pvalue);

EXTERN int XmlEnc_SteeringAxleTemperature (OSCTXT* pctxt, 
   ASN1T_SteeringAxleTemperature value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SteeringAxleTemperature (OSCTXT* pctxt, 
   ASN1T_SteeringAxleTemperature* pvalue);

EXTERN int asn1JsonEnc_SteeringAxleTemperature (OSCTXT *pctxt, ASN1T_SteeringAxleTemperature *pvalue);

EXTERN int asn1JsonDec_SteeringAxleTemperature (OSCTXT *pctxt, ASN1T_SteeringAxleTemperature *pvalue);

EXTERN int asn1PrtToStrm_SteeringAxleTemperature (OSCTXT *pctxt, 
   const char* name, const ASN1T_SteeringAxleTemperature* pvalue);

EXTERN ASN1T_SteeringAxleTemperature* 
   new_ASN1T_SteeringAxleTemperature (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DriveAxleLocation                                         */
/*                                                            */
/**************************************************************/
/*
DriveAxleLocation ::= INTEGER (0..255)
*/
typedef OSUINT8 ASN1T_DriveAxleLocation;

EXTERN int asn1PE_DriveAxleLocation (OSCTXT* pctxt, ASN1T_DriveAxleLocation value);

EXTERN int asn1PD_DriveAxleLocation (OSCTXT* pctxt, ASN1T_DriveAxleLocation* pvalue);

EXTERN int XmlEnc_DriveAxleLocation (OSCTXT* pctxt, 
   ASN1T_DriveAxleLocation value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DriveAxleLocation (OSCTXT* pctxt, 
   ASN1T_DriveAxleLocation* pvalue);

EXTERN int asn1JsonEnc_DriveAxleLocation (OSCTXT *pctxt, ASN1T_DriveAxleLocation *pvalue);

EXTERN int asn1JsonDec_DriveAxleLocation (OSCTXT *pctxt, ASN1T_DriveAxleLocation *pvalue);

EXTERN int asn1PrtToStrm_DriveAxleLocation (OSCTXT *pctxt, 
   const char* name, const ASN1T_DriveAxleLocation* pvalue);

EXTERN ASN1T_DriveAxleLocation* new_ASN1T_DriveAxleLocation (ASN1CType& ccobj)
   ;

/**************************************************************/
/*                                                            */
/*  DriveAxleLiftAirPressure                                  */
/*                                                            */
/**************************************************************/
/*
DriveAxleLiftAirPressure ::= INTEGER (0..1000)
*/
typedef OSUINT16 ASN1T_DriveAxleLiftAirPressure;

EXTERN int asn1PE_DriveAxleLiftAirPressure (OSCTXT* pctxt, ASN1T_DriveAxleLiftAirPressure value);

EXTERN int asn1PD_DriveAxleLiftAirPressure (OSCTXT* pctxt, ASN1T_DriveAxleLiftAirPressure* pvalue);

EXTERN int XmlEnc_DriveAxleLiftAirPressure (OSCTXT* pctxt, 
   ASN1T_DriveAxleLiftAirPressure value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DriveAxleLiftAirPressure (OSCTXT* pctxt, 
   ASN1T_DriveAxleLiftAirPressure* pvalue);

EXTERN int asn1JsonEnc_DriveAxleLiftAirPressure (OSCTXT *pctxt, ASN1T_DriveAxleLiftAirPressure *pvalue);

EXTERN int asn1JsonDec_DriveAxleLiftAirPressure (OSCTXT *pctxt, ASN1T_DriveAxleLiftAirPressure *pvalue);

EXTERN int asn1PrtToStrm_DriveAxleLiftAirPressure (OSCTXT *pctxt, 
   const char* name, const ASN1T_DriveAxleLiftAirPressure* pvalue);

EXTERN ASN1T_DriveAxleLiftAirPressure* 
   new_ASN1T_DriveAxleLiftAirPressure (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DriveAxleTemperature                                      */
/*                                                            */
/**************************************************************/
/*
DriveAxleTemperature ::= INTEGER (-40..210)
*/
typedef OSINT16 ASN1T_DriveAxleTemperature;

EXTERN int asn1PE_DriveAxleTemperature (OSCTXT* pctxt, ASN1T_DriveAxleTemperature value);

EXTERN int asn1PD_DriveAxleTemperature (OSCTXT* pctxt, ASN1T_DriveAxleTemperature* pvalue);

EXTERN int XmlEnc_DriveAxleTemperature (OSCTXT* pctxt, 
   ASN1T_DriveAxleTemperature value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DriveAxleTemperature (OSCTXT* pctxt, 
   ASN1T_DriveAxleTemperature* pvalue);

EXTERN int asn1JsonEnc_DriveAxleTemperature (OSCTXT *pctxt, ASN1T_DriveAxleTemperature *pvalue);

EXTERN int asn1JsonDec_DriveAxleTemperature (OSCTXT *pctxt, ASN1T_DriveAxleTemperature *pvalue);

EXTERN int asn1PrtToStrm_DriveAxleTemperature (OSCTXT *pctxt, 
   const char* name, const ASN1T_DriveAxleTemperature* pvalue);

EXTERN ASN1T_DriveAxleTemperature* 
   new_ASN1T_DriveAxleTemperature (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  DriveAxleLubePressure                                     */
/*                                                            */
/**************************************************************/
/*
DriveAxleLubePressure ::= INTEGER (0..250)
*/
typedef OSUINT8 ASN1T_DriveAxleLubePressure;

EXTERN int asn1PE_DriveAxleLubePressure (OSCTXT* pctxt, ASN1T_DriveAxleLubePressure value);

EXTERN int asn1PD_DriveAxleLubePressure (OSCTXT* pctxt, ASN1T_DriveAxleLubePressure* pvalue);

EXTERN int XmlEnc_DriveAxleLubePressure (OSCTXT* pctxt, 
   ASN1T_DriveAxleLubePressure value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_DriveAxleLubePressure (OSCTXT* pctxt, 
   ASN1T_DriveAxleLubePressure* pvalue);

EXTERN int asn1JsonEnc_DriveAxleLubePressure (OSCTXT *pctxt, ASN1T_DriveAxleLubePressure *pvalue);

EXTERN int asn1JsonDec_DriveAxleLubePressure (OSCTXT *pctxt, ASN1T_DriveAxleLubePressure *pvalue);

EXTERN int asn1PrtToStrm_DriveAxleLubePressure (OSCTXT *pctxt, 
   const char* name, const ASN1T_DriveAxleLubePressure* pvalue);

EXTERN ASN1T_DriveAxleLubePressure* 
   new_ASN1T_DriveAxleLubePressure (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  SteeringAxleLubePressure                                  */
/*                                                            */
/**************************************************************/
/*
SteeringAxleLubePressure ::= INTEGER (0..250)
*/
typedef OSUINT8 ASN1T_SteeringAxleLubePressure;

EXTERN int asn1PE_SteeringAxleLubePressure (OSCTXT* pctxt, ASN1T_SteeringAxleLubePressure value);

EXTERN int asn1PD_SteeringAxleLubePressure (OSCTXT* pctxt, ASN1T_SteeringAxleLubePressure* pvalue);

EXTERN int XmlEnc_SteeringAxleLubePressure (OSCTXT* pctxt, 
   ASN1T_SteeringAxleLubePressure value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_SteeringAxleLubePressure (OSCTXT* pctxt, 
   ASN1T_SteeringAxleLubePressure* pvalue);

EXTERN int asn1JsonEnc_SteeringAxleLubePressure (OSCTXT *pctxt, ASN1T_SteeringAxleLubePressure *pvalue);

EXTERN int asn1JsonDec_SteeringAxleLubePressure (OSCTXT *pctxt, ASN1T_SteeringAxleLubePressure *pvalue);

EXTERN int asn1PrtToStrm_SteeringAxleLubePressure (OSCTXT *pctxt, 
   const char* name, const ASN1T_SteeringAxleLubePressure* pvalue);

EXTERN ASN1T_SteeringAxleLubePressure* 
   new_ASN1T_SteeringAxleLubePressure (ASN1CType& ccobj);

/**************************************************************/
/*                                                            */
/*  J1939data                                                 */
/*                                                            */
/**************************************************************/
/*
J1939data ::= SEQUENCE {
   -- Tire conditions by tire
   tires [0] TireDataList OPTIONAL,
   -- Vehicle Weights by axle
   axles [1] AxleWeightList OPTIONAL,
   trailerWeight [2] TrailerWeight OPTIONAL,
   cargoWeight [3] CargoWeight OPTIONAL,
   steeringAxleTemperature [4] SteeringAxleTemperature OPTIONAL,
   driveAxleLocation [5] DriveAxleLocation OPTIONAL,
   driveAxleLiftAirPressure [6] DriveAxleLiftAirPressure OPTIONAL,
   driveAxleTemperature [7] DriveAxleTemperature OPTIONAL,
   driveAxleLubePressure [8] DriveAxleLubePressure OPTIONAL,
   steeringAxleLubePressure [9] SteeringAxleLubePressure OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_J1939data {
   struct {
      unsigned tiresPresent : 1;
      unsigned axlesPresent : 1;
      unsigned trailerWeightPresent : 1;
      unsigned cargoWeightPresent : 1;
      unsigned steeringAxleTemperaturePresent : 1;
      unsigned driveAxleLocationPresent : 1;
      unsigned driveAxleLiftAirPressurePresent : 1;
      unsigned driveAxleTemperaturePresent : 1;
      unsigned driveAxleLubePressurePresent : 1;
      unsigned steeringAxleLubePressurePresent : 1;
   } m;
   ASN1T_TireDataList tires;
   ASN1T_AxleWeightList axles;
   OSUINT16 trailerWeight;
   ASN1T_CargoWeight cargoWeight;
   ASN1T_SteeringAxleTemperature steeringAxleTemperature;
   ASN1T_DriveAxleLocation driveAxleLocation;
   ASN1T_DriveAxleLiftAirPressure driveAxleLiftAirPressure;
   ASN1T_DriveAxleTemperature driveAxleTemperature;
   ASN1T_DriveAxleLubePressure driveAxleLubePressure;
   ASN1T_SteeringAxleLubePressure steeringAxleLubePressure;
   ASN1TSeqExt extElem1;
   ASN1T_J1939data ();
} ;

EXTERN int asn1PE_J1939data (OSCTXT* pctxt, ASN1T_J1939data* pvalue);

EXTERN int asn1PD_J1939data (OSCTXT* pctxt, ASN1T_J1939data* pvalue);

EXTERN int XmlEnc_J1939data (OSCTXT* pctxt, ASN1T_J1939data* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_J1939data (OSCTXT* pctxt, ASN1T_J1939data* pvalue);

EXTERN int asn1JsonEnc_J1939data (OSCTXT *pctxt, ASN1T_J1939data *pvalue);

EXTERN int asn1JsonDec_J1939data (OSCTXT *pctxt, ASN1T_J1939data *pvalue);

EXTERN int asn1PrtToStrm_J1939data (OSCTXT *pctxt, 
   const char* name, const ASN1T_J1939data* pvalue);

EXTERN ASN1T_J1939data* new_ASN1T_J1939data (ASN1CType& ccobj);

EXTERN int asn1Init_J1939data (ASN1T_J1939data* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_J1939data (OSCTXT *pctxt, ASN1T_J1939data* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_weatherReport                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
struct EXTERN ASN1T_VehicleStatus_weatherReport {
   struct {
      unsigned rainRatePresent : 1;
      unsigned precipSituationPresent : 1;
      unsigned solarRadiationPresent : 1;
      unsigned frictionPresent : 1;
   } m;
   ASN1T_EssPrecipYesNo isRaining;
   ASN1T_EssPrecipRate rainRate;
   ASN1T_EssPrecipSituation precipSituation;
   ASN1T_EssSolarRadiation solarRadiation;
   ASN1T_EssMobileFriction friction;
   ASN1T_VehicleStatus_weatherReport ();
} ;

EXTERN int asn1PE_VehicleStatus_weatherReport (OSCTXT* pctxt, ASN1T_VehicleStatus_weatherReport* pvalue);

EXTERN int asn1PD_VehicleStatus_weatherReport (OSCTXT* pctxt, ASN1T_VehicleStatus_weatherReport* pvalue);

EXTERN int XmlEnc_VehicleStatus_weatherReport (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_weatherReport* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatus_weatherReport (OSCTXT* pctxt, 
   ASN1T_VehicleStatus_weatherReport* pvalue);

EXTERN int asn1JsonEnc_VehicleStatus_weatherReport (OSCTXT *pctxt, ASN1T_VehicleStatus_weatherReport *pvalue);

EXTERN int asn1JsonDec_VehicleStatus_weatherReport (OSCTXT *pctxt, ASN1T_VehicleStatus_weatherReport *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_weatherReport (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatus_weatherReport* pvalue);

EXTERN ASN1T_VehicleStatus_weatherReport* 
   new_ASN1T_VehicleStatus_weatherReport (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleStatus_weatherReport (
   ASN1T_VehicleStatus_weatherReport* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  VehicleStatus                                             */
/*                                                            */
/**************************************************************/
/*
VehicleStatus ::= SEQUENCE {
   lights [0] ExteriorLights OPTIONAL, -- Exterior Lights
   lightBar [1] LightbarInUse OPTIONAL, -- PS Lights
   wipers [2] WiperSet OPTIONAL, -- Wipers
   brakeStatus [3] BrakeSystemStatus OPTIONAL,
                                                            -- Braking Data
   brakePressure [4] BrakeAppliedPressure OPTIONAL, -- Braking Pressure
   roadFriction [5] CoefficientOfFriction OPTIONAL, -- Roadway Friction 
   sunData [6] SunSensor OPTIONAL, -- Sun Sensor        
   rainData [7] RainSensor OPTIONAL, -- Rain Sensor        
   airTemp [8] AmbientAirTemperature OPTIONAL, -- Air Temperature    
   airPres [9] AmbientAirPressure OPTIONAL, -- Air Pressure
   steering [10] SEQUENCE {
      angle [0] SteeringWheelAngle,
      confidence [1] SteeringWheelAngleConfidence OPTIONAL,
      rate [2] SteeringWheelAngleRateOfChange OPTIONAL,
      wheels [3] DrivingWheelAngle OPTIONAL
   } OPTIONAL, -- steering data
   accelSets [11] SEQUENCE {
      accel4way [0] AccelerationSet4Way OPTIONAL,
      vertAccelThres [1] VerticalAccelerationThreshold OPTIONAL,
                                                      -- Wheel which has 
                                                      -- exceeded acceleration point
      yawRateCon [2] YawRateConfidence OPTIONAL,
                                                      -- Yaw Rate Confidence
      hozAccelCon [3] AccelerationConfidence OPTIONAL,
                                                      -- Acceleration Confidence 
      confidenceSet [4] ConfidenceSet OPTIONAL
                                                      -- general ConfidenceSet 
   } OPTIONAL,
   object [12] SEQUENCE {
      obDist [0] ObstacleDistance, -- Obstacle Distance        
      obDirect [1] Angle, -- Obstacle Direction        
      dateTime [2] DDateTime -- time detected
   } OPTIONAL, -- detected Obstacle data
   fullPos [13] FullPositionVector OPTIONAL, -- complete set of time and
                                                    -- position, speed, heading
   throttlePos [14] ThrottlePosition OPTIONAL,
   speedHeadC [15] SpeedandHeadingandThrottleConfidence OPTIONAL,
   speedC [16] SpeedConfidence OPTIONAL,
   vehicleData [17] SEQUENCE {
      height [0] VehicleHeight,
      bumpers [1] BumperHeights,
      mass [2] VehicleMass,
      trailerWeight [3] TrailerWeight,
      type [4] VehicleType
   } OPTIONAL, -- vehicle data
   vehicleIdent [18] VehicleIdent OPTIONAL, -- common vehicle identity data
   j1939data [19] J1939data OPTIONAL, -- Various SAE J1938 data items
   weatherReport [20] SEQUENCE {
      isRaining [0] EssPrecipYesNo,
      rainRate [1] EssPrecipRate OPTIONAL,
      precipSituation [2] EssPrecipSituation OPTIONAL,
      solarRadiation [3] EssSolarRadiation OPTIONAL,
      friction [4] EssMobileFriction OPTIONAL
   } OPTIONAL, -- local weather data
   gnssStatus [21] GNSSstatus OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_VehicleStatus {
   struct {
      unsigned lightsPresent : 1;
      unsigned lightBarPresent : 1;
      unsigned wipersPresent : 1;
      unsigned brakeStatusPresent : 1;
      unsigned brakePressurePresent : 1;
      unsigned roadFrictionPresent : 1;
      unsigned sunDataPresent : 1;
      unsigned rainDataPresent : 1;
      unsigned airTempPresent : 1;
      unsigned airPresPresent : 1;
      unsigned steeringPresent : 1;
      unsigned accelSetsPresent : 1;
      unsigned objectPresent : 1;
      unsigned fullPosPresent : 1;
      unsigned throttlePosPresent : 1;
      unsigned speedHeadCPresent : 1;
      unsigned speedCPresent : 1;
      unsigned vehicleDataPresent : 1;
      unsigned vehicleIdentPresent : 1;
      unsigned j1939dataPresent : 1;
      unsigned weatherReportPresent : 1;
      unsigned gnssStatusPresent : 1;
   } m;
   struct ASN1T_ExteriorLights *lights;
   OSUINT32 lightBar;
   struct ASN1T_WiperSet *wipers;
   struct ASN1T_BrakeSystemStatus *brakeStatus;
   ASN1T_BrakeAppliedPressure brakePressure;
   OSUINT8 roadFriction;
   ASN1T_SunSensor sunData;
   ASN1T_RainSensor rainData;
   OSUINT8 airTemp;
   OSUINT8 airPres;
   ASN1T_VehicleStatus_steering steering;
   ASN1T_VehicleStatus_accelSets accelSets;
   ASN1T_VehicleStatus_object object;
   struct ASN1T_FullPositionVector *fullPos;
   ASN1T_ThrottlePosition throttlePos;
   struct ASN1T_SpeedandHeadingandThrottleConfidence *speedHeadC;
   OSUINT32 speedC;
   ASN1T_VehicleStatus_vehicleData vehicleData;
   ASN1T_VehicleIdent vehicleIdent;
   ASN1T_J1939data j1939data;
   ASN1T_VehicleStatus_weatherReport weatherReport;
   struct ASN1T_GNSSstatus *gnssStatus;
   ASN1TSeqExt extElem1;
   ASN1T_VehicleStatus ();
} ;

EXTERN int asn1PE_VehicleStatus (OSCTXT* pctxt, ASN1T_VehicleStatus* pvalue);

EXTERN int asn1PD_VehicleStatus (OSCTXT* pctxt, ASN1T_VehicleStatus* pvalue);

EXTERN int XmlEnc_VehicleStatus (OSCTXT* pctxt, ASN1T_VehicleStatus* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_VehicleStatus (OSCTXT* pctxt, ASN1T_VehicleStatus* pvalue);

EXTERN int asn1JsonEnc_VehicleStatus (OSCTXT *pctxt, ASN1T_VehicleStatus *pvalue);

EXTERN int asn1JsonDec_VehicleStatus (OSCTXT *pctxt, ASN1T_VehicleStatus *pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus (OSCTXT *pctxt, 
   const char* name, const ASN1T_VehicleStatus* pvalue);

EXTERN ASN1T_VehicleStatus* new_ASN1T_VehicleStatus (ASN1CType& ccobj);

EXTERN int asn1Init_VehicleStatus (ASN1T_VehicleStatus* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_VehicleStatus (OSCTXT *pctxt, ASN1T_VehicleStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  Snapshot                                                  */
/*                                                            */
/**************************************************************/
/*
Snapshot ::= SEQUENCE {
   thePosition [0] FullPositionVector,
                -- data of the position and speed, 
   safetyExt [1] VehicleSafetyExtensions OPTIONAL,
   dataSet [2] VehicleStatus OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_Snapshot {
   struct {
      unsigned safetyExtPresent : 1;
      unsigned dataSetPresent : 1;
   } m;
   struct ASN1T_FullPositionVector *thePosition;
   struct ASN1T_VehicleSafetyExtensions *safetyExt;
   ASN1T_VehicleStatus dataSet;
   ASN1TSeqExt extElem1;
   ASN1T_Snapshot ();
} ;

EXTERN int asn1PE_Snapshot (OSCTXT* pctxt, ASN1T_Snapshot* pvalue);

EXTERN int asn1PD_Snapshot (OSCTXT* pctxt, ASN1T_Snapshot* pvalue);

EXTERN int XmlEnc_Snapshot (OSCTXT* pctxt, ASN1T_Snapshot* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Snapshot (OSCTXT* pctxt, ASN1T_Snapshot* pvalue);

EXTERN int asn1JsonEnc_Snapshot (OSCTXT *pctxt, ASN1T_Snapshot *pvalue);

EXTERN int asn1JsonDec_Snapshot (OSCTXT *pctxt, ASN1T_Snapshot *pvalue);

EXTERN int asn1PrtToStrm_Snapshot (OSCTXT *pctxt, 
   const char* name, const ASN1T_Snapshot* pvalue);

EXTERN ASN1T_Snapshot* new_ASN1T_Snapshot (ASN1CType& ccobj);

EXTERN int asn1Init_Snapshot (ASN1T_Snapshot* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_Snapshot (OSCTXT *pctxt, ASN1T_Snapshot* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData_snapshots                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeVehicleData'
*/
/* List of ASN1T_Snapshot */
typedef ASN1TSeqOfList ASN1T_ProbeVehicleData_snapshots;

class EXTERN ASN1C_ProbeVehicleData_snapshots :
public ASN1CSeqOfList
{
protected:
   ASN1T_ProbeVehicleData_snapshots& msgData;
public:
   /**
    * Control class: ASN1C_ProbeVehicleData_snapshots
    * Data class:    ASN1T_ProbeVehicleData_snapshots
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ProbeVehicleData_snapshots (ASN1T_ProbeVehicleData_snapshots& data);

   /**
    * Control class: ASN1C_ProbeVehicleData_snapshots<br/>
    * Data class: ASN1T_ProbeVehicleData_snapshots<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ProbeVehicleData_snapshots (OSRTMessageBufferIF& msgBuf
      , ASN1T_ProbeVehicleData_snapshots& data);

   /**
    * Control class: ASN1C_ProbeVehicleData_snapshots<br/>
    * Data class: ASN1T_ProbeVehicleData_snapshots<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_ProbeVehicleData_snapshots (ASN1CType& ccobj
      , ASN1T_ProbeVehicleData_snapshots& data);

   virtual ~ASN1C_ProbeVehicleData_snapshots () {}

   /**
    * Data class: ASN1T_Snapshot<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_Snapshot* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_Snapshot.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_Snapshot* NewElement ();

   /**
    * Data class: ASN1T_Snapshot.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_Snapshot* AppendNewElement ();

private:
   ASN1C_ProbeVehicleData_snapshots& operator= (const ASN1C_ProbeVehicleData_snapshots&) {return *this;}
} ;

EXTERN int asn1PE_ProbeVehicleData_snapshots (OSCTXT* pctxt, ASN1T_ProbeVehicleData_snapshots* pvalue);

EXTERN int asn1PD_ProbeVehicleData_snapshots (OSCTXT* pctxt, ASN1T_ProbeVehicleData_snapshots* pvalue);

EXTERN int XmlEnc_ProbeVehicleData_snapshots (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData_snapshots* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeVehicleData_snapshots (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData_snapshots* pvalue);

EXTERN int asn1JsonEnc_ProbeVehicleData_snapshots (OSCTXT *pctxt, ASN1T_ProbeVehicleData_snapshots *pvalue);

EXTERN int asn1JsonDec_ProbeVehicleData_snapshots (OSCTXT *pctxt, ASN1T_ProbeVehicleData_snapshots *pvalue);

EXTERN int asn1PrtToStrm_ProbeVehicleData_snapshots (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeVehicleData_snapshots* pvalue);

EXTERN int asn1Init_ProbeVehicleData_snapshots (
   ASN1T_ProbeVehicleData_snapshots* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ProbeVehicleData_snapshots (OSCTXT *pctxt, 
   ASN1T_ProbeVehicleData_snapshots* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData_regional_element                         */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeVehicleData'
*/
struct EXTERN ASN1T_ProbeVehicleData_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_ProbeVehicleData_regional_element (OSCTXT* pctxt, ASN1T_ProbeVehicleData_regional_element* pvalue);

EXTERN int asn1PD_ProbeVehicleData_regional_element (OSCTXT* pctxt, ASN1T_ProbeVehicleData_regional_element* pvalue);

EXTERN int XmlEnc_ProbeVehicleData_regional_element (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeVehicleData_regional_element (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData_regional_element* pvalue);

EXTERN int asn1JsonEnc_ProbeVehicleData_regional_element (OSCTXT *pctxt, ASN1T_ProbeVehicleData_regional_element *pvalue);

EXTERN int asn1JsonDec_ProbeVehicleData_regional_element (OSCTXT *pctxt, ASN1T_ProbeVehicleData_regional_element *pvalue);

EXTERN int asn1PrtToStrm_ProbeVehicleData_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeVehicleData_regional_element* pvalue);

EXTERN ASN1T_ProbeVehicleData_regional_element* 
   new_ASN1T_ProbeVehicleData_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_ProbeVehicleData_regional_element (
   ASN1T_ProbeVehicleData_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ProbeVehicleData_regional_element (OSCTXT *pctxt, 
   ASN1T_ProbeVehicleData_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData_regional                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeVehicleData'
*/
/* List of ASN1T_ProbeVehicleData_regional_element */
typedef ASN1TSeqOfList ASN1T_ProbeVehicleData_regional;

class EXTERN ASN1C_ProbeVehicleData_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_ProbeVehicleData_regional& msgData;
public:
   /**
    * Control class: ASN1C_ProbeVehicleData_regional
    * Data class:    ASN1T_ProbeVehicleData_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_ProbeVehicleData_regional (ASN1T_ProbeVehicleData_regional& data);

   /**
    * Control class: ASN1C_ProbeVehicleData_regional<br/>
    * Data class: ASN1T_ProbeVehicleData_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_ProbeVehicleData_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_ProbeVehicleData_regional& data);

   /**
    * Control class: ASN1C_ProbeVehicleData_regional<br/>
    * Data class: ASN1T_ProbeVehicleData_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_ProbeVehicleData_regional (ASN1CType& ccobj
      , ASN1T_ProbeVehicleData_regional& data);

   virtual ~ASN1C_ProbeVehicleData_regional () {}

   /**
    * Data class: ASN1T_ProbeVehicleData_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_ProbeVehicleData_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_ProbeVehicleData_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_ProbeVehicleData_regional_element* NewElement ();

   /**
    * Data class: ASN1T_ProbeVehicleData_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_ProbeVehicleData_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_ProbeVehicleData_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_ProbeVehicleData_regional* pmatches);

private:
   ASN1C_ProbeVehicleData_regional& operator= (const ASN1C_ProbeVehicleData_regional&) {return *this;}
} ;

EXTERN int asn1PE_ProbeVehicleData_regional (OSCTXT* pctxt, ASN1T_ProbeVehicleData_regional* pvalue);

EXTERN int asn1PD_ProbeVehicleData_regional (OSCTXT* pctxt, ASN1T_ProbeVehicleData_regional* pvalue);

EXTERN int XmlEnc_ProbeVehicleData_regional (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeVehicleData_regional (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData_regional* pvalue);

EXTERN int asn1JsonEnc_ProbeVehicleData_regional (OSCTXT *pctxt, ASN1T_ProbeVehicleData_regional *pvalue);

EXTERN int asn1JsonDec_ProbeVehicleData_regional (OSCTXT *pctxt, ASN1T_ProbeVehicleData_regional *pvalue);

EXTERN int asn1PrtToStrm_ProbeVehicleData_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeVehicleData_regional* pvalue);

EXTERN int asn1Init_ProbeVehicleData_regional (
   ASN1T_ProbeVehicleData_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ProbeVehicleData_regional (OSCTXT *pctxt, 
   ASN1T_ProbeVehicleData_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData                                          */
/*                                                            */
/**************************************************************/
/*
ProbeVehicleData ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   segNum [1] ProbeSegmentNumber OPTIONAL,
                                         -- a short term Ident value
                                         -- not used when ident is used
   probeID [2] VehicleIdent OPTIONAL,
                                         -- identity data for selected 
                                         -- types of vehicles    
   startVector [3] FullPositionVector, -- the space and time of 
                                         -- transmission to the RSU
   vehicleType [4] VehicleClassification, -- type of vehicle, 
   snapshots [5] SEQUENCE (SIZE (1..32)) OF Snapshot,
                                         -- a seq of name-value pairs 
                                         -- along with the space and time 
                                         -- of the first measurement set
   regional [6] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-ProbeVehicleData}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-ProbeVehicleData}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_ProbeVehicleData {
   struct {
      unsigned timeStampPresent : 1;
      unsigned segNumPresent : 1;
      unsigned probeIDPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   OSUINT32 timeStamp;
   ASN1T_ProbeSegmentNumber segNum;
   ASN1T_VehicleIdent probeID;
   struct ASN1T_FullPositionVector *startVector;
   struct ASN1T_VehicleClassification *vehicleType;
   ASN1T_ProbeVehicleData_snapshots snapshots;
   ASN1T_ProbeVehicleData_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_ProbeVehicleData ();
} ;

EXTERN int asn1PE_ProbeVehicleData (OSCTXT* pctxt, ASN1T_ProbeVehicleData* pvalue);

EXTERN int asn1PD_ProbeVehicleData (OSCTXT* pctxt, ASN1T_ProbeVehicleData* pvalue);

EXTERN int XmlEnc_ProbeVehicleData (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ProbeVehicleData (OSCTXT* pctxt, 
   ASN1T_ProbeVehicleData* pvalue);

EXTERN int asn1JsonEnc_ProbeVehicleData (OSCTXT *pctxt, ASN1T_ProbeVehicleData *pvalue);

EXTERN int asn1JsonDec_ProbeVehicleData (OSCTXT *pctxt, ASN1T_ProbeVehicleData *pvalue);

EXTERN int asn1PrtToStrm_ProbeVehicleData (OSCTXT *pctxt, 
   const char* name, const ASN1T_ProbeVehicleData* pvalue);

EXTERN ASN1T_ProbeVehicleData* new_ASN1T_ProbeVehicleData (ASN1CType& ccobj);

EXTERN int asn1Init_ProbeVehicleData (ASN1T_ProbeVehicleData* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_ProbeVehicleData (OSCTXT *pctxt, ASN1T_ProbeVehicleData* pvalue);

#endif
