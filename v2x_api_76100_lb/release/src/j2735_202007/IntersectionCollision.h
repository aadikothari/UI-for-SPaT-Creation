/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).
 */
#ifndef INTERSECTIONCOLLISION_H
#define INTERSECTIONCOLLISION_H

#include <stdio.h>
#include <stdlib.h>
#include "rtpersrc/asn1PerCppTypes.h"
#include "rtsrc/asn1CppTypes.h"
#include "rtsrc/rtPrintToStream.h"
#include "rtsrc/asn1type.h"
#include "rtxmlsrc/asn1xml.h"
#include "rtxmlsrc/rtXmlCppMsgBuf.h"
#include "rtsrc/asn1type.h"
#include "rtjsonsrc/asn1json.h"
#include "rtjsonsrc/rtJsonCppMsgBuf.h"

#include "rtsrc/ASN1CSeqOfList.h"

/**
 * Header file for ASN.1 module IntersectionCollision
 */
/**************************************************************/
/*                                                            */
/*  ApproachOrLane                                            */
/*                                                            */
/**************************************************************/
/*
ApproachOrLane ::= CHOICE {
   approach [0] ApproachID,
   lane [1] LaneID
}
*/
/* Choice tag constants */

#define T_ApproachOrLane_approach       1
#define T_ApproachOrLane_lane           2

struct EXTERN ASN1T_ApproachOrLane {
   OSINT32 t;
   union {
      /* t = 1 */
      OSUINT8 approach;
      /* t = 2 */
      OSUINT8 lane;
   } u;
   ASN1T_ApproachOrLane () { t = 0; OSCRTLMEMSET (&u, 0, sizeof(u)); }
} ;

EXTERN int asn1PE_ApproachOrLane (OSCTXT* pctxt, ASN1T_ApproachOrLane* pvalue);

EXTERN int asn1PD_ApproachOrLane (OSCTXT* pctxt, ASN1T_ApproachOrLane* pvalue);

EXTERN int XmlEnc_ApproachOrLane (OSCTXT* pctxt, ASN1T_ApproachOrLane* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_ApproachOrLane (OSCTXT* pctxt, ASN1T_ApproachOrLane* pvalue)
   ;

EXTERN int asn1JsonEnc_ApproachOrLane (OSCTXT *pctxt, ASN1T_ApproachOrLane *pvalue);

EXTERN int asn1JsonDec_ApproachOrLane (OSCTXT *pctxt, ASN1T_ApproachOrLane *pvalue);

EXTERN int asn1PrtToStrm_ApproachOrLane (OSCTXT *pctxt, 
   const char* name, const ASN1T_ApproachOrLane* pvalue);

EXTERN ASN1T_ApproachOrLane* new_ASN1T_ApproachOrLane (ASN1CType& ccobj);

EXTERN int asn1Init_ApproachOrLane (ASN1T_ApproachOrLane* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

/**************************************************************/
/*                                                            */
/*  IntersectionCollision_regional_element                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionCollision'
*/
struct EXTERN ASN1T_IntersectionCollision_regional_element {
   OSUINT8 regionId;
   ASN1TOpenType regExtValue;
} ;

EXTERN int asn1PE_IntersectionCollision_regional_element (OSCTXT* pctxt, ASN1T_IntersectionCollision_regional_element* pvalue);

EXTERN int asn1PD_IntersectionCollision_regional_element (OSCTXT* pctxt, ASN1T_IntersectionCollision_regional_element* pvalue);

EXTERN int XmlEnc_IntersectionCollision_regional_element (OSCTXT* pctxt, 
   ASN1T_IntersectionCollision_regional_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionCollision_regional_element (OSCTXT* pctxt, 
   ASN1T_IntersectionCollision_regional_element* pvalue);

EXTERN int asn1JsonEnc_IntersectionCollision_regional_element (OSCTXT *pctxt, ASN1T_IntersectionCollision_regional_element *pvalue);

EXTERN int asn1JsonDec_IntersectionCollision_regional_element (OSCTXT *pctxt, ASN1T_IntersectionCollision_regional_element *pvalue);

EXTERN int asn1PrtToStrm_IntersectionCollision_regional_element (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionCollision_regional_element* pvalue);

EXTERN ASN1T_IntersectionCollision_regional_element* 
   new_ASN1T_IntersectionCollision_regional_element (ASN1CType& ccobj);

EXTERN int asn1Init_IntersectionCollision_regional_element (
   ASN1T_IntersectionCollision_regional_element* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionCollision_regional_element (OSCTXT *pctxt, 
   ASN1T_IntersectionCollision_regional_element* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionCollision_regional                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionCollision'
*/
/* List of ASN1T_IntersectionCollision_regional_element */
typedef ASN1TSeqOfList ASN1T_IntersectionCollision_regional;

class EXTERN ASN1C_IntersectionCollision_regional :
public ASN1CSeqOfList
{
protected:
   ASN1T_IntersectionCollision_regional& msgData;
public:
   /**
    * Control class: ASN1C_IntersectionCollision_regional
    * Data class:    ASN1T_IntersectionCollision_regional
    *
    * Constructs an instance of the control class given an instance of
    * the data class.
    *
    * WARNING: this creates an internal context to use for memory
    * allocations which will be deleted when the object goes out of
    * scope. This object must be used in the same method in which the
    * data class object is being used.
    *
    * @param data    A reference to an instance of the data class.
    */
   ASN1C_IntersectionCollision_regional
       (ASN1T_IntersectionCollision_regional& data);

   /**
    * Control class: ASN1C_IntersectionCollision_regional<br/>
    * Data class: ASN1T_IntersectionCollision_regional<br/>
    *
    * Constructs an instance of the control class given an instance
    * of an encode or decode buffer and an instance of
    * the data class.
    *
    * @param msgBuf Reference to an instance of an encode or
    *                  decode buffer.
    * @param data   Reference to an instance of the data class.
    */
   ASN1C_IntersectionCollision_regional (OSRTMessageBufferIF& msgBuf
      , ASN1T_IntersectionCollision_regional& data);

   /**
    * Control class: ASN1C_IntersectionCollision_regional<br/>
    * Data class: ASN1T_IntersectionCollision_regional<br/>
    *
    * Constructs an instance of the control class given an instance of
    * an \c ASN1CType control class and an instance of the
    * given data class.
    *
    * @param ccobj  Reference to a control class instance.
    * @param data   Reference to an instance of the data class. */
   ASN1C_IntersectionCollision_regional (ASN1CType& ccobj
      , ASN1T_IntersectionCollision_regional& data);

   virtual ~ASN1C_IntersectionCollision_regional () {}

   /**
    * Data class: ASN1T_IntersectionCollision_regional_element<br/>
    *
    * Appends an instance of the data class to the end of the list.
    *
    * @param  elem     Pointer to an instance of the data class.
    */
   void Append (ASN1T_IntersectionCollision_regional_element* elem);

   void freeMemory();
   /**
    * Data class: ASN1T_IntersectionCollision_regional_element.<br/>
    *
    * Creates a new instance of the data class.
    *
    * @return    Pointer to the new instance of the data class.
    */
   ASN1T_IntersectionCollision_regional_element* NewElement ();

   /**
    * Data class: ASN1T_IntersectionCollision_regional_element.<br/>
    *
    * Creates a new instance of the data class and appends it
    * to the end of the list.
    *
    * @return    Pointer to a new instance of the data class.
    */
   ASN1T_IntersectionCollision_regional_element* AppendNewElement ();

   /* Get IE using regionId key value */
   /* index element type is forward referenced */
   ASN1T_IntersectionCollision_regional_element* GetIE (OSUINT8 regionId);

   /* Get all matching IEs using regionId key value */
   int GetAllIEs (OSUINT8 regionId, 
      ASN1T_IntersectionCollision_regional* pmatches);

private:
   ASN1C_IntersectionCollision_regional& operator= (const ASN1C_IntersectionCollision_regional&) {return *this;}
} ;

EXTERN int asn1PE_IntersectionCollision_regional (OSCTXT* pctxt, ASN1T_IntersectionCollision_regional* pvalue);

EXTERN int asn1PD_IntersectionCollision_regional (OSCTXT* pctxt, ASN1T_IntersectionCollision_regional* pvalue);

EXTERN int XmlEnc_IntersectionCollision_regional (OSCTXT* pctxt, 
   ASN1T_IntersectionCollision_regional* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionCollision_regional (OSCTXT* pctxt, 
   ASN1T_IntersectionCollision_regional* pvalue);

EXTERN int asn1JsonEnc_IntersectionCollision_regional (OSCTXT *pctxt, ASN1T_IntersectionCollision_regional *pvalue);

EXTERN int asn1JsonDec_IntersectionCollision_regional (OSCTXT *pctxt, ASN1T_IntersectionCollision_regional *pvalue);

EXTERN int asn1PrtToStrm_IntersectionCollision_regional (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionCollision_regional* pvalue);

EXTERN int asn1Init_IntersectionCollision_regional (
   ASN1T_IntersectionCollision_regional* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionCollision_regional (OSCTXT *pctxt, 
   ASN1T_IntersectionCollision_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionCollision                                     */
/*                                                            */
/**************************************************************/
/*
IntersectionCollision ::= SEQUENCE {
   msgCnt [0] MsgCount,
   id [1] TemporaryID,
   timeStamp [2] MinuteOfTheYear OPTIONAL,
   partOne [3] BSMcoreData OPTIONAL,
   path [4] PathHistory OPTIONAL,
                  -- a set of recent path points forming a history
   pathPrediction [5] PathPrediction OPTIONAL,
                  -- the predicted path
   intersectionID [6] IntersectionReferenceID,
                  -- the applicable Intersection
   laneNumber [7] EXPLICIT ApproachOrLane,
                  -- the best estimate of the applicable Lane or Approach
   eventFlag [8] VehicleEventFlags,
                  -- used to convey vehicle Panic Events,  
                  -- Set to indicate "Intersection Violation" 
   regional [9] SEQUENCE (SIZE (1..4)) OF SEQUENCE {
      regionId [0] REG-EXT-ID-AND-TYPE.&id ({Reg-IntersectionCollision}),
      regExtValue [1] EXPLICIT REG-EXT-ID-AND-TYPE.&Type ({Reg-IntersectionCollision}{@regionId})
   } OPTIONAL,
   ...
}
*/
struct EXTERN ASN1T_IntersectionCollision {
   struct {
      unsigned timeStampPresent : 1;
      unsigned partOnePresent : 1;
      unsigned pathPresent : 1;
      unsigned pathPredictionPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   OSUINT8 msgCnt;
   struct ASN1T_TemporaryID *id;
   OSUINT32 timeStamp;
   struct ASN1T_BSMcoreData *partOne;
   struct ASN1T_PathHistory *path;
   struct ASN1T_PathPrediction *pathPrediction;
   struct ASN1T_IntersectionReferenceID *intersectionID;
   ASN1T_ApproachOrLane laneNumber;
   struct ASN1T_VehicleEventFlags *eventFlag;
   ASN1T_IntersectionCollision_regional regional;
   ASN1TSeqExt extElem1;
   ASN1T_IntersectionCollision ();
} ;

EXTERN int asn1PE_IntersectionCollision (OSCTXT* pctxt, ASN1T_IntersectionCollision* pvalue);

EXTERN int asn1PD_IntersectionCollision (OSCTXT* pctxt, ASN1T_IntersectionCollision* pvalue);

EXTERN int XmlEnc_IntersectionCollision (OSCTXT* pctxt, 
   ASN1T_IntersectionCollision* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_IntersectionCollision (OSCTXT* pctxt, 
   ASN1T_IntersectionCollision* pvalue);

EXTERN int asn1JsonEnc_IntersectionCollision (OSCTXT *pctxt, ASN1T_IntersectionCollision *pvalue);

EXTERN int asn1JsonDec_IntersectionCollision (OSCTXT *pctxt, ASN1T_IntersectionCollision *pvalue);

EXTERN int asn1PrtToStrm_IntersectionCollision (OSCTXT *pctxt, 
   const char* name, const ASN1T_IntersectionCollision* pvalue);

EXTERN ASN1T_IntersectionCollision* 
   new_ASN1T_IntersectionCollision (ASN1CType& ccobj);

EXTERN int asn1Init_IntersectionCollision (ASN1T_IntersectionCollision* pvalue, 
   OSBOOL free = FALSE, OSCTXT *pctxt = 0);

EXTERN void asn1Free_IntersectionCollision (OSCTXT *pctxt, 
   ASN1T_IntersectionCollision* pvalue);

#endif
